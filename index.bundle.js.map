{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"THREE\"","webpack:///../@here/harp-utils/index.web.ts","webpack:///../@here/harp-datasource-protocol/index.ts","webpack:///../@here/harp-geoutils/index.ts","webpack:///../@here/harp-materials/index.ts","webpack:///../@here/harp-datasource-protocol/lib/Expr.ts","webpack:///../@here/harp-text-canvas/index.ts","webpack:///../@here/harp-geoutils/lib/coordinates/GeoCoordinates.ts","webpack:///../@here/harp-geoutils/lib/math/MathUtils.ts","webpack:///../@here/harp-materials/lib/Utils.ts","webpack:///../@here/harp-mapview/lib/Utils.ts","webpack:///../@here/harp-geoutils/lib/projection/EarthConstants.ts","webpack:///../@here/harp-geoutils/lib/math/Box3Like.ts","webpack:///../@here/harp-geoutils/lib/math/OrientedBox3Like.ts","webpack:///../@here/harp-geoutils/lib/projection/Projection.ts","webpack:///../@here/harp-mapview/index.ts","webpack:///../@here/harp-text-canvas/lib/rendering/TextStyle.ts","webpack:///../@here/harp-mapview/lib/DecodedTileHelpers.ts","webpack:///../@here/harp-mapview/lib/text/TextElement.ts","webpack:///../@here/harp-geoutils/lib/coordinates/GeoBox.ts","webpack:///../@here/harp-geoutils/lib/coordinates/GeoCoordinatesLike.ts","webpack:///../@here/harp-geoutils/lib/tiling/TilingScheme.ts","webpack:///../@here/harp-datasource-protocol/lib/ColorUtils.ts","webpack:///../@here/harp-text-canvas/lib/utils/UnicodeUtils.ts","webpack:///../@here/harp-mapview/lib/text/TextElementType.ts","webpack:///../@here/harp-mapview/lib/composing/Pass.ts","webpack:///../@here/harp-geoutils/lib/projection/MercatorProjection.ts","webpack:///../@here/harp-geoutils/lib/tiling/QuadTreeSubdivisionScheme.ts","webpack:///../@here/harp-geoutils/lib/tiling/TileKey.ts","webpack:///../@here/harp-materials/lib/MapMeshMaterialsDefs.ts","webpack:///../@here/harp-mapview/lib/MapView.ts","webpack:///../@here/harp-datasource-protocol/lib/RGBA.ts","webpack:///../@here/harp-datasource-protocol/lib/StringEncodedNumeral.ts","webpack:///../@here/harp-datasource-protocol/lib/Env.ts","webpack:///../@here/harp-datasource-protocol/lib/InterpolatedPropertyDefs.ts","webpack:///../@here/harp-datasource-protocol/lib/Theme.ts","webpack:///../@here/harp-mapview/lib/MapObjectAdapter.ts","webpack:///../@here/harp-mapview/lib/text/TextElementsRenderer.ts","webpack:///../@here/harp-mapview/lib/Tile.ts","webpack:///../@here/harp-mapview/lib/Statistics.ts","webpack:///../@here/harp-mapview/lib/AnimatedExtrusionHandler.ts","webpack:///../@here/harp-utils/lib/Logger/ILogger.ts","webpack:///../@here/harp-utils/lib/UrlUtils.ts","webpack:///../@here/harp-materials/lib/MapMeshMaterials.ts","webpack:///../@here/harp-materials/lib/ShaderChunks/LinesChunks.ts","webpack:///../@here/harp-datasource-protocol/lib/Pixels.ts","webpack:///../@here/harp-datasource-protocol/lib/Techniques.ts","webpack:///../@here/harp-mapview/lib/DataSource.ts","webpack:///../@here/harp-mapview/lib/geometry/TileGeometryCreator.ts","webpack:///../@here/harp-text-canvas/lib/rendering/GlyphData.ts","webpack:///../@here/harp-text-canvas/lib/rendering/TextGeometry.ts","webpack:///../@here/harp-text-canvas/lib/utils/TypesettingUtils.ts","webpack:///../@here/harp-mapview/lib/MapMaterialAdapter.ts","webpack:///../@here/harp-mapview/lib/MapViewPoints.ts","webpack:///../@here/harp-mapview/lib/DebugContext.ts","webpack:///../@here/harp-mapview/lib/PickHandler.ts","webpack:///../@here/harp-mapview/lib/ColorCache.ts","webpack:///../@here/harp-mapview/lib/ClipPlanesEvaluator.ts","webpack:///../@here/harp-mapview/lib/ConcurrentDecoderFacade.ts","webpack:///../@here/harp-mapview/lib/copyrights/CopyrightInfo.ts","webpack:///../@here/harp-lines/lib/HighPrecisionUtils.ts","webpack:///../@here/harp-omv-datasource/lib/OmvDecoderDefs.ts","webpack:///../@here/harp-omv-datasource/lib/OmvTile.ts","webpack:///../@here/harp-geoutils/lib/coordinates/GeoPointLike.ts","webpack:///../@here/harp-geoutils/lib/coordinates/LatLngLike.ts","webpack:///../@here/harp-geoutils/lib/projection/EquirectangularProjection.ts","webpack:///../@here/harp-geoutils/lib/projection/TransverseMercatorProjection.ts","webpack:///../@here/harp-geoutils/lib/tiling/FlatTileBoundingBoxGenerator.ts","webpack:///../@here/harp-geoutils/lib/tiling/HalfQuadTreeSubdivisionScheme.ts","webpack:///../@here/harp-geoutils/lib/tiling/SubTiles.ts","webpack:///../@here/harp-geoutils/lib/tiling/TileKeyUtils.ts","webpack:///../@here/harp-geoutils/lib/tiling/TileTreeTraverse.ts","webpack:///../@here/harp-utils/lib/Logger/ConsoleChannel.ts","webpack:///../@here/harp-utils/lib/Logger/Logger.ts","webpack:///../@here/harp-utils/lib/Logger/WorkerChannel.ts","webpack:///../@here/harp-materials/lib/CopyMaterial.ts","webpack:///../@here/harp-materials/lib/ShaderChunks/AtmosphereChunks.ts","webpack:///../@here/harp-datasource-protocol/lib/TechniqueParams.ts","webpack:///../@here/harp-datasource-protocol/lib/TechniqueDescriptor.ts","webpack:///../@here/harp-datasource-protocol/lib/PropertyValue.ts","webpack:///../@here/harp-datasource-protocol/lib/DecodedTile.ts","webpack:///../@here/harp-mapview/lib/BackgroundDataSource.ts","webpack:///../@here/harp-datasource-protocol/lib/ExprPool.ts","webpack:///../@here/harp-geometry/lib/SubdivisionModifier.ts","webpack:///../@here/harp-lrucache/index.ts","webpack:///../@here/harp-text-canvas/lib/rendering/TextMaterials.ts","webpack:///../@here/harp-text-canvas/lib/rendering/TextBufferObject.ts","webpack:///../@here/harp-text-canvas/lib/utils/MaterialUtils.ts","webpack:///../@here/harp-mapview/lib/geometry/DisplacedBufferAttribute.ts","webpack:///../@here/harp-mapview/lib/geometry/DisplacedBufferGeometry.ts","webpack:///../@here/harp-mapview/lib/ThemeHelpers.ts","webpack:///../@here/harp-mapview/lib/DepthPrePass.ts","webpack:///../@here/harp-mapview/lib/geometry/overlayOnElevation.ts","webpack:///../@here/harp-mapview/lib/text/Placement.ts","webpack:///../@here/harp-mapview/lib/poi/PoiRenderer.ts","webpack:///../@here/harp-mapview/lib/image/MipMapGenerator.ts","webpack:///../@here/harp-mapview/lib/ScreenCollisions.ts","webpack:///../node_modules/rbush/rbush.min.js","webpack:///../@here/harp-mapview/lib/text/TextStyleCache.ts","webpack:///../@here/harp-mapview/lib/geometry/LodMesh.ts","webpack:///../@here/harp-mapview/lib/CameraMovementDetector.ts","webpack:///../@here/harp-mapview/lib/composing/index.ts","webpack:///../@here/harp-mapview/lib/composing/MSAARenderPass.ts","webpack:///../@here/harp-mapview/lib/ConcurrentWorkerSet.ts","webpack:///../@here/harp-mapview/lib/workers/WorkerLoader.ts","webpack:///../@here/harp-mapview/lib/WorkerBasedDecoder.ts","webpack:///../@here/harp-mapview/lib/ElevationRangeSource.ts","webpack:///../@here/harp-mapview/lib/image/MapViewImageCache.ts","webpack:///../@here/harp-mapview/lib/image/ImageCache.ts","webpack:///../@here/harp-mapview/lib/MapViewFog.ts","webpack:///../@here/harp-mapview/lib/poi/PoiManager.ts","webpack:///../@here/harp-mapview/lib/poi/PoiTableManager.ts","webpack:///../@here/harp-mapview/lib/PolarTileDataSource.ts","webpack:///../@here/harp-mapview/lib/SkyCubemapTexture.ts","webpack:///../@here/harp-mapview/lib/ThemeLoader.ts","webpack:///../@here/harp-mapview/lib/VisibleTileSet.ts","webpack:///../@here/harp-mapview/lib/ConcurrentTilerFacade.ts","webpack:///../@here/harp-mapview/lib/WorkerBasedTiler.ts","webpack:///../@here/harp-mapview/lib/copyrights/CopyrightCoverageProvider.ts","webpack:///../@here/harp-transfer-manager/index.ts","webpack:///../@here/harp-mapview/lib/geometry/TileGeometry.ts","webpack:///../@here/harp-lines/lib/TriangulateLines.ts","webpack:///../@here/harp-lines/lib/HighPrecisionLines.ts","webpack:///../@here/harp-mapview-decoder/lib/TileLoader.ts","webpack:///../@here/harp-omv-datasource/lib/OmvRestClient.ts","webpack:///./src/index.ts","webpack:///../@here/harp-geoutils/lib/coordinates/GeoBoxExtentLike.ts","webpack:///../@here/harp-geoutils/lib/projection/IdentityProjection.ts","webpack:///../@here/harp-geoutils/lib/projection/SphereProjection.ts","webpack:///../@here/harp-geoutils/lib/tiling/QuadTree.ts","webpack:///../@here/harp-geoutils/lib/tiling/HereTilingScheme.ts","webpack:///../@here/harp-geoutils/lib/tiling/WebMercatorTilingScheme.ts","webpack:///../@here/harp-geoutils/lib/tiling/MercatorTilingScheme.ts","webpack:///../@here/harp-geoutils/lib/tiling/PolarTilingScheme.ts","webpack:///../@here/harp-geoutils/lib/math/Vector3Like.ts","webpack:///../@here/harp-geoutils/lib/math/TransformLike.ts","webpack:///../@here/harp-geoutils/lib/math/OrientedBox3.ts","webpack:///../@here/harp-materials/lib/CirclePointsMaterial.ts","webpack:///../@here/harp-utils/index-common.ts","webpack:///../@here/harp-utils/lib/GroupedPriorityList.ts","webpack:///../@here/harp-utils/lib/Logger/index.ts","webpack:///../@here/harp-utils/lib/Logger/LoggerManager.ts","webpack:///../@here/harp-utils/lib/Logger/LoggerManagerImpl.ts","webpack:///../@here/harp-utils/lib/Logger/MultiChannel.ts","webpack:///../@here/harp-utils/lib/Math2D.ts","webpack:///../@here/harp-utils/lib/MathUtils.ts","webpack:///../@here/harp-utils/lib/Mixins.ts","webpack:///../@here/harp-utils/lib/assert.ts","webpack:///../@here/harp-utils/lib/ContextLogger.ts","webpack:///../@here/harp-utils/lib/PerformanceTimer.ts","webpack:///../@here/harp-utils/lib/ObjectUtils.ts","webpack:///../@here/harp-utils/lib/OptionsUtils.ts","webpack:///../@here/harp-utils/lib/UriResolver.ts","webpack:///../@here/harp-utils/lib/Functions.ts","webpack:///../@here/harp-utils/lib/SampleBilinear.ts","webpack:///../@here/harp-utils/lib/UrlPlatformUtils.web.ts","webpack:///../@here/harp-materials/lib/DisplacementFeature.ts","webpack:///../@here/harp-materials/lib/EdgeMaterial.ts","webpack:///../@here/harp-materials/lib/ShaderChunks/ExtrusionChunks.ts","webpack:///../@here/harp-materials/lib/ShaderChunks/FadingChunks.ts","webpack:///../@here/harp-materials/lib/ShaderChunks/ShadowChunks.ts","webpack:///../@here/harp-materials/lib/GroundAtmosphereMaterial.ts","webpack:///../@here/harp-materials/lib/HighPrecisionLineMaterial.ts","webpack:///../@here/harp-materials/lib/HighPrecisionPointMaterial.ts","webpack:///../@here/harp-materials/lib/IconMaterial.ts","webpack:///../@here/harp-materials/lib/LuminosityHighPassShader.ts","webpack:///../@here/harp-materials/lib/MSAAMaterial.ts","webpack:///../@here/harp-materials/lib/SepiaShader.ts","webpack:///../@here/harp-materials/lib/SkyAtmosphereMaterial.ts","webpack:///../@here/harp-materials/lib/SolidLineMaterial.ts","webpack:///../@here/harp-materials/lib/VignetteShader.ts","webpack:///../@here/harp-datasource-protocol/lib/ExprEvaluator.ts","webpack:///../@here/harp-datasource-protocol/lib/operators/ArrayOperators.ts","webpack:///../@here/harp-datasource-protocol/lib/operators/CastOperators.ts","webpack:///../@here/harp-datasource-protocol/lib/operators/ColorOperators.ts","webpack:///../@here/harp-datasource-protocol/lib/operators/ComparisonOperators.ts","webpack:///../@here/harp-datasource-protocol/lib/operators/FeatureOperators.ts","webpack:///../@here/harp-datasource-protocol/lib/operators/FlowOperators.ts","webpack:///../@here/harp-datasource-protocol/lib/operators/MapOperators.ts","webpack:///../@here/harp-datasource-protocol/lib/operators/MathOperators.ts","webpack:///../@here/harp-datasource-protocol/lib/operators/MiscOperators.ts","webpack:///../@here/harp-datasource-protocol/lib/operators/ObjectOperators.ts","webpack:///../@here/harp-datasource-protocol/lib/operators/StringOperators.ts","webpack:///../@here/harp-datasource-protocol/lib/operators/TypeOperators.ts","webpack:///../@here/harp-datasource-protocol/lib/operators/VectorOperators.ts","webpack:///../@here/harp-datasource-protocol/lib/ExprInstantiator.ts","webpack:///../@here/harp-datasource-protocol/lib/ExprParser.ts","webpack:///../@here/harp-datasource-protocol/lib/WorkerServiceProtocol.ts","webpack:///../@here/harp-datasource-protocol/lib/WorkerTilerProtocol.ts","webpack:///../@here/harp-datasource-protocol/lib/WorkerDecoderProtocol.ts","webpack:///../@here/harp-datasource-protocol/lib/TechniqueAttr.ts","webpack:///../@here/harp-datasource-protocol/lib/ThemeVisitor.ts","webpack:///../@here/harp-geometry/lib/EdgeLengthGeometrySubdivisionModifier.ts","webpack:///../@here/harp-geometry/lib/SphericalGeometrySubdivisionModifier.ts","webpack:///../@here/harp-text-canvas/lib/rendering/FontCatalog.ts","webpack:///../@here/harp-text-canvas/lib/rendering/GlyphTextureCache.ts","webpack:///../@here/harp-lrucache/lib/LRUCache.ts","webpack:///../@here/harp-text-canvas/lib/TextCanvas.ts","webpack:///../@here/harp-text-canvas/lib/typesetting/LineTypesetter.ts","webpack:///../@here/harp-text-canvas/lib/typesetting/PathTypesetter.ts","webpack:///../@here/harp-text-canvas/lib/utils/ContextualArabicConverter.ts","webpack:///../@here/harp-mapview/lib/geometry/DisplacedMesh.ts","webpack:///../@here/harp-mapview/lib/geometry/VertexCache.ts","webpack:///../@here/harp-mapview/lib/geometry/SolidLineMesh.ts","webpack:///../@here/harp-mapview/lib/PathBlockingElement.ts","webpack:///../@here/harp-mapview/lib/poi/BoxBuffer.ts","webpack:///../@here/harp-mapview/lib/poi/PixelPicker.ts","webpack:///../@here/harp-mapview/lib/text/PlacementStats.ts","webpack:///../@here/harp-mapview/lib/text/SimplePath.ts","webpack:///../@here/harp-mapview/lib/text/TextElementsRendererOptions.ts","webpack:///../@here/harp-mapview/lib/text/TextElementStateCache.ts","webpack:///../@here/harp-mapview/lib/text/TextElementGroupState.ts","webpack:///../@here/harp-mapview/lib/text/TextElementState.ts","webpack:///../@here/harp-mapview/lib/text/LayoutState.ts","webpack:///../@here/harp-mapview/lib/text/RenderState.ts","webpack:///../@here/harp-mapview/lib/text/UpdateStats.ts","webpack:///../@here/harp-mapview/lib/text/TextElementGroup.ts","webpack:///../@here/harp-mapview/lib/text/TextElementGroupPriorityList.ts","webpack:///../@here/harp-mapview/lib/text/TileTextStyleCache.ts","webpack:///../@here/harp-mapview/lib/composing/MapRenderingManager.ts","webpack:///../@here/harp-mapview/lib/composing/LowResRenderPass.ts","webpack:///../@here/harp-mapview/lib/composing/Outline.ts","webpack:///../@here/harp-mapview/lib/composing/UnrealBloomPass.ts","webpack:///../@here/harp-mapview/lib/workers/WorkerBootstrapDefs.ts","webpack:///../@here/harp-mapview/lib/FrustumIntersection.ts","webpack:///../@here/harp-mapview/lib/MapTileCuller.ts","webpack:///../@here/harp-mapview/lib/geometry/TileGeometryManager.ts","webpack:///../@here/harp-mapview/lib/geometry/TileGeometryLoader.ts","webpack:///../@here/harp-mapview/lib/PickingRaycaster.ts","webpack:///../@here/harp-mapview/lib/poi/PoiRendererFactory.ts","webpack:///../@here/harp-datasource-protocol/index-decoder.ts","webpack:///../@here/harp-datasource-protocol/lib/StyleSetEvaluator.ts","webpack:///../@here/harp-datasource-protocol/lib/Outliner.ts","webpack:///../@here/harp-datasource-protocol/lib/ThreeBufferUtils.ts","webpack:///../@here/harp-mapview/lib/ScreenProjector.ts","webpack:///../@here/harp-mapview/lib/SkyBackground.ts","webpack:///../@here/harp-mapview/lib/SkyGradientTexture.ts","webpack:///../@here/harp-mapview/lib/text/FontCatalogLoader.ts","webpack:///../@here/harp-mapview/lib/text/MapViewState.ts","webpack:///../@here/harp-mapview/lib/text/TextCanvasFactory.ts","webpack:///../@here/harp-mapview/lib/copyrights/CopyrightElementHandler.ts","webpack:///../@here/harp-mapview/lib/copyrights/UrlCopyrightProvider.ts","webpack:///../@here/harp-transfer-manager/src/TransferManager.ts","webpack:///../@here/harp-transfer-manager/src/DeferredPromise.ts","webpack:///../@here/harp-mapview/lib/image/Image.ts","webpack:///../@here/harp-mapview/lib/MapViewAtmosphere.ts","webpack:///../@here/harp-mapview/lib/poi/Poi.ts","webpack:///../@here/harp-mapview/lib/TextureLoader.ts","webpack:///../@here/harp-mapview/lib/geometry/TileDataAccessor.ts","webpack:///../@here/harp-lines/index.ts","webpack:///../@here/harp-lines/lib/Lines.ts","webpack:///../@here/harp-lines/lib/HighPrecisionPoints.ts","webpack:///../@here/harp-omv-datasource/index.ts","webpack:///../@here/harp-omv-datasource/lib/OmvDataFilter.ts","webpack:///../@here/harp-omv-datasource/lib/OmvDataSource.ts","webpack:///../@here/harp-mapview-decoder/index.ts","webpack:///../@here/harp-mapview-decoder/lib/DataProvider.ts","webpack:///../@here/harp-mapview-decoder/lib/TileDataSource.ts","webpack:///../@here/harp-omv-datasource/lib/OmvDebugLabelsTile.ts","webpack:///../@here/harp-omv-datasource/lib/GeoJsonDataProvider.ts","webpack:///../@here/harp-examples/config.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","THREE","exprEvaluator","ExprEvaluator","exprInstantiator","ExprInstantiator","ExprDependencies","properties","Set","ComputeExprDependencies","expr","dependencies","accept","this","instance","context","add","args","forEach","childExpr","op","volatile","featureState","branches","_","branch","fallback","condition","input","defaultValue","stops","isJsonExpr","v","Array","isArray","length","ExprScope","Expr","code","ExprParser","parse","node","definitions","definitionExprCache","parseNode","undefined","lockedNames","cache","Map","env","scope","Value","ExprEvaluatorContext","m_dependencies","of","pool","ExprSerializer","serialize","m_isDynamic","exprIsDynamic","VarExpr","super","visitor","visitVarExpr","LiteralExpr","BooleanLiteralExpr","NumberLiteralExpr","StringLiteralExpr","NullLiteralExpr","ObjectLiteralExpr","Error","visitNullLiteralExpr","visitBooleanLiteralExpr","visitNumberLiteralExpr","m_promotedValue","RGBA","Pixels","visitStringLiteralExpr","visitObjectLiteralExpr","HasAttributeExpr","visitHasAttributeExpr","CallExpr","visitCallExpr","descriptor","getOperator","isDynamicOperator","some","e","isDynamic","MatchExpr","elementTy","every","visitMatchExpr","CaseExpr","visitCaseExpr","cond","StepExpr","visitStepExpr","InterpolateExpr","visitInterpolateExpr","Vector2","x","y","Vector3","z","Vector4","w","map","label","body","push","result","referenceResolverState","parseCall","slice","has","cachedEntry","definitionEntry","isLiteralDefinition","fromJSON","isBoxedDefinition","isInterpolatedPropertyDefinition","interpolatedPropertyDefinitionToJsonExpr","delete","set","resolveReference","makeCallExpr","parseGetExpr","parseHasExpr","obj","parseLiteralExpr","conditions","isValidMatchLabel","JSON","stringify","parseMatchExpr","caseFallback","parseCaseExpr","isInterpolationMode","isExpr","parseInterpolateExpr","parseStepExpr","GeoCoordinates","latitude","longitude","altitude","MathUtils","radToDeg","latLng","lat","lng","geoPoint","isGeoPointLike","fromGeoPoint","isGeoCoordinatesLike","fromDegrees","isLatLngLike","degToRad","isNaN","wrapped","sign","Math","other","normalizeAngleDeg","a","angleDistanceDeg","b","newEmptyBox3","min","Infinity","max","newVector3","copyVector3","from","to","clamp","normalizeLongitudeDeg","interpolateAnglesDeg","p0","p1","enableBlending","material","transparent","forcedBlending","blending","CustomBlending","premultipliedAlpha","blendSrc","OneFactor","blendDst","OneMinusSrcAlphaFactor","blendSrcAlpha","blendDstAlpha","SrcAlphaFactor","getShaderMaterialDefine","fallbackValue","defines","getShaderDefine","setShaderDefine","updated","DEFINE_BOOL_TRUE","currentValue","DEFINE_BOOL_FALSE","shaderContent","shaderName","insertedShaderName","addTab","tabChar","replace","NormalBlending","assert","needsUpdate","logger","LoggerManager","groundNormalPlanarProj","groundPlane","Plane","clone","groundSphere","Sphere","EarthConstants","EQUATORIAL_RADIUS","rayCaster","Raycaster","space","tangentSpace","quaternions","Quaternion","vector3","matrix4","Matrix4","transforms","xAxis","yAxis","zAxis","position","MapViewUtils","orbitFocusPoint","mapView","deltaAzimuthDeg","deltaTiltDeg","maxTiltAngleRad","MAX_TILT_RAD","target","sphericalCoordinates","extractSphericalCoordinatesFromLocation","camera","tilt","heading","azimuth","PI","lookAt","distance","targetDistance","getWorldTargetFromCamera","projection","elevation","cameraPos","copy","cameraLookAt","getWorldDirection","constant","radius","targetWorldPos","type","ProjectionType","Planar","ray","intersectPlane","intersectSphere","getCameraPositionFromTargetCoordinates","targetCoordinates","yawDeg","pitchDeg","pitchRad","cos","yawRad","projectPoint","groundDistance","sin","Spherical","normalize","projectOnPlane","setFromAxisAngle","applyQuaternion","setLength","height","cameraHeight","sqrt","wrapWorldPointsToView","points","cameraPosNormalized","point","angleTo","pointLen","getFitBoundsDistance","worldTarget","cameraRotationMatrix","extractRotation","matrixWorld","screenUpVector","applyMatrix4","screenSideVector","screenVertMidPlane","setFromCoplanarPoints","screenHorzMidPlane","halfVertFov","fov","halfHorzFov","aspect","halfVertFovTan","tan","halfHorzFovTan","cameraToTarget","sub","negate","cameraToTargetNormalized","offsetVector","cameraToPointOnRefPlane","pointOnRefPlane","checkAngle","referencePlane","maxAngle","fovFactor","viewAngle","cameraToPointLen","cameraToTargetLen","newCameraDistance","multiplyScalar","rayCastWorldCoordinates","pointOnScreenXinNDC","pointOnScreenYinNDC","pointInNDCPosition","multiplyMatrices","getInverse","projectionMatrix","pointInCameraSpace","worldPosition","panCameraAboveFlatMap","offsetX","offsetY","panCameraAroundGlobe","fromWorld","toWorld","setFromUnitVectors","inverse","makeRotationFromQuaternion","updateMatrixWorld","getCameraRotationAtTarget","transform","localTangentSpace","makeBasis","setFromRotationMatrix","multiply","extractCameraTilt","normal","surfaceNormal","cosTheta","dot","acos","targetGeoCoords","getGeoTargetFromCamera","extractTiltAngleFromLocation","warn","extractAttitude","options","setFromMatrixPosition","unprojectPoint","setFromMatrixColumn","yaw","pitch","roll","atan2","location","cross","calculateDistanceToGroundFromZoomLevel","zoomLevel","cameraPitch","tileSize","EQUATORIAL_CIRCUMFERENCE","pow","focalLength","estimateTextureSize","texture","objectSize","visitedObjects","image","uuid","imageBytes","width","heapSize","gpuSize","estimateMaterialSize","RawShaderMaterial","ShaderMaterial","rawMaterial","uniforms","uniform","Texture","MeshBasicMaterial","MapMeshBasicMaterial","meshMaterial","aoMap","specularMap","alphaMap","envMap","MapMeshStandardMaterial","standardMaterial","lightMap","emissiveMap","bumpMap","normalMap","displacementMap","roughnessMap","metalnessMap","LineBasicMaterial","LineDashedMaterial","estimateAttributeSize","attribute","attrName","generateUUID","attrBytes","bytesPerElement","array","BYTES_PER_ELEMENT","InterleavedBufferAttribute","BufferAttribute","count","itemSize","estimateGeometrySize","geometry","bufferGeometry","Geometry","vertices","faces","_bufferGeometry","BufferGeometry","attributes","index","getIsoLanguageCode","language","substring","MAX_TILT_DEG","DEG2RAD","zoomOnTargetPosition","targetNDCx","targetNDCy","maxTiltAngle","elevationProvider","getHeight","setZ","deltaTilt","newWorldTarget","getTargetAndDistance","distanceTo","cameraPosZ","level","geoLocation","heightAboveTerrain","unprojectAltitude","abs","getHeightAboveTerrain","cameraDir","fallbackTarget","wrapGeoPointsToScreen","startPosition","startIndex","fromObject","north","south","lonCenter","lonSpan","east","west","relToCenter","geoBoxToGeoPoints","box","center","getFitBoundsLookAtParams","geoTarget","worldPoints","params","startDistance","minDistance","tmpCamera","quaternion","getCameraCoordinatesFromTargetCoordinates","rotate","deltaYawDeg","deltaPitchDeg","rotateOnWorldAxis","newPitch","maxPitch","asin","rotateX","setRotation","geoCenter","dirVec","dirLen","error","divideScalar","getCameraFrustumPlanes","near","far","top","zoom","left","view","enabled","fullWidth","fullHeight","filmOffset","getFilmWidth","right","bottom","rayCastGeoCoordinates","worldCoordinates","calculateDistanceFromZoomLevel","calculateZoomLevelFromDistance","ceiling","ceil","snapToCeilingZoomLevel","log2","minZoomLevel","maxZoomLevel","calculateDepthFromClipDistance","clipDistance","perspCam","cameraRange","viewSpaceDistance","cameraToWorldDistance","calculateVerticalFovByHorizontalFov","hFov","atan","calculateHorizontalFovByVerticalFov","vFov","calculateFocalLengthByVerticalFov","calculateFovByFocalLength","calculateScreenSizeByFocalLength","worldSize","calculateWorldSizeByFocalLength","screenSize","estimateObject3dSize","parentSize","size","isObject3D","Scene","isMesh","isLine","isPoints","mesh","materials","geometries","featureData","userData","feature","getFeatureDataSize","estimateMeshSize","children","child","mapViewIsLoading","numTilesLoading","tileList","visibleTileSet","dataSourceTileList","tile","visibleTiles","tileLoader","isFinished","tileGeometryLoader","isLoading","textElementsRenderer","loading","poiTableManager","finishedLoading","allVisibleTilesLoaded","getBrowserLanguages","navigator","languages","languageList","lang","powerOfTwo","TileOffsetUtils","getKeyForTileKeyAndOffset","tileKey","offset","bitshift","shiftedOffset","offsetBits","totalOffsetsToStore","getShiftedOffset","mortonCode","extractOffsetAndMortonKeyFromKey","num","getParentKeyFromKey","calculatedKey","TileKey","fromMortonCode","parentMortonCode","MIN_ELEVATION","MAX_ELEVATION","MAX_BUILDING_HEIGHT","box3","obb","extents","unitScale","sourceProjection","worldPos","FontUnit","FontStyle","FontVariant","VerticalAlignment","HorizontalAlignment","WrappingMode","DefaultTextStyle","hAlignFromPlacement","hP","vAlignFromPlacement","vP","VerticalPlacement","HorizontalPlacement","hA","vA","DEFAULT_FONT_NAME","DEFAULT_FONT_SIZE","unit","freeze","Pixel","backgroundSize","DEFAULT_FONT_STYLE","Regular","DEFAULT_FONT_VARIANT","DEFAULT_ROTATION","DEFAULT_COLOR","Color","DEFAULT_OPACITY","DEFAULT_BACKGROUND_COLOR","DEFAULT_BACKGROUND_OPACITY","DEFAULT_TRACKING","DEFAULT_LEADING","DEFAULT_MAX_LINES","DEFAULT_LINE_WIDTH","DEFAULT_CANVAS_ROTATION","DEFAULT_LINE_ROTATION","DEFAULT_WRAPPING_MODE","Word","DEFAULT_VERTICAL_ALIGNMENT","Above","DEFAULT_HORIZONTAL_ALIGNMENT","Left","DEFAULT_PLACEMENTS","TextRenderStyle","m_params","fontName","fontSize","fontStyle","fontVariant","rotation","color","opacity","backgroundColor","backgroundOpacity","source","TextLayoutStyle","horizontalAlignment","verticalAlignment","placements","resolvePlacementAndAlignment","tracking","leading","maxLines","lineWidth","canvasRotation","lineRotation","wrappingMode","hAlignment","vAlignment","placementsOpt","h","getMaterialConstructor","technique","shadowsEnabled","isExtrudedLineTechnique","shading","SolidLineMaterial","PointsMaterial","CirclePointsMaterial","buildMetricValueEvaluator","metricUnit","endsWith","Number","parseFloat","lookup","getPropertyValue","applySecondaryColorToMaterial","materialColor","techniqueColor","evaluateColorProperty","ColorUtils","hasAlphaInHex","removeAlphaFromHex","setHex","applyBaseColorToMaterial","colorValue","g","getRgbaFromHex","tech","evaluateProperty","setRGB","disableBlending","parsed","parseStringEncodedColor","getBaseColorPropName","techDescriptor","techniqueDescriptors","attrTransparencyColor","textureReadyCallback","Constructor","settings","HighPrecisionLineMaterial","fog","removeDiffuseLight","id","isExtrudedPolygonTechnique","flatShading","depthTest","isStandardTechnique","isTerrainTechnique","TEXTURE_PROPERTY_KEYS","texturePropertyName","textureProperty","onLoad","wrapS","toWrappingMode","wrapT","magFilter","toTextureFilter","minFilter","flipY","repeatU","repeat","repeatV","onError","textureUrl","isTextureBuffer","dataTextureProperties","textureDataType","toTextureDataType","textureBuffer","buffer","Uint8Array","UnsignedByteType","ByteType","Int8Array","ShortType","Int16Array","UnsignedShortType","Uint16Array","IntType","Int32Array","UnsignedIntType","Uint32Array","FloatType","Float32Array","HalfFloatType","getTextureBuffer","DataTexture","format","toPixelFormat","textureBlob","Blob","URL","createObjectURL","TextureLoader","load","isShaderTechnique","baseColorPropName","hasBaseColor","getOwnPropertyNames","filter","propertyName","TRANSPARENCY_PROPERTY_KEYS","indexOf","prop","techniqueAttrValue","applyTechniquePropertyToMaterial","propColor","applyShaderTechniqueToMaterial","MapMaterialAdapter","baseProps","pick","outlineWidth","dashSize","gapSize","vertexColors","getMainMaterialStyledProps","itemCount","normalized","elevationEnabled","DisplacedMesh","elevationRange","minElevation","maxElevation","Mesh","SolidLineMesh","raycast","Circles","Squares","LineSegments","primitive","Line","Points","Object3D","BASE_TECHNIQUE_NON_MATERIAL_PROPS","baseColorProp","getBaseColorProp","poiInfo","poiRenderBatch","LoadingState","TextElement","text","renderParams","layoutParams","priority","xOffset","yOffset","featureId","style","fadeNear","fadeFar","tileOffset","offsetDirection","visible","distanceScale","renderOrder","elevated","renderStyle","layoutStyle","TextElementType","PoiLabel","PathLabel","mayOverlap","reserveSpace","m_poiInfo","path","LineMarker","poiRenderOrder","m_renderStyle","m_layoutStyle","min2","iconMinZoomLevel","textMinZoomLevel","max2","iconMaxZoomLevel","textMaxZoomLevel","HIGHEST_PRIORITY","MAX_SAFE_INTEGER","GeoBox","southWest","northEast","extent","latitudeSpan","longitudeSpan","minAltitude","altitudeSpan","maxAltitude","containsHelper","isFlat","isSameAltitude","isWithinAltitudeRange","subdivisionScheme","boundingBoxGenerator","FlatTileBoundingBoxGenerator","tileTreeTraverse","TileTreeTraverse","subTiles","TileKeyUtils","geoCoordinatesToTileKey","geoBox","geoRectangleToTileKeys","getGeoBox","getWorldBox","tmpColor","getHexFromRgba","floor","getHexFromRgb","getHexFromHsl","setHSL","getHex","hex","getAlphaFromHex","UnicodeUtils","Direction","whiteSpaceRanges","isWhiteSpace","codePoint","range","newLineRanges","isNewLine","nonPrintableRanges","isPrintable","rtlBlocks","neutralBidirectionalRanges","weakBidirectionalRanges","getDirection","block","weakRange","Weak","neutralRange","Neutral","find","element","RTL","LTR","rtlMirroredCodePoints","isRtlMirrored","Pass","renderToScreen","renderer","scene","writeBuffer","readBuffer","delta","setRenderTarget","render","shader","textureID","UniformsUtils","vertexShader","fragmentShader","fsQuad","FullScreenQuad","m_camera","OrthographicCamera","PlaneBufferGeometry","m_mesh","MercatorProjection","Projection","val","MercatorConstants","MAXIMUM_LATITUDE","log","latitudeProject","latitudeClamp","exp","worldPoint","cosh","Box3","geoPointLike","latitudeClampProject","latitudeInRadians","fromRadians","unprojectLatitude","worldCenter","worldNorth","worldSouth","worldYCenter","isBox3Like","isOrientedBox3Like","EPSILON","worldBox","minGeo","maxGeo","fromCoordinates","_worldPoint","webMercatorProjection","mercatorProjection","reprojectPoint","sy","projectBox","maxY","quadTreeSubdivisionScheme","row","column","quadkey","mask","parseInt","charAt","fromRowColumnLevel","quadKey64","quadKey","m_mortonCode","quadkey64","m_hereTile","coordX","coordY","totalWidth","totalHeight","rowsAtLevel","columnsAtLevel","changedLevelBy","toString","col","qnr","subQuad","fromQuadKey","fromHereTile","msb","ExtrusionFeatureDefs","DEFAULT_RATIO_MIN","DEFAULT_RATIO_MAX","MIN_BUILDING_HEIGHT","MapViewEventNames","setLogLevelForAll","LogLevel","DEFAULT_FOV_CALCULATION","FALLBACK_RENDER_ORDER_OFFSET","UPDATE","Update","RENDER_EVENT","Render","DID_RENDER_EVENT","AfterRender","FIRST_FRAME_EVENT","FirstFrame","FRAME_COMPLETE_EVENT","FrameComplete","THEME_LOADED_EVENT","ThemeLoaded","ANIMATION_STARTED_EVENT","AnimationStarted","ANIMATION_FINISHED_EVENT","AnimationFinished","MOVEMENT_STARTED_EVENT","MovementStarted","MOVEMENT_FINISHED_EVENT","MovementFinished","CONTEXT_LOST_EVENT","ContextLost","CONTEXT_RESTORED_EVENT","ContextRestored","COPYRIGHT_CHANGED_EVENT","CopyrightChanged","vector2","frustumPoints","MapViewPowerPreference","MapViewDefaults","addBackgroundDatasource","maxVisibleDataSourceTiles","extendedFrustumCulling","tileCacheSize","resourceComputationType","ResourceComputationType","EstimationInMb","quadTreeSearchDistanceUp","quadTreeSearchDistanceDown","pixelRatio","window","devicePixelRatio","theme","MapView","EventDispatcher","m_renderLabels","m_screenCollisions","ScreenCollisions","m_visibleTileSetLock","m_tileWrappingEnabled","m_zoomLevel","m_minZoomLevel","m_maxZoomLevel","m_minCameraHeight","m_screenCamera","m_rteCamera","PerspectiveCamera","m_yaw","m_pitch","m_roll","m_focalLength","m_targetDistance","m_targetGeoPos","m_targetWorldPos","m_viewRanges","minimum","maximum","m_scene","m_fog","MapViewFog","m_mapTilesRoot","m_mapAnchors","m_worldAnchors","m_animationCount","m_drawing","m_updatePending","m_frameNumber","m_forceCameraAspect","m_tileDataSources","m_connectedDataSources","m_failedDataSources","m_enablePolarDataSource","m_plane","m_sphere","m_theme","m_themeIsLoading","m_firstFrameRendered","m_firstFrameComplete","m_initialTextPlacementDone","m_imageCache","MapViewImageCache","m_poiManager","PoiManager","m_poiTableManager","PoiTableManager","m_lastTileIds","m_copyrightInfo","m_env","MapEnv","onWebGLContextLost","event","dispatchEvent","onWebGLContextRestored","m_renderer","clearColor","setClearColor","update","m_options","m_uriResolver","uriResolver","minCameraHeight","decoderUrl","ConcurrentDecoderFacade","defaultScriptUrl","resolveUri","decoderCount","defaultWorkerCount","m_visibleTileSetOptions","clipPlanesEvaluator","createDefaultClipPlanesEvaluator","enablePolarDataSource","m_pixelRatio","maxFps","enableStatistics","m_languages","m_politicalView","politicalView","handleRequestAnimationFrame","renderLoop","m_pickHandler","PickHandler","enablePickTechnique","tileWrappingEnabled","setupStats","canvas","addEventListener","WebGLRenderer","antialias","nativeWebglAntialiasEnabled","alpha","preserveDrawingBuffer","powerPreference","Default","autoClear","debug","checkShaderErrors","info","autoReset","setupRenderer","fovCalculation","getCanvasClientSize","up","m_screenProjector","ScreenProjector","setupCamera","m_raycaster","PickingRaycaster","m_movementDetector","CameraMovementDetector","movementThrottleTimeout","movementStarted","movementFinished","mapPassAntialiasSettings","customAntialiasSettings","mapRenderingManager","MapRenderingManager","dynamicPixelRatio","m_tileGeometryManager","TileGeometryManager","enableMixedLod","m_enableMixedLod","m_visibleTiles","createVisibleTileSet","m_animatedExtrusionHandler","AnimatedExtrusionHandler","m_backgroundDataSource","BackgroundDataSource","addDataSource","styleSetName","polarStyleSetName","m_polarDataSource","PolarTileDataSource","geometryLevelOffset","polarGeometryLevelOffset","updatePolarDataSource","backgroundTilingScheme","setTilingScheme","initTheme","m_textElementsRenderer","createTextRenderer","m_createdLights","resetTextRenderer","m_movementFinishedUpdateTimerId","clearTimeout","m_animationFrameHandle","cancelAnimationFrame","removeEventListener","dataSource","dispose","clearTileCache","clearRenderStates","clear","getDataSourceCacheSize","numVisibleTiles","setDataSourceCacheSize","setNumberOfVisibleTiles","updateImages","updateLighting","invalidateCache","updateSkyBackground","m_pointOfView","pointOfView","postEffectsFile","fetch","then","response","json","postEffects","m_postEffects","setPostEffects","ThemeLoader","isThemeLoaded","loadedTheme","catch","sky","reset","lights","clearAlpha","images","imageTextures","poiTables","loadPoiTables","textStyles","defaultTextStyle","fontCatalogs","priorities","labelPriorities","styles","setTheme","time","Date","now","setLanguages","pov","setPoliticalView","disable","disableFading","m_previousFrameTimeStamp","listener","m_collisionDebugCanvas","rendererClearColor","getClearColor","rendererClearAlpha","getClearAlpha","setClearAlpha","lookAtImpl","enableNativeWebglAntialias","calculateFocalLength","getSize","updateCameras","dataSourceName","ds","ready","isVisible","getDataSourceByName","attach","setEnableElevationOverlay","m_elevationProvider","updateStorageLevelOffset","connect","Promise","resolve","resolveOnce","DataSourceConnect","message","dsIndex","detach","removeDataSource","splice","textElements","addOverlayText","clearOverlayText","targetOrParams","tiltDeg","headingDeg","geoPos","limitedPitch","maxPitchRadWithCurvature","maxPitchDegWithCurvature","startsWith","entries","cameraIsMoving","animating","isAnimating","m_pixelToWorld","lookAtDistance","pixelToWorld","getPixelRatio","setPixelRatio","ratio","lowResPixelRatio","project","setFromCamera","getNormalizedScreenCoordinates","getWorldPositionAt","intersectMapObjects","setSize","collisionDebugCanvas","Resize","frameStartTime","PerformanceTimer","startRenderLoop","clearCache","fun","forEachVisibleTile","forEachCachedTile","markTilesDirty","elevationSource","elevationRangeSource","m_elevationSource","m_elevationRangeSource","dataSources","setTileUpdateCallback","overlayOnElevation","bloom","outline","vignette","sepia","updateOutline","enableShadows","shadowMap","PCFSoftShadowMap","tangentSpaceMatrix","getOptionValue","bounds","geoPoints","isGeoBoxExtentLike","fromCenterAndExtents","setFromPoints","getCenter","scalePointToSurface","updateLookAtSettings","twinDataSource","viewRanges","setFovOnCamera","maxGeometryHeightScaled","getScaleFactor","reduce","maxGeometryHeight","assign","updateClipPlanes","updateProjectionMatrix","setScalar","$zoom","$pixelToMeters","$frameNumber","vector","projectionMatrixInverse","viewPos","matrixWorldInverse","transformedPoints","ndcToView","directionalLight","isDirectionalLight","lightDirection","lightPosHyp","addScaledVector","shadow","updateMatrices","pointsInLightSpace","viewToLightSpace","expandByPoint","synchronousRendering","fudgeTimeInMs","frameInterval","requestAnimationFrame","enabledDataSources","isDataSourceEnabled","currentFrameEvent","stats","PerformanceStatistics","gatherStatistics","currentFrame","timeSincePreviousFrame","setValue","storeAndClearFrameInfo","setupTime","cullTime","textPlacementTime","drawTime","textDrawTime","endTime","m_thisFrameTilesChanged","updateEnv","updateLights","lockVisibleTileSet","viewRangesStatus","updateRenderList","storageLevel","getEnabledTileDataSources","viewRangesChanged","renderList","renderedTiles","renderTileObjects","frameNumLastVisible","isDynamicFrame","initializing","childObject","geoPosition","wp","addValue","checkCameraMoved","CameraPositionChanged","renderLabels","prepareRenderTextElements","m_skyBackground","updateCamera","finishRenderTextElements","appResults","disposePendingTiles","checkCopyrightUpdates","frameRenderTime","addWebGLInfo","addMemoryInfo","worldOffsetX","computeWorldOffsetX","willRender","objects","mapObjectAdapter","MapObjectAdapter","processTileObject","displacement","setRotationFromMatrix","boundingBox","getRotationMatrix","frustumCulled","_backupRenderOrder","isBuilding","kind","includes","GeometryKind","Building","levelOffset","didRender","processTileObjectFeatures","ensureUpdated","Boolean","starts","objInfos","isBufferGeometry","getIndex","endOfLastGroup","clearGroups","featureIndex","getFeatureId","getFeatureState","$state","parentEnv","start","groups","addGroup","placeText","renderText","themeName","resize","VisibleTileSet","FrustumIntersection","SkyBackground","updateSkyBackgroundColors","addNewSkyBackground","removeSkyBackGround","groundColor","background","updateTexture","light","remove","lightDescription","createLight","setTimeout","tileIdList","sort","newTileIds","join","checkIfTilesChanged","newCopyrightInfo","getRenderedTilesCopyrightInfo","allEqual","values","tileCopyrightInfo","copyrightInfo","CopyrightInfo","mergeArrays","poiManager","keys","addImage","url","preload","atlas","addTextureAtlas","imageTexture","addImageTexture","enable","TextElementsRenderer","MapViewState","TextCanvasFactory","PoiRendererFactory","FontCatalogLoader","overlayText","limitFov","clientWidth","clientHeight","round","StringEncodedColorFormats","f","regExp","test","components","decoder","lerp","StringEncodedNumeralType","StringEncodedMeters","Meters","encodedValue","match","exec","StringEncodedPixels","StringEncodedHex","Hex","StringEncodedRGB","RGB","channels","StringEncodedRGBA","StringEncodedHSL","HSL","StringEncodedMetricFormats","StringEncodedMetricFormatMaxSize","StringEncodedColorFormatMaxSize","StringEncodedNumeralFormats","StringEncodedNumeralFormatMaxSize","tmpBuffer","numeral","pixelToMeters","matchedFormat","formats","Env","_name","parent","unmap","InterpolationMode","interpolationMode","zoomLevels","interpolation","step","exponent","def","bdef","styleDef","m_lastUpdateFrameNumber","m_notCompletlyTransparent","getObjectMaterials","mapAdapter","objData","install","frameNumber","updateMaterials","somethingChanged","changed","DEFAULT_TEXT_DISTANCE_SCALE","Log","updateStats","placementStats","tempPosition","tempScreenPosition","tempScreenPoints","tempPoiScreenPosition","tmpTextBufferCreationParams","tmpAdditionParams","tmpBufferAdditionParams","TileTextElements","group","TextElementLists","lists","list","elements","addTextToCanvas","textElement","screenPosition","pathOverflow","layer","letterCaseArray","glyphCaseArray","pickingData","addText","glyphs","isPlacementTimeExceeded","startTime","m_viewState","m_viewCamera","m_viewUpdateCallback","m_textCanvasFactory","m_poiRendererFactory","m_fontCatalogLoader","m_initialized","m_glyphLoadingCount","m_textRenderers","m_tmpVector","m_tmpVector3","m_cameraLookAt","m_overloaded","m_cacheInvalidated","m_forceNewLabelsPass","m_textElementStateCache","TextElementStateCache","m_textStyleCache","TextStyleCache","initializeDefaultOptions","setGlyphCountLimits","minNumGlyphs","maxNumGlyphs","initialized","updateGlyphDebugMesh","textRenderer","textCanvas","tileTextElementsChanged","textElementsChanged","checkIfTextElementsChanged","textElementsAvailable","hasOverlayText","initialize","updateTextElements","renderedTilesChanged","clearVisited","findReplacements","anyTextGroupEvicted","prepopulateScreenWithBlockingElements","placeNewTextElements","placeTextElements","placeOverlayTextElements","updateTextRenderers","m_overlayTextElements","concat","pickResults","pickHandler","pickData","pickObjectType","isDuplicate","pickResult","pickText","PickObjectType","Text","poiRenderer","pickTextElements","Icon","waitInitialized","m_loadPromise","memoryUsage","getMemoryUsage","m_initPromise","initializeDefaultAssets","initializeTextCanvases","lookAtVector","boxes","renderListEntry","startLinePointProj","endLinePointProj","pathBlockingElement","blockingElements","project3","line","screenSpaceLines","end","lineWithBound","minX","maxX","minY","allocateIBoxes","groupState","maxNumPlacedLabels","pass","visited","shieldGroups","hiddenKinds","hiddenGeometryKinds","elevationMap","getDisplacementMap","textElementState","textElementStates","PersistentLabels","total","numRenderedTextElements","uninitialized","viewDistance","tooFar","elementVisible","NewLabels","textElementStyle","getTextElementStyle","hasOrIntersects","overlayTextElement","elementType","isPathLabelTooSmall","numNotVisible","dbgPathTooSmall","numPathTooSmall","forceNewPassOnLoaded","initializeGlyphs","getLayer","DEFAULT_TEXT_CANVAS_LAYER","storage","drawCount","capacity","numCannotAdd","textRenderStyle","textLayoutStyle","addPoiLabel","addLineMarkerLabel","addPathLabel","loadingState","Initialized","Requested","Loaded","newLoadPromise","fontCatalog","loadCharset","all","getGlyphs","defaultFontCatalogName","initializeDefaultTextElementStyle","loadCatalogs","catalog","loadedTextCanvas","createTextCanvas","createPoiRenderer","defaultTextCanvas","defaultPoiRenderer","initializeTextElementStyles","debugGlyphs","debugContext","getValue","m_debugGlyphTextureCacheMesh","initializeGlyphDebugMesh","m_debugGlyphTextureCacheWireMesh","defaultFontCatalog","planeGeometry","PlaneGeometry","textureSize","maxWidth","maxHeight","depthWrite","wireframe","WireframeGeometry","wireframeMaterial","clearTextCache","checkIfOverloaded","updateStartTime","overloaded","updateTextElementsFromSource","tileDataSource","tiles","sortedTiles","sortedGroups","createSortedGroupsForSorting","numTextElementsUpdated","textElementLists","selectTextElementsToUpdateByDistance","textElementGroup","maxViewDistance","found","getOrSet","checkReadyForPlacement","PrePlacementResult","Ok","deduplicateElement","Duplicate","totalLabels","results","totalGroups","newGroups","tilesToRender","shouldRenderText","groupedPriorityLists","textElementGroups","foundGroup","farDistanceLimitRatio","maxDistanceRatioForTextLabels","maxDistanceRatioForPoiLabels","getMaxViewDistance","tileTextElements","prepareTextElementGroup","fadeAnimationRunning","placeStartTime","placeNew","maxNumPlacedTextElements","maxNumVisibleLabels","groupStates","sortedGroupStates","currentPriority","currentPriorityBegin","textElementGroupState","newPriority","placeTextElementGroup","beginGroupIndex","endGroupIndex","screenXOrigin","screenYOrigin","textPath","screenPoints","pt","pX","pY","SimplePath","LineCurve","factor","labelDistanceScaleMin","labelDistanceScaleMax","state","maxVisibilityDist","distanceFadeValue","textDistance","labelState","iconIndex","pointLabel","textRenderState","iconRenderStates","iconRenderState","pointToPlaneDistance","setViewDistance","iconRejected","renderIcon","isClamped","isValid","distanceScaleFactor","getDistanceScalingFactor","iconReady","prepareRender","placeIcon","PlacementResult","Invisible","Rejected","distanceFadeFactor","getDistanceFadingFactor","viewState","poiTextMaxDistance","ignoreDistance","iconIsOptional","shouldRenderPointText","placeResult","placePointLabel","numPoiTextsInvisible","textRejected","textIsOptional","startFadeOut","renderTextDuringMovements","shouldRenderPoiText","isFading","startFadeIn","fadeFactor","scaleFactor","textBufferObject","createTextBufferObject","backgroundIsVisible","scale","addTextBufferObject","addTextBufferToCanvas","numRenderedPoiTexts","allocateSpace","renderPoi","renderDistance","numRenderedPoiIcons","getWorldPosition","addPointLabel","lineMarkerLabel","shieldGroup","shieldGroupIndex","lineTechnique","minDistanceSqr","pointIndex","tooClose","j","Math2D","distSquared","textMaxDistance","pathLabel","Path","SimpleLineCurve","getPoint","computeViewDistance","textRenderDistance","prevSize","placePathLabel","prevOpacity","prevBgOpacity","numTextElementsInScene","newOverloaded","TileLoaderState","numBytes","frameNumLastRequested","frameNumVisible","numFramesVisible","visibilityCounter","skipRendering","m_boundingBox","OrientedBox3","m_disposed","m_localTangentSpace","m_forceHasGeometry","m_textElementGroups","TextElementGroupPriorityList","m_pathBlockingElements","m_worldCenter","m_visibleArea","m_elevationRange","m_ownedTextures","WeakSet","getTilingScheme","updateBoundingBox","TileTextStyleCache","m_offset","m_uniqueKey","m_resourceInfo","computeResourceInfo","TextElementGroup","addTextElement","removeTextElement","m_textElementsChanged","blockingElement","_zoomLevel","area","updatePriority","calculationStatus","elevateGeoBox","m_maxGeometryHeight","decodedTile","m_decodedTile","invalidateResourceInfo","forceHasGeometry","decodeTime","copyrightHolderIds","requestUpdate","m_tileGeometryLoader","hasGeometry","basicGeometryLoaded","allGeometryLoaded","m_tileLoader","loadAndDecode","tileLoaderState","Ready","Canceled","Failed","m_animatedExtrusionTileHandler","handler","disposeMaterial","materialProperty","shouldDisposeTexture","disposeObject","shouldDisposeObjectGeometry","shouldDisposeObjectMaterial","rootObject","traverse","preparedTextPaths","clearTextElements","hasTextElements","cancel","worldExtent","LodMesh","setLevelOfDetail","newBoundingBox","num3dObjects","numTextElements","aggregatedObjSize","tileInfo","numUserTextElements","RingBuffer","head","tail","data","next","enqOne","previous","Iterator","m_buffer","m_index","SimpleTimer","statistics","running","m_currentValue","SampledTimer","numResets","maxNumSamples","samples","getStats","computeArrayStats","asArray","median","median75","median90","median95","median97","median99","median999","mid","sum","avg","numSamples","stages","stage","hasTimer","getTimer","currentStage","stop","timers","nullTimer","keepSamples","timer","addTimer","header","footer","maxNameLength","print","toFixed","simpleStats","FrameStats","messages","oldValue","FrameStatsArray","frameEntries","frameStats","currentSize","enq","maxNumFrames","configs","m_instance","m_frameEvents","clearFrames","webGlInfo","calls","lines","triangles","memory","textures","programs","performance","totalJSHeapSize","usedJSHeapSize","jsHeapSizeLimit","addFrame","onlyLastFrame","frames","plainObject","getAsPlainObject","simpleStatistics","AnimatedExtrusionState","m_mapView","duration","forceEnabled","m_tileHandlerMap","m_zoomDirection","m_zoomLevelPrevious","tileHandler","zoomLevelChanged","m_forceAnimatedExtrusion","animatedExtrusion","m_forceAnimatedExtrusionDuration","extrusionDuration","tileKeys","m_tile","extrudedObjects","m_animatedExtrusionDuration","m_extrudedObjects","m_animatedExtrusionState","None","m_animatedExtrusionStartTime","animateExtrusion","Playing","Started","currentTime","timeProgress","extrusionRatio","easeInOutCubic","Finished","stopExtrusionAnimation","animatedExtrusionHandler","extrudedObject","startExtrusionAnimationIfNeeded","zoomDirection","customDepthMaterial","removeTile","childTileKeys","getSubTileKeys","childTileKey","extrusionStartTime","nextLevelDiff","getChildTiles","parentTileKey","startExtrusionAnimation","parentUri","childUri","absoluteUrlWithOriginRe","getUrlOrigin","substr","baseUrl","RegExp","idx","lastIndexOf","getUrlHostAndProtocol","protocol","host","urlOriginRe","emptyTexture","visibilityRange","linkMixinWithMaterial","mixin","shaderDefines","shaderUniforms","linkMixinWithShader","DisplacementFeature","FadingFeature","ExtrusionFeature","isEnabled","displacementMaterial","updateDisplacementFeature","useDisplacementMap","onBeforeCompile","insertShaderInclude","DisplacementFeatureMixin","m_displacementMap","setDisplacementMap","Uniform","displacementScale","displacementBias","chainCallbacks","fadingMaterial","DEFAULT_FADE_NEAR","DEFAULT_FADE_FAR","patchGlobalShaderChunks","ShaderChunk","fading_pars_vertex","updateFadingFeature","useFading","addRenderHelper","updateUniforms","additionalCallback","onBeforeRender","FadingFeatureMixin","m_fadeNear","m_fadeFar","getFadeNear","setFadeNear","getFadeFar","setFadeFar","extrusionMaterial","extrusion_pars_vertex","updateExtrusionFeature","useExtrusion","ExtrusionFeatureMixin","m_extrusion","getExtrusionRatio","setExtrusionRatio","zFightingWorkaround","ZFIGHTING_WORKAROUND","addFadingProperties","applyFadingParameters","addExtrusionProperties","applyExtrusionParameters","addDisplacementProperties","applyDisplacementParameters","copyFadingParameters","copyExtrusionParameters","copyDisplacementParameters","MapMeshDepthMaterial","MeshDepthMaterial","MeshStandardMaterial","meshphysical_frag","simpleLightingShadowChunk","applyMixinsWithoutProperties","LineCapsModes","extrude_line_vert_func","round_edges_and_add_caps","CAPS_NONE","CAPS_SQUARE","CAPS_ROUND","CAPS_TRIANGLE_IN","CAPS_TRIANGLE_OUT","tile_clip_func","high_precision_vert_func","RX","baseTechniqueParamsDescriptor","attrScopes","AttrScope","TechniqueGeometry","FeatureGeometry","transient","TechniqueRendering","pointTechniquePropTypes","mergeTechniqueDescriptor","enablePicking","squaresTechniquePropTypes","squares","circlesTechniquePropTypes","circles","lineMarkerTechniquePropTypes","useAbbreviation","useIsoCode","textMayOverlap","iconMayOverlap","textReserveSpace","iconReserveSpace","alwaysOnTop","showOnMap","stackMode","iconFadeTime","textFadeTime","iconXOffset","iconYOffset","iconScale","screenHeight","screenWidth","poiTable","poiName","poiNameField","imageTextureField","imageTexturePrefix","imageTexturePostfix","iconColor","iconBrightness","polygonalTechniqueDescriptor","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","lineColor","lineFadeFar","lineFadeNear","solidLineTechniqueDescriptor","clipping","secondaryRenderOrder","secondaryWidth","secondaryColor","lineTechniqueDescriptor","fillTechniqueDescriptor","fill","standardTechniqueDescriptor","roughness","metalness","alphaTest","emissive","emissiveIntensity","refractionRatio","mapProperties","normalMapProperties","displacementMapProperties","roughnessMapProperties","emissiveMapProperties","bumpMapProperties","metalnessMapProperties","alphaMapProperties","standard","extrudedPolygonTechniqueDescriptor","floorHeight","defaultColor","defaultHeight","constantHeight","boundaryWalls","footprint","maxSlope","enableDepthPrePass","animateExtrusionDuration","lineColorMix","textTechniqueDescriptor","shaderTechniqueDescriptor","isStandardExtrudedLineTechnique","isFillTechnique","dashes","textureCoordinateType","transferList","texturePropertyKey","ArrayBuffer","imageName","textureName","UPDATE_EVENT","DataSource","cacheable","useGeometryLoader","addGroundPlane","minDataLevel","maxDataLevel","minDisplayLevel","maxDisplayLevel","allowOverlappingTiles","exprPool","ExprPool","m_storageLevelOffset","m_featureStateMap","storageLevelOffset","uniqueNameCounter","m_styleSetName","styleSet","tmpVector3","tmpVector2","AttachmentCache","bufferAttributes","interleavedAttributes","MemoCallExpr","m_cachedProperties","m_deps","newValue","m_cachedValue","evaluate","AttachmentInfo","description","getBufferAttribute","getArrayConstructor","interleavedBuffer","InterleavedBuffer","stride","attrs","interleavedAttr","TileGeometryCreator","enabledKinds","disabledKinds","techniques","_kindState","srcGeometry","createdOffsets","createObjects","preparePois","createTextElements","isPoiTechnique","isLineMarkerTechnique","isTextTechnique","createLabelRejectionElements","pathGeometries","addBlockingElement","PathBlockingElement","processPriorities","initDecodedTile","intern","geometryKind","mapAdapterParams","resetVisibilityCounter","textPathGeometries","textFilter","processedPaths","newPaths","pop","textStyleCache","discreteZoomLevel","discreteZoomEnv","prepareTextPaths","ContextualArabicConverter","convert","getRenderStyle","getLayoutStyle","pathLengthSqr","textGeometries","stringCatalog","positions","numPositions","getX","getY","getZ","texts","techniqueFilter","attachment","getAttachments","groupCount","groupIndex","techniqueIndex","usesObject3D","onMaterialUpdated","addOwnedTexture","createMaterial","techniqueKind","setupTerrainMaterial","vertexAttributes","vertexAttribute","setAttribute","interleavedVertexAttributes","attr","getInterleavedBufferAttributes","setIndex","getAttribute","needsVertexNormals","computeVertexNormals","isSolidLineTechnique","isHighPrecisionLineMaterial","lineMaterial","clipTileSize","setShaderMaterialDefine","hasSolidLinesOutlines","hasFeatureGroups","featureStarts","buildObject","geometryId","isCirclesTechnique","isSquaresTechnique","enableRayTesting","isLineTechnique","isSegmentsTechnique","fadingParams","getFadingParams","addUserData","castShadow","receiveShadow","extrusionAnimationEnabled","animateExtrusionValue","isRenderDepthPrePassEnabled","depthPassMesh","createDepthPrePassMesh","registerTileObject","materialFeature","setDepthPrePassStencil","edgeIndex","edgeGeometry","colorAttribute","extrusionAttribute","normalAttribute","uvAttribute","extrudedPolygonTechnique","getPolygonFadingParams","materialParams","colorMix","edgeMaterial","EdgeMaterial","edgeObj","depthPacking","RGBADepthPacking","extrusionAnimationDuration","animatedExtrusionTileHandler","AnimatedExtrusionTileHandler","outlineGeometry","fillTechnique","outlineMaterial","outlineObj","outlineTechnique","secondaryCaps","caps","mainMaterialAdapter","outlineMaterialAdapter","frameMapView","mainLineWidth","currentStyledProperties","secondaryLineWidth","poiGeometries","addPois","createTexCoords","shouldSubdivide","tmpV","moveTileCenter","geom","posArray","sw","se","nw","ne","posAttr","toArray","normAttr","uvAttr","sphericalModifier","SphericalGeometrySubdivisionModifier","zoomLevelOffset","subdivision","zoomLevelGeometry","EdgeLengthGeometrySubdivisionModifier","SubdivisionMode","All","modify","createGroundPlaneMaterial","createGroundPlane","Background","mainAttachment","attachments","_category","_styleSet","computeRenderOrder","category","findIndex","entry","_secondaryCategory","terrainColor","tileDisplacementMap","xCountVertices","yCountVertices","LuminanceFormat","geometryType","DEFAULT_COLOR_MIX","GlyphData","advanceX","u0","v0","u1","v1","font","sourceTextureCoordinates","dynamicTextureCoordinates","copyIndex","isInCache","character","String","fromCodePoint","direction","metrics","lineHeight","MAX_CAPACITY","VERTEX_BUFFER_STRIDE","INDEX_BUFFER_STRIDE","VERTICES_PER_QUAD","INDICES_PER_QUAD","QUAD_VERTEX_MEMORY_FOOTPRINT","QUAD_INDEX_MEMORY_FOOTPRINT","backgroundMaterial","initialSize","m_currentCapacity","m_drawCount","m_updateOffset","m_pickingCount","m_vertexBuffer","setUsage","DynamicDrawUsage","m_positionAttribute","m_uvAttribute","m_colorAttribute","m_bgColorAttribute","m_indexBuffer","m_geometry","m_pickingDataArray","m_bgMesh","updateRange","setDrawRange","glyphData","corners","weight","bgWeight","mirrored","newSize","resizeBuffers","baseVertex","baseIndex","setXYZW","mirroredUVIdx","setX","vertexOffset","bgColor","bgOpacity","cosR","sinR","offsetZ","rotSign","red","green","blue","bgRed","bgGreen","bgBlue","bgAlpha","targetOffset","srcOffset","glyph","bw","startIdx","endIdx","pickCallback","positionIndex","newVertexBuffer","newIndexBuffer","TypesettingUtils","EM_TO_PX","PT_TO_PX","OBLIQUE_ANGLE","OBLIQUE_OFFSET","getPixelSize","originalSize","Em","Point","Percent","getSmallCapsScale","smallCapsTransformations","SmallCaps","xHeight","capHeight","computeGlyphTransform","localRotation","cosAngle","sinAngle","localCosAngle","localSinAngle","updateBounds","globalBounds","individualBounds","Box2","styledProperties","m_dynamicProperties","propName","propDefinition","setupStaticProperties","updateDynamicProperties","updateBaseColor","applyMaterialGenericProp","applyMaterialBaseColor","rgbValue","actualOpacity","MapViewPoints","raycaster","intersects","screenCoords","origin","mouseCoords","indices","il","fromArray","pointInfo","getPointInfo","pointIsOnScreen","testPoint","absoluteScreenPosition","relativeScreenPosition","pickCoordinates","dx","dy","halfSize","isNode","DebugOption","SET_EVENT_TYPE","DebugContext","m_optionsMap","__debugContext","opt","hasEventListener","option","tmpOBB","raycasterFromScreenPoint","screenX","screenY","scenePosition","intersectsRay","intersectObjects","intersect","Unspecified","intersection","addObjInfo","GeometryType","ExtrudedLine","SolidLine","TextPath","Polygon","ExtrudedPolygon","Area","faceIndex","intersectIndex","objInfosIndex","featureStartIndex","ColorCache","m_map","colorCode","padStart","nearMin","nearMultiplier","nearFarMultiplier","farOffset","m_tmpVectors","m_tmpQuaternion","farMin","nearPlane","farPlane","extractBasis","fwd","fwdRot","ElevationBasedClipPlanesEvaluator","m_minElevation","m_maxElevation","TopViewClipPlanesEvaluator","nearFarMarginRatio","farMaxRatio","nearFarMargin","m_minimumViewRange","evaluateDistanceSphericalProj","evaluateDistancePlanarProj","minimumViewRange","getCameraAltitude","farMax","cameraAltitude","cam","halfFovAngle","farTangent","getTangentBasedFarPlane","getFovBasedFarPlane","getOrthoBasedFarPlane","getTangentDistance","te","fovAngle","dVec","cameraFwdVec","tVec","cta","a2","r2","TiltViewClipPlanesEvaluator","halfPiLimit","cameraTilt","topAngleRad","bottomAngleRad","z1","z2","sinBeta","topDist","bottomDist","planesDist","getFrustumGroundIntersectionDist","cosHalfFov","cameraToOrigin","getCameraPitch","modifiedAlpha","getTiltedFovBasedFarPlane","cosAlpha","dSqr","cosAlpha1","minNear","minFarOffset","minFar","m_nearPlane","m_farPlane","fixedNear","invalidatePlanes","fixedFar","nearDist","farDist","decoderServiceType","scriptUrl","workerCount","workerSet","getWorkerSet","WorkerBasedDecoder","workerSets","ConcurrentWorkerSet","destroy","sourceInfo","existingInfo","findItem","year","link","formatAsHtml","filtered","HighPrecisionUtils","doubleToFloatVec","fround","createHighPrecisionCameraPos","objectInverseWorldMatrix","mvp","eyePos","eyePosFloat","viewProjection","eyePosHi","eyePosLo","createAttributes","positionVec","positionVecLow","addHPValue","major","addHPVector","vec","positionHigh","Float32BufferAttribute","positionLow","addInterleavedAttributes3","positionOffset","newPositions","majorX","minorX","majorY","minorY","majorZ","minorZ","setPositions","makeFloatVec","minorVec","updateHpUniforms","shaderMaterial","highPrecisionCameraInfo","isMaterial","u_mvp","u_eyepos","u_eyepos_lowpart","convertPositions","vAny","returnPositions","createLine","linePositions","addCircles","wireFrame","triangulateLine","hpLineGeometry","hpPositions","positionAttribute","positionLowAttribute","hpSolidMaterial","lineObject","HPL","HighPrecisionWireFrameLine","HighPrecisionLine","setupForRendering","createPoints","pointPositions","materialParameters","hpPointsGeometry","hpPointsMaterial","isHighPrecisionPointMaterial","HighPrecisionPointMaterial","pointsObject","HPP","HighPrecisionPoints","FeatureModifierId","OmvFilterString","StringMatch","matchString","str","filterString","Any","Match","StartsWith","EndsWith","OmvGeometryType","OMV_TILE_DECODER_SERVICE_TYPE","OMV_TILER_SERVICE_TYPE","OmvTile","Tile","EquirectangularProjection","geoToWorldScale","worldToGeoScale","latitudeSpanInRadians","longitudeSpanInRadians","sizeX","sizeY","normalizedEquirectangularProjection","equirectangularProjection","TransverseMercatorProjection","m_phi0","m_lambda0","_unitScale","lon","TransverseMercatorUtils","POLE_RADIUS","rsq","POLE_RADIUS_SQ","nearestQuarter","deltaLon","deltaLat","distanceToPoleSq","distanceToPole","dir","offsetLon","clamped","clampGeoPoint","normalLon","phi","lambda","B","atanh","outScale","tau","nx","ny","D","sinh","pointsToCheck","E","POLE_EDGE_DEG","containsEastCut","containsCenterX","containsCenterY","alignLatitude","projected","vx","vy","vz","minZ","maxZ","lowerQ","upperQ","containsLowerQY","containsUpperQY","alignLongitude","latitudes","longitudes","altitudes","referencePoint","bad","good","POLE_EDGE","transverseMercatorProjection","tilingScheme","m_tilingScheme","m_worldBox","m_worldDimensions","levelDimensionX","getLevelDimensionX","levelDimensionY","getLevelDimensionY","originX","originY","unprojectBox","halfQuadTreeSubdivisionScheme","SubTiles","iterator","ZCurveIterator","RowColumnIterator","parentKey","worldCoordinatesToTileKey","cx","cy","worldSizeX","worldSizeY","wrap","lower","upper","minVal","maxVal","southWestLongitude","longitudeInRadians","southWestLatitude","northEastLongitude","northEastLatitude","minTileKey","maxTileKey","columnCount","minColumn","maxColumn","minRow","maxRow","m_subdivisionScheme","divX","getSubdivisionX","divY","getSubdivisionY","optionalParams","console","trace","m_channel","Trace","prefix","Debug","Info","Warn","WORKERCHANNEL_MSG_TYPE","workerMessage","self","postMessage","CopyShader","tDiffuse","CopyMaterial","NoBlending","atmosphere_common_utils","atmosphere_vertex_utils","atmosphere_fragment_utils","StandardGeometryKind","GeometryKindSet","subset","elem","hasIntersection","TextureCoordinateType","PoiStackMode","PlacementToken","descriptors","Dynamic","parseStringEncodedNumeral","getFeatureName","basePropName","abbreviation","isoCode","projectionName","sphereProjection","attributeMap","$id","evaluateTechniqueAttr","DEFAULT_TILING_SCHEME","newScheme","removeDecodedTile","MIN_SAFE_INTEGER","webMercatorTilingScheme","m_booleanLiterals","m_numberLiterals","m_stringLiterals","m_objectLiterals","m_arrayLiterals","m_varExprs","m_hasAttributeExprs","m_matchExprs","m_caseExprs","m_interpolateExprs","m_stepExprs","m_callExprs","literal","candidate","branchesMatching","expressions","interp","tmpVectorA","tmpVectorB","tmpVectorC","positionAttr","uv","edgeAttr","edge","wallAttr","wall","indexAttr","middleVertex","lerpVectors","newIndices","shift","v2","shouldSplitTriangle","v3","SdfShaderChunks","sdf_attributes","sdf_varying","sdf_varying_computation","sdf_frag_uniforms","sdf_sampling_functions","GlyphClearMaterial","GlyphCopyMaterial","pageOffset","page0","DEFAULT_IMAGE","page1","page2","page3","page4","page5","page6","page7","SdfTextMaterial","vertexSource","fragmentSource","sdfTexture","sdfParams","distanceRange","MSDF","isMsdf","BG_TEXT","isBackground","side","DoubleSide","extensions","derivatives","characterBounds","DisplacedBufferAttribute","originalAttribute","m_normals","m_uvs","m_textureWidth","m_textureHeight","m_cache","VertexCache","MAX_CACHE_SIZE","m_lastPos","m_tmpNormal","resetTexture","normals","uvs","m_lastBufferIndex","getDisplacedCoordinate","m_texture","bufferIndex","displacePosition","fromBufferAttribute","u","sampleBilinear","tmpV1","tmpV2","tmpBox","displaceBox","displacementRange","displacementDir","tmpNormalMin","tmpNormalMax","translate","union","DisplacedBufferGeometry","originalGeometry","displacedPositions","m_originalBoundingBox","m_displacedPositions","resetAttributes","displacementRangeChanged","resetBoundingVolumes","computeBoundingBox","origBBox","boundingSphere","getBoundingSphere","equals","needsBoundingBoxUpdate","computeBoundingSphere","drawRange","AlphaFormat","RGBFormat","RGBAFormat","LuminanceAlphaFormat","RGBEFormat","DepthFormat","DepthStencilFormat","RedFormat","dataType","ClampToEdgeWrapping","RepeatWrapping","MirroredRepeatWrapping","NearestFilter","NearestMipMapNearestFilter","NearestMipMapLinearFilter","LinearFilter","LinearMipMapNearestFilter","LinearMipMapLinearFilter","AmbientLight","intensity","DirectionalLight","bias","mapSize","DEPTH_PRE_PASS_STENCIL_MASK","createDepthPrePassMaterial","baseMaterial","depthFunc","EqualDepth","colorWrite","enforceBlending","depthPassMaterial","LessDepth","evaluateBaseColorProperty","depthPassGeometry","extrusionAxisAttribute","materialIndex","depthMesh","colorMesh","depthMaterial","stencilWrite","stencilFail","KeepStencilOp","stencilZFail","stencilZPass","ReplaceStencilOp","stencilFunc","AlwaysStencilFunc","stencilRef","stencilFuncMask","colorMaterial","ZeroStencilOp","EqualStencilFunc","overlayObject","mat","hasDisplacementFeature","overlayPosition","worldCoords","geoCoords","contains","sampleHeight","overlayPath","firstObject","Terrain","tmpPosition","tmpCameraDir","tmpPointDir","eyePosition","eyeLookAt","viewDistance0","viewDistance1","pointPos","planePos","planeNorm","tmpPlacementPosition","tmpPlacementBounds","viewCamera","updatePoiFromPoiTable","projectionType","checkViewDistance","TooFar","NotReady","tmpBoxes","tmpMeasurementParams","tmpCollisionBoxes","tmpCollisionBox","CollisionBox","tmpScreenPosition","tmpTextOffset","tmp2DBox","Box","tmpCenter","tmpSize","placePointLabelAtAnchor","placement","screenCollisions","isRejected","forceInvalidation","outScreenPosition","measureText","applyTextPlacement","outputCharacterBounds","expandByVector","persistentPointLabelTextMargin","textOffset","Right","Top","Center","Bottom","poiIsRenderable","computedWidth","computedHeight","hAlign","hPlacementFromAlignment","vAlign","vPlacementFromAlignment","hAlignDiff","vAlignDiff","relOffsetX","relOffsetY","computePointTextOffset","persistent","newPointLabelTextMarginPercent","isAllocated","textReservesSpace","allocate","textPlacement","PoiRenderer","computeIconScreenBox","multiAnchor","newLabel","lastPlacement","placePointLabelAtCurrentAnchor","placementsNum","matchIdx","allInvisible","anchorPlacement","isLastPlacement","placementResult","placePointLabelChoosingAnchor","candidateBoxes","checkGlyphCollision","search","checkGlyphVisible","isFullyVisible","glyphBox","collisionBox","intersectsDetails","DetailedCollisionBox","screenProjector","outScreenPoints","anyPointVisible","projectOnScreen","minScreenSpace","lengthSq","tmpOrientedBox","poiLabel","outWorldPosition","worldOffsetShiftValue","worldOffset","offsetDirectionVector","offsetDirectionRad","applyAxisAngle","tempPos","neutralColor","tmpIconColor","PoiRenderBufferBatch","imageItem","boxBuffer","setup","init","updateBufferGeometry","updateMemoryUsage","imageData","UVMapping","trilinear","mipMaps","mipmaps","premultiplyAlpha","m_material","IconMaterial","BoxBuffer","PoiRenderBuffer","batches","m_batchMap","imageTextureName","batchKey","mappedIndex","bufferBatch","batchSet","screenBox","batchIndex","registerPoi","uvBox","addBox","batch","pickBoxes","m_tempScreenBox","m_renderBuffer","centerX","centerY","preparePoi","allocateScreenSpace","addPoi","poiTableName","getImageTexture","m_missingTextureName","imageDefinition","imageCache","findImageByName","loaded","loadingPromise","imageUrl","loadImage","loadedImageItem","setupPoiInfo","imageWidth","imageHeight","paddedSize","MipMapGenerator","getPaddedSize","trilinearFiltering","paddedImageWidth","paddedImageHeight","iconWidth","iconHeight","minS","maxS","minT","maxT","iconScaleH","iconScaleV","s0","t0","s1","t1","m_paddingCanvas","document","createElement","m_paddingContext","getContext","m_resizeCanvas","m_resizeContext","ceilPowerOfTwo","paddedWidth","paddedHeight","copyImageWithPadding","getImageData","previousImage","resizeImage","clearRect","ImageBitmap","drawImage","putImageData","paddedImage","RBush","detailBoxes","isLineWithBound","screenBounds","rtree","bbox","insert","containsBox","testBox","detailBox","boundedLine","intersectsLine","lineXDiffTransformed","signBL","signBR","signTL","signTR","lineYDiffTransformed","normalX","normalY","debugCanvas","m_renderContext","m_renderingEnabled","m_numAllocations","m_numSuccessfulTests","m_numFailedTests","m_numSuccessfulVisibilityTests","m_numFailedVisibilityTests","strokeStyle","strokeRect","boundsArray","collisionFound","padding","_maxEntries","_minEntries","leaf","_all","toBBox","collides","_build","_splitRoot","_insert","_condense","compareMinX","compareMinY","toJSON","apply","_chooseSubtree","_split","_adjustParentBBoxes","_chooseSplitAxis","_chooseSplitIndex","M","_allDistMargin","defaultTextRenderStyle","getColor","defaultTextLayoutStyle","parseAlignmentAndPlacements","placementsTokens","placementsString","toUpperCase","split","modifier","North","South","East","West","parseTechniquePlacementValue","parseTechniquePlacements","parseTechniqueHAlignValue","parseTechniqueVAlignValue","m_textStyles","m_defaultStyle","themedDefaultStyle","createTextElementStyle","textRenderers","styledTextRenderer","styleId","defaultRenderParams","defaultOpacity","hexColor","defaultBackgroundSize","hasBackgroundDefined","defaultBackgroundOpacity","hexBgColor","themeRenderParams","floorZoomLevel","defaultLayoutParams","textPlacements","wrapping","themeLayoutParams","styleName","fontCatalogName","m_geometries","disposeGeometries","m_throttlingTimeout","m_movementStartedFunc","m_movementFinishedFunc","m_lastCameraPos","m_newCameraPos","m_throttlingTimerId","m_movementDetectorDeadline","onDeadlineTimer","startMovementFinishedTimer","newAttitude","newCameraPos","m_lastAttitude","cameraMoved","m_cameraMovedLastFrame","NaN","removeMovementFinishedTimer","remainingTime","MSAARenderPass","MSAASampling","samplingLevel","Level_1","m_renderTarget","m_localCamera","m_quadScene","m_quadUniforms","m_quadMaterial","MSAAMaterial","m_quad","WebGLRenderTarget","offsets","OffsetVectors","oldClearColor","oldView","oldRenderTarget","getRenderTarget","setViewOffset","uniformCenteredDistribution","sampleWeight","isLoggingMessage","DEFAULT_WORKER_INITIALIZATION_TIMEOUT","m_workerChannelLogger","m_eventListeners","m_workers","m_availableWorkers","m_workerPromises","m_readyPromises","m_requests","m_workerRequestQueue","m_nextMessageId","m_stopped","m_referenceCount","onWorkerMessage","workerId","WorkerServiceProtocol","isResponseMessage","messageId","worker","checkWorkerRequestQueue","errorMessage","errorStack","stack","resolver","isInitializedMessage","readyPromise","getReadyPromise","service","eventHandler","m_workerCount","hardwareConcurrency","timeout","workerConnectionTimeout","workerPromise","WorkerLoader","startWorker","evt","waitForAllResponses","terminateWorkers","serviceId","ensureStarted","promise","callback","request","requestController","reject","ServiceMessageName","Request","postRequestMessage","promises","buffers","signal","aborted","err","RequestController","unshift","workerEntry","terminate","newPromise","that","startWorkerImmediately","directlyFallbackToBlobBasedLoading","startWorkerBlob","pageUrl","href","fullScriptUrl","Worker","waitWorkerInitialized","fetchScriptSourceToBlobUrl","blobUrl","sourceLoaderCache","scriptSource","blob","firstMessageCallback","isWorkerBootstrapRequest","resolvedDependencies","dependency","resolved","dependencyUrlMapping","cleanup","errorCallback","filename","lineno","timerId","nextUniqueServiceId","m_serviceCreated","addReference","broadcastRequest","WORKER_SERVICE_MANAGER_SERVICE_ID","Requests","DestroyService","targetServiceId","removeReference","CreateService","targetServiceType","tileKeyCode","WorkerDecoderProtocol","DecodeTileRequest","getProjectionName","invokeRequest","TileInfoRequest","DecoderMessageName","Configuration","broadcastMessage","CalculationStatus","m_name2Url","m_url2Name","hasName","oldNames","ImageCache","findImage","registerImage","startLoading","mipMapGenerator","m_images","imageCacheItem","findImageCacheItem","mapViews","itemsToRemove","mapViewIndex","keyToDelete","imageLoader","ImageLoader","renderImage","generateTextureAtlasMipMap","ex","errorEvent","createImageBitmap","imageBitmap","m_enabled","Fog","m_fogIsDefined","m_cachedTheme","enableFog","startRatio","viewRange","horizontalDensity","verticalDensity","endRatio","density","smoothStep","setFogInRawShaderMaterials","Material","m_imageTextures","m_poiShieldGroups","m_missingPoiTableName","loadedOk","m_missingPoiName","assertExists","poiGeometry","addLineMarker","ok","statusText","jsonAtlas","imageTextureDef","reason","getPoiTable","notifyMissingPoiTable","poiTableEntry","getEntry","notifyMissingPoi","iconName","composeTechniqueTextureName","iconMinLevel","iconMaxLevel","textMinLevel","textMaxLevel","updateMinMaxZoomLevelsFromPoiInfo","groupKey","positionArray","checkCreateTextElement","techniqueTextureName","poiTechnique","offsetDirections","iconColorRaw","PoiTableEntry","jsonEntry","isOK","altNames","Show","Hide","ShowParent","PoiTable","useAltNamesForKey","poiList","poiDict","m_isLoading","m_loadedOk","entryIdx","poiTableUrl","jsonPoiTable","tableEntry","verifyJSON","newPoiEntry","altName","m_poiTables","loadPromises","poiTableRef","addTable","finally","finishLoading","debugTiles","polarTilingScheme","m_maxLatitude","m_geometryLevelOffset","m_debugTiles","m_northPoleEntry","m_southPoleEntry","m_styleSetEvaluator","$geometryType","$layer","getMatchingTechniques","StyleSetEvaluator","createTechiqueEntry","setStyleSet","createTileGeometry","latA","latB","lonA","lonB","isNorthPole","techniqueEntry","srcProjection","dstProjection","maxLat","poleLat","pBL","pBR","pTR","pTL","needsGeometryCut","isLeftHalf","poleX","poleY","pPole","pXX","lats","lmax","lmin","nearest","inPointB","inPointD","cutStart","intersectEdge","cutEnd","cutIndexStart","cutIndexEnd","Face3","fromGeometry","Water","SkyCubemapFaceId","SKY_CUBEMAP_FACE_COUNT","createCubemapFaceArray","m_skybox","CubeTextureLoader","CubeTexture","face","DEFAULT_MAX_THEME_INTHERITANCE_DEPTH","themeUrl","resolveReferenceUri","getAppBaseUrl","resolveUrls","convertFlatTheme","checkTechniqueSupport","resolveDefinitions","resolveBaseThemes","contextLoader","ContextLogger","resolveThemeReferences","extends","childUrlResolver","composeUriResolvers","RelativeUriResolver","resolveIncludes","resolveIncludeUris","baseTheme","resolveResourceUris","resolveResources","contextLogger","pushAttr","definitionName","isActualSelectorDefinition","resolvedDef","resolveStyle","resolveStyleSet","currentStyle","pushIndex","resolvedStyle","isJsonExprReference","cloneDeep","when","resolvedWhen","resolveExpressionReferences","resolvedValue","failed","resolveInternal","defName","maxInheritanceDepth","baseThemes","baseThemesMerged","actualBaseTheme","mergeThemes","currentStyleSets","incomingStyleSets","faceUrl","SearchDirection","DataSourceCache","cacheSize","rct","m_disposedTiles","m_resourceComputationType","m_tileCache","LRUCache","evictionCallback","canEvict","getKey","setCapacityAndMeasure","getKeyForTile","deleteByKey","shrinkToCapacity","evictAll","selector","evictSelected","inDataSource","m_frustumIntersection","m_cameraOverride","m_viewRange","m_coveringMap","m_dataSourceCache","computationType","setCapacity","evaluateClipPlanes","visibleTileKeysResult","getVisibleTileKeysForDataSources","visibleTileKeys","distanceDiff","minDiff","actuallyVisibleTiles","allDataSourceTilesLoaded","dataZoomLevel","getDataZoomLevel","tileEntry","getTile","skipOverlappedTiles","visibleArea","updateTiles","allVisibleTileLoaded","allBoundingBoxesFinal","populateRenderedTiles","disposeTile","oldViewRanges","newViewRanges","getTileImpl","dataSourceVisibleTileList","visibleLevel","visibleTileKey","getTileKey","searchLevelsUp","searchLevelsDown","getSearchDirection","childLevel","markDataSourceTilesDirty","disposeTiles","listEntry","isFullyCovering","uniqueKey","searchDirection","BOTH","DOWN","UP","NONE","incompleteTiles","checkedTiles","findUp","findDown","childTileCode","childTile","parentCode","exists","parentTile","foundUp","cacheOnly","updateTile","tileToUpdate","resultTile","tileCache","initTile","dataSourceCache","retainedTiles","markTileDirty","tileGeometryManager","dataSourceBuckets","bucket","updateFrustum","compute","calculationFinal","tileKeyEntry","tileKeyEntries","canGetTile","ConcurrentTilerFacade","tilerServiceType","WorkerBasedTiler","indexId","WorkerTilerProtocol","RegisterIndex","UpdateIndex","TileRequest","m_cachedTreePromise","getCopyrightCoverageData","coverageInfo","initRBush","matchingEntries","getTree","minLevel","maxLevel","item","tree","alt","arg","isLineAccessor","isObject3dAccessor","BufferedGeometryAccessorBase","startCapSize","endCapSize","constructor","rawShaderMaterial","diffuse","BufferedGeometryAccessor","checkSetUp","positionsArray","subarray","getVertices","IndexedBufferedGeometryAccessor","reconstructLineWidth","k","UNIT_Z","POINTS","BEVEL_POINTS","STEP","addCircle","lineAngle","SECTORS_IN_CIRCLE","angle","startWithCircle","endWithCircle","angleVec","prevBt","bt","averageBt","p2","p3","N","useBevel","inclineWidth","inBuffer","startOffset","outBuffer","i2","xd","yd","zd","_renderer","_scene","_geometry","_material","_group","force","doUpdateMatrixWorldInverse","matrixWorldNeedsUpdate","TileLoader","dataProvider","tileDecoder","loadAbortController","AbortController","Loading","Decoding","donePromise","abort","onDone","myLoadCancellationToken","payload","onLoaded","resolveDonePromise","rejectedDonePromise","byteLength","startDecodeTile","decodeTile","onDecoded","doneState","getTileInfo","APIFormat","AuthenticationMethod","AuthenticationTypeBearer","method","AuthorizationHeader","AuthenticationTypeTomTomV1","QueryString","AuthenticationTypeAccessToken","downloadManager","TransferManager","urlParams","abortSignal","tileUrl","dataUrl","authenticationCode","getActualAuthenticationCode","applyAuthCode","addQueryParams","apiFormat","XYZJson","downloadJson","downloadArrayBuffer","getBearerToken","HereV1","MapboxV4","XYZOMV","XYZMVT","XYZSpace","TomtomV1","authMethod","authenticationMethod","getDefaultAuthMethod","headers","Headers","authType","append","authParams","queryParams","queryString","concatinator","s3Base","querySelector","getElementById","innerText","getFullYear","releases","date","hash","version","dropdown","res","release","appendChild","onchange","selected","omvDataSource","OmvDataSource","apikey","innerWidth","beginAnimation","main","IdentityProjection","identityProjection","getLongitudeQuadrant","oneOverPI","quadrantIndex","lengthOfVector3","makeBox3","halfEquatorialRadius","minLongitude","maxLongitude","minLongitudeQuadrant","maxLongitudeQuadrant","xMin","xMax","yMin","yMax","cosMaxLongitude","sinMaxLongitude","xCenter","xExtent","yCenter","yExtent","minLatitude","maxLatutide","zMax","zMin","zCenter","zExtent","SphereProjection","_minElevation","worldpoint","cosLatitude","parallelRadiusSq","parallelRadius","midX","midY","cosSouth","sinSouth","cosWest","sinWest","cosNorth","sinNorth","cosEast","sinEast","cosMidX","sinMidX","cosMidY","sinMidY","rMax","rMin","_worldBox","mx","my","gx","gy","cosLongitude","sinLongitude","sinLatitude","visitTileKey","subTileKey","hereTilingScheme","TilingScheme","mercatorTilingScheme","intersectsSlab","rayDir","axis","finv","t2","tmpVec","tmpT","rotationMatrix","newBox","matrix","frustumOrPlanes","planes","plane","distanceToPoint","dz","distanceToPointSquared","subVectors","lengths","getComponent","dd","parameters","shaderParams","DEFAULT_CIRCLE_SIZE","m_color","m_opacity","PriorityListGroup","foundIndex","GroupedPriorityList","getGroup","findGroup","otherGroup","normalizedPriority","LoggerManagerImpl","m_loggers","channel","ConsoleChannel","WorkerChannel","loggerName","m_levelSetForAll","Logger","config","ax","ay","bx","by","xmax","ymax","computeSquaredLineLength","squaredLineLength","xDiff","yDiff","distToSegmentSquared","px","py","l0x","l0y","l1x","l1y","lineLengthSuared","edge0","edge1","smootherStep","inMin","inMax","outMin","outMax","lowerBound","upperBound","startValue","endValue","derivedCtor","baseCtors","baseCtor","getOwnPropertyDescriptor","m_logger","headerMessage","m_headerLogged","createLogMethod","severity","rest","nowFunc","getTime","getNowFunc","cloneInternal","src","cached","flags","props","optionValue","uri","resolvers","originalUrl","f1","f2","maxXIndex","maxYIndex","xIndex","xIndexFloor","yIndex","yIndexFloor","swIndex","seIndex","nwIndex","neIndex","swElevation","seElevation","nwElevation","neElevation","xFrac","isInteger","xFracInverse","yFrac","yFracInverse","hasDisplacementMap","hasExtrusion","edgeColor","edgeColorMix","MIN_BUILDING_HEIGHT_SQUARED","extrusion_vertex","extrusion_normal_fragment_begin","extrusion_pars_fragment","extrusion_fragment","fading_vertex","fading_pars_fragment","fading_fragment","GroundAtmosphereShader","u_eyePositionWorld","u_lightDirectionWorld","u_modelViewProjection","u_atmosphereEnv","u_hsvCorrection","topColor","bottomColor","fogColor","fogNear","fogFar","GroundAtmosphereMaterial","FrontSide","enableLighting","cameraInfo","getCameraInfo","modelViewProjection","eyeHeight","cameraInSpace","outerRadius","needsUpdate0","needsUpdate1","reverse","modelMatrix","identity","viewMatrix","transpose","mvpMatrix","objectPos","updateTransparencyFeature","points_frag","DEFAULT_SIZE","DEFAULT_SCALE","uvTransform","Matrix3","LuminosityHighPassShader","luminosityThreshold","smoothWidth","AdditiveBlending","SepiaShader","amount","SkyAtmosphereShader","SkyAtmosphereMaterial","BackSide","LineCapsDefinesMapping","Square","Round","TriangleIn","TriangleOut","DefinesLineCapsMapping","lineCapsName","defineKey","LineDashesModes","LineDashesDefinesMapping","DASHES_SQUARE","DASHES_ROUND","Diamond","DASHES_DIAMOND","DefinesLineDashesMapping","lineDashesName","CAPS_MODE","DASHES_MODE","fogParam","opacityParam","merge","dashColor","outlineColor","extrusionWidth","DEFAULT_WIDTH","DEFAULT_OUTLINE_WIDTH","DEFAULT_OFFSET","DEFAULT_DRAW_RANGE_START","DEFAULT_DRAW_RANGE_END","DEFAULT_DASH_SIZE","DEFAULT_GAP_SIZE","UniformsLib","drawRangeStart","drawRangeEnd","invalidateFog","invalidateOpacity","capsMode","dashesMode","useTileClip","VignetteShader","darkness","operatorDescriptors","promoteValue","promotedValue","evaluator","cachedResult","fromValue","builtin","builtins","defineOperator","firstDynamicCondition","evaluatedCondition","evaluatedBody","wrapValue","partialEvaluate","param","i1","i0","iP","iN","tP","dt","wP","wN","pp","ppp","cP","c0","c1","cN","vN","cubicInterpolate","keyIndex","prevKey","prevValue","base","defineOperators","CastOperators","ComparisonOperators","MathOperators","StringOperators","ColorOperators","TypeOperators","MiscOperators","FlowOperators","ArrayOperators","ObjectOperators","FeatureOperators","MapOperators","VectorOperators","VALID_ELEMENT_TYPES","checkElementTypes","ty","checkArray","operators","checkArrayLength","at","rgba","rgbaToHex","rgb","rgbToHex","hsl","euclideanModulo","hslToHex","compare","strict","isEnv","conditionalCast","any","none","boolean","number","string","pixels","ppi","ln","ln2","log10","pi","coalesce","LookupMode","lookupMember","lookupMode","memberName","in","downcase","toLocaleLowerCase","upcase","toLocaleUpperCase","typeof","isVector","ctor","toVector","VectorCtor","_value","vector4","emptyEnv","_context","preserve","newBranch","newCondition","deps","Condition","instantiatedBranch","Character","Token","isSpace","codepoint","Tab","Lf","Cr","Space","isNumber","_0","_9","isLetter","A","Z","isIdentChar","isLetterOrNumber","Dollar","Dot","LBracket","RBracket","tokenSpell","token","Eof","Identifier","Comma","LParen","RParen","Exclaim","TildeEqual","CaretEqual","DollarEqual","EqualEqual","ExclaimEqual","Less","Greater","LessEqual","GreaterEqual","BarBar","AmpAmp","Lexer","m_token","m_char","m_text","yylex","codePointAt","yyinp","ch","SingleQuote","DoubleQuote","Equal","Caret","Tilde","Bar","Amp","getEqualityOp","getRelationalOp","lex","parseLogicalOr","yyexpect","hasAttribute","parseLiteral","parseUnary","parsePrimary","parseRelational","parseEquality","parseLogicalAnd","isUnknownServiceError","isRequestMessage","Response","isRegisterIndexRequest","isUpdateIndexRequest","isTileRequest","abortController","isConfigurationMessage","isDecodeTileRequest","isTileInfoRequest","attrValue","cachedExprResults","visitFunc","visit","VERTEX_POSITION_CACHE","SubdivisionModifier","subdivisionMode","m_projectedBox","m_maxLengthX","m_maxLengthY","m_maxLength","shouldSplitAB","shouldSplitEdge","shouldSplitBC","shouldSplitCA","ab","bc","ca","maxDistance","NoDiagonals","aa","bb","cc","beta","gamma","FontCatalog","fonts","unicodeBlocks","maxCodePointCount","m_replacementGlyph","m_glyphTextureCache","GlyphTextureCache","m_loadingJson","m_loadingPages","m_loadingGlyphs","m_loadedJson","m_loadedPages","m_loadedGlyphs","loadJSON","replacementDirUrl","replacementJson","replacementTexture","loadTexture","replacementFont","replacementGlyph","chars","xadvance","xoffset","yoffset","supportedBlocks","rawJSON","loadPages","assetsPath","getAssetsPath","jsonPath","jsonPromise","pagePromises","page","pages","loadPage","pagePath","charset","AllCaps","glyphPromises","char","getFont","fontHash","glyphHash","fontGlyphMap","glyphPromise","createReplacementGlyph","charUnicodeBlock","loadAssets","loadedGlyph","shouldTransform","transformedCharacter","getGlyph","selectedFontName","textureBytes","loadedPage","loadBlock","sourceGlyphData","texturePath","pagePromise","fontStylePath","Bold","bold","Italic","italic","BoldItalic","boldItalic","entryWidth","entryHeight","nRows","m_cacheHeight","m_cacheWidth","m_textureSize","m_entryCache","initCacheEntries","m_rt","depthBuffer","stencilBuffer","m_copyTextureSet","m_copyTransform","m_copyPositions","m_copyMaterial","m_copyVertexBuffer","m_copyPositionAttribute","m_copyUVAttribute","m_copyGeometry","copyIndexBuffer","m_copyMesh","m_copyGeometryDrawCount","m_clearMaterial","m_clearPositionAttribute","m_clearGeometry","clearIndexBuffer","m_clearMesh","m_clearGeometryDrawCount","oldestEntry","oldest","clearCacheEntry","copyGlyphToCache","willClearGeometry","willCopyGeometry","srcPages","nCopies","pageIndex","dummyFont","lineGap","dummyGlyphData","dummyEntry","cacheLocation","copyTextureIndex","applyMatrix3","setXYZ","setXY","Entry","newer","older","cacheCapacity","sizeFunction","m_size","m_newest","m_oldest","m_capacity","m_sizeFunction","callbackfn","thisArg","newCapacity","evict","sizeMeasure","entrySize","valueSize","promoteEntry","newest","cb","entryOlder","deleteEntry","evictOldest","itemToRemove","isOk","tempTextPosition","tempTextBounds","tempVertexBuffer","TextCanvas","m_fontCatalog","minGlyphCount","maxGlyphCount","m_ownsMaterial","createSdfTextMaterial","m_ownsBgMaterial","m_bgMaterial","m_defaultLayer","TextGeometry","m_layers","m_currentTextRenderStyle","m_currentTextLayoutStyle","m_lineTypesetter","LineTypesetter","m_pathTypesetter","PathTypesetter","bgMaterial","backgroundMesh","oldTarget","layerId","outputBounds","upperCaseArray","pathOrigin","textPathOverflow","targetLayer","tempLayer","addLayer","prevDrawCount","updatePosition","addPickingData","glyphArray","smallCapsEnabled","textBounds","storeStyles","computeTextBuffer","TextBufferObject","glyphBounds","isPath","typesettingParams","smallCapsArray","vertexBuffer","arrangeGlyphs","m_tempTransform","m_tempCorners","m_tempLineDirection","m_tempRunDirection","m_tempPixelSize","m_tempPixelBgSize","m_tempScale","m_tempSmallCaps","m_currentParams","isOnlyMeasured","lineStartIdx","glyphWrapIdx","wordWrapIdx","lineStartX","lineCurrX","glyphWrapX","wordWrapX","lineCount","isBidirectionalLine","wrapPointIdx","wrapPointX","lineAlignment","placeLine","isBidirectional","placeRun","glyphDataArray","isRTL","runStart","neutralIdx","weakRunStart","weakGlyph","glyphFont","glyphFontMetrics","isBoldEmulated","isItalicEmulated","isSmallCaps","smallCapsScale","glyphScale","emulationWeight","isMirrored","verticalOffset","glyphVertexPosition","horizontalOffset","addToBuffer","m_tempPathPosition","m_tempPathLength","m_tempPathOffset","getLength","pathWidth","defaultGlyphRotation","normalDisplacement","textPoint","tangent","getTangent","ContextualForm","CombinedForm","m_singleCharactersMap","m_combinedCharactersMap","m_neutralCharacters","output","currentCodePoint","charCodeAt","isArabicCharacter","prevIndex","isNeutral","prevCodePoint","prevMap","getCharacterMap","Initial","Medial","nextIndex","nextCodePoint","nextMap","Final","combinedMap","getCombinedCharacterMap","fromCharCode","Connected","Isolated","m_getDisplacementRange","m_raycastStrategy","firstMaterial","isDisplacementFeature","isDisplacementMaterial","isDataTexture","isDataTextureMap","displacedGeometry","getDisplacedPositionAttribute","Field","maxVertexCount","m_vertexCount","m_oldestIdx","m_newestIdx","Count","vertexId","vertex","vertexIdx","getVertex","setVertex","newerIdx","getNewerIdx","olderIdx","getOlderIdx","setOlderIdx","setNewerIdx","OlderIdx","NewerIdx","X","Y","tmpSphere","tmpInverseMatrix","tmpRay","Ray","tmpLine1","Line3","tmpPlane","tmpV3","tmpV4","computeFeatureBoundingSphere","featureBeginIndex","featureEndIndex","pos","sphere","makeEmpty","intersectLine","vExtrusion","hWidth","hWidthSq","interPlane","outInterLine","extrLineT","intersectExtrudedLine","endCapT","startCapT","containsPoint","intersectClosestEndCap","distanceToSquared","closestPointToPoint","intersectFeature","localRay","halfWidth","lHalfWidth","lHalfWidthSq","beginIdx","bSphere","intersections","vExt","bitangent","intersectsSphere","manhattanLength","interLine","interLineWorld","singleFeatureStart","intersectGroup","firstFeatureIdx","groupEndIdx","bVolumes","boundingVolumes","isSolidLineMaterial","solidLineMaterial","localHalfWidth","localHalfWidthSq","featureIdx","lastFeatureIdx","bVolumeIdx","nextFeatureIdx","BoxBufferMesh","startElementCount","maxElementCount","resizeBuffer","pickInfos","internalMesh","indexAttribute","glyphCount","positionAttributeCount","colorAttributeCount","uvAttributeCount","indexAttributeCount","pickInfoCount","pickInfo","canAddElements","clearAttributes","isEmpty","pickInfoIndex","isPixelTransparent","forceResize","xScreenPos","yScreenPos","pixelIsTransparent","screenToUvCoordinates","pixel","getPixelFromImage","newPositionArray","newColorArray","newUvArray","numIndexValues","newIndexArray","getPixelFromImageBitmap","xPos","yPos","pixelData","getPixelFromImageData","imgData","strd","Uint8ClampedArray","getPixel","pickedColor","close","pixelsData","resortedGroups","numNotRendered","m_lengths","PathParam","curves","m_point","curve","lineCurve","curveLengths","getCurveLengths","diff","segmentLength","numSecondChanceLabels","tmpCachedDuplicate","getCacheKey","hasFeatureId","isBetterPathDuplicate","newCandidate","_newDistance","oldCandidate","_oldDistance","isBetterPointDuplicate","_newCandidate","newDistance","_oldCandidate","oldDistance","findDuplicateByText","elementState","candidates","maxSqDistError","getDedupSqDistTolerance","entryCount","elementPosition","duplicate","dupIndex","dupDistSquared","isBetterDuplicate","candidateEntry","cachedElement","areDiffType","areBothVisible","m_referenceMap","m_textMap","textElementFilter","updateElements","TextElementGroupState","m_sortedGroupStates","replaceCallback","replaceElement","anyEviction","updateFading","traverseVisibleElements","cacheResult","findDuplicate","cachedDuplicate","replacement","cachedEntries","duplicateIndex","findDuplicateById","m_visited","m_textElementStates","TextElementState","visibleElementsCallback","m_textRenderState","m_iconRenderStates","themeLayout","stateLayout","m_textLayoutState","isBaseTextPlacement","LayoutState","renderState","m_viewDistance","predecessor","initializeRenderStates","RenderState","_point","m_hAlign","m_vAlign","FadingState","DEFAULT_FADE_TIME","fadeTime","m_state","Undefined","FadingIn","FadingOut","FadedIn","FadedOut","fadingTime","textRenderStyles","textLayoutStyles","_index","styleCache","createRenderStyle","createLayoutStyle","DEFAULT_DYNAMIC_MSAA_SAMPLING_LEVEL","DEFAULT_STATIC_MSAA_SAMPLING_LEVEL","Level_4","antialiasSettings","msaaEnabled","strength","threshold","thickness","ghostExtrudedPolygons","m_width","m_height","m_renderPass","RenderPass","m_target1","m_target2","m_sepiaPass","ShaderPass","m_vignettePass","m_readBuffer","m_msaaPass","m_dynamicMsaaSamplingLevel","dynamicMsaaSamplingLevel","m_staticMsaaSamplingLevel","staticMsaaSamplingLevel","m_lowResPass","LowResRenderPass","isStaticFrame","usePostEffects","activeTarget","clearDepth","m_outlineEffect","OutlineEffect","nextEffectEnabled","m_bloomPass","BloomPass","m_savedWidth","m_savedHeight","m_defaultThickness","m_defaultColor","m_defaultAlpha","m_defaultKeepAlive","m_ghostExtrudedPolygons","m_removeThresholdCount","m_originalMaterials","m_originalOnBeforeRenders","m_shaderIDs","MeshLambertMaterial","MeshPhongMaterial","MeshToonMaterial","MeshPhysicalMaterial","m_uniformsChunk","outlineThickness","outlineAlpha","domElement","ghost","depth","stencil","updateStyle","setViewport","setScissor","setScissorTest","renderTarget","currentAutoClear","renderOutline","currentSceneAutoUpdate","autoUpdate","currentSceneBackground","currentShadowMapEnabled","setOutlineMaterial","restoreOriginalMaterial","cleanupCache","originalMaterial","shaderID","originalUniforms","originalVertexShader","ShaderLib","isRawShaderMaterial","createInvisibleMaterial","isShaderMaterial","vertexShaderChunk","vertexShaderChunk2","DECLARE_TRANSFORMED","skinning","morphTargets","morphNormals","used","keepAlive","getOutlineMaterialFromCache","updateOutlineMaterial","getOutlineMaterial","outlineParameters","BlurDirectionX","BlurDirectionY","resolution","m_renderTargetsHorizontal","m_renderTargetsVertical","m_nMips","m_separableBlurMaterials","m_basic","m_bloomTintColors","pars","resx","resy","m_renderTargetBright","generateMipmaps","renderTargetHorizonal","renderTargetVertical","m_highPassUniforms","m_materialHighPassFilter","kernelSizeArray","getSeperableBlurMaterial","m_compositeMaterial","getCompositeMaterial","m_copyUniforms","m_materialCopy","rt","inputRenderTarget","kernelRadius","KERNEL_RADIUS","SIGMA","colorTexture","texSize","nMips","NUM_MIPS","blurTexture1","blurTexture2","blurTexture3","blurTexture4","blurTexture5","dirtTexture","bloomStrength","bloomFactors","bloomTintColors","bloomRadius","tmpVectors3","tmpVector4","TileKeyEntry","longitudeOffset","m_extendedFrustumCulling","m_frustum","Frustum","m_viewProjectionMatrix","m_rootTileKeys","m_tileKeyEntries","m_mapTileCuller","MapTileCuller","projectionMatrixOverride","setFromProjectionMatrix","computeRequiredInitialRootTileKeys","viewportHeight","targetTileArea","useElevationRangeSource","tileBounds","uniqueZoomLevels","workList","tileKeyAndOffset","getElevationRange","FinalPrecise","computeTileAreaAndDistance","subTileEntry","frustumIntersectsTileBox","intersectsBox","projectedPoint","rootTileKey","worldGeoPoint","totalAngleRad","worldLengthHorizontal","worldLeftPoint","worldLeftGeoPoint","offsetRange","SQRT2","m_globalFrustumMin","m_globalFrustumMax","m_frustumCorners","frustumCorners","getFrustumCorners","MAX_VALUE","frustumCorner","globalFrustumMin","globalFrustumMax","invProjMatrix","cornerIndex","addPoint","enableFilterByKind","m_visibilityCounter","kinds","incrementVisibilityCounter","TileGeometryLoader","geometryLoader","enabledGeometryKinds","disabledGeometryKinds","m_tileUpdateCallback","updateTileObjectVisibility","addOrRemoveToEnabledSet","enableDisableKinds","addOrRemoveToDisabledSet","addOrRemoveToHiddenSet","visibilityHasChanged","oneKind","visibilityChange","addRemove","visibleKinds","tileKinds","availableGeometryKinds","needUpdate","objectAdapter","nowVisible","addToSet","kindSet","kindsSet","m_isFinished","foundSet","compileGeometryKind","Label","m_availableGeometryKinds","prepareAvailableGeometryKinds","discardNeedlessTile","finish","geometryCreationPending","compareGeometryKinds","processTechniques","setGeometryKinds","setDecodedTile","prepareForRender","m_enabledKinds","m_disabledKinds","m_timeout","loadingFinished","geometryCreator","createAllGeometries","geometryCreationTime","addMessage","disposed","enabledSame","disabledSame","enabledEmpty","disabledEmpty","emptyTechniqueDescriptor","StyleConditionClassifier","_whenExpr","savedStyle","switchStyle","_style","enclosingExpr","matched","matchVarStringComparison","_geometryType","saved","OptimizedSubSetKey","keyUpdateNeeded","envLayer","envGeometryType","updateKey","cachedStyleSet","makeDecodedTechnique","isVector2","isVector3","isVector4","m_techniques","m_exprPool","m_cachedResults","m_styleConditionClassifier","m_subStyleSetCache","m_definitionExprCache","m_tmpOptimizedSubSetKey","m_emptyEnv","m_featureDependencies","m_definitions","resolveStyleReferences","resolveReferences","techniqueRenderOrder","styleSetIndex","_styleSetIndex","computeDefaultRenderOrder","compileStyleSet","m_previousResult","m_previousEnv","optimizedSubSetKey","m_layer","m_geometryType","searchedStyleSet","getOptimizedStyleSet","currStyle","processStyle","techinque","subSetKey","optimizedStyleSet","createPreFilteredStyleSet","compileStyle","checkStyleDynamicAttributes","classify","_minZoomLevelExpr","_maxZoomLevelExpr","checkZoomLevel","getTechniqueForStyleMatch","final","_dynamicTechniques","dynamicAttributes","evaluateTechniqueProperties","getDynamicTechniqueKey","createTechnique","_staticTechnique","dynamicAttrKey","_attrName","_dynamicTechniqueAttributes","_dynamicFeatureAttributes","_dynamicForwardedAttributes","_staticAttributes","dynamicFeatureAttributes","dynamicTechniqueAttributes","dynamicForwardedAttributes","targetStaticAttributes","techniqueDescriptor","processAttribute","_usesFeatureState","attrScope","attrExpr","dynamicAttrs","currEdgeStart","currEdgeGoal","prevEdgeStart","prevEdgeGoal","indexBuffer","vertexStride","polygonContour","polygonContourEdges","isExtruded","addFootprintEdges","wallEdgeSlope","vFootprint0","vRoof0","vFootprint1","vRoof1","prevEdgeIdx","v0x","v0y","v1x","v1y","vFoot0","ThreeBufferUtils","getBufferElementType","fromThreeBufferAttribute","bufferAttribute","fromThreeInterleavedBufferAttribute","fromThreeBufferGeometry","attributeNames","isOnScreen","ndc","projectVector","tempV3","ndcToScreen","tempV2","m_sky","m_projectionType","m_skyTexture","SkyGradientTexture","SkyCubemapTexture","isSameSkyType","DEFAULT_TEXTURE_SIZE","DEFAULT_MONOMIAL_POWER","cameraRight","cameraUp","m_faceCount","m_faces","fillTextureData","monomialPower","unpackAlignment","m_farClipPlaneDividedVertically","m_groundPlane","m_bottomMidFarPoint","m_topMidFarPoint","m_horizonPosition","m_farClipPlaneCorners","setHorizonPosition","updateTexturePosition","faceIdx","upDir","unproject","skyRatio","DEFAULT_FONT_CATALOG_NAME","m_catalogsLoading","defaultFontCatalogUrl","catalogCallback","fontCatalogConfig","fontCatalogPromise","m_renderedTilesChangeCheck","m_lookAtVector","m_minGlyphCount","m_maxGlyphCount","CopyrightElementHandler","m_defaults","m_mapViews","mergedCopyrightInfo","staticInfo","m_element","display","defaults","deduped","innerHTML","htmlElement","UrlCopyrightProvider","CopyrightCoverageProvider","m_fetchURL","m_baseScheme","m_requestHeaders","m_transferManager","m_cachedCopyrightResponse","fetchFunction","maxRetries","activeDownloadCount","downloadQueue","activeDownloads","defaultInstance","retryCount","status","waitFor","retryTimeout","fetchRepeatedly","milliseconds","downloadAs","download","arrayBuffer","maxParallelDownloads","deferred","DeferredPromise","doDownload","onDownloadDone","execDeferredDownload","future","converter","cacheKey","pendingFetch","newFetch","executor","resolveFunc","rejectFunc","ImageItem","AtmosphereVariant","AtmosphereShadingVariant","AtmosphereLightMode","clipPlanes","MapViewAtmosphere","m_sceneRoot","m_sceneCamera","m_projection","m_updateCallback","m_atmosphereVariant","SkyAndGround","m_materialVariant","ScatteringShader","m_clipPlanesEvaluator","m_lightDirection","Sky","createSkyGeometry","Ground","createGroundGeometry","addToScene","where","root","getObjectByName","SkyAtmosphereUserName","GroundAtmosphereUserName","m_skyMesh","m_groundMesh","isAdded","isPresent","removeFromScene","lightMode","dynamicLight","LightDynamic","m_groundMaterial","setDynamicLighting","m_skyMaterial","m_skyGeometry","m_groundGeometry","sceneRoot","createWorldAnchor","skyGeometry","SphereGeometry","SimpleColor","normalScale","setupSkyForRendering","groundGeometry","setupGroundForRendering","onBeforeCallback","overrideClipPlanes","onAfterRender","revertClipPlanes","rteCamera","sceneCam","anchor","pickable","ImageOrigin","m_textureLoader","requestHeaders","crossOrigin","loadWithThreeLoader","isJPEG","setCrossOrigin","m_wantsPoints","m_wantsLines","m_wantsAreas","m_wantsObject3D","wantsAll","wantsPoints","wantsLines","wantsAreas","wantsObject3D","visitObject","wantsFeature","visitMesh","BufferedGeometryLineAccessor","BufferedGeometryObject3dAccessor","IndexedBufferedGeometryLineAccessor","meshObject","geometryAccessor","featureStart","featureEnd","getBufferGeometry","getIndexedGeometryAccessor","getGeometryAccessor","getCount","setRange","visitPoint","visitLine","visitArea","visitObject3D","tmpNormal","tmpTangent0","tmpTangent1","tmpBitangent","LINE_VERTEX_ATTRIBUTES","NORMAL_UV_VERTEX_ATTRIBUTES","LINE_VERTEX_ATTRIBUTES_NUV","HP_LINE_VERTEX_ATTRIBUTES","HP_LINE_VERTEX_ATTRIBUTES_NUV","LineGeometry","getVertexDescriptor","hasNormalsAndUvs","highPrecision","createLineGeometry","polyline","colors","pointCount","segments","tangents","hasSegmentOffsets","hasTexCoords","sqrLength","lineCoverage","lineLength","isClosed","tmpVertices","addVertexPair","T1","T2","segment","extrusionCoord","highComp","lowComp","setComponent","computeBitangent","createSimpleLineGeometry","LineGroup","isSimple","vertexDescriptor","descr","createGeometry","isHighPrecisionPointsMaterial","dimensionality","setDimensionality","m_processLayersDefault","m_processPointsDefault","m_processLinesDefault","m_processPolygonsDefault","m_layersToProcess","m_layersToIgnore","m_pointsToProcess","m_ignoredPoints","m_linesToProcess","m_linesToIgnore","m_polygonsToProcess","m_polygonsToIgnore","m_kindsToProcess","m_kindsToIgnore","processLayersDefault","processPointsDefault","processLinesDefault","processPolygonsDefault","addItem","addItems","layersToProcess","layersToIgnore","pointsToProcess","pointsToIgnore","linesToProcess","linesToIgnore","polygonsToProcess","polygonsToIgnore","kindsToProcess","kindsToIgnore","items","layerName","matchLayer","geometryTypes","geomType","classes","featureClass","matchClass","featureAttribute","geomTypes","featureClasses","OmvGenericFeatureFilter","layerItems","layerItem","itemsToProcess","itemsToIgnore","defaultResult","filters","hasKindFilter","wantsLayer","wantsPointFeature","wantsLineFeature","wantsPolygonFeature","wantsKind","OmvGenericFeatureModifier","doProcessFeature","featureClassThing","matchItems","matchAttribute","getDataProvider","OmvRestClient","missingOmvDecoderServiceInfoEmitted","TileDataSource","tileFactory","TileFactory","concurrentDecoderServiceName","m_decoderOptions","showMissingTechniques","filterDescription","filterDescr","gatherFeatureAttributes","featureModifiers","featureModifierId","skipShortLabels","enableElevationOverlay","configureDecoder","toLowerCase","configure","m_modelConstructor","m_tileFactory","m_isReady","m_decoder","getTileDecoder","concurrentDecoderScriptUrl","concurrentDecoderWorkerCount","copyrightProvider","getCopyrights","TileInfoLoader","loaderState","debugMaterial","linewidth","NeverDepth","debugCircleMaterial","debugBlackCircleMaterial","debugBlueCircleMaterial","PRIORITY_ALWAYS","OmvDebugLabelsTile","addLabelDebugInfo","debugTextPaths","debugTextPathsFull","debugTextPoisFull","tileGeometryCreator","colorMap","indexFilter","centerZ","pointScale","pointLabelIndex","bluePointGeometry","bluePointIndices","bluePointPositions","addedTextElements","pointSize","offsetXY","labelElement","_isDebug","bluePointMesh","lineGeometry","lineIndices","redPointGeometry","redPointIndices","redPointPositions","blackPointGeometry","blackPointIndices","blackPointPositions","elementIndex","zHeight","pathIndex","isRedPoint","lineMesh","redPointMesh","blackPointMesh","missingTilerServiceInfoEmitted","m_registered","m_tiler","tiler","getTiler","workerTilerUrl","registerIndex","updateIndex"],"mappings":"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","file":"index.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 127);\n","module.exports = THREE;","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from \"./index-common\";\nexport * from \"./lib/UrlPlatformUtils.web\";\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from \"./lib/ColorUtils\";\nexport * from \"./lib/Expr\";\nexport * from \"./lib/Techniques\";\nexport * from \"./lib/TechniqueParams\";\nexport * from \"./lib/Theme\";\nexport * from \"./lib/PostEffects\";\nexport * from \"./lib/PropertyValue\";\nexport * from \"./lib/InterpolatedPropertyDefs\";\nexport * from \"./lib/WorkerServiceProtocol\";\nexport * from \"./lib/WorkerTilerProtocol\";\nexport * from \"./lib/WorkerDecoderProtocol\";\nexport * from \"./lib/ITileDecoder\";\nexport * from \"./lib/ITiler\";\nexport * from \"./lib/DecodedTile\";\nexport * from \"./lib/TileInfo\";\nexport * from \"./lib/GeoJsonDataType\";\nexport * from \"./lib/ThemeVisitor\";\nexport * from \"./lib/StringEncodedNumeral\";\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from \"./lib/coordinates/GeoBox\";\nexport * from \"./lib/coordinates/GeoBoxExtentLike\";\nexport * from \"./lib/coordinates/GeoCoordinatesLike\";\nexport * from \"./lib/coordinates/GeoCoordinates\";\nexport * from \"./lib/coordinates/GeoPointLike\";\nexport * from \"./lib/coordinates/LatLngLike\";\nexport * from \"./lib/projection/EarthConstants\";\nexport * from \"./lib/projection/EquirectangularProjection\";\nexport * from \"./lib/projection/IdentityProjection\";\nexport * from \"./lib/projection/Projection\";\nexport * from \"./lib/projection/MercatorProjection\";\nexport * from \"./lib/projection/TransverseMercatorProjection\";\nexport * from \"./lib/projection/SphereProjection\";\nexport * from \"./lib/tiling/FlatTileBoundingBoxGenerator\";\nexport * from \"./lib/tiling/HalfQuadTreeSubdivisionScheme\";\nexport * from \"./lib/tiling/QuadTreeSubdivisionScheme\";\nexport * from \"./lib/tiling/QuadTree\";\nexport * from \"./lib/tiling/SubTiles\";\nexport * from \"./lib/tiling/SubdivisionScheme\";\nexport * from \"./lib/tiling/TileKey\";\nexport * from \"./lib/tiling/TileKeyUtils\";\nexport * from \"./lib/tiling/TileTreeTraverse\";\nexport * from \"./lib/tiling/TilingScheme\";\nexport * from \"./lib/tiling/HereTilingScheme\";\nexport * from \"./lib/tiling/WebMercatorTilingScheme\";\nexport * from \"./lib/tiling/MercatorTilingScheme\";\nexport * from \"./lib/tiling/PolarTilingScheme\";\nexport * from \"./lib/math/Vector3Like\";\nexport * from \"./lib/math/Box3Like\";\nexport * from \"./lib/math/OrientedBox3Like\";\nexport * from \"./lib/math/MathUtils\";\nexport * from \"./lib/math/TransformLike\";\nexport * from \"./lib/math/OrientedBox3\";\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from \"./lib/CirclePointsMaterial\";\nexport * from \"./lib/CopyMaterial\";\nexport * from \"./lib/DisplacementFeature\";\nexport * from \"./lib/EdgeMaterial\";\nexport * from \"./lib/GroundAtmosphereMaterial\";\nexport * from \"./lib/HighPrecisionLineMaterial\";\nexport * from \"./lib/HighPrecisionPointMaterial\";\nexport * from \"./lib/IconMaterial\";\nexport * from \"./lib/LuminosityHighPassShader\";\nexport * from \"./lib/MapMeshMaterialsDefs\";\nexport * from \"./lib/MapMeshMaterials\";\nexport * from \"./lib/MSAAMaterial\";\nexport * from \"./lib/SepiaShader\";\nexport * from \"./lib/SkyAtmosphereMaterial\";\nexport * from \"./lib/SolidLineMaterial\";\nexport * from \"./lib/Utils\";\nexport * from \"./lib/VignetteShader\";\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Env, Value } from \"./Env\";\nimport { ExprEvaluator, ExprEvaluatorContext, OperatorDescriptor } from \"./ExprEvaluator\";\nimport { ExprInstantiator, InstantiationContext } from \"./ExprInstantiator\";\nimport { ExprParser } from \"./ExprParser\";\nimport { ExprPool } from \"./ExprPool\";\nimport {\n    interpolatedPropertyDefinitionToJsonExpr,\n    isInterpolatedPropertyDefinition\n} from \"./InterpolatedPropertyDefs\";\nimport { Definitions, isBoxedDefinition, isLiteralDefinition } from \"./Theme\";\n\nimport * as THREE from \"three\";\nimport { Pixels } from \"./Pixels\";\nimport { RGBA } from \"./RGBA\";\n\nexport * from \"./Env\";\n\nconst exprEvaluator = new ExprEvaluator();\n\nconst exprInstantiator = new ExprInstantiator();\n\nexport interface ExprVisitor<Result, Context> {\n    visitNullLiteralExpr(expr: NullLiteralExpr, context: Context): Result;\n    visitBooleanLiteralExpr(expr: BooleanLiteralExpr, context: Context): Result;\n    visitNumberLiteralExpr(expr: NumberLiteralExpr, context: Context): Result;\n    visitStringLiteralExpr(expr: StringLiteralExpr, context: Context): Result;\n    visitObjectLiteralExpr(expr: ObjectLiteralExpr, context: Context): Result;\n    visitVarExpr(expr: VarExpr, context: Context): Result;\n    visitHasAttributeExpr(expr: HasAttributeExpr, context: Context): Result;\n    visitCallExpr(expr: CallExpr, context: Context): Result;\n    visitMatchExpr(expr: MatchExpr, context: Context): Result;\n    visitCaseExpr(expr: CaseExpr, context: Context): Result;\n    visitStepExpr(expr: StepExpr, context: Context): Result;\n    visitInterpolateExpr(expr: InterpolateExpr, context: Context): Result;\n}\n\n/**\n * The dependencies of an [[Expr]].\n */\nexport class ExprDependencies {\n    /**\n     * The properties needed to evaluate the [[Expr]].\n     */\n    readonly properties = new Set<string>();\n\n    /**\n     * `true` if the expression depends on the feature state.\n     */\n    featureState?: boolean;\n\n    /**\n     * `true` if this expression cannot be cached.\n     */\n    volatile?: boolean;\n}\n\nclass ComputeExprDependencies implements ExprVisitor<void, ExprDependencies> {\n    static instance = new ComputeExprDependencies();\n\n    /**\n     * Gets the dependencies of an [[Expr]].\n     *\n     * @param expr The [[Expr]] to process.\n     * @param scope The evaluation scope. Defaults to [[ExprScope.Value]].\n     * @param dependencies The output [[Set]] of dependency names.\n     */\n    static of(expr: Expr) {\n        const dependencies = new ExprDependencies();\n        expr.accept(this.instance, dependencies);\n        return dependencies;\n    }\n\n    visitNullLiteralExpr(expr: NullLiteralExpr, context: ExprDependencies): void {\n        // nothing to do\n    }\n\n    visitBooleanLiteralExpr(expr: BooleanLiteralExpr, context: ExprDependencies): void {\n        // nothing to do\n    }\n\n    visitNumberLiteralExpr(expr: NumberLiteralExpr, context: ExprDependencies): void {\n        // nothing to do\n    }\n\n    visitStringLiteralExpr(expr: StringLiteralExpr, context: ExprDependencies): void {\n        // nothing to do\n    }\n\n    visitObjectLiteralExpr(expr: ObjectLiteralExpr, context: ExprDependencies): void {\n        // nothing to do\n    }\n\n    visitVarExpr(expr: VarExpr, context: ExprDependencies): void {\n        context.properties.add(expr.name);\n    }\n\n    visitHasAttributeExpr(expr: HasAttributeExpr, context: ExprDependencies): void {\n        context.properties.add(expr.name);\n    }\n\n    visitCallExpr(expr: CallExpr, context: ExprDependencies): void {\n        expr.args.forEach(childExpr => childExpr.accept(this, context));\n\n        switch (expr.op) {\n            case \"dynamic-properties\":\n                context.volatile = true;\n                break;\n            case \"feature-state\":\n                context.featureState = true;\n                context.properties.add(\"$state\");\n                context.properties.add(\"$id\");\n                break;\n            case \"id\":\n                context.properties.add(\"$id\");\n                break;\n            case \"zoom\":\n            case \"world-ppi-scale\":\n            case \"world-discrete-ppi-scale\":\n                context.properties.add(\"$zoom\");\n                break;\n            case \"geometry-type\":\n                context.properties.add(\"$geometryType\");\n                break;\n            default:\n                break;\n        }\n    }\n\n    visitMatchExpr(expr: MatchExpr, context: ExprDependencies): void {\n        expr.value.accept(this, context);\n        expr.branches.forEach(([_, branch]) => branch.accept(this, context));\n        expr.fallback.accept(this, context);\n    }\n\n    visitCaseExpr(expr: CaseExpr, context: ExprDependencies): void {\n        expr.branches.forEach(([condition, branch]) => {\n            condition.accept(this, context);\n            branch.accept(this, context);\n        });\n        expr.fallback.accept(this, context);\n    }\n\n    visitStepExpr(expr: StepExpr, context: ExprDependencies): void {\n        expr.input.accept(this, context);\n        expr.defaultValue.accept(this, context);\n        expr.stops.forEach(([_, value]) => value.accept(this, context));\n    }\n\n    visitInterpolateExpr(expr: InterpolateExpr, context: ExprDependencies): void {\n        expr.input.accept(this, context);\n        expr.stops.forEach(([_, value]) => value.accept(this, context));\n    }\n}\n\n/**\n * A type represeting JSON values.\n */\nexport type JsonValue = null | boolean | number | string | JsonObject | JsonArray;\n\n/**\n * A type representing JSON arrays.\n */\nexport interface JsonArray extends Array<JsonValue> {}\n\n/**\n * A type representing JSON objects.\n */\nexport interface JsonObject {\n    [name: string]: JsonValue;\n}\n\n/**\n * The JSON representation of an [[Expr]] object.\n */\nexport type JsonExpr = JsonArray;\n\nexport function isJsonExpr(v: any): v is JsonExpr {\n    return Array.isArray(v) && v.length > 0 && typeof v[0] === \"string\";\n}\n\n/**\n * Internal state needed by [[Expr.fromJSON]] to resolve `\"ref\"` expressions.\n * @hidden\n */\ninterface ReferenceResolverState {\n    definitions: Definitions;\n    lockedNames: Set<string>;\n    cache: Map<string, Expr>;\n}\n\n/**\n * The evaluation scope of an [[Expr]].\n */\nexport enum ExprScope {\n    /**\n     * The scope of an [[Expr]] used as value of an attribute.\n     */\n    Value,\n\n    /**\n     * The scope of an [[Expr]] used in a [[Technique]] `when` condition.\n     */\n    Condition,\n\n    /**\n     * The scope of an [[Expr]] used as dynamic property attribute value.\n     */\n    Dynamic\n}\n\n/**\n * Abstract class defining a shape of a [[Theme]]'s expression\n */\nexport abstract class Expr {\n    /**\n     * Tests of given value is an [[Expr]].\n     *\n     * @param value The object to test.\n     */\n    static isExpr(value: any): value is Expr {\n        return value instanceof Expr;\n    }\n\n    /**\n     * Creates an expression from the given `code`.\n     *\n     * @param code The code to parse.\n     * @returns The parsed [[Expr]].\n     * @deprecated\n     */\n    static parse(code: string): Expr | never {\n        const parser = new ExprParser(code);\n        const expr = parser.parse();\n        return expr;\n    }\n\n    /**\n     * Parse expression in JSON form.\n     *\n     * If `definitions` are defined, then references (`['ref', name]`) are resolved.\n     *\n     * Pass `definitionExprCache` to reuse `Expr` instances created from definitions across\n     * many `fromJSON` calls.\n     *\n     * @param node expression in JSON format to parse\n     * @param definitions optional set of definitions needed definition resolved by `ref` operator\n     * @param definitionExprCache optional cache of `Expr` instances derived from `definitions`\n     */\n    static fromJSON(\n        node: JsonValue,\n        definitions?: Definitions,\n        definitionExprCache?: Map<string, Expr>\n    ) {\n        const referenceResolverState: ReferenceResolverState | undefined =\n            definitions !== undefined\n                ? {\n                      definitions,\n                      lockedNames: new Set(),\n                      cache: definitionExprCache || new Map<string, Expr>()\n                  }\n                : undefined;\n\n        return parseNode(node, referenceResolverState);\n    }\n\n    private m_dependencies?: ExprDependencies;\n    private m_isDynamic?: boolean;\n\n    /**\n     * Evaluate an expression returning a [[Value]] object.\n     *\n     * @param env The [[Env]] used to lookup symbols.\n     * @param scope The evaluation scope. Defaults to [[ExprScope.Value]].\n     * @param cache A cache of previously computed results.\n     */\n    evaluate(\n        env: Env,\n        scope: ExprScope = ExprScope.Value,\n        cache?: Map<Expr, Value>\n    ): Value | never {\n        return this.accept(\n            exprEvaluator,\n            new ExprEvaluatorContext(exprEvaluator, env, scope, cache)\n        );\n    }\n\n    /**\n     * Instantiates this [[Expr]] by resolving references to the `get` and\n     * `has` operator using the given instantiation context.\n     *\n     * @param context The [[InstantationContext]] used to resolve names.\n     */\n    instantiate(context: InstantiationContext): Expr {\n        return this.accept(exprInstantiator, context);\n    }\n\n    /**\n     * Gets the dependencies of this [[Expr]].\n     */\n    dependencies(): ExprDependencies {\n        if (!this.m_dependencies) {\n            this.m_dependencies = ComputeExprDependencies.of(this);\n        }\n        return this.m_dependencies;\n    }\n\n    /**\n     * Create a unique object that is structurally equivalent to this [[Expr]].\n     *\n     * @param pool The [[ExprPool]] used to create a unique\n     * equivalent object of this [[Expr]].\n     */\n    intern(pool: ExprPool): Expr {\n        return pool.add(this);\n    }\n\n    toJSON(): JsonValue {\n        return new ExprSerializer().serialize(this);\n    }\n\n    /**\n     * Returns `true` if a dynamic execution context is required to evaluate this [[Expr]].\n     */\n    isDynamic(): boolean {\n        if (this.m_isDynamic === undefined) {\n            this.m_isDynamic = this.exprIsDynamic();\n        }\n        return this.m_isDynamic;\n    }\n\n    abstract accept<Result, Context>(\n        visitor: ExprVisitor<Result, Context>,\n        context: Context\n    ): Result;\n\n    /**\n     * Update the dynamic state of this [[Expr]].\n     *\n     * [[exprIsDynamic]] must never be called directly.\n     *\n     * @hidden\n     */\n    protected abstract exprIsDynamic(): boolean;\n}\n\n/**\n * @hidden\n */\nexport type RelationalOp = \"<\" | \">\" | \"<=\" | \">=\";\n\n/**\n * @hidden\n */\nexport type EqualityOp = \"~=\" | \"^=\" | \"$=\" | \"==\" | \"!=\";\n\n/**\n * @hidden\n */\nexport type BinaryOp = RelationalOp | EqualityOp;\n\n/**\n * Var expression.\n * @hidden\n */\nexport class VarExpr extends Expr {\n    constructor(readonly name: string) {\n        super();\n    }\n\n    /** @override */\n    accept<Result, Context>(visitor: ExprVisitor<Result, Context>, context: Context): Result {\n        return visitor.visitVarExpr(this, context);\n    }\n\n    /** @override */\n    protected exprIsDynamic() {\n        return false;\n    }\n}\n\nexport abstract class LiteralExpr extends Expr {\n    /**\n     * Create a [[LiteralExpr]] from the given value.\n     *\n     * @param value A constant value.\n     */\n    static fromValue(value: Value): Expr {\n        switch (typeof value) {\n            case \"boolean\":\n                return new BooleanLiteralExpr(value);\n            case \"number\":\n                return new NumberLiteralExpr(value);\n            case \"string\":\n                return new StringLiteralExpr(value);\n            case \"object\":\n                return value === null ? NullLiteralExpr.instance : new ObjectLiteralExpr(value);\n            default:\n                throw new Error(`failed to create a literal from '${value}'`);\n        } // switch\n    }\n\n    abstract get value(): Value;\n\n    /** @override */\n    protected exprIsDynamic() {\n        return false;\n    }\n}\n\n/**\n * Null literal expression.\n * @hidden\n */\nexport class NullLiteralExpr extends LiteralExpr {\n    static instance = new NullLiteralExpr();\n    /** @override */\n    readonly value: Value = null;\n\n    protected constructor() {\n        super();\n    }\n\n    /** @override */\n    accept<Result, Context>(visitor: ExprVisitor<Result, Context>, context: Context): Result {\n        return visitor.visitNullLiteralExpr(this, context);\n    }\n\n    /** @override */\n    protected exprIsDynamic() {\n        return false;\n    }\n}\n\n/**\n * Boolean literal expression.\n * @hidden\n */\nexport class BooleanLiteralExpr extends LiteralExpr {\n    constructor(readonly value: boolean) {\n        super();\n    }\n\n    /** @override */\n    accept<Result, Context>(visitor: ExprVisitor<Result, Context>, context: Context): Result {\n        return visitor.visitBooleanLiteralExpr(this, context);\n    }\n}\n\n/**\n * Number literal expression.\n * @hidden\n */\nexport class NumberLiteralExpr extends LiteralExpr {\n    constructor(readonly value: number) {\n        super();\n    }\n\n    /** @override */\n    accept<Result, Context>(visitor: ExprVisitor<Result, Context>, context: Context): Result {\n        return visitor.visitNumberLiteralExpr(this, context);\n    }\n}\n\n/**\n * String literal expression.\n * @hidden\n */\nexport class StringLiteralExpr extends LiteralExpr {\n    private m_promotedValue?: RGBA | Pixels | null;\n\n    constructor(readonly value: string) {\n        super();\n    }\n\n    /**\n     * Returns the value of parsing this string as [[RGBA]] or [[Pixels]] constant.\n     */\n    get promotedValue(): RGBA | Pixels | undefined {\n        if (this.m_promotedValue === undefined) {\n            this.m_promotedValue = RGBA.parse(this.value) ?? Pixels.parse(this.value) ?? null;\n        }\n        return this.m_promotedValue ?? undefined;\n    }\n\n    /** @override */\n    accept<Result, Context>(visitor: ExprVisitor<Result, Context>, context: Context): Result {\n        return visitor.visitStringLiteralExpr(this, context);\n    }\n}\n\n/**\n * Object literal expression.\n * @hidden\n */\nexport class ObjectLiteralExpr extends LiteralExpr {\n    constructor(readonly value: object) {\n        super();\n    }\n\n    get isArrayLiteral() {\n        return Array.isArray(this.value);\n    }\n\n    /** @override */\n    accept<Result, Context>(visitor: ExprVisitor<Result, Context>, context: Context): Result {\n        return visitor.visitObjectLiteralExpr(this, context);\n    }\n}\n\n/**\n * A has expression with an attribute, for example `has(ref)`.\n * @hidden\n */\nexport class HasAttributeExpr extends Expr {\n    constructor(readonly name: string) {\n        super();\n    }\n\n    /** @override */\n    accept<Result, Context>(visitor: ExprVisitor<Result, Context>, context: Context): Result {\n        return visitor.visitHasAttributeExpr(this, context);\n    }\n\n    /** @override */\n    protected exprIsDynamic() {\n        return false;\n    }\n}\n\n/**\n * @hidden\n */\nexport class CallExpr extends Expr {\n    descriptor?: OperatorDescriptor;\n\n    constructor(readonly op: string, readonly args: Expr[]) {\n        super();\n    }\n\n    /**\n     * Returns the child nodes of this [[Expr]].\n     * @deprecated\n     */\n    get children() {\n        return this.args;\n    }\n\n    /** @override */\n    accept<Result, Context>(visitor: ExprVisitor<Result, Context>, context: Context): Result {\n        return visitor.visitCallExpr(this, context);\n    }\n\n    /** @override */\n    protected exprIsDynamic() {\n        const descriptor = this.descriptor || ExprEvaluator.getOperator(this.op);\n\n        if (descriptor && descriptor.isDynamicOperator && descriptor.isDynamicOperator(this)) {\n            return true;\n        }\n\n        return this.args.some(e => e.isDynamic());\n    }\n}\n\n/**\n * @hidden\n */\nexport type MatchLabel = number | string | number[] | string[];\n\n/**\n * @hidden\n */\nexport class MatchExpr extends Expr {\n    /**\n     * Tests if the given JSON node is a valid label for the `\"match\"` operator.\n     *\n     * @param node A JSON value.\n     */\n    static isValidMatchLabel(node: JsonValue): node is MatchLabel {\n        switch (typeof node) {\n            case \"number\":\n            case \"string\":\n                return true;\n            case \"object\":\n                if (!Array.isArray(node) || node.length === 0) {\n                    return false;\n                }\n                const elementTy = typeof node[0];\n                if (elementTy === \"number\" || elementTy === \"string\") {\n                    return node.every(t => typeof t === elementTy);\n                }\n                return false;\n            default:\n                return false;\n        } // switch\n    }\n\n    constructor(\n        readonly value: Expr,\n        readonly branches: Array<[MatchLabel, Expr]>,\n        readonly fallback: Expr\n    ) {\n        super();\n    }\n\n    /** @override */\n    accept<Result, Context>(visitor: ExprVisitor<Result, Context>, context: Context): Result {\n        return visitor.visitMatchExpr(this, context);\n    }\n\n    /** @override */\n    protected exprIsDynamic() {\n        return (\n            this.value.isDynamic() ||\n            this.branches.some(([_, branch]) => branch.isDynamic()) ||\n            this.fallback.isDynamic()\n        );\n    }\n}\n\n/**\n * @hidden\n */\nexport class CaseExpr extends Expr {\n    constructor(readonly branches: Array<[Expr, Expr]>, readonly fallback: Expr) {\n        super();\n    }\n\n    /** @override */\n    accept<Result, Context>(visitor: ExprVisitor<Result, Context>, context: Context): Result {\n        return visitor.visitCaseExpr(this, context);\n    }\n\n    /** @override */\n    protected exprIsDynamic() {\n        return (\n            this.branches.some(([cond, branch]) => cond.isDynamic() || branch.isDynamic()) ||\n            this.fallback.isDynamic()\n        );\n    }\n}\n\n/**\n * @hidden\n */\nexport class StepExpr extends Expr {\n    constructor(\n        readonly input: Expr,\n        readonly defaultValue: Expr,\n        readonly stops: Array<[number, Expr]>\n    ) {\n        super();\n    }\n\n    /** @override */\n    accept<Result, Context>(visitor: ExprVisitor<Result, Context>, context: Context): Result {\n        return visitor.visitStepExpr(this, context);\n    }\n\n    /** @override */\n    protected exprIsDynamic(): boolean {\n        return (\n            this.input.isDynamic() ||\n            this.defaultValue.isDynamic() ||\n            this.stops.some(([_, value]) => value.isDynamic())\n        );\n    }\n}\n\n/**\n * The type of the interpolation mode.\n * @hidden\n */\nexport type InterpolateMode = [\"discrete\"] | [\"linear\"] | [\"cubic\"] | [\"exponential\", number];\n\n/**\n * @hidden\n */\nexport class InterpolateExpr extends Expr {\n    constructor(\n        readonly mode: InterpolateMode,\n        readonly input: Expr,\n        readonly stops: Array<[number, Expr]>\n    ) {\n        super();\n    }\n\n    /** @override */\n    accept<Result, Context>(visitor: ExprVisitor<Result, Context>, context: Context): Result {\n        return visitor.visitInterpolateExpr(this, context);\n    }\n\n    /** @override */\n    protected exprIsDynamic(): boolean {\n        return this.input.isDynamic() || this.stops.some(([_, value]) => value.isDynamic());\n    }\n}\n\n/**\n * @hidden\n */\nclass ExprSerializer implements ExprVisitor<JsonValue, void> {\n    serialize(expr: Expr): JsonValue {\n        return expr.accept(this, undefined);\n    }\n\n    visitNullLiteralExpr(expr: NullLiteralExpr, context: void): JsonValue {\n        return null;\n    }\n\n    visitBooleanLiteralExpr(expr: BooleanLiteralExpr, context: void): JsonValue {\n        return expr.value;\n    }\n\n    visitNumberLiteralExpr(expr: NumberLiteralExpr, context: void): JsonValue {\n        return expr.value;\n    }\n\n    visitStringLiteralExpr(expr: StringLiteralExpr, context: void): JsonValue {\n        return expr.value;\n    }\n\n    visitObjectLiteralExpr(expr: ObjectLiteralExpr, context: void): JsonValue {\n        if (expr.value instanceof THREE.Vector2) {\n            return [\"make-vector\", expr.value.x, expr.value.y];\n        } else if (expr.value instanceof THREE.Vector3) {\n            return [\"make-vector\", expr.value.x, expr.value.y, expr.value.z];\n        } else if (expr.value instanceof THREE.Vector4) {\n            return [\"make-vector\", expr.value.x, expr.value.y, expr.value.z, expr.value.w];\n        }\n        return [\"literal\", expr.value as JsonObject];\n    }\n\n    visitVarExpr(expr: VarExpr, context: void): JsonValue {\n        return [\"get\", expr.name];\n    }\n\n    visitHasAttributeExpr(expr: HasAttributeExpr, context: void): JsonValue {\n        return [\"has\", expr.name];\n    }\n\n    visitCallExpr(expr: CallExpr, context: void): JsonValue {\n        return [expr.op, ...expr.args.map(childExpr => this.serialize(childExpr))];\n    }\n\n    visitMatchExpr(expr: MatchExpr, context: void): JsonValue {\n        const branches: JsonValue[] = [];\n        for (const [label, body] of expr.branches) {\n            branches.push(label, this.serialize(body));\n        }\n        return [\"match\", this.serialize(expr.value), ...branches, this.serialize(expr.fallback)];\n    }\n\n    visitCaseExpr(expr: CaseExpr, context: void): JsonValue {\n        const branches: JsonValue[] = [];\n        for (const [condition, body] of expr.branches) {\n            branches.push(this.serialize(condition), this.serialize(body));\n        }\n        return [\"case\", ...branches, this.serialize(expr.fallback)];\n    }\n\n    visitStepExpr(expr: StepExpr, context: void): JsonValue {\n        const result: JsonArray = [\"step\"];\n        result.push(this.serialize(expr.input));\n        result.push(this.serialize(expr.defaultValue));\n        expr.stops.forEach(([key, value]) => {\n            result.push(key);\n            result.push(this.serialize(value));\n        });\n        return result;\n    }\n\n    visitInterpolateExpr(expr: InterpolateExpr, context: void): JsonValue {\n        const result: JsonArray = [\"interpolate\", expr.mode];\n        result.push(this.serialize(expr.input));\n        expr.stops.forEach(([key, value]) => {\n            result.push(key);\n            result.push(this.serialize(value));\n        });\n        return result;\n    }\n}\n\nfunction parseNode(\n    node: JsonValue,\n    referenceResolverState: ReferenceResolverState | undefined\n): Expr {\n    if (Array.isArray(node)) {\n        return parseCall(node, referenceResolverState);\n    } else if (node === null) {\n        return NullLiteralExpr.instance;\n    } else if (typeof node === \"boolean\") {\n        return new BooleanLiteralExpr(node);\n    } else if (typeof node === \"number\") {\n        return new NumberLiteralExpr(node);\n    } else if (typeof node === \"string\") {\n        return new StringLiteralExpr(node);\n    }\n    throw new Error(`failed to create expression from: ${JSON.stringify(node)}`);\n}\n\nfunction parseCall(node: JsonArray, referenceResolverState?: ReferenceResolverState): Expr {\n    const op = node[0];\n\n    if (typeof op !== \"string\") {\n        throw new Error(\"expected a builtin function name\");\n    }\n\n    switch (op) {\n        case \"!has\":\n        case \"!in\":\n            return new CallExpr(\"!\", [parseCall([op.slice(1), ...node.slice(1)])]);\n\n        case \"ref\":\n            return resolveReference(node, referenceResolverState);\n\n        case \"get\":\n            return parseGetExpr(node, referenceResolverState);\n\n        case \"has\":\n            return parseHasExpr(node, referenceResolverState);\n\n        case \"literal\":\n            return parseLiteralExpr(node);\n\n        case \"match\":\n            return parseMatchExpr(node, referenceResolverState);\n\n        case \"case\":\n            return parseCaseExpr(node, referenceResolverState);\n\n        case \"interpolate\":\n            return parseInterpolateExpr(node, referenceResolverState);\n\n        case \"step\":\n            return parseStepExpr(node, referenceResolverState);\n\n        default:\n            return makeCallExpr(op, node, referenceResolverState);\n    } // switch\n}\n\nfunction parseGetExpr(node: JsonArray, referenceResolverState: ReferenceResolverState | undefined) {\n    if (node[2] !== undefined) {\n        return makeCallExpr(\"get\", node, referenceResolverState);\n    }\n    const name = node[1];\n    if (typeof name !== \"string\") {\n        throw new Error(`expected the name of an attribute`);\n    }\n    return new VarExpr(name);\n}\n\nfunction parseHasExpr(node: JsonArray, referenceResolverState: ReferenceResolverState | undefined) {\n    if (node[2] !== undefined) {\n        return makeCallExpr(\"has\", node, referenceResolverState);\n    }\n    const name = node[1];\n    if (typeof name !== \"string\") {\n        throw new Error(`expected the name of an attribute`);\n    }\n    return new HasAttributeExpr(name);\n}\n\nfunction parseLiteralExpr(node: JsonArray) {\n    const obj = node[1];\n    if (obj === null || typeof obj !== \"object\") {\n        throw new Error(\"expected an object or array literal\");\n    }\n    return new ObjectLiteralExpr(obj);\n}\n\nfunction parseMatchExpr(\n    node: JsonArray,\n    referenceResolverState: ReferenceResolverState | undefined\n) {\n    if (node.length < 4) {\n        throw new Error(\"not enough arguments\");\n    }\n    if (!(node.length % 2)) {\n        throw new Error(\"fallback is missing in 'match' expression\");\n    }\n    const value = parseNode(node[1], referenceResolverState);\n    const conditions: Array<[MatchLabel, Expr]> = [];\n    for (let i = 2; i < node.length - 1; i += 2) {\n        const label = node[i];\n        if (!MatchExpr.isValidMatchLabel(label)) {\n            throw new Error(`'${JSON.stringify(label)}' is not a valid label for 'match'`);\n        }\n        const expr = parseNode(node[i + 1], referenceResolverState);\n        conditions.push([label, expr]);\n    }\n    const fallback = parseNode(node[node.length - 1], referenceResolverState);\n    return new MatchExpr(value, conditions, fallback);\n}\n\nfunction parseCaseExpr(\n    node: JsonArray,\n    referenceResolverState: ReferenceResolverState | undefined\n) {\n    if (node.length < 3) {\n        throw new Error(\"not enough arguments\");\n    }\n    if (node.length % 2) {\n        throw new Error(\"fallback is missing in 'case' expression\");\n    }\n    const branches: Array<[Expr, Expr]> = [];\n    for (let i = 1; i < node.length - 1; i += 2) {\n        const condition = parseNode(node[i], referenceResolverState);\n        const expr = parseNode(node[i + 1], referenceResolverState);\n        branches.push([condition, expr]);\n    }\n    const caseFallback = parseNode(node[node.length - 1], referenceResolverState);\n    return new CaseExpr(branches, caseFallback);\n}\n\nfunction isInterpolationMode(object: any): object is InterpolateMode {\n    if (!Array.isArray(object)) {\n        return false;\n    }\n    switch (object[0]) {\n        case \"discrete\":\n        case \"linear\":\n        case \"cubic\":\n        case \"exponential\":\n            return true;\n        default:\n            return false;\n    }\n}\n\nfunction parseInterpolateExpr(\n    node: JsonArray,\n    referenceResolverState: ReferenceResolverState | undefined\n) {\n    const mode: InterpolateMode = node[1] as any;\n    if (!isInterpolationMode(mode)) {\n        throw new Error(\"expected an interpolation type\");\n    }\n    if (mode[0] === \"exponential\" && typeof mode[1] !== \"number\") {\n        throw new Error(\"expected the base of the exponential interpolation\");\n    }\n    const input = node[2] ? parseNode(node[2], referenceResolverState) : undefined;\n    if (!Expr.isExpr(input)) {\n        throw new Error(`expected the input of the interpolation`);\n    }\n    if (node.length === 3 || !(node.length % 2)) {\n        throw new Error(\"invalid number of samples\");\n    }\n\n    const stops: Array<[number, Expr]> = [];\n    for (let i = 3; i < node.length - 1; i += 2) {\n        const key = node[i] as number;\n        const value = parseNode(node[i + 1], referenceResolverState);\n        stops.push([key, value]);\n    }\n    return new InterpolateExpr(mode, input, stops);\n}\n\nfunction parseStepExpr(\n    node: JsonArray,\n    referenceResolverState: ReferenceResolverState | undefined\n) {\n    if (node.length < 2) {\n        throw new Error(\"expected the input of the 'step' operator\");\n    }\n    if (node.length < 3 || !(node.length % 2)) {\n        throw new Error(\"not enough arguments\");\n    }\n    const input = parseNode(node[1], referenceResolverState);\n    const defaultValue = parseNode(node[2], referenceResolverState);\n    const stops: Array<[number, Expr]> = [];\n    for (let i = 3; i < node.length; i += 2) {\n        const key = node[i] as number;\n        const value = parseNode(node[i + 1], referenceResolverState);\n        stops.push([key, value]);\n    }\n    return new StepExpr(input, defaultValue, stops);\n}\n\nfunction makeCallExpr(\n    op: string,\n    node: any[],\n    referenceResolverState?: ReferenceResolverState\n): Expr {\n    return new CallExpr(\n        op,\n        node.slice(1).map(childExpr => parseNode(childExpr, referenceResolverState))\n    );\n}\n\nfunction resolveReference(node: JsonArray, referenceResolverState?: ReferenceResolverState) {\n    if (typeof node[1] !== \"string\") {\n        throw new Error(`expected the name of an attribute`);\n    }\n    if (referenceResolverState === undefined) {\n        throw new Error(`ref used with no definitions`);\n    }\n    const name = node[1] as string;\n\n    if (referenceResolverState.lockedNames.has(name)) {\n        throw new Error(`circular referene to '${name}'`);\n    }\n\n    if (!(name in referenceResolverState.definitions)) {\n        throw new Error(`definition '${name}' not found`);\n    }\n\n    const cachedEntry = referenceResolverState.cache.get(name);\n    if (cachedEntry !== undefined) {\n        return cachedEntry;\n    }\n    let definitionEntry = referenceResolverState.definitions[name] as any;\n    let result: Expr;\n    if (isLiteralDefinition(definitionEntry)) {\n        return Expr.fromJSON(definitionEntry);\n    } else if (isBoxedDefinition(definitionEntry)) {\n        if (isInterpolatedPropertyDefinition(definitionEntry.value)) {\n            // found a reference to an interpolation using\n            // the deprecated object-like syntax.\n            return Expr.fromJSON(interpolatedPropertyDefinitionToJsonExpr(definitionEntry.value));\n        } else if (isJsonExpr(definitionEntry.value)) {\n            definitionEntry = definitionEntry.value;\n        } else {\n            return Expr.fromJSON(definitionEntry.value);\n        }\n    }\n\n    if (isJsonExpr(definitionEntry)) {\n        referenceResolverState.lockedNames.add(name);\n        try {\n            result = parseNode(definitionEntry, referenceResolverState);\n        } finally {\n            referenceResolverState.lockedNames.delete(name);\n        }\n    } else {\n        throw new Error(`unsupported definition ${name}`);\n    }\n    referenceResolverState.cache.set(name, result);\n    return result;\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from \"./lib/rendering/FontCatalog\";\nexport * from \"./lib/rendering/GlyphData\";\nexport * from \"./lib/rendering/TextStyle\";\nexport * from \"./lib/rendering/TextBufferObject\";\nexport * from \"./lib/TextCanvas\";\n\nexport * from \"./lib/utils/ContextualArabicConverter\";\nexport * from \"./lib/utils/MaterialUtils\";\nexport * from \"./lib/utils/TypesettingUtils\";\nexport * from \"./lib/utils/UnicodeUtils\";\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeoCoordinatesLike, isGeoCoordinatesLike } from \"./GeoCoordinatesLike\";\nimport { GeoPointLike, isGeoPointLike } from \"./GeoPointLike\";\nimport { isLatLngLike, LatLngLike } from \"./LatLngLike\";\n\nimport * as THREE from \"three\";\n\n/**\n * Represents an object in different geo coordinate formats\n */\nexport type GeoCoordLike = GeoPointLike | GeoCoordinatesLike | LatLngLike;\n\n/**\n * `GeoCoordinates` is used to represent geo positions.\n */\nexport class GeoCoordinates implements GeoCoordinatesLike {\n    /**\n     * Returns a `GeoCoordinates` from the given latitude, longitude, and optional altitude.\n     *\n     * @param latitude Latitude in degrees.\n     * @param longitude Longitude in degrees.\n     * @param altitude Altitude in meters.\n     */\n    static fromDegrees(latitude: number, longitude: number, altitude?: number): GeoCoordinates {\n        return new GeoCoordinates(latitude, longitude, altitude);\n    }\n\n    /**\n     * Returns a `GeoCoordinates` from the given latitude, longitude, and optional altitude.\n     *\n     * @param latitude Latitude in radians.\n     * @param longitude Longitude in radians.\n     * @param altitude Altitude in meters.\n     */\n    static fromRadians(latitude: number, longitude: number, altitude?: number): GeoCoordinates {\n        return new GeoCoordinates(\n            THREE.MathUtils.radToDeg(latitude),\n            THREE.MathUtils.radToDeg(longitude),\n            altitude\n        );\n    }\n\n    /**\n     * Creates a [[GeoCoordinates]] from a [[LatLngLike]] literal.\n     * ```typescript\n     * const center = { lat: 53.3, lng: 13.4 };\n     * mapView.geoCenter = GeoCoordinates.fromLatLng(center);\n     * ```\n     * @param latLng A [[LatLngLike]] object literal.\n     */\n    static fromLatLng(latLng: LatLngLike) {\n        return new GeoCoordinates(latLng.lat, latLng.lng);\n    }\n\n    /**\n     * Creates a [[GeoCoordinates]] from a [[GeoPointLike]] tuple.\n     *\n     * Example:\n     * ```typescript\n     * mapView.geoCenter = GeoCoordinates.fromGeoPoint([longitude, latitude]);\n     *\n     * let geoCoords: number[] = ...;\n     *\n     * if (isGeoPointLike(geoCoords)) {\n     *     const p = GeoCoordinates.fromGeoPoint(geoCoords);\n     * }\n     * ```\n     * @param geoPoint An [[Array]] of at least two elements following the order\n     * longitude, latitude, altitude.\n     */\n    static fromGeoPoint(geoPoint: GeoPointLike): GeoCoordinates {\n        return new GeoCoordinates(geoPoint[1], geoPoint[0], geoPoint[2]);\n    }\n\n    /**\n     * Creates a [[GeoCoordinates]] from different types of geo coordinate objects.\n     *\n     * Example:\n     * ```typescript\n     * const fromGeoPointLike = GeoCoordinates.fromObject([longitude, latitude]);\n     * const fromGeoCoordinateLike = GeoCoordinates.fromObject({ longitude, latitude });\n     * const fromGeoCoordinate = GeoCoordinates.fromObject(new GeoCoordinates(latitude, longitude));\n     * const fromLatLngLike = GeoCoordinates.fromObject({ lat: latitude , lng: longitude });\n     * ```\n     *\n     * @param geoPoint Either [[GeoPointLike]], [[GeoCoordinatesLike]]\n     * or [[LatLngLike]] object literal.\n     */\n    static fromObject(geoPoint: GeoCoordLike): GeoCoordinates {\n        if (isGeoPointLike(geoPoint)) {\n            return GeoCoordinates.fromGeoPoint(geoPoint);\n        } else if (isGeoCoordinatesLike(geoPoint)) {\n            return GeoCoordinates.fromDegrees(\n                geoPoint.latitude,\n                geoPoint.longitude,\n                geoPoint.altitude\n            );\n        } else if (isLatLngLike(geoPoint)) {\n            return GeoCoordinates.fromDegrees(geoPoint.lat, geoPoint.lng);\n        }\n\n        throw new Error(\"Invalid input coordinate format.\");\n    }\n\n    /**\n     * Creates a `GeoCoordinates` from the given latitude, longitude, and optional altitude.\n     *\n     * @param latitude Latitude in degrees.\n     * @param longitude Longitude in degrees.\n     * @param altitude Altitude in meters.\n     */\n    constructor(public latitude: number, public longitude: number, public altitude?: number) {}\n\n    /**\n     * Returns the latitude in radians.\n     */\n    get latitudeInRadians(): number {\n        return THREE.MathUtils.degToRad(this.latitude);\n    }\n\n    /**\n     * Returns the longitude in radians.\n     */\n    get longitudeInRadians(): number {\n        return THREE.MathUtils.degToRad(this.longitude);\n    }\n\n    /**\n     * Returns the latitude in degrees.\n     * @deprecated Use the [[latitude]] property instead.\n     */\n    get latitudeInDegrees(): number {\n        return this.latitude;\n    } // compat api\n\n    /**\n     * Returns the longitude in degrees.\n     * @deprecated Use the [[longitude]] property instead.\n     */\n    get longitudeInDegrees(): number {\n        return this.longitude;\n    } // compat api\n\n    /**\n     * The latitude in the degrees.\n     */\n    get lat() {\n        return this.latitude;\n    }\n\n    /**\n     * The longitude in the degrees.\n     */\n    get lng() {\n        return this.longitude;\n    }\n\n    /**\n     * Returns `true` if this `GeoCoordinates` is valid; returns `false` otherwise.\n     */\n    isValid(): boolean {\n        return !isNaN(this.latitude) && !isNaN(this.longitude);\n    }\n\n    /**\n     * Returns the normalized `GeoCoordinates`.\n     */\n    normalized(): GeoCoordinates {\n        let { latitude, longitude } = this;\n\n        if (isNaN(latitude) || isNaN(longitude)) {\n            return this;\n        }\n\n        if (latitude > 90) {\n            let wrapped = (latitude + 90) % 360;\n            if (wrapped >= 180) {\n                longitude += 180;\n                wrapped = 360 - wrapped;\n            }\n\n            latitude = wrapped - 90;\n        }\n\n        if (latitude < -90) {\n            let wrapped = (latitude - 90) % 360;\n            if (wrapped <= -180) {\n                longitude += 180;\n                wrapped = -360 - wrapped;\n            }\n\n            latitude = wrapped + 90;\n        }\n\n        if (longitude < -180 || longitude > 180) {\n            const sign = Math.sign(longitude);\n            longitude = (((longitude % 360) + 180 * sign) % 360) - 180 * sign;\n        }\n\n        if (latitude === this.latitude && longitude === this.longitude) {\n            return this;\n        }\n\n        return new GeoCoordinates(latitude, longitude, this.altitude);\n    }\n\n    /**\n     * Returns `true` if this `GeoCoordinates` is equal to the other.\n     *\n     * @param other GeoCoordinatesLike to compare to.\n     */\n    equals(other: GeoCoordinatesLike): boolean {\n        return (\n            this.latitude === other.latitude &&\n            this.longitude === other.longitude &&\n            this.altitude === other.altitude\n        );\n    }\n\n    /**\n     * Copy values from the other.\n     *\n     * @param other GeoCoordinatesLike to copy all values from.\n     */\n    copy(other: GeoCoordinatesLike): GeoCoordinates {\n        this.latitude = other.latitude;\n        this.longitude = other.longitude;\n        this.altitude = other.altitude;\n        return this;\n    }\n\n    /**\n     * Clones this `GeoCoordinates`.\n     */\n    clone(): GeoCoordinates {\n        return new GeoCoordinates(this.latitude, this.longitude, this.altitude);\n    }\n\n    /**\n     * Returns this [[GeoCoordinates]] as [[LatLngLike]] literal.\n     */\n    toLatLng(): LatLngLike {\n        return { lat: this.latitude, lng: this.longitude };\n    }\n\n    /**\n     * Converts this [[GeoCoordinates]] to a [[GeoPointLike]].\n     */\n    toGeoPoint(): GeoPointLike {\n        return this.altitude !== undefined\n            ? [this.longitude, this.latitude, this.altitude]\n            : [this.longitude, this.latitude];\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Box3Like } from \"./Box3Like\";\nimport { Vector3Like } from \"./Vector3Like\";\n\nimport * as THREE from \"three\";\n\nexport namespace MathUtils {\n    /**\n     * Creates a new empty bounding box.\n     * @deprecated\n     */\n    export function newEmptyBox3(): Box3Like {\n        return {\n            min: { x: Infinity, y: Infinity, z: Infinity },\n            max: { x: -Infinity, y: -Infinity, z: -Infinity }\n        };\n    }\n\n    /**\n     * Creates a new [Vector3Like] instance.\n     *\n     * @param x The x component.\n     * @param y The y component.\n     * @param z The z component.\n     */\n    export function newVector3(x: number, y: number, z: number): Vector3Like;\n\n    /**\n     * Creates a new [Vector3Like] instance.\n     *\n     * @param x The x component.\n     * @param y The y component.\n     * @param z The z component.\n     * @param v The resulting [Vector3Like] instance.\n     */\n    export function newVector3<Vector extends Vector3Like>(\n        x: number,\n        y: number,\n        z: number,\n        v: Vector\n    ): Vector;\n\n    /**\n     * Set the components of the given [Vector3Like] instance.\n     *\n     * @param x The x component.\n     * @param y The y component.\n     * @param z The z component.\n     * @param v The [Vector3Like]\n     */\n    export function newVector3(x: number, y: number, z: number, v?: Vector3Like): Vector3Like {\n        if (v === undefined) {\n            return { x, y, z };\n        }\n        v.x = x;\n        v.y = y;\n        v.z = z;\n        return v;\n    }\n\n    /**\n     * Copies the vector across.\n     *\n     * @param from The vector to copy from.\n     * @param to The resulting [Vector3Like] instance, with the contents copied from from\n     */\n    export function copyVector3<Vector extends Vector3Like>(from: Vector3Like, to: Vector): Vector {\n        to.x = from.x;\n        to.y = from.y;\n        to.z = from.z;\n        return to;\n    }\n\n    /**\n     * Converts an angle measured in degrees to an equivalent value in radians.\n     *\n     * @param degrees Value in degrees.\n     * @returns Value in radians.\n     * @deprecated use THREE.MathUtils.degToRad instead\n     */\n    export const degToRad = THREE.MathUtils.degToRad;\n\n    /**\n     * Converts an angle measured in radians to an equivalent value in degrees.\n     *\n     * @param degrees Value in radians.\n     * @returns Value in degrees.\n     * @deprecated\n     */\n    export const radToDeg = THREE.MathUtils.radToDeg;\n\n    /**\n     * Ensures that input value fits in a given range.\n     *\n     * @param value The value to be clamped.\n     * @param min Minimum value.\n     * @param max Maximum value.\n     * @returns Clamped value.\n     * @deprecated\n     */\n    export const clamp = THREE.MathUtils.clamp;\n\n    /**\n     * Normalize angle in degrees to range `[0, 360)`.\n     *\n     * @param a Angle in degrees.\n     * @returns Angle in degrees in range `[0, 360)`.\n     */\n    export function normalizeAngleDeg(a: number): number {\n        a = a % 360;\n        if (a < 0) {\n            a = a + 360;\n        }\n        return a;\n    }\n\n    /**\n     * Normalize latitude angle in degrees to range `[-180, 180]`.\n     *\n     * @param a Latitude angle in degrees.\n     * @returns Latitude angle in degrees in range `[-180, 180]`.\n     */\n    export function normalizeLongitudeDeg(a: number): number {\n        a = normalizeAngleDeg(a);\n        if (a > 180) {\n            a = a - 360;\n        }\n        return a;\n    }\n\n    /**\n     * Return the minimal delta between angles `a` and `b` given in degrees.\n     *\n     * Equivalent to `a - b` in coordinate space with exception vector direction can be reversed\n     * that if `abs(a-b) > 180` because trip is shorter in 'other' direction.\n     *\n     * Useful when interpolating between `b` and `a` in angle space.\n     *\n     * @param a Start angle in degrees.\n     * @param b End angle in degrees.\n     * @returns Angle that that satisfies condition `a - b - d = 0` in angle space.\n     */\n    export function angleDistanceDeg(a: number, b: number): number {\n        a = normalizeAngleDeg(a);\n        b = normalizeAngleDeg(b);\n\n        const d = a - b;\n        if (d > 180) {\n            return d - 360;\n        } else if (d <= -180) {\n            return d + 360;\n        } else {\n            return d;\n        }\n    }\n\n    /**\n     * Interpolate linearly between two angles given in degrees.\n     *\n     * @param p0 Angle from in degrees\n     * @param p1 Angle to in degrees\n     * @param t Interpolation factor (alpha), in range `0-1`.\n     */\n    export function interpolateAnglesDeg(p0: number, p1: number, t: number): number {\n        // hand crafted version,\n        // see stack for maybe better versions:\n        //    https://stackoverflow.com/questions/2708476/rotation-interpolation\n\n        const d = angleDistanceDeg(p1, p0);\n        const r = (p0 + d * t) % 360;\n        return r;\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { assert } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\n\n/**\n * Values for boolean shader defines\n */\nexport const DEFINE_BOOL_TRUE = \"\";\nexport const DEFINE_BOOL_FALSE = undefined;\n\n/**\n * Insert shader includes after another shader include.\n *\n * @param shaderContent Original string.\n * @param shaderName String to append to.\n * @param insertedShaderName String to append after string `shaderA`.\n * @param addTab If `true`, a tab character will be inserted before `shaderB`.\n */\nexport function insertShaderInclude(\n    shaderContent: string,\n    shaderName: string,\n    insertedShaderName: string,\n    addTab?: boolean\n): string {\n    const tabChar = addTab === true ? \"\\t\" : \"\";\n\n    const result = shaderContent.replace(\n        `#include <${shaderName}>`,\n        `#include <${shaderName}>\n${tabChar}#include <${insertedShaderName}>`\n    );\n    return result;\n}\n\nexport interface ForcedBlending {\n    /**\n     * This material has `blending` always enabled regardless of `opacity` setting.s\n     */\n    forcedBlending?: true;\n}\n\n/**\n * THREE.js is enabling blending only when transparent is `true` or when a blend mode\n * different than `NormalBlending` is set.\n * Since we don't want to set transparent to true and mess up the render order we set\n * `CustomBlending` with the same parameters as the `NormalBlending`.\n\n * @param material `Material` that should use blending\n * @note This function should not be used in frame update after material has been passed to WebGL.\n * In such cases use [[enableBlending]] instead.\n */\nexport function enforceBlending(\n    material: (THREE.Material | THREE.ShaderMaterialParameters) & ForcedBlending\n) {\n    if (material.transparent) {\n        // Nothing to do\n        return;\n    }\n\n    enableBlending(material);\n    material.forcedBlending = true;\n}\n\n/**\n * Enable alpha blending using THREE.CustomBlending setup.\n *\n * Function enables blending using one of predefined modes, for both color and alpha components:\n * - Src: [[THREE.SrcAlphaFactor]], Dst: [[THREE.OneMinusSrcAlphaFactor]]\n * - Src: [[THREE.OneFactor]], Dst: [[THREE.OneMinusSrcAlphaFactor]]\n * The second blending equation is used when [[THREE.Material.premultipliedAlpha]] is enabled\n * for this material.\n * @note Blending mode change does not require material update.\n * @see THREE.Material.needsUpdate.\n * @param material The material or material parameters to modify.\n */\nexport function enableBlending(\n    material: (THREE.Material | THREE.ShaderMaterialParameters) & ForcedBlending\n) {\n    if (material.transparent || material.forcedBlending) {\n        // Nothing to do\n        return;\n    }\n\n    material.blending = THREE.CustomBlending;\n    if (material.premultipliedAlpha === true) {\n        material.blendSrc = THREE.OneFactor;\n        material.blendDst = THREE.OneMinusSrcAlphaFactor;\n        material.blendSrcAlpha = THREE.OneFactor;\n        material.blendDstAlpha = THREE.OneMinusSrcAlphaFactor;\n    } else {\n        material.blendSrc = THREE.SrcAlphaFactor;\n        material.blendDst = THREE.OneMinusSrcAlphaFactor;\n        material.blendSrcAlpha = THREE.OneFactor;\n        material.blendDstAlpha = THREE.OneMinusSrcAlphaFactor;\n    }\n}\n\n/**\n * Disable alpha blending using THREE.CustomBlending mode, switches to [[THREE.NormalBlending]].\n *\n * @note Blending mode change does not require material update.\n * @see THREE.Material.needsUpdate.\n * @see enableBlending.\n * @param material The material or material parameters to modify.\n */\nexport function disableBlending(\n    material: (THREE.Material | THREE.ShaderMaterialParameters) & ForcedBlending\n) {\n    if (material.transparent || material.forcedBlending) {\n        // Nothing to do\n        return;\n    }\n\n    material.blending = THREE.NormalBlending;\n}\n\n/**\n * Setup material shader _define_ using two allowable semantics.\n *\n * Function accepts two types of values for shader preprocessor _define_:\n * - [[boolean]], simple [[true]] or [[false]] which causes _define_ to be set with empty string,\n * such defines may be handled in the shader using __#ifdef__ semantics:\n * ```\n * #ifdef SOME_DEFINE && !defined(OTHER_DEFINE)\n * // do something\n * #endif\n * ```\n *\n * - [[number]] which sets _define_ to explicit value. You may use it to enable/disable some\n * code or even set compile time constants affecting shaders math:\n * ```\n * #if SOME_DEFINE_SWITCH && OTHER_DEFINE_SWITCH == 0\n * gl_FragColor = vec4(1, 1, 1, DEFINE_ALPHA)\n * #endif\n * ```\n * @note Setting _define_ with `false` value is not the same as setting is with number value of `0`.\n *\n * @param material The [[THREE.ShaderMaterial]] which shader _define_ will be set.\n * @param key Name of shader _define_ as used in shader, i.e. `USE_FOG`, `COLOR_ALPHA`, etc.\n * @param value The value to be set as number or boolean specifying if preprocessor define\n * should be defined or not.\n * @returns [[true]] if material has been forced to update (re-compile) due to define changes,\n * return [[false]] whenever define has not been changed.\n */\nexport function setShaderMaterialDefine(\n    material: THREE.ShaderMaterial,\n    key: string,\n    value: boolean | number\n): boolean {\n    assert(\n        material.defines !== undefined,\n        \"Do not use this function in ShaderMaterial derived c-tor.\"\n    );\n    const semanticValue = getShaderMaterialDefine(material, key);\n    const needsUpdate = value !== semanticValue;\n    // Nothing to change - early exit\n    if (!needsUpdate) {\n        return false;\n    }\n    setShaderDefine(material.defines, key, value);\n    material.needsUpdate = needsUpdate;\n    return true;\n}\n\n/**\n * Acquire value of [[THREE.ShaderMaterial]] GPU shader preprocessor define.\n *\n * The semantic used in entire engine assumes that preprocessor defines may have only binary\n * (defined / not defined) or numerical values, this ensures consistency in the shaders and\n * materials code.\n * @note If _define_ with [[key]] is _undefined_ function returns [[false]], if defined but\n * not numerical value it returns [[true]], otherwise returns number.\n * @see setShaderMaterialDefine.\n *\n * @param material The material which shader defines are accessed.\n * @param key The _define_ name (identifier).\n * @param fallbackValue The value returned when material `defines` are not initialized yet,\n * specified by default as [[false]], provide your own default if you expect numeric value.\n */\nexport function getShaderMaterialDefine(\n    material: THREE.ShaderMaterial,\n    key: string,\n    fallbackValue: boolean | number = false\n): boolean | number {\n    if (material.defines === undefined) {\n        return fallbackValue;\n    }\n    return getShaderDefine(material.defines, key);\n}\n\n/**\n * Sets new value of 'define' regardless of current value set.\n *\n * Update `defines` map with new key and value, if key is already occupied it overrides its value.\n * Helper function that may be used to setup [[THREE.ShaderMaterialParameters]] before\n * material is create (i.e. in c-tor).\n *\n * @param defines Shader `defines` stored in key-value map.\n * @param key The key used to identify _define_.\n * @param value The value to be stored.\n * @returns [[true]] if define has actually changed, false is stayed the same.\n * @see setShaderMaterialDefine.\n */\nexport function setShaderDefine(\n    defines: { [key: string]: any },\n    key: string,\n    value: boolean | number\n): boolean {\n    let updated = false;\n    if (typeof value === \"number\") {\n        updated = defines[key] !== value;\n        defines[key] = value;\n    } else if (value === true) {\n        updated = defines[key] !== DEFINE_BOOL_TRUE;\n        defines[key] = DEFINE_BOOL_TRUE;\n    } else if (value === false && defines[key] !== undefined) {\n        // Sets to DEFINE_BOOL_FALSE === undefined\n        delete defines[key];\n        updated = true;\n    }\n    return updated;\n}\n\n/**\n * Acquire shader 'define' value from `defines` map.\n *\n * If there is no value under [[key]] specified, function returns false, otherwise result is\n * true or numeric value if there is a number stored.\n * @param defines The `defines` map.\n * @param key The identifier of the _define_.\n */\nexport function getShaderDefine(defines: { [key: string]: any }, key: string): boolean | number {\n    const currentValue = defines[key];\n    const semanticValue =\n        currentValue === DEFINE_BOOL_FALSE\n            ? false\n            : currentValue === DEFINE_BOOL_TRUE\n            ? true\n            : currentValue;\n    return semanticValue;\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nimport {\n    GeoBox,\n    GeoCoordinates,\n    GeoCoordLike,\n    MathUtils,\n    Projection,\n    ProjectionType,\n    TileKey\n} from \"@here/harp-geoutils\";\nimport { EarthConstants } from \"@here/harp-geoutils/lib/projection/EarthConstants\";\nimport { MapMeshBasicMaterial, MapMeshStandardMaterial } from \"@here/harp-materials\";\nimport { assert, LoggerManager } from \"@here/harp-utils\";\nimport { ElevationProvider } from \"./ElevationProvider\";\nimport { LodMesh } from \"./geometry/LodMesh\";\nimport { MapView } from \"./MapView\";\nimport { getFeatureDataSize, TileFeatureData } from \"./Tile\";\n\nconst logger = LoggerManager.instance.create(\"MapViewUtils\");\n\n// Estimation of the size of an Object3D with all the simple properties, like matrices and flags.\n// There may be cases where it is possible to construct Object3Ds with considerable less memory\n// consumption, but this value is used to simplify the estimation.\nconst MINIMUM_OBJECT3D_SIZE_ESTIMATION = 1000;\n\nconst MINIMUM_ATTRIBUTE_SIZE_ESTIMATION = 56;\n\n/**\n * Zoom level to request terrain tiles for getting the height of the camera above terrain.\n */\nconst TERRAIN_ZOOM_LEVEL = 4;\n\n// Caching those for performance reasons.\nconst groundNormalPlanarProj = new THREE.Vector3(0, 0, 1);\nconst groundPlane = new THREE.Plane(groundNormalPlanarProj.clone());\nconst groundSphere = new THREE.Sphere(undefined, EarthConstants.EQUATORIAL_RADIUS);\nconst rayCaster = new THREE.Raycaster();\nconst epsilon = 1e-5;\n\n/**\n * Cached ThreeJS instances for realtime maths.\n */\nconst space = {\n    x: new THREE.Vector3(),\n    y: new THREE.Vector3(),\n    z: new THREE.Vector3()\n};\nconst tangentSpace = {\n    x: new THREE.Vector3(),\n    y: new THREE.Vector3(),\n    z: new THREE.Vector3()\n};\nconst cache = {\n    quaternions: [new THREE.Quaternion(), new THREE.Quaternion()],\n    vector3: [new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3()],\n    matrix4: [new THREE.Matrix4(), new THREE.Matrix4()],\n    transforms: [\n        {\n            xAxis: new THREE.Vector3(),\n            yAxis: new THREE.Vector3(),\n            zAxis: new THREE.Vector3(),\n            position: new THREE.Vector3()\n        }\n    ]\n};\n\n/**\n * Rounds a given zoom level up to the nearest integer value if it's close enough.\n *\n * The zoom level set in [[MapView]] after a zoom level target is given to [[MapView.lookAt]] or\n * [[MapControls]] never matches exactly the target due to the precision loss caused by the\n * conversion from zoom level to camera distance (done in [[MapView.lookAt]] and [[MapControls]])\n * and from distance back to zoom level (done at every frame on camera update).\n * As a result, given a fixed integer zoom level input, the final zoom level computed at every frame\n * may fall sometimes below the integer value and others above. This causes flickering since each\n * frame will use different tile levels and different style evaluations for object visibility.\n * See HARP-9673 and HARP-8523.\n * @param zoomLevel Input zoom level\n * @return The ceiling zoom level if input zoom level is close enough, otherwise the unmodified\n * input zoom level.\n */\nfunction snapToCeilingZoomLevel(zoomLevel: number) {\n    const eps = 1e-6;\n    const ceiling = Math.ceil(zoomLevel);\n    return ceiling - zoomLevel < eps ? ceiling : zoomLevel;\n}\n\nexport namespace MapViewUtils {\n    export const MAX_TILT_DEG = 89;\n    export const MAX_TILT_RAD = MAX_TILT_DEG * THREE.MathUtils.DEG2RAD;\n\n    /**\n     * The anti clockwise rotation of an object along the axes of its tangent space, with itself\n     * as origin.\n     */\n    export interface Attitude {\n        /**\n         * Rotation of the object along its vertical axis.\n         */\n        yaw: number;\n\n        /**\n         * Rotation of the object along its horizontal axis.\n         */\n        pitch: number;\n\n        /**\n         * Rotation of the object along its forward axis.\n         */\n        roll: number;\n    }\n\n    /**\n     * Describes estimated usage of memory on heap and GPU.\n     */\n    export interface MemoryUsage {\n        heapSize: number;\n        gpuSize: number;\n    }\n\n    /**\n     * Zooms and moves the map in such a way that the given target position remains at the same\n     * position after the zoom.\n     *\n     * @param mapView Instance of MapView.\n     * @param targetNDCx Target x position in NDC space.\n     * @param targetNDCy Target y position in NDC space.\n     * @param zoomLevel The desired zoom level.\n     * @param maxTiltAngle The maximum tilt angle to comply by, in globe projection, in radian.\n     */\n    export function zoomOnTargetPosition(\n        mapView: MapView,\n        targetNDCx: number,\n        targetNDCy: number,\n        zoomLevel: number,\n        maxTiltAngle: number = MAX_TILT_RAD\n    ): void {\n        const { elevationProvider, camera } = mapView;\n\n        // Use for now elevation at camera position. See getTargetAndDistance.\n        const elevation = elevationProvider\n            ? elevationProvider.getHeight(\n                  mapView.projection.unprojectPoint(camera.position),\n                  TERRAIN_ZOOM_LEVEL\n              )\n            : undefined;\n\n        // Get current target position in world space before we zoom.\n        const worldTarget = rayCastWorldCoordinates(mapView, targetNDCx, targetNDCy, elevation);\n        const groundDistance = calculateDistanceToGroundFromZoomLevel(mapView, zoomLevel);\n        const cameraHeight = groundDistance + (elevation ?? 0);\n\n        // Set the cameras height according to the given zoom level.\n        if (mapView.projection.type === ProjectionType.Planar) {\n            camera.position.setZ(cameraHeight);\n        } else if (mapView.projection.type === ProjectionType.Spherical) {\n            camera.position.setLength(EarthConstants.EQUATORIAL_RADIUS + cameraHeight);\n        }\n\n        // In sphere, we may have to also orbit the camera around the position located at the\n        // center of the screen, in order to limit the tilt to `maxTiltAngle`, as we change\n        // this tilt by changing the camera's height above.\n        if (mapView.projection.type === ProjectionType.Spherical) {\n            // FIXME: We cannot use mapView.tilt here b/c it does not reflect the latest camera\n            // changes.\n            // tslint:disable-next-line: deprecation\n            const tilt = extractCameraTilt(camera, mapView.projection);\n            const deltaTilt = tilt - maxTiltAngle;\n            if (deltaTilt > 0) {\n                orbitFocusPoint(mapView, 0, deltaTilt, maxTiltAngle);\n            }\n        }\n\n        // Get new target position after the zoom\n        const newWorldTarget = rayCastWorldCoordinates(mapView, targetNDCx, targetNDCy, elevation);\n        if (!worldTarget || !newWorldTarget) {\n            return;\n        }\n\n        if (mapView.projection.type === ProjectionType.Planar) {\n            // Calculate the difference and pan the map to maintain the map relative to the target\n            // position.\n            worldTarget.sub(newWorldTarget);\n            panCameraAboveFlatMap(mapView, worldTarget.x, worldTarget.y);\n        } else if (mapView.projection.type === ProjectionType.Spherical) {\n            panCameraAroundGlobe(mapView, worldTarget, newWorldTarget);\n        }\n    }\n\n    /**\n     * Orbits the camera around the focus point of the camera.\n     *\n     * @param mapView The [[MapView]] instance to manipulate.\n     * @param deltaAzimuthDeg Delta azimuth in degrees.\n     * @param deltaTiltDeg Delta tilt in degrees.\n     * @param maxTiltAngleRad The maximum tilt between the camera and its target in radian.\n     */\n    export function orbitFocusPoint(\n        mapView: MapView,\n        deltaAzimuthDeg: number,\n        deltaTiltDeg: number,\n        maxTiltAngleRad = MAX_TILT_RAD\n    ) {\n        const target = mapView.target;\n        const sphericalCoordinates = extractSphericalCoordinatesFromLocation(\n            mapView,\n            mapView.camera,\n            target\n        );\n        const tilt = Math.max(\n            Math.min(\n                THREE.MathUtils.radToDeg(maxTiltAngleRad),\n                deltaTiltDeg + THREE.MathUtils.radToDeg(sphericalCoordinates.tilt)\n            ),\n            0\n        );\n        const heading =\n            THREE.MathUtils.radToDeg(sphericalCoordinates.azimuth + Math.PI) + deltaAzimuthDeg;\n        mapView.lookAt({\n            target,\n            distance: mapView.targetDistance,\n            tilt,\n            heading\n        });\n    }\n\n    /**\n     * Calculate target (focus) point geo-coordinates for given camera.\n     * @see getTargetPositionFromCamera\n     *\n     * @param camera The camera looking on target point.\n     * @param projection The geo-projection used.\n     * @param elevation Optional elevation above (or below) sea level measured in world units.\n     *\n     * @deprecated This function is for internal use only and will be removed in the future. Use\n     * MapView.worldTarget instead.\n     */\n    export function getGeoTargetFromCamera(\n        camera: THREE.Camera,\n        projection: Projection,\n        elevation?: number\n    ): GeoCoordinates | null {\n        // This function does almost the same as:\n        // rayCastGeoCoordinates(mapView, 0, 0)\n        // but in more gentle and performance wise manner\n        // tslint:disable-next-line: deprecation\n        const targetWorldPos = getWorldTargetFromCamera(camera, projection, elevation);\n        if (targetWorldPos !== null) {\n            return projection.unprojectPoint(targetWorldPos);\n        }\n        return null;\n    }\n\n    /**\n     * Calculate target (focus) point world coordinates for given camera position and orientation.\n     * @param camera The camera looking on target point.\n     * @param projection The geo-projection used.\n     * @param elevation Optional elevation above (or below) sea level in world units.\n     *\n     * @deprecated This function is for internal use only and will be removed in the future.\n     */\n    export function getWorldTargetFromCamera(\n        camera: THREE.Camera,\n        projection: Projection,\n        elevation?: number\n    ): THREE.Vector3 | null {\n        const cameraPos = cache.vector3[0].copy(camera.position);\n        const cameraLookAt = camera.getWorldDirection(cache.vector3[1]);\n        rayCaster.set(cameraPos, cameraLookAt);\n        if (elevation !== undefined) {\n            groundPlane.constant -= elevation;\n            groundSphere.radius += elevation;\n        }\n        const targetWorldPos = new THREE.Vector3();\n        const result =\n            projection.type === ProjectionType.Planar\n                ? rayCaster.ray.intersectPlane(groundPlane, targetWorldPos)\n                : rayCaster.ray.intersectSphere(groundSphere, targetWorldPos);\n        if (elevation !== undefined) {\n            groundPlane.constant = 0;\n            groundSphere.radius = EarthConstants.EQUATORIAL_RADIUS;\n        }\n        return result;\n    }\n\n    /**\n     * Returns the height of the camera above the earths surface.\n     *\n     * If there is an ElevationProvider, this is used. Otherwise the projection is used to determine\n     * how high the camera is above the surface.\n     *\n     * @param level Which level to request the surface height from.\n     * @return Height in world units.\n     */\n    function getHeightAboveTerrain(\n        location: THREE.Vector3,\n        projection: Projection,\n        elevationProvider?: ElevationProvider,\n        level?: number\n    ): number {\n        if (elevationProvider !== undefined) {\n            const geoLocation = projection.unprojectPoint(location);\n            const heightAboveTerrain = elevationProvider.getHeight(geoLocation, level);\n            if (heightAboveTerrain !== undefined) {\n                const height = projection.unprojectAltitude(location) - heightAboveTerrain;\n                return Math.max(height, 1);\n            }\n        }\n        return Math.abs(projection.groundDistance(location));\n    }\n\n    /**\n     * @internal\n     * @deprecated This method will be moved to MapView.\n     */\n    export function getTargetAndDistance(\n        projection: Projection,\n        camera: THREE.Camera,\n        elevationProvider?: ElevationProvider\n    ): { target: THREE.Vector3; distance: number } {\n        const cameraPitch = extractAttitude({ projection }, camera).pitch;\n\n        //FIXME: For now we keep the old behaviour when terrain is enabled (i.e. use the camera\n        //       height above terrain to deduce the target distance).\n        //       This leads to zoomlevel changes while panning. We have to find a proper solution\n        //       for terrain (e.g. raycast with the ground surfcae that is elevated by the average\n        //       elevation in the scene)\n        const elevation = elevationProvider\n            ? elevationProvider.getHeight(\n                  projection.unprojectPoint(camera.position),\n                  TERRAIN_ZOOM_LEVEL\n              )\n            : undefined;\n\n        // Even for a tilt of 90° raycastTargetFromCamera is returning some point almost at\n        // infinity.\n        const target =\n            cameraPitch < MAX_TILT_RAD\n                ? // tslint:disable-next-line: deprecation\n                  getWorldTargetFromCamera(camera, projection, elevation)\n                : null;\n        if (target !== null) {\n            const distance = camera.position.distanceTo(target);\n            return { target, distance };\n        } else {\n            // We either reached the [[PITCH_LIMIT]] or we did not hit the ground surface.\n            // In this case we do the reverse, i.e. compute some fallback distance and\n            // use it to compute the tagret point by using the camera direction.\n            const cameraPosZ = getHeightAboveTerrain(\n                camera.position,\n                projection,\n                elevationProvider,\n                TERRAIN_ZOOM_LEVEL\n            );\n\n            //For flat projection we fallback to the target distance at 89 degree pitch.\n            //For spherical projection we fallback to the tangent line distance\n            const distance =\n                projection.type === ProjectionType.Planar\n                    ? cameraPosZ / Math.cos(Math.min(cameraPitch, MAX_TILT_RAD))\n                    : Math.sqrt(\n                          Math.pow(cameraPosZ + EarthConstants.EQUATORIAL_RADIUS, 2) -\n                              Math.pow(EarthConstants.EQUATORIAL_RADIUS, 2)\n                      );\n            const cameraDir = camera.getWorldDirection(cache.vector3[0]);\n            cameraDir.multiplyScalar(distance);\n            const fallbackTarget = cache.vector3[1];\n            fallbackTarget.copy(camera.position).add(cameraDir);\n            return { target: fallbackTarget, distance };\n        }\n    }\n\n    /**\n     * Returns the [[GeoCoordinates]] of the camera, given its target coordinates on the map and its\n     * zoom, yaw and pitch.\n     *\n     * @param targetCoordinates Coordinates of the center of the view.\n     * @param distance Distance to the target in meters.\n     * @param yawDeg Camera yaw in degrees.\n     * @param pitchDeg Camera pitch in degrees.\n     * @param projection Active MapView, needed to get the camera fov and map projection.\n     * @param result Optional output vector.\n     * @returns Camera position in world space.\n     */\n    export function getCameraPositionFromTargetCoordinates(\n        targetCoordinates: GeoCoordinates,\n        distance: number,\n        yawDeg: number,\n        pitchDeg: number,\n        projection: Projection,\n        result: THREE.Vector3 = new THREE.Vector3()\n    ): THREE.Vector3 {\n        const pitchRad = THREE.MathUtils.degToRad(pitchDeg);\n        const altitude = Math.cos(pitchRad) * distance;\n        const yawRad = THREE.MathUtils.degToRad(yawDeg);\n        projection.projectPoint(targetCoordinates, result);\n        const groundDistance = distance * Math.sin(pitchRad);\n        if (projection.type === ProjectionType.Planar) {\n            result.x = result.x + Math.sin(yawRad) * groundDistance;\n            result.y = result.y - Math.cos(yawRad) * groundDistance;\n            result.z = result.z + altitude;\n        } else if (projection.type === ProjectionType.Spherical) {\n            // In globe yaw and pitch are understood to be in tangent space. The approach below is\n            // to find the Z and Y tangent space axes, then rotate Y around Z by the given yaw, and\n            // set its new length (groundDistance). Finally the up vector's length is set to the\n            // camera height and added to the transformed Y above.\n\n            // Get the Z axis in tangent space: it is the normalized position vector of the target.\n            tangentSpace.z.copy(result).normalize();\n\n            // Get the Y axis (north axis in tangent space):\n            tangentSpace.y\n                .set(0, 0, 1)\n                .projectOnPlane(tangentSpace.z)\n                .normalize();\n\n            // Rotate this north axis by the given yaw, giving the camera direction relative to\n            // the target.\n            cache.quaternions[0].setFromAxisAngle(tangentSpace.z, yawRad - Math.PI);\n            tangentSpace.y.applyQuaternion(cache.quaternions[0]);\n\n            // Push the camera to the specified distance.\n            tangentSpace.y.setLength(groundDistance);\n\n            // Now get the actual camera position vector: from the target position, add the\n            // previous computation to get the projection of the camera on the ground, then add\n            // the height of the camera in the tangent space.\n            const height = distance * Math.cos(pitchRad);\n            result.add(tangentSpace.y).add(tangentSpace.z.setLength(height));\n\n            const a = EarthConstants.EQUATORIAL_RADIUS + altitude;\n            const b = Math.sin(pitchRad) * distance;\n            const cameraHeight = Math.sqrt(a * a + b * b);\n            result.setLength(cameraHeight);\n        }\n\n        return result;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     *\n     * Add offset to geo points for minimal view box in flat projection with tile wrapping.\n     *\n     * In flat projection, with wrap around enabled, we should detect clusters of points around that\n     * wrap antimeridian.\n     *\n     * Here, we fit points into minimal geo box taking world wrapping into account.\n     */\n    export function wrapGeoPointsToScreen(\n        points: GeoCoordLike[],\n        startPosition?: GeoCoordinates\n    ): GeoCoordinates[] {\n        let startIndex = 0;\n        if (startPosition === undefined) {\n            startPosition = GeoCoordinates.fromObject(points[0]);\n            startIndex = 1;\n        }\n        let north = startPosition.latitude;\n        let south = startPosition.latitude;\n        let lonCenter = MathUtils.normalizeLongitudeDeg(startPosition.longitude);\n        let lonSpan = 0;\n        let east = startPosition.longitude;\n        let west = startPosition.longitude;\n\n        const result: GeoCoordinates[] = [];\n        result.push(new GeoCoordinates(north, lonCenter));\n        for (let i = startIndex; i < points.length; i++) {\n            const p = GeoCoordinates.fromObject(points[i]);\n            if (p.latitude > north) {\n                north = p.latitude;\n            } else if (p.latitude < south) {\n                south = p.latitude;\n            }\n\n            let longitude = MathUtils.normalizeLongitudeDeg(p.longitude);\n\n            const relToCenter = MathUtils.angleDistanceDeg(lonCenter, longitude);\n            longitude = lonCenter - relToCenter;\n            if (relToCenter < 0 && -relToCenter > lonSpan / 2) {\n                east = Math.max(east, lonCenter - relToCenter);\n                lonSpan = east - west;\n                lonCenter = (east + west) / 2;\n            } else if (relToCenter > 0 && relToCenter > lonSpan / 2) {\n                west = Math.min(west, longitude);\n                lonSpan = east - west;\n                lonCenter = (east + west) / 2;\n            }\n            result.push(new GeoCoordinates(p.latitude, longitude));\n        }\n        return result;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     *\n     * Given `cameraPos`, force all points that lie on non-visible sphere half to be \"near\" max\n     * possible viewable circle from given camera position.\n     *\n     * Assumes that shpere projection with world center is in `(0, 0, 0)`.\n     */\n    export function wrapWorldPointsToView(points: THREE.Vector3[], cameraPos: THREE.Vector3) {\n        const cameraPosNormalized = cameraPos.clone().normalize();\n        for (const point of points) {\n            if (point.angleTo(cameraPos) > Math.PI / 2) {\n                // Point is on other side of sphere, we \"clamp it to\" max possible viewable circle\n                // from given camera position\n\n                const pointLen = point.length();\n\n                point.projectOnPlane(cameraPosNormalized).setLength(pointLen);\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     *\n     * Return [[GeoPoints]] bounding [[GeoBox]] applicable for [[getFitBoundsDistance]].\n     *\n     * @returns [[GeoCoordinates]] set that covers `box`\n     */\n    export function geoBoxToGeoPoints(box: GeoBox): GeoCoordinates[] {\n        const center = box.center;\n        return [\n            new GeoCoordinates(box.north, box.west),\n            new GeoCoordinates(box.north, box.east),\n            new GeoCoordinates(center.latitude, box.west),\n            new GeoCoordinates(center.latitude, box.east),\n            new GeoCoordinates(box.south, box.west),\n            new GeoCoordinates(box.south, box.east),\n            new GeoCoordinates(box.north, center.longitude),\n            new GeoCoordinates(box.south, center.longitude)\n        ];\n    }\n\n    /**\n     * @hidden\n     * @internal\n     *\n     * Get minimal distance required for `camera` looking at `worldTarget` to cover `points`.\n     *\n     * All dimensions belong to world space.\n     *\n     * @param points points which shall are to be covered by view\n     *\n     * @param worldTarget readonly, world target of [[MapView]]\n     * @param camera readonly, camera with proper `position` and rotation set\n     * @returns new distance to camera to be used with [[MapView.lookAt]]\n     */\n    export function getFitBoundsDistance(\n        points: THREE.Vector3[],\n        worldTarget: THREE.Vector3,\n        camera: THREE.PerspectiveCamera\n    ): number {\n        const cameraRotationMatrix = new THREE.Matrix4();\n        cameraRotationMatrix.extractRotation(camera.matrixWorld);\n        const screenUpVector = new THREE.Vector3(0, 1, 0).applyMatrix4(cameraRotationMatrix);\n        const screenSideVector = new THREE.Vector3(1, 0, 0).applyMatrix4(cameraRotationMatrix);\n        const screenVertMidPlane = new THREE.Plane().setFromCoplanarPoints(\n            camera.position,\n            worldTarget,\n            worldTarget.clone().add(screenUpVector)\n        );\n        const screenHorzMidPlane = new THREE.Plane().setFromCoplanarPoints(\n            camera.position,\n            worldTarget,\n            worldTarget.clone().add(screenSideVector)\n        );\n\n        const cameraPos = cache.vector3[0];\n        cameraPos.copy(camera.position);\n\n        const halfVertFov = THREE.MathUtils.degToRad(camera.fov / 2);\n        const halfHorzFov = THREE.MathUtils.degToRad((camera.fov / 2) * camera.aspect);\n\n        // tan(fov/2)\n        const halfVertFovTan = 1 / Math.tan(halfVertFov);\n        const halfHorzFovTan = 1 / Math.tan(halfHorzFov);\n\n        const cameraToTarget = cache.vector3[1];\n        cameraToTarget\n            .copy(cameraPos)\n            .sub(worldTarget)\n            .negate();\n\n        const cameraToTargetNormalized = new THREE.Vector3().copy(cameraToTarget).normalize();\n\n        const offsetVector = new THREE.Vector3();\n\n        const cameraToPointOnRefPlane = new THREE.Vector3();\n        const pointOnRefPlane = new THREE.Vector3();\n\n        function checkAngle(\n            point: THREE.Vector3,\n            referencePlane: THREE.Plane,\n            maxAngle: number,\n            fovFactor: number\n        ) {\n            referencePlane.projectPoint(point, pointOnRefPlane);\n            cameraToPointOnRefPlane\n                .copy(cameraPos)\n                .sub(pointOnRefPlane)\n                .negate();\n\n            const viewAngle = cameraToTarget.angleTo(cameraToPointOnRefPlane);\n\n            if (viewAngle <= maxAngle) {\n                return;\n            }\n\n            const cameraToPointLen = cameraToPointOnRefPlane.length();\n            const cameraToTargetLen = cameraToTarget.length();\n\n            const newCameraDistance =\n                cameraToPointLen * (Math.sin(viewAngle) * fovFactor - Math.cos(viewAngle)) +\n                cameraToTargetLen;\n\n            offsetVector\n                .copy(cameraToTargetNormalized)\n                .multiplyScalar(cameraToTargetLen - newCameraDistance);\n\n            cameraPos.add(offsetVector);\n            cameraToTarget.sub(offsetVector);\n        }\n\n        for (const point of points) {\n            checkAngle(point, screenVertMidPlane, halfVertFov, halfVertFovTan);\n            checkAngle(point, screenHorzMidPlane, halfHorzFov, halfHorzFovTan);\n        }\n\n        return cameraToTarget.length();\n    }\n\n    /**\n     * @hidden\n     * @internal\n     *\n     * Paremeters for [[getFitBoundsLookAtParams]] function.\n     */\n    export interface FitPointParams {\n        tilt: number;\n        heading: number;\n        projection: Projection;\n        minDistance: number;\n        camera: THREE.PerspectiveCamera;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     *\n     * Get [[LookAtParams]] that fit all `worldPoints` giving that [[MapView]] will target at\n     * `geoTarget`.\n     *\n     * @param geoTarget desired target (see [[MapView.target]]) as geo point\n     * @param worldTarget same as `geoTarget` but in world space\n     * @param worldPoints points we want to see\n     * @param params - other params derived from [[MapView]].\n     */\n    export function getFitBoundsLookAtParams(\n        geoTarget: GeoCoordinates,\n        worldTarget: THREE.Vector3,\n        worldPoints: THREE.Vector3[],\n        params: FitPointParams\n    ) {\n        const { tilt, heading, projection } = params;\n        const startDistance = params.minDistance;\n        const tmpCamera = params.camera.clone();\n\n        getCameraRotationAtTarget(projection, geoTarget, -heading, tilt, tmpCamera.quaternion);\n        getCameraPositionFromTargetCoordinates(\n            geoTarget,\n            startDistance,\n            -heading,\n            tilt,\n            projection,\n            tmpCamera.position\n        );\n        tmpCamera.updateMatrixWorld(true);\n\n        if (projection.type === ProjectionType.Spherical) {\n            wrapWorldPointsToView(worldPoints, tmpCamera.position);\n        }\n        const distance = getFitBoundsDistance(worldPoints, worldTarget, tmpCamera);\n        return {\n            target: geoTarget,\n            distance,\n            heading,\n            tilt\n        };\n    }\n\n    /**\n     * @deprecated use getCameraPositionFromTargetCoordinates instead\n     */\n    export function getCameraCoordinatesFromTargetCoordinates(\n        targetCoordinates: GeoCoordinates,\n        distance: number,\n        yawDeg: number,\n        pitchDeg: number,\n        mapView: MapView\n    ): GeoCoordinates {\n        return mapView.projection.unprojectPoint(\n            getCameraPositionFromTargetCoordinates(\n                targetCoordinates,\n                distance,\n                yawDeg,\n                pitchDeg,\n                mapView.projection,\n                cache.vector3[1]\n            )\n        );\n    }\n\n    /**\n     * Casts a ray in NDC space from the current map view and returns the intersection point of that\n     * ray wih the map in world space.\n     *\n     * @param mapView Instance of MapView.\n     * @param pointOnScreenXinNDC X coordinate in NDC space.\n     * @param pointOnScreenYinNDC Y coordinate in NDC space.\n     * @param elevation Optional param used to offset the ground plane. Used when wanting to pan\n     * based on a plane at some altitude. Necessary for example when panning with terrain.\n     *\n     * @returns Intersection coordinates, or `null` if raycast failed.\n     */\n    export function rayCastWorldCoordinates(\n        mapView: MapView,\n        pointOnScreenXinNDC: number,\n        pointOnScreenYinNDC: number,\n        elevation?: number\n    ): THREE.Vector3 | null {\n        const pointInNDCPosition = cache.vector3[0].set(\n            pointOnScreenXinNDC,\n            pointOnScreenYinNDC,\n            0\n        );\n        const cameraPos = cache.vector3[1].copy(mapView.camera.position);\n\n        cache.matrix4[0].extractRotation(mapView.camera.matrixWorld);\n\n        // Prepare the unprojection matrix which projects from NDC space to camera space\n        // and takes the current rotation of the camera into account.\n        cache.matrix4[1].multiplyMatrices(\n            cache.matrix4[0],\n            cache.matrix4[1].getInverse(mapView.camera.projectionMatrix)\n        );\n        // Unproject the point via the unprojection matrix.\n        const pointInCameraSpace = pointInNDCPosition.applyMatrix4(cache.matrix4[1]);\n        // Use the point in camera space as the vector towards this point.\n        rayCaster.set(cameraPos, pointInCameraSpace.normalize());\n        if (elevation !== undefined) {\n            groundPlane.constant -= elevation;\n            groundSphere.radius += elevation;\n        }\n\n        const worldPosition = new THREE.Vector3();\n        const result =\n            mapView.projection.type === ProjectionType.Planar\n                ? rayCaster.ray.intersectPlane(groundPlane, worldPosition)\n                : rayCaster.ray.intersectSphere(groundSphere, worldPosition);\n\n        if (elevation !== undefined) {\n            groundPlane.constant = 0;\n            groundSphere.radius = EarthConstants.EQUATORIAL_RADIUS;\n        }\n        return result;\n    }\n\n    /**\n     * Pans the camera according to the projection.\n     *\n     * @param mapView Instance of MapView.\n     * @param xOffset In world space. Value > 0 will pan the map to the right, value < 0 will pan\n     * the map to the left in default camera orientation.\n     * @param yOffset In world space. Value > 0 will pan the map upwards, value < 0 will pan the map\n     * downwards in default camera orientation.\n     */\n    export function panCameraAboveFlatMap(\n        mapView: MapView,\n        offsetX: number,\n        offsetY: number\n    ): void {\n        mapView.camera.position.x += offsetX;\n        mapView.camera.position.y += offsetY;\n    }\n\n    /**\n     * The function doing a pan in the spherical space when [[MapView]]'s active [[ProjectionType]]\n     * is spherical. In other words, the function that rotates the camera around the globe.\n     *\n     * @param mapView MapView instance.\n     * @param fromWorld Start vector representing the scene position of a geolocation.\n     * @param toWorld End vector representing the scene position of a geolocation.\n     */\n    export function panCameraAroundGlobe(\n        mapView: MapView,\n        fromWorld: THREE.Vector3,\n        toWorld: THREE.Vector3\n    ) {\n        cache.quaternions[0]\n            .setFromUnitVectors(fromWorld.normalize(), toWorld.normalize())\n            .inverse();\n        cache.matrix4[0].makeRotationFromQuaternion(cache.quaternions[0]);\n        mapView.camera.applyMatrix4(cache.matrix4[0]);\n        mapView.camera.updateMatrixWorld();\n    }\n\n    /**\n     * Rotates the camera by the given delta yaw and delta pitch. The pitch will be clamped to the\n     * maximum possible tilt to the new target, and under the horizon in sphere projection.\n     *\n     * @param mapView The [[MapView]] instance in use.\n     * @param deltaYawDeg Delta yaw in degrees.\n     * @param deltaPitchDeg Delta pitch in degrees.\n     * @param maxTiltAngleRad Max tilt angle in radians.\n     */\n    export function rotate(\n        mapView: MapView,\n        deltaYawDeg: number,\n        deltaPitchDeg: number = 0,\n        maxTiltAngleRad = Math.PI / 4\n    ) {\n        // 1. Apply yaw: rotate around the vertical axis.\n        mapView.camera.rotateOnWorldAxis(\n            mapView.projection.type === ProjectionType.Spherical\n                ? cache.vector3[0].copy(mapView.camera.position).normalize()\n                : cache.vector3[0].set(0, 0, 1),\n            THREE.MathUtils.degToRad(-deltaYawDeg)\n        );\n        mapView.camera.updateMatrixWorld();\n\n        // 2. Apply pitch: rotate around the camera's local X axis.\n        if (deltaPitchDeg === 0) {\n            return;\n        }\n        const pitch = MapViewUtils.extractAttitude(mapView, mapView.camera).pitch;\n        // `maxTiltAngle` is equivalent to a `maxPitchAngle` in flat projections.\n        let newPitch = THREE.MathUtils.clamp(\n            pitch + THREE.MathUtils.degToRad(deltaPitchDeg),\n            0,\n            maxTiltAngleRad\n        );\n        // In sphere projection, the value of a maximum pitch is smaller than the value of the\n        // maximum tilt, as the curvature of the surface adds up to it.\n        if (mapView.projection.type === ProjectionType.Spherical) {\n            // Deduce max pitch from max tilt. To this end the sine law of triangles is used below.\n            const maxPitch = Math.asin(\n                (EarthConstants.EQUATORIAL_RADIUS * Math.sin(Math.PI - maxTiltAngleRad)) /\n                    mapView.camera.position.length()\n            );\n            newPitch = Math.min(newPitch, maxPitch);\n        }\n        mapView.camera.rotateX(newPitch - pitch);\n    }\n\n    /**\n     * Computes the rotation of the camera according to yaw and pitch in degrees. The computations\n     * hinge on the current `projection` and `target`, because yaw and pitch are defined in\n     * tangent space of the target point.\n     *\n     * **Note:** `yaw == 0 && pitch == 0` will north up the map and you will look downwards onto the\n     * map.\n     *\n     * @param projection Current projection.\n     * @param target The camera target.\n     * @param yawDeg Yaw in degrees, counter-clockwise (as opposed to azimuth), starting north.\n     * @param pitchDeg Pitch in degrees.\n     */\n    export function getCameraRotationAtTarget(\n        projection: Projection,\n        target: GeoCoordinates,\n        yawDeg: number,\n        pitchDeg: number,\n        result: THREE.Quaternion = new THREE.Quaternion()\n    ): THREE.Quaternion {\n        const transform = cache.transforms[0];\n        projection.localTangentSpace(target, transform);\n\n        cache.matrix4[0].makeBasis(transform.xAxis, transform.yAxis, transform.zAxis);\n        result.setFromRotationMatrix(cache.matrix4[0]);\n\n        cache.quaternions[0].setFromAxisAngle(\n            cache.vector3[1].set(0, 0, 1),\n            THREE.MathUtils.degToRad(yawDeg)\n        );\n        cache.quaternions[1].setFromAxisAngle(\n            cache.vector3[1].set(1, 0, 0),\n            THREE.MathUtils.degToRad(pitchDeg)\n        );\n\n        result.multiply(cache.quaternions[0]);\n        result.multiply(cache.quaternions[1]);\n        return result;\n    }\n\n    /**\n     * Sets the rotation of the camera according to yaw and pitch in degrees. The computations hinge\n     * on the current projection and `geoCenter`, because yaw and pitch are defined in tangent\n     * space. In particular, `MapView#geoCenter` needs to be set before calling `setRotation`.\n     *\n     * **Note:** `yaw == 0 && pitch == 0` will north up the map and you will look downwards onto the\n     * map.\n     *\n     * @param mapView Instance of MapView.\n     * @param yawDeg Yaw in degrees, counter-clockwise (as opposed to azimuth), starting north.\n     * @param pitchDeg Pitch in degrees.\n     */\n    export function setRotation(mapView: MapView, yawDeg: number, pitchDeg: number) {\n        getCameraRotationAtTarget(\n            mapView.projection,\n            mapView.geoCenter,\n            yawDeg,\n            pitchDeg,\n            mapView.camera.quaternion\n        );\n    }\n\n    /**\n     * Extracts current camera tilt angle in radians.\n     *\n     * @param camera The [[Camera]] in use.\n     * @param projection The [[Projection]] used to convert between geo and world coordinates.\n     *\n     * @deprecated Use MapView.tilt\n     */\n    export function extractCameraTilt(camera: THREE.Camera, projection: Projection): number {\n        // For planar projections the camera target point local tangent is the same\n        // at every point on the ground (ignoring terrain fluctuations), so we may\n        // simply use inverted ground normal for tilt calculation. This simplifies\n        // the more generic calculus used for spherical projections.\n        if (projection.type === ProjectionType.Planar) {\n            const lookAt: THREE.Vector3 = camera.getWorldDirection(cache.vector3[0]).normalize();\n            const normal: THREE.Vector3 = projection\n                .surfaceNormal(camera.position, cache.vector3[1])\n                .negate();\n            const cosTheta = lookAt.dot(normal);\n            return Math.acos(THREE.MathUtils.clamp(cosTheta, -1, 1));\n        } else {\n            // Sanity check if new projection type is introduced.\n            assert(projection.type === ProjectionType.Spherical);\n            // tslint:disable-next-line: deprecation\n            const targetGeoCoords = MapViewUtils.getGeoTargetFromCamera(camera, projection);\n            // If focus point is lost we then expose maximum allowable tilt value.\n            if (targetGeoCoords !== null) {\n                return MapViewUtils.extractTiltAngleFromLocation(\n                    projection,\n                    camera,\n                    targetGeoCoords\n                );\n            } else {\n                logger.warn(\n                    \"MapView camera is pointing in the void, using maxTilt: \",\n                    MAX_TILT_RAD\n                );\n                return MAX_TILT_RAD;\n            }\n        }\n    }\n\n    /**\n     * Extracts yaw, pitch, and roll rotation in radians.\n     * - Yaw : Rotation around the vertical axis, counter-clockwise (as opposed to azimuth),\n     * starting north.\n     * - Pitch :Rotation around the horizontal axis.\n     * - Roll : Rotation around the view axis.\n     *\n     * @see https://en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles\n     *\n     * @param options Subset of necessary [[MapView]] properties.\n     * @param object The [[THREE.Object3D]] instance to extract the rotations from.\n     */\n    export function extractAttitude(\n        options: { projection: Projection },\n        object: THREE.Object3D\n    ): Attitude {\n        // 1. Build the matrix of the tangent space of the object.\n        cache.vector3[1].setFromMatrixPosition(object.matrixWorld); // Ensure using world position.\n        options.projection.localTangentSpace(options.projection.unprojectPoint(cache.vector3[1]), {\n            xAxis: tangentSpace.x,\n            yAxis: tangentSpace.y,\n            zAxis: tangentSpace.z,\n            position: cache.vector3[0]\n        });\n        cache.matrix4[1].makeBasis(tangentSpace.x, tangentSpace.y, tangentSpace.z);\n\n        // 2. Change the basis of matrixWorld to the tangent space to get the new base axes.\n        cache.matrix4[0].getInverse(cache.matrix4[1]).multiply(object.matrixWorld);\n        space.x.setFromMatrixColumn(cache.matrix4[0], 0);\n        space.y.setFromMatrixColumn(cache.matrix4[0], 1);\n        space.z.setFromMatrixColumn(cache.matrix4[0], 2);\n\n        // 3. Deduce orientation from the base axes.\n        let yaw = 0;\n        let pitch = 0;\n        let roll = 0;\n\n        // Decompose rotation matrix into Z0 X Z1 Euler angles.\n        const d = space.z.dot(cache.vector3[1].set(0, 0, 1));\n        if (d < 1.0 - epsilon) {\n            if (d > -1.0 + epsilon) {\n                yaw = Math.atan2(space.z.x, -space.z.y);\n                pitch = Math.acos(space.z.z);\n                roll = Math.atan2(space.x.z, space.y.z);\n            } else {\n                // Looking bottom-up with space.z.z == -1.0\n                yaw = -Math.atan2(-space.y.x, space.x.x);\n                pitch = 180;\n                roll = 0;\n            }\n        } else {\n            // Looking top-down with space.z.z == 1.0\n            yaw = Math.atan2(-space.y.x, space.x.x);\n            pitch = 0.0;\n            roll = 0.0;\n        }\n\n        return {\n            yaw,\n            pitch,\n            roll\n        };\n    }\n\n    /**\n     * Gets the spherical coordinates in radian of the object to the coordinates of `point`.\n     *\n     * Note: this method can be used to get the direction that an object points to, when `location`\n     * is the target of that object, by adding PI to it. Otherwise it only returns the spherical\n     * coordinates of `object` in the tangent space of `location`.\n     *\n     * @param mapView The [[MapView]] instance to consider.\n     * @param object The object to get the coordinates from.\n     * @param location The reference point.\n     */\n    export function extractSphericalCoordinatesFromLocation(\n        mapView: MapView,\n        object: THREE.Object3D,\n        location: GeoCoordinates\n    ): { azimuth: number; tilt: number } {\n        mapView.projection.localTangentSpace(location, {\n            xAxis: tangentSpace.x,\n            yAxis: tangentSpace.y,\n            zAxis: tangentSpace.z,\n            position: cache.vector3[0]\n        });\n\n        let tilt = 0;\n        let azimuth = 0;\n\n        // Get point to object vector in `cache.vector3[1]` and deduce `tilt` from the angle with\n        // tangent Z.\n        cache.vector3[1]\n            .copy(object.position)\n            .sub(cache.vector3[0])\n            .normalize();\n        if (cache.vector3[1].dot(tangentSpace.z) > 1 - epsilon) {\n            // Top down view: the azimuth of the object would be opposite the yaw, and clockwise.\n            azimuth = Math.PI - extractAttitude(mapView, object).yaw;\n            // Wrap between -PI and PI.\n            azimuth = Math.atan2(Math.sin(azimuth), Math.cos(azimuth));\n            tilt = 0;\n            return { tilt, azimuth };\n        }\n        tilt = cache.vector3[1].angleTo(tangentSpace.z);\n        // Tilted view: the azimuth is the direction of the object from the origin.\n        cache.vector3[1]\n            .copy(object.position)\n            .sub(cache.vector3[0])\n            .projectOnPlane(tangentSpace.z)\n            .normalize();\n        azimuth = cache.vector3[1].angleTo(tangentSpace.y);\n        if (cache.vector3[1].cross(tangentSpace.y).dot(tangentSpace.z) < 0) {\n            azimuth = -azimuth;\n        }\n        return { tilt, azimuth };\n    }\n\n    /**\n     * Gets the tilt angle (in radians) of the object relative to the coordinates of `location`.\n     *\n     * Note: this method can be used to get the direction that an object points to, when `location`\n     * is the target of that object, by adding PI to it. Otherwise it only returns the tilt angle\n     * (in radians) of `object` in the tangent space of `location`.\n     *\n     * @param projection The [[Projection]] used when converting from geo to world coordinates.\n     * @param object The object to get the coordinates from.\n     * @param location The reference point.\n     */\n    export function extractTiltAngleFromLocation(\n        projection: Projection,\n        object: THREE.Object3D,\n        location: GeoCoordinates\n    ): number {\n        projection.localTangentSpace(location, {\n            xAxis: tangentSpace.x,\n            yAxis: tangentSpace.y,\n            zAxis: tangentSpace.z,\n            position: cache.vector3[0]\n        });\n\n        // Get point to object vector (dirVec) and compute the `tilt` as the angle with tangent Z.\n        const dirVec = cache.vector3[1].copy(object.position).sub(cache.vector3[0]);\n        const dirLen = dirVec.length();\n        if (dirLen < epsilon) {\n            logger.error(\"Can not calculate tilt for the zero length vector!\");\n            return 0;\n        }\n        dirVec.divideScalar(dirLen);\n\n        const cosTheta = dirVec.dot(tangentSpace.z);\n        if (cosTheta > 1 - epsilon) {\n            // Top down view.\n            return 0;\n        }\n        return Math.acos(THREE.MathUtils.clamp(cosTheta, -1, 1));\n    }\n\n    /**\n     * Get perspective camera frustum planes distances.\n     * @return all plane distances in helper object.\n     */\n    export function getCameraFrustumPlanes(\n        camera: THREE.PerspectiveCamera\n    ): { left: number; right: number; top: number; bottom: number; near: number; far: number } {\n        const near = camera.near;\n        const far = camera.far;\n        let top = (near * Math.tan(THREE.MathUtils.degToRad(0.5 * camera.fov))) / camera.zoom;\n        let height = 2 * top;\n        let width = camera.aspect * height;\n        let left = -0.5 * width;\n\n        const view = camera.view;\n        if (view !== null && view.enabled) {\n            const fullWidth = view.fullWidth;\n            const fullHeight = view.fullHeight;\n\n            left += (view.offsetX * width) / fullWidth;\n            top -= (view.offsetY * height) / fullHeight;\n            width *= view.width / fullWidth;\n            height *= view.height / fullHeight;\n        }\n\n        // Correct by skew factor\n        left += camera.filmOffset !== 0 ? (near * camera.filmOffset) / camera.getFilmWidth() : 0;\n\n        return {\n            left,\n            right: left + width,\n            top,\n            bottom: top - height,\n            near,\n            far\n        };\n    }\n\n    /**\n     * Casts a ray in NDC space from the current view of the camera and returns the intersection\n     * point of that ray against the map in geo coordinates. The return value can be `null` when\n     * the raycast is above the horizon.\n     *\n     * @param mapView Instance of MapView.\n     * @param pointOnScreenXNDC  Abscissa in NDC space.\n     * @param pointOnScreenYNDC  Ordinate in NDC space.\n     * @returns Intersection geo coordinates, or `null` if raycast is above the horizon.\n     */\n    export function rayCastGeoCoordinates(\n        mapView: MapView,\n        pointOnScreenXinNDC: number,\n        pointOnScreenYinNDC: number\n    ): GeoCoordinates | null {\n        const worldCoordinates = rayCastWorldCoordinates(\n            mapView,\n            pointOnScreenXinNDC,\n            pointOnScreenYinNDC\n        );\n\n        if (!worldCoordinates) {\n            return null;\n        }\n\n        return mapView.projection.unprojectPoint(worldCoordinates);\n    }\n\n    /**\n     * Calculates and returns the distance from the ground, which is needed to put the camera to\n     * this height, to see the size of the area that would be covered by one tile for the given zoom\n     * level.\n     *\n     * @param mapView Instance of MapView.\n     * @param options Subset of necessary [[MapView]] properties.\n     */\n    export function calculateDistanceToGroundFromZoomLevel(\n        options: { projection: Projection; focalLength: number; camera: THREE.Object3D },\n        zoomLevel: number\n    ): number {\n        const cameraPitch = extractAttitude(options, options.camera).pitch;\n        const tileSize = EarthConstants.EQUATORIAL_CIRCUMFERENCE / Math.pow(2, zoomLevel);\n        return ((options.focalLength * tileSize) / 256) * Math.cos(cameraPitch);\n    }\n\n    /**\n     * Calculates and returns the distance to the target point.\n     *\n     * @param options Necessary subset of MapView properties to compute the distance.\n     * @param zoomLevel The zoom level to get the equivalent height to.\n     */\n    export function calculateDistanceFromZoomLevel(\n        options: { focalLength: number },\n        zoomLevel: number\n    ): number {\n        const tileSize = EarthConstants.EQUATORIAL_CIRCUMFERENCE / Math.pow(2, zoomLevel);\n        return (options.focalLength * tileSize) / 256;\n    }\n\n    /**\n     * Calculates the zoom level, which corresponds to the current distance from\n     * camera to lookAt point.\n     * Therefore the zoom level is a `float` and not an `int`. The height of the camera can be in\n     * between zoom levels. By setting the zoom level, you change the height position of the camera\n     * in away that the field of view of the camera should be able to cover one tile for the given\n     * zoom level.\n     *\n     * As an example for this, when you have a tile of zoom level 14 in front of the camera and you\n     * set the zoom level of the camera to 14, then you are able to see the whole tile in front of\n     * you.\n     *\n     * @param options Subset of necessary [[MapView]] properties.\n     * @param distance The distance in meters, which are scene units in [[MapView]].\n     */\n    export function calculateZoomLevelFromDistance(\n        options: { focalLength: number; minZoomLevel: number; maxZoomLevel: number },\n        distance: number\n    ): number {\n        const tileSize = (256 * distance) / options.focalLength;\n        const zoomLevel = THREE.MathUtils.clamp(\n            Math.log2(EarthConstants.EQUATORIAL_CIRCUMFERENCE / tileSize),\n            options.minZoomLevel,\n            options.maxZoomLevel\n        );\n        return snapToCeilingZoomLevel(zoomLevel);\n    }\n\n    /**\n     * Translates a linear clip-space distance value to the actual value stored in the depth buffer.\n     * This is useful as the depth values are not stored in the depth buffer linearly, and this can\n     * lead into confusing behavior when not taken into account.\n     *\n     * @param clipDistance Distance from the camera in clip space (range: [0, 1]).\n     * @param camera Camera applying the perspective projection.\n     */\n    export function calculateDepthFromClipDistance(\n        clipDistance: number,\n        camera: THREE.Camera\n    ): number {\n        const perspCam = camera as THREE.PerspectiveCamera;\n        const cameraRange = perspCam.far - perspCam.near;\n        const viewSpaceDistance = clipDistance * perspCam.far;\n\n        return (1.0 - perspCam.near / viewSpaceDistance) * (perspCam.far / cameraRange);\n    }\n\n    /**\n     * Translates a linear distance value [0..1], where 1 is the distance to the far plane, into\n     * [0..cameraFar].\n     *\n     * @param distance Distance from the camera (range: [0, 1]).\n     * @param camera Camera applying the perspective projection.\n     */\n    export function cameraToWorldDistance(distance: number, camera: THREE.Camera): number {\n        const perspCam = camera as THREE.PerspectiveCamera;\n        return distance * perspCam.far;\n    }\n\n    /**\n     * Calculates vertical field of view for given horizontal field of vision and aspect ratio.\n     *\n     * @param hFov Horizontal field of view in rad.\n     * @param aspect Aspect ratio.\n     */\n    export function calculateVerticalFovByHorizontalFov(hFov: number, aspect: number): number {\n        return 2 * Math.atan(Math.tan(hFov / 2) / aspect);\n    }\n\n    /**\n     * Calculates horizontal field of view for given vertical field of vision and aspect ratio.\n     *\n     * @param hFov Vertical field of view in rad.\n     * @param aspect Aspect ratio.\n     */\n    export function calculateHorizontalFovByVerticalFov(vFov: number, aspect: number): number {\n        return 2 * Math.atan(Math.tan(vFov / 2) * aspect);\n    }\n\n    /**\n     * Calculates the focal length based on the vertical FOV and height.\n     *\n     * @param vFov Vertical field of view in rad.\n     * @param height Height of canvas in pixels.\n     */\n    export function calculateFocalLengthByVerticalFov(vFov: number, height: number): number {\n        return height / 2 / Math.tan(vFov / 2);\n    }\n\n    /**\n     * Calculates the vertical field of view based on the focal length and the height.\n     *\n     * @param focalLength Focal length in pixels (see [[calculateFocalLengthByVerticalFov]])\n     * @param height Height of canvas in pixels.\n     */\n    export function calculateFovByFocalLength(focalLength: number, height: number): number {\n        return THREE.MathUtils.radToDeg(2 * Math.atan(height / 2 / focalLength));\n    }\n\n    /**\n     * Calculates object's screen size based on the focal length and it's camera distance.\n     *\n     * @param focalLength Focal length in pixels (see [[calculateFocalLengthByVerticalFov]])\n     * @param distance Object distance in world space.\n     * @param worldSize Object size in world space.\n     * @return object size in screen space.\n     */\n    export function calculateScreenSizeByFocalLength(\n        focalLength: number,\n        distance: number,\n        worldSize: number\n    ): number {\n        return (focalLength * worldSize) / distance;\n    }\n\n    /**\n     * Calculates object's world size based on the focal length and it's camera distance.\n     *\n     * @param focalLength Focal length in pixels (see [[calculateFocalLengthByVerticalFov]])\n     * @param distance Object distance in world space.\n     * @param screenSize Object size in screen space.\n     * @return object size in world space.\n     */\n    export function calculateWorldSizeByFocalLength(\n        focalLength: number,\n        distance: number,\n        screenSize: number\n    ): number {\n        return (distance * screenSize) / focalLength;\n    }\n\n    /**\n     * Computes estimate for size of a THREE.Object3D object and its children. Shared materials\n     * and/or attributes will be counted multiple times.\n     *\n     * @param object The mesh object to evaluate\n     * @param size The [[MemoryUsage]] to update.\n     * @param visitedObjects Optional map to store large objects that could be shared.\n     *\n     * @returns Estimate of object size in bytes for heap and GPU.\n     */\n    export function estimateObject3dSize(\n        object: THREE.Object3D,\n        parentSize?: MemoryUsage,\n        visitedObjects?: Map<string, boolean>\n    ): MemoryUsage {\n        const size =\n            parentSize !== undefined\n                ? parentSize\n                : {\n                      heapSize: 0,\n                      gpuSize: 0\n                  };\n\n        if (visitedObjects === undefined) {\n            visitedObjects = new Map();\n        }\n\n        estimateMeshSize(object, size, visitedObjects);\n\n        if (object.children.length > 0) {\n            for (const child of object.children) {\n                estimateObject3dSize(child, size, visitedObjects);\n            }\n        }\n        return size;\n    }\n\n    /**\n     * Check if tiles or other content is currently being loaded.\n     *\n     * This method can be removed once HARP-7932 is implemented.\n     *\n     * @returns `true` if MapView has visible tiles or other content that is being loaded.\n     */\n    export function mapViewIsLoading(mapView: MapView) {\n        let numTilesLoading = 0;\n\n        for (const tileList of mapView.visibleTileSet.dataSourceTileList) {\n            numTilesLoading += tileList.numTilesLoading;\n\n            for (const tile of tileList.visibleTiles) {\n                if (tile.tileLoader !== undefined && !tile.tileLoader.isFinished) {\n                    numTilesLoading++;\n                }\n                if (tile.tileGeometryLoader !== undefined && !tile.tileGeometryLoader.isFinished) {\n                    numTilesLoading++;\n                }\n            }\n        }\n        let isLoading = numTilesLoading > 0;\n\n        if (mapView.textElementsRenderer !== undefined) {\n            isLoading = isLoading || mapView.textElementsRenderer.loading;\n        }\n\n        isLoading =\n            isLoading ||\n            !mapView.poiTableManager.finishedLoading ||\n            !mapView.visibleTileSet.allVisibleTilesLoaded;\n\n        return isLoading;\n    }\n\n    function estimateTextureSize(\n        texture: THREE.Texture | null,\n        objectSize: MemoryUsage,\n        visitedObjects: Map<string, boolean>\n    ): void {\n        if (texture === null || texture === undefined || texture.image === undefined) {\n            return;\n        }\n\n        if (texture.uuid !== undefined && visitedObjects.get(texture.uuid) === true) {\n            return;\n        }\n        visitedObjects.set(texture.uuid, true);\n\n        // May be HTMLImage or ImageData\n        const image = texture.image;\n        // Assuming RGBA\n        const imageBytes = 4 * image.width * image.height;\n        objectSize.heapSize += imageBytes;\n        objectSize.gpuSize += imageBytes;\n    }\n\n    function estimateMaterialSize(\n        material: THREE.Material,\n        objectSize: MemoryUsage,\n        visitedObjects: Map<string, boolean>\n    ): void {\n        if (material.uuid !== undefined && visitedObjects.get(material.uuid) === true) {\n            return;\n        }\n        visitedObjects.set(material.uuid, true);\n\n        if (\n            material instanceof THREE.RawShaderMaterial ||\n            material instanceof THREE.ShaderMaterial\n        ) {\n            const rawMaterial = material;\n            for (const name in rawMaterial.uniforms) {\n                if (rawMaterial.uniforms[name] !== undefined) {\n                    const uniform = rawMaterial.uniforms[name];\n                    if (uniform instanceof THREE.Texture) {\n                        estimateTextureSize(uniform, objectSize, visitedObjects);\n                    }\n                }\n            }\n        } else if (\n            material instanceof THREE.MeshBasicMaterial ||\n            material instanceof MapMeshBasicMaterial\n        ) {\n            const meshMaterial = material;\n            estimateTextureSize(meshMaterial.map, objectSize, visitedObjects);\n            estimateTextureSize(meshMaterial.aoMap, objectSize, visitedObjects);\n            estimateTextureSize(meshMaterial.specularMap, objectSize, visitedObjects);\n            estimateTextureSize(meshMaterial.alphaMap, objectSize, visitedObjects);\n            estimateTextureSize(meshMaterial.envMap, objectSize, visitedObjects);\n        } else if (material instanceof MapMeshStandardMaterial) {\n            const standardMaterial = material;\n\n            estimateTextureSize(standardMaterial.map, objectSize, visitedObjects);\n            estimateTextureSize(standardMaterial.lightMap, objectSize, visitedObjects);\n            estimateTextureSize(standardMaterial.aoMap, objectSize, visitedObjects);\n            estimateTextureSize(standardMaterial.emissiveMap, objectSize, visitedObjects);\n            estimateTextureSize(standardMaterial.bumpMap, objectSize, visitedObjects);\n            estimateTextureSize(standardMaterial.normalMap, objectSize, visitedObjects);\n            estimateTextureSize(standardMaterial.displacementMap, objectSize, visitedObjects);\n            estimateTextureSize(standardMaterial.roughnessMap, objectSize, visitedObjects);\n            estimateTextureSize(standardMaterial.metalnessMap, objectSize, visitedObjects);\n            estimateTextureSize(standardMaterial.alphaMap, objectSize, visitedObjects);\n            estimateTextureSize(standardMaterial.envMap, objectSize, visitedObjects);\n        } else if (\n            material instanceof THREE.LineBasicMaterial ||\n            material instanceof THREE.LineDashedMaterial\n        ) {\n            // Nothing to be done here\n        } else {\n            logger.warn(\"estimateMeshSize: unidentified material: \", material);\n        }\n    }\n\n    function estimateAttributeSize(\n        attribute: any,\n        attrName: string,\n        objectSize: MemoryUsage,\n        visitedObjects: Map<string, boolean>\n    ): void {\n        // Attributes (apparently) do not have their uuid set up.\n        if (attribute.uuid === undefined) {\n            attribute.uuid = THREE.MathUtils.generateUUID();\n        }\n\n        if (visitedObjects.get(attribute.uuid) === true) {\n            return;\n        }\n        visitedObjects.set(attribute.uuid, true);\n\n        let attrBytes = 0;\n        let bytesPerElement = 4;\n        if (attribute.array.BYTES_PER_ELEMENT !== undefined) {\n            bytesPerElement = attribute.array.BYTES_PER_ELEMENT;\n        }\n        if (\n            attribute instanceof THREE.InterleavedBufferAttribute ||\n            attribute instanceof THREE.BufferAttribute\n        ) {\n            attrBytes = bytesPerElement * attribute.count * attribute.itemSize;\n        } else {\n            logger.warn(\"estimateMeshSize: unidentified attribute: \", attrName);\n        }\n\n        objectSize.heapSize += attrBytes + MINIMUM_ATTRIBUTE_SIZE_ESTIMATION;\n        objectSize.gpuSize += attrBytes;\n    }\n\n    function estimateGeometrySize(\n        geometry: THREE.Geometry | THREE.BufferGeometry,\n        objectSize: MemoryUsage,\n        visitedObjects: Map<string, boolean>\n    ): void {\n        const isNewObject =\n            geometry.uuid === undefined || visitedObjects.get(geometry.uuid) !== true;\n\n        if (!isNewObject) {\n            return;\n        }\n        visitedObjects.set(geometry.uuid, true);\n\n        let bufferGeometry: THREE.BufferGeometry | undefined;\n\n        if (geometry instanceof THREE.Geometry) {\n            // Each vertex is represented as 3 floats vector (24 bytes).\n            objectSize.heapSize += geometry.vertices.length * 24;\n            // Face: 3 indices (24 byte), 1 normal (3 floats = 24). Vertex normals and\n            // colors are not counted here.\n            objectSize.heapSize += geometry.faces.length * (24 + 24);\n            // Additionally, the internal _bufferGeometry is also counted:\n            bufferGeometry = (geometry as any)._bufferGeometry;\n        } else if (geometry instanceof THREE.BufferGeometry) {\n            bufferGeometry = geometry;\n        }\n\n        if (bufferGeometry === undefined) {\n            // Nothing more to calculate.\n            return;\n        }\n\n        const attributes = bufferGeometry.attributes;\n        if (attributes === undefined) {\n            logger.warn(\"estimateGeometrySize: unidentified geometry: \", geometry);\n            return;\n        }\n\n        for (const property in attributes) {\n            if (attributes[property] !== undefined) {\n                estimateAttributeSize(attributes[property], property, objectSize, visitedObjects);\n            }\n        }\n        if (bufferGeometry.index !== null) {\n            estimateAttributeSize(bufferGeometry.index, \"index\", objectSize, visitedObjects);\n        }\n    }\n\n    function estimateMeshSize(\n        object: THREE.Object3D,\n        objectSize: MemoryUsage,\n        visitedObjects: Map<string, boolean>\n    ): void {\n        if (!object.isObject3D || object instanceof THREE.Scene) {\n            return;\n        }\n\n        if (object.uuid !== undefined && visitedObjects.get(object.uuid) === true) {\n            return;\n        }\n        visitedObjects.set(object.uuid, true);\n\n        if ((object as any).isMesh || (object as any).isLine || (object as any).isPoints) {\n            // Estimated minimum impact on heap.\n            let heapSize = MINIMUM_OBJECT3D_SIZE_ESTIMATION;\n            const gpuSize = 0;\n\n            // Cast to LodMesh class which contains the minimal required properties sub-set.\n            const mesh = object as LodMesh;\n\n            // Calculate material(s) impact.\n            if (mesh.material !== undefined) {\n                if (Array.isArray(mesh.material)) {\n                    const materials = mesh.material as THREE.Material[];\n                    for (const material of materials) {\n                        estimateMaterialSize(material, objectSize, visitedObjects);\n                    }\n                } else {\n                    const material = mesh.material as THREE.Material;\n                    estimateMaterialSize(material, objectSize, visitedObjects);\n                }\n            }\n\n            // Calculate cost of geometry.\n            if (mesh.geometries !== undefined) {\n                for (const geometry of mesh.geometries) {\n                    estimateGeometrySize(geometry, objectSize, visitedObjects);\n                }\n            } else if (mesh.geometry !== undefined) {\n                estimateGeometrySize(mesh.geometry, objectSize, visitedObjects);\n            }\n\n            // Add info that is required for picking (parts of) objects and match them to\n            // the featureID in the map data.\n            const featureData: TileFeatureData | undefined =\n                object.userData !== undefined\n                    ? (object.userData.feature as TileFeatureData)\n                    : undefined;\n\n            if (featureData !== undefined) {\n                heapSize += getFeatureDataSize(featureData);\n            }\n\n            objectSize.heapSize += heapSize;\n            objectSize.gpuSize += gpuSize;\n        } else {\n            logger.warn(\"estimateMeshSize: unidentified object\", object);\n        }\n    }\n\n    /**\n     * Gets language list used by the browser\n     *\n     * @returns Array of iso language codes\n     */\n    export function getBrowserLanguages(): string[] | undefined {\n        if (navigator.languages !== undefined && navigator.languages.length > 0) {\n            const languageList = [];\n            for (const lang of navigator.languages) {\n                languageList.push(getIsoLanguageCode(lang));\n            }\n            return languageList;\n        }\n        if (navigator.language !== undefined) {\n            return [getIsoLanguageCode(navigator.language)];\n        }\n        return undefined;\n    }\n\n    /**\n     * Gets ISO-639-1 language code from browser's code (ex. en for en-US)\n     */\n    function getIsoLanguageCode(language: string) {\n        return language.substring(0, 2);\n    }\n}\n\n/** @hidden */\nconst powerOfTwo = [\n    0x1,\n    0x2,\n    0x4,\n    0x8,\n    0x10,\n    0x20,\n    0x40,\n    0x80,\n    0x100,\n    0x200,\n    0x400,\n    0x800,\n    0x1000,\n    0x2000,\n    0x4000,\n    0x8000,\n    0x10000,\n    0x20000,\n    0x40000,\n    0x80000,\n    0x100000,\n    0x200000,\n    0x400000,\n    0x800000,\n    0x1000000,\n    0x2000000,\n    0x4000000,\n    0x8000000,\n    0x10000000,\n    0x20000000,\n    0x40000000,\n    0x80000000,\n    0x100000000,\n    0x200000000,\n    0x400000000,\n    0x800000000,\n    0x1000000000,\n    0x2000000000,\n    0x4000000000,\n    0x8000000000,\n    0x10000000000,\n    0x20000000000,\n    0x40000000000,\n    0x80000000000,\n    0x100000000000,\n    0x200000000000,\n    0x400000000000,\n    0x800000000000,\n    0x1000000000000,\n    0x2000000000000,\n    0x4000000000000,\n    0x8000000000000,\n    0x10000000000000\n];\n\nexport namespace TileOffsetUtils {\n    /**\n     * Creates a unique key based on the supplied parameters. Note, the uniqueness is bounded by the\n     * bitshift. The [[TileKey.mortonCode()]] supports currently up to 26 levels (this is because\n     * 26*2 equals 52, and 2^52 is the highest bit that can be set in an integer in Javascript), the\n     * bitshift reduces this accordingly, so given the default bitshift of four, we support up to 24\n     * levels. Given the current support up to level 19 this should be fine.\n     *\n     * @param tileKey The unique [[TileKey]] from which to compute the unique key.\n     * @param offset How much the given [[TileKey]] is offset\n     * @param bitshift How much space we have to store the offset. The default of 4 means we have\n     *      enough space to store 16 unique tiles in a single view.\n     */\n    export function getKeyForTileKeyAndOffset(\n        tileKey: TileKey,\n        offset: number,\n        bitshift: number = 4\n    ) {\n        const shiftedOffset = getShiftedOffset(offset, bitshift);\n        return tileKey.mortonCode() + shiftedOffset;\n    }\n\n    /**\n     * Extracts the offset and morton key from the given key (must be created by:\n     * [[getKeyForTileKeyAndOffset]])\n     *\n     * Note, we can't use bitshift operators in Javascript because they work on 32-bit integers, and\n     * would truncate the numbers, hence using powers of two.\n     *\n     * @param key Key to extract offset and morton key.\n     * @param bitshift How many bits to shift by, must be the same as was used when creating the\n     * key.\n     */\n    export function extractOffsetAndMortonKeyFromKey(key: number, bitshift: number = 4) {\n        let offset = 0;\n        let mortonCode = key;\n        let i = 0;\n        // Compute the offset\n        for (; i < bitshift; i++) {\n            // Note, we use 52, because 2^53-1 is the biggest value, the highest value\n            // that can be set is the bit in the 52th position.\n            const num = powerOfTwo[52 - i];\n            if (mortonCode >= num) {\n                mortonCode -= num;\n                offset += powerOfTwo[bitshift - 1 - i];\n            }\n        }\n        // We subtract half of the total amount, this undoes what is computed in getShiftedOffset\n        offset -= powerOfTwo[bitshift - 1];\n        return { offset, mortonCode };\n    }\n\n    /**\n     * Returns the key of the parent. Key must have been computed using the function\n     * [[getKeyForTileKeyAndOffset]].\n     *\n     * @param calculatedKey Key to decompose\n     * @param bitshift Bit shift used to create the key\n     */\n    export function getParentKeyFromKey(calculatedKey: number, bitshift: number = 4) {\n        const { offset, mortonCode } = extractOffsetAndMortonKeyFromKey(calculatedKey, bitshift);\n        const parentTileKey = TileKey.fromMortonCode(TileKey.parentMortonCode(mortonCode));\n        return getKeyForTileKeyAndOffset(parentTileKey, offset, bitshift);\n    }\n\n    /**\n     * Packs the supplied offset into the high bits, where the highbits are between 2^52 and\n     * 2^(52-bitshift).\n     *\n     * Offsets are wrapped around, to fit in the offsetBits. In practice, this doesn't really\n     * matter, this is primarily used to find a unique id, if there is an offset 10, which is\n     * wrapped to 2, it doesn't matter, because the offset of 10 is still stored in the tile.\n     * What can be a problem though is that the cache gets filled up and isn't emptied.\n     *\n     * Note, because bit shifting in JavaScript works on 32 bit integers, we use powers of 2 to set\n     * the high bits instead.\n     *\n     * @param offset Offset to pack into the high bits.\n     * @param offsetBits How many bits to use to pack the offset.\n     */\n    function getShiftedOffset(offset: number, offsetBits: number = 4) {\n        let result = 0;\n        const totalOffsetsToStore = powerOfTwo[offsetBits];\n        //Offsets are stored by adding half 2 ^ (bitshift - 1), i.e.half of the max amount stored,\n        //and then wrapped based on this value.For example, given a bitshift of 3, and an offset -\n        //3, it would have 4 added(half of 2 ^ 3), and be stored as 1, 3 would have 4 added and be\n        //stored as 7, 4 would be added with 4 and be stored as 0 (it wraps around).\n        offset += totalOffsetsToStore / 2;\n        while (offset < 0) {\n            offset += totalOffsetsToStore;\n        }\n        while (offset >= totalOffsetsToStore) {\n            offset -= totalOffsetsToStore;\n        }\n        // Offset is now a number between >= 0 and < totalOffsetsToStore\n        for (let i = 0; i < offsetBits && offset > 0; i++) {\n            // tslint:disable: no-bitwise\n            // 53 is used because 2^53-1 is the biggest number that Javascript can represent as an\n            // integer safely.\n            if (offset & 0x1) {\n                result += powerOfTwo[53 - offsetBits + i];\n            }\n            offset >>>= 1;\n            // tslint:enable: no-bitwise\n        }\n        assert(offset === 0);\n        return result;\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport class EarthConstants {\n    /** The equatorial circumference in meters. */\n    static EQUATORIAL_CIRCUMFERENCE: number = 40075016.6855784861531768177614;\n\n    /** The equatorial radius in meters. */\n    static EQUATORIAL_RADIUS: number = 6378137.0;\n\n    /** The lowest point on earth (Dead Sea) in meters. */\n    static MIN_ELEVATION: number = -433.0;\n\n    /** The highest point on earth (Mt. Everest) in meters. */\n    static MAX_ELEVATION: number = 8848.0;\n\n    /** The highest artificial structure (building) on earth, Burj Khalifa tower in Dubai */\n    static MAX_BUILDING_HEIGHT: number = 828;\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Vector3Like } from \"./Vector3Like\";\n\n/**\n * An interface representing bounding box in world coordinates.\n */\nexport interface Box3Like {\n    /**\n     * The minimum position in world coordinates of this bounding box.\n     */\n    readonly min: Vector3Like;\n\n    /**\n     * The maximum position in world coordinates of this bounding box.\n     */\n    readonly max: Vector3Like;\n}\n\n/**\n * Returns true if the given object implements the [[Box3Like]] interface.\n *\n * @param object A valid object.\n */\nexport function isBox3Like(object: {}): object is Box3Like {\n    const box3 = object as Partial<Box3Like>;\n    return box3.min !== undefined && box3.max !== undefined;\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { TransformLike } from \"./TransformLike\";\nimport { Vector3Like } from \"./Vector3Like\";\n\n/**\n * The interface [[OrientedBox3Like]] is used to represent oriented bounding box.\n */\nexport interface OrientedBox3Like extends TransformLike {\n    /**\n     * The extents of this bounding box.\n     */\n    readonly extents: Vector3Like;\n}\n\n/**\n * Returns true if the given object implements the interface [[OrientedBox3Like]].\n *\n * @param object The object.\n */\nexport function isOrientedBox3Like(object: {}): object is OrientedBox3Like {\n    const obb = object as Partial<OrientedBox3Like>;\n    return (\n        obb.position !== undefined &&\n        obb.xAxis !== undefined &&\n        obb.yAxis !== undefined &&\n        obb.zAxis !== undefined &&\n        obb.extents !== undefined\n    );\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeoBox } from \"../coordinates/GeoBox\";\nimport { GeoCoordinates } from \"../coordinates/GeoCoordinates\";\nimport { GeoCoordinatesLike, isGeoCoordinatesLike } from \"../coordinates/GeoCoordinatesLike\";\nimport { Box3Like } from \"../math/Box3Like\";\nimport { MathUtils } from \"../math/MathUtils\";\nimport { OrientedBox3Like } from \"../math/OrientedBox3Like\";\nimport { TransformLike } from \"../math/TransformLike\";\nimport { Vector3Like } from \"../math/Vector3Like\";\n\n/**\n * The type of projection.\n */\nexport enum ProjectionType {\n    /**\n     * A type of [Projection] with zero curvature.\n     */\n    Planar,\n\n    /**\n     * A spherical [Projection].\n     */\n    Spherical\n}\n\n/**\n * `Projection` is used to convert positions from geo coordinates to world coordinates and vice\n * versa.\n */\nexport abstract class Projection {\n    /**\n     * The type of this [Projection].\n     */\n    abstract get type(): ProjectionType;\n\n    /**\n     * Constructs the Projection\n     *\n     * @param unitScale How to transform the projected coordinates to world units.\n     */\n    constructor(readonly unitScale: number) {\n        //Prevent empty constructor error.\n    }\n\n    /**\n     * Returns the world extents in world coordinates.\n     *\n     * @param minElevation The minimum elevation in meters.\n     * @param maxElevation The maximum elevation in meters.\n     * @param result The optional object that will be used to create the resulting bounding box.\n     */\n    abstract worldExtent<Bounds extends Box3Like>(\n        minElevation: number,\n        maxElevation: number,\n        result?: Bounds\n    ): Bounds;\n\n    /**\n     * Projects a point from geo coordinates (latitude, longitude, altitude) to world coordinates\n     * (x,y,z).\n     *\n     * Example:\n     * ```typescript\n     * const worldPos = new THREE.Vector3();\n     * projection.projectPoint(geoPos, worldPos);\n     * ```\n     *\n     * @param geoPoint The position in geo coordinates.\n     * @param result The optional object used to store the resulting world position, result must\n     * implement [[Vector3Like]].\n     */\n    abstract projectPoint<WorldCoordinates extends Vector3Like>(\n        geoPoint: GeoCoordinatesLike,\n        result?: WorldCoordinates\n    ): WorldCoordinates;\n\n    /**\n     * Gets the [[TransformLike]] of the local tangent space at the given point.\n     *\n     * @param point The geo / world coordinates.\n     * @param result The [[TransformLike]].\n     */\n    localTangentSpace(\n        point: GeoCoordinatesLike | Vector3Like,\n        result: TransformLike\n    ): TransformLike {\n        if (isGeoCoordinatesLike(point)) {\n            this.projectPoint(point, result.position);\n        } else {\n            MathUtils.copyVector3(point, result.position);\n        }\n        MathUtils.newVector3(1, 0, 0, result.xAxis);\n        MathUtils.newVector3(0, 1, 0, result.yAxis);\n        MathUtils.newVector3(0, 0, 1, result.zAxis);\n        return result;\n    }\n\n    /**\n     * Returns the geo coordinates (latitude, longitude, altitude) from the given world position\n     * (x,y,z).\n     *\n     * Example:\n     * ```typescript\n     * const geoPos = projection.unprojectPoint(worldPos);\n     * console.log(geoPos.latitude, geoPos.longitude, geoPos.altitude);\n     * ```\n     *\n     * @param worldPoint The position in world coordinates.\n     */\n    abstract unprojectPoint(worldPoint: Vector3Like): GeoCoordinates;\n\n    /**\n     * Returns the altitude at the given world position (x,y,z) in meters.\n     *\n     * @param worldPoint The position in world coordinates.\n     */\n    abstract unprojectAltitude(worldPoint: Vector3Like): number;\n\n    /**\n     * Projects bounds in geo coordinates to a bounding box in world coordinates.\n     *\n     * Example:\n     * ```typescript\n     * const bounds = projection.projectBox(geoBox);\n     * console.log(bounds.min, bounds.max);\n     * ```\n     *\n     * @param geoBox The bounding box in geo coordinates.\n     */\n    abstract projectBox(geoBox: GeoBox): Box3Like;\n\n    /**\n     * Projects bounds in geo coordinates to a bounding box in world coordinates.\n     *\n     * Example:\n     * ```typescript\n     * const bounds = projection.projectBox(geoBox, new THREE.Box3());\n     * console.log(bounds.min, bounds.max);\n     * ```\n     *\n     * @param geoBox The bounding box in geo coordinates.\n     * @param result The resulting [[OrientedBox3Like]].\n     */\n    abstract projectBox<WorldBoundingBox extends Box3Like | OrientedBox3Like>(\n        geoBox: GeoBox,\n        result: WorldBoundingBox\n    ): WorldBoundingBox;\n\n    /**\n     * Converts a bounding box in world coordinates to a bounding box in geo coordinates.\n     *\n     * Example:\n     * ```typescript\n     * const geoPos = projection.unprojectPoint(worldPos);\n     * console.log(geoPos.latitude, geoPos.longitude, geoPos.altitude);\n     * ```\n     *\n     * @param worldBox The bounding box in world coordinates.\n     */\n    abstract unprojectBox(worldBox: Box3Like): GeoBox;\n\n    /**\n     * Returns the scaling factor that must be used to convert the units used by `worldPoint` to\n     * meters.\n     *\n     * @param worldPoint The position in world coordinates.\n     */\n    abstract getScaleFactor(worldPoint: Vector3Like): number;\n\n    /**\n     * Returns the surface normal at the given world position.\n     *\n     * @param worldPoint The position in world coordinates.\n     */\n    abstract surfaceNormal(worldPoint: Vector3Like): Vector3Like;\n\n    /**\n     * Returns the surface normal at the given world position.\n     *\n     * @param worldPoint The position in world coordinates.\n     * @returns The resulting normal vector.\n     */\n    abstract surfaceNormal<Normal extends Vector3Like>(\n        worldPoint: Vector3Like,\n        result: Normal\n    ): Normal;\n\n    /**\n     * Returns the signed distance between the given coordinates and\n     * the closest point on the surface.\n     *\n     * @param worldPoint The position in world coordinates.\n     */\n    abstract groundDistance(worldPoint: Vector3Like): number;\n\n    /**\n     * Scales the given world coordinates to the surface.\n     *\n     * @param worldPoint The position in world coordinates.\n     */\n    abstract scalePointToSurface(worldPoint: Vector3Like): Vector3Like;\n\n    /**\n     * Reproject a world position from the given source [[Projection]].\n     *\n     * @param sourceProjection The source projection.\n     * @param worldPos A valid world position for the given source projection.\n     * @returns The world position reprojected using this [[Projection]].\n     */\n    reprojectPoint(sourceProjection: Projection, worldPos: Vector3Like): Vector3Like;\n\n    /**\n     * Reproject a world position from the given source [[Projection]].\n     *\n     * @param sourceProjection The source projection.\n     * @param worldPos A valid position in the world space defined by the source projection.\n     * @param result The resulting position reprojected using this [[Projection]].\n     */\n    reprojectPoint<WorldCoordinates extends Vector3Like>(\n        sourceProjection: Projection,\n        worldPos: Vector3Like,\n        result: WorldCoordinates\n    ): WorldCoordinates;\n\n    /**\n     * Reproject a world position from the given source [[Projection]].\n     * Implementations should be aware of worldPos and result may be one object\n     *\n     * @param sourceProjection The source projection.\n     * @param worldPos A valid position in the world space defined by the source projection.\n     * @param result The resulting position reprojected using this [[Projection]].\n     * @hidden\n     */\n    reprojectPoint(\n        sourceProjection: Projection,\n        worldPos: Vector3Like,\n        result?: Vector3Like\n    ): Vector3Like {\n        if (sourceProjection === this) {\n            if (result === undefined) {\n                return { x: worldPos.x, y: worldPos.y, z: worldPos.z };\n            }\n            result.x = worldPos.x;\n            result.y = worldPos.y;\n            result.z = worldPos.z;\n            return result;\n        }\n        return this.projectPoint(sourceProjection.unprojectPoint(worldPos), result);\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from \"./lib/AnimatedExtrusionHandler\";\nexport * from \"./lib/CameraMovementDetector\";\nexport * from \"./lib/ClipPlanesEvaluator\";\nexport * from \"./lib/ColorCache\";\nexport * from \"./lib/composing\";\nexport * from \"./lib/ConcurrentDecoderFacade\";\nexport * from \"./lib/ConcurrentDecoderFacade\";\nexport * from \"./lib/ConcurrentTilerFacade\";\nexport * from \"./lib/ConcurrentTilerFacade\";\nexport * from \"./lib/copyrights/CopyrightElementHandler\";\nexport * from \"./lib/copyrights/CopyrightInfo\";\nexport * from \"./lib/copyrights/CopyrightProvider\";\nexport * from \"./lib/copyrights/CopyrightCoverageProvider\";\nexport * from \"./lib/copyrights/UrlCopyrightProvider\";\nexport * from \"./lib/DataSource\";\nexport * from \"./lib/PolarTileDataSource\";\nexport * from \"./lib/DecodedTileHelpers\";\nexport * from \"./lib/DepthPrePass\";\nexport * from \"./lib/DisplacementMap\";\nexport * from \"./lib/ElevationProvider\";\nexport * from \"./lib/ElevationRangeSource\";\nexport * from \"./lib/image/Image\";\nexport * from \"./lib/image/ImageCache\";\nexport * from \"./lib/image/MapViewImageCache\";\nexport * from \"./lib/MapView\";\nexport * from \"./lib/MapViewAtmosphere\";\nexport * from \"./lib/MapViewFog\";\nexport * from \"./lib/MapViewPoints\";\nexport * from \"./lib/PickHandler\";\nexport * from \"./lib/poi/Poi\";\nexport * from \"./lib/poi/PoiManager\";\nexport * from \"./lib/poi/PoiTableManager\";\nexport * from \"./lib/Statistics\";\nexport * from \"./lib/text/TextElement\";\nexport * from \"./lib/text/TextElementsRenderer\";\nexport * from \"./lib/text/TextStyleCache\";\nexport * from \"./lib/TextureLoader\";\nexport * from \"./lib/ThemeLoader\";\nexport * from \"./lib/Tile\";\nexport * from \"./lib/geometry/TileDataAccessor\";\nexport * from \"./lib/geometry/TileGeometry\";\nexport * from \"./lib/Utils\";\nexport * from \"./lib/VisibleTileSet\";\nexport * from \"./lib/WorkerBasedDecoder\";\nexport * from \"./lib/WorkerBasedTiler\";\nexport * from \"./lib/workers/WorkerLoader\";\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\n/**\n * Unit of measurement used to specify a font's size.\n */\nexport enum FontUnit {\n    Em,\n    Pixel,\n    Point,\n    Percent\n}\n\n/**\n * Pair of unit and size specifying a font's size.\n */\nexport interface FontSize {\n    unit: FontUnit;\n    size: number;\n    backgroundSize: number;\n}\n\n/**\n * Style to be used when rendering glyphs.\n */\nexport enum FontStyle {\n    Regular,\n    Bold,\n    Italic,\n    BoldItalic\n}\n\n/**\n * Variant to be used when rendering.\n */\nexport enum FontVariant {\n    Regular,\n    AllCaps,\n    SmallCaps\n}\n\n/**\n * Vertical alignment to be used when placing text.\n */\nexport enum VerticalAlignment {\n    Above = 0.0,\n    Center = -0.5,\n    Below = -1.0\n}\n\n/**\n * Horizontal alignment to be used when placing text.\n */\nexport enum HorizontalAlignment {\n    Left = 0.0,\n    Center = -0.5,\n    Right = -1.0\n}\n\n/**\n * Vertical position of text area relative to the placement context (point, line).\n */\nexport enum VerticalPlacement {\n    Top = 0.0,\n    Center = -0.5,\n    Bottom = -1.0\n}\n\n/**\n * Horizontal position of text element relative to the placement context (point, line).\n *\n * @note [[HorizontalPlacement]] value is exactly opposite to [[HorizontalAlignment]] value,\n * cause when you place text on the right side of point (or icon) it will be left-aligned.\n */\nexport enum HorizontalPlacement {\n    Left = -1.0,\n    Center = -0.5,\n    Right = 0.0\n}\n\nexport interface TextPlacement {\n    v: VerticalPlacement;\n    h: HorizontalPlacement;\n}\n\nexport type TextPlacements = TextPlacement[];\n\n/**\n * Text wrapping rule used when `lineWidth` is reached.\n */\nexport enum WrappingMode {\n    None,\n    Character,\n    Word\n}\n\n/**\n * @hidden\n * @internal\n * Utility function that gets deduced [[HorizontalAlignment]] from [[HorizontalPlacement]].\n * Horizontal alignments are exactly opposite to the placements.\n */\nexport function hAlignFromPlacement(hP: HorizontalPlacement): HorizontalAlignment {\n    return (hP as unknown) as HorizontalAlignment;\n}\n\n/**\n * @hidden\n * @internal\n * Utility function that gets deduced [[VerticalAlignment]] from [[VerticalPlacement]].\n */\nexport function vAlignFromPlacement(vP: VerticalPlacement): VerticalAlignment {\n    return (vP as unknown) as VerticalAlignment;\n}\n\n/**\n * @hidden\n * @internal\n * Utility function that gets deduced [[HorizontalPlacement]] from [[HorizontalAlignment]].\n * Horizontal placements are exactly opposite to the alignment values.\n */\nexport function hPlacementFromAlignment(hA: HorizontalAlignment): HorizontalPlacement {\n    return (hA as unknown) as HorizontalPlacement;\n}\n\n/**\n * @hidden\n * @internal\n * Utility function that gets deduced [[VerticalPlacement]] from [[VerticalAlignment]].\n */\nexport function vPlacementFromAlignment(vA: VerticalAlignment): VerticalPlacement {\n    return (vA as unknown) as VerticalPlacement;\n}\n\n/**\n * Namespace containing default values for all members of [[TextRenderParameters]] and\n * [[TextLayoutParameters]].\n */\nexport namespace DefaultTextStyle {\n    export const DEFAULT_FONT_NAME: string = \"\";\n    export const DEFAULT_FONT_SIZE: FontSize = {\n        unit: Object.freeze(FontUnit.Pixel),\n        size: Object.freeze(16.0),\n        backgroundSize: Object.freeze(0.0)\n    };\n    export const DEFAULT_FONT_STYLE: FontStyle = FontStyle.Regular;\n    export const DEFAULT_FONT_VARIANT: FontVariant = FontVariant.Regular;\n    export const DEFAULT_ROTATION: number = 0.0;\n    export const DEFAULT_COLOR: THREE.Color = new THREE.Color(0x000000);\n    export const DEFAULT_OPACITY: number = 1.0;\n    export const DEFAULT_BACKGROUND_COLOR: THREE.Color = new THREE.Color(0x000000);\n    export const DEFAULT_BACKGROUND_OPACITY: number = 0.0;\n\n    export const DEFAULT_TRACKING: number = 0.0;\n    export const DEFAULT_LEADING: number = 0.0;\n    export const DEFAULT_MAX_LINES: number = Infinity;\n    export const DEFAULT_LINE_WIDTH: number = Infinity;\n    export const DEFAULT_CANVAS_ROTATION: number = 0.0;\n    export const DEFAULT_LINE_ROTATION: number = 0.0;\n    export const DEFAULT_WRAPPING_MODE: WrappingMode = WrappingMode.Word;\n    export const DEFAULT_VERTICAL_ALIGNMENT: VerticalAlignment = VerticalAlignment.Above;\n    export const DEFAULT_HORIZONTAL_ALIGNMENT: HorizontalAlignment = HorizontalAlignment.Left;\n    export const DEFAULT_PLACEMENTS: TextPlacement[] = [];\n}\n\n/**\n * [[TextCanvas]] text rendering parameters.\n */\nexport interface TextRenderParameters {\n    fontName?: string;\n    fontSize?: FontSize;\n    fontStyle?: FontStyle;\n    fontVariant?: FontVariant;\n    rotation?: number;\n    color?: THREE.Color;\n    backgroundColor?: THREE.Color;\n    opacity?: number;\n    backgroundOpacity?: number;\n}\n\n/**\n * [[TextCanvas]] text rendering style.\n */\nexport class TextRenderStyle {\n    private m_params: TextRenderParameters;\n\n    /**\n     * Creates a new `TextRenderStyle`.\n     *\n     * @param params Input [[TextRenderParameters]].\n     *\n     * @returns New `TextRenderStyle`.\n     */\n    constructor(params: TextRenderParameters = {}) {\n        this.m_params = {\n            fontName:\n                params.fontName !== undefined\n                    ? params.fontName\n                    : DefaultTextStyle.DEFAULT_FONT_NAME,\n            fontSize:\n                params.fontSize !== undefined\n                    ? { ...params.fontSize }\n                    : {\n                          unit: DefaultTextStyle.DEFAULT_FONT_SIZE.unit,\n                          size: DefaultTextStyle.DEFAULT_FONT_SIZE.size,\n                          backgroundSize: DefaultTextStyle.DEFAULT_FONT_SIZE.backgroundSize\n                      },\n            fontStyle:\n                params.fontStyle !== undefined\n                    ? params.fontStyle\n                    : DefaultTextStyle.DEFAULT_FONT_STYLE,\n            fontVariant:\n                params.fontVariant !== undefined\n                    ? params.fontVariant\n                    : DefaultTextStyle.DEFAULT_FONT_VARIANT,\n            rotation:\n                params.rotation !== undefined ? params.rotation : DefaultTextStyle.DEFAULT_ROTATION,\n            color:\n                params.color !== undefined\n                    ? params.color.clone()\n                    : DefaultTextStyle.DEFAULT_COLOR.clone(),\n            opacity:\n                params.opacity !== undefined ? params.opacity : DefaultTextStyle.DEFAULT_OPACITY,\n            backgroundColor:\n                params.backgroundColor !== undefined\n                    ? params.backgroundColor.clone()\n                    : DefaultTextStyle.DEFAULT_BACKGROUND_COLOR.clone(),\n            backgroundOpacity:\n                params.backgroundOpacity !== undefined\n                    ? params.backgroundOpacity\n                    : DefaultTextStyle.DEFAULT_BACKGROUND_OPACITY\n        };\n    }\n\n    /**\n     * Current [[TextRenderParameters]] for this style.\n     */\n    get params(): TextRenderParameters {\n        return this.m_params;\n    }\n    set params(value: TextRenderParameters) {\n        this.m_params = { ...this.m_params, ...value };\n    }\n\n    /**\n     * Name of the preferred [[Font]] to be used when rendering.\n     */\n    get fontName(): string {\n        return this.m_params.fontName!;\n    }\n    set fontName(value: string) {\n        this.m_params.fontName = value;\n    }\n\n    /**\n     * Collection of unit and sizes to apply for the currently active [[Font]].\n     */\n    get fontSize(): FontSize {\n        return this.m_params.fontSize!;\n    }\n    set fontSize(value: FontSize) {\n        this.m_params.fontSize = { ...value };\n    }\n\n    /**\n     * Glyph style to apply for the currently active [[Font]].\n     */\n    get fontStyle(): FontStyle {\n        return this.m_params.fontStyle!;\n    }\n    set fontStyle(value: FontStyle) {\n        this.m_params.fontStyle = value;\n    }\n\n    /**\n     * Glyph variant to apply for the currently active [[Font]].\n     */\n    get fontVariant(): FontVariant {\n        return this.m_params.fontVariant!;\n    }\n    set fontVariant(value: FontVariant) {\n        this.m_params.fontVariant = value;\n    }\n\n    /**\n     * Glyph local rotation (radians).\n     */\n    get rotation(): number {\n        return this.m_params.rotation!;\n    }\n    set rotation(value: number) {\n        this.m_params.rotation = value;\n    }\n\n    /**\n     * Glyph color.\n     */\n    get color(): THREE.Color {\n        return this.m_params.color!;\n    }\n    set color(value: THREE.Color) {\n        this.m_params.color!.copy(value);\n    }\n\n    /**\n     * Glyph background color.\n     */\n    get backgroundColor(): THREE.Color {\n        return this.m_params.backgroundColor!;\n    }\n    set backgroundColor(value: THREE.Color) {\n        this.m_params.backgroundColor!.copy(value);\n    }\n\n    /**\n     * Glyph opacity.\n     */\n    get opacity(): number {\n        return this.m_params.opacity!;\n    }\n    set opacity(value: number) {\n        this.m_params.opacity = value;\n    }\n\n    /**\n     * Glyph background opacity.\n     */\n    get backgroundOpacity(): number {\n        return this.m_params.backgroundOpacity!;\n    }\n    set backgroundOpacity(value: number) {\n        this.m_params.backgroundOpacity = value;\n    }\n\n    /**\n     * Clone this [[TextRenderStyle]].\n     *\n     * @param params Input [[TextRenderParameters]].\n     *\n     * @returns Cloned [[TextRenderStyle]].\n     */\n    clone(params: TextRenderParameters = {}): TextRenderStyle {\n        return new TextRenderStyle({ ...this.m_params, ...params });\n    }\n\n    /**\n     * Copy other [[TextRenderStyle]] properties into this object instance.\n     *\n     * @param source The source object to be copied.\n     *\n     * @returns reference to `this` object.\n     */\n    copy(source: TextRenderStyle): TextRenderStyle {\n        // Given that all source and this params are always defined:\n        this.m_params.fontName = source.fontName;\n        this.m_params.fontSize = { ...source.fontSize };\n        this.m_params.fontStyle = source.fontStyle;\n        this.m_params.fontVariant = source.fontVariant;\n        this.m_params.rotation = source.rotation;\n        this.m_params.color!.copy(source.color);\n        this.m_params.backgroundColor!.copy(source.backgroundColor);\n        this.m_params.opacity = source.opacity;\n        this.m_params.backgroundOpacity = source.backgroundOpacity;\n        return this;\n    }\n}\n\n/**\n * [[TextCanvas]] text layout parameters.\n */\nexport interface TextLayoutParameters {\n    tracking?: number;\n    leading?: number;\n    maxLines?: number;\n    lineWidth?: number;\n    canvasRotation?: number;\n    lineRotation?: number;\n    wrappingMode?: WrappingMode;\n    verticalAlignment?: VerticalAlignment;\n    horizontalAlignment?: HorizontalAlignment;\n    placements?: TextPlacements;\n}\n\n/**\n * [[TextCanvas]] text rendering style.\n */\nexport class TextLayoutStyle {\n    private m_params: TextLayoutParameters;\n\n    /**\n     * Creates a new `TextLayoutStyle`.\n     *\n     * @param params Input [[TextLayoutParameters]].\n     *\n     * @returns New `TextLayoutStyle`.\n     */\n    constructor(params: TextLayoutParameters = {}) {\n        // Solve alignment and placement dependencies and fallbacks.\n        const { horizontalAlignment, verticalAlignment, placements } = resolvePlacementAndAlignment(\n            params.horizontalAlignment,\n            params.verticalAlignment,\n            params.placements\n        );\n        this.m_params = {\n            tracking:\n                params.tracking !== undefined ? params.tracking : DefaultTextStyle.DEFAULT_TRACKING,\n            leading:\n                params.leading !== undefined ? params.leading : DefaultTextStyle.DEFAULT_LEADING,\n            maxLines:\n                params.maxLines !== undefined\n                    ? params.maxLines\n                    : DefaultTextStyle.DEFAULT_MAX_LINES,\n            lineWidth:\n                params.lineWidth !== undefined\n                    ? params.lineWidth\n                    : DefaultTextStyle.DEFAULT_LINE_WIDTH,\n            canvasRotation:\n                params.canvasRotation !== undefined\n                    ? params.canvasRotation\n                    : DefaultTextStyle.DEFAULT_CANVAS_ROTATION,\n            lineRotation:\n                params.lineRotation !== undefined\n                    ? params.lineRotation\n                    : DefaultTextStyle.DEFAULT_LINE_ROTATION,\n            wrappingMode:\n                params.wrappingMode !== undefined\n                    ? params.wrappingMode\n                    : DefaultTextStyle.DEFAULT_WRAPPING_MODE,\n            verticalAlignment,\n            horizontalAlignment,\n            placements\n        };\n    }\n\n    /**\n     * Current [[TextLayoutParameters]] for this style.\n     */\n    get params(): TextLayoutParameters {\n        return this.m_params;\n    }\n    set params(value: TextLayoutParameters) {\n        this.m_params = { ...this.m_params, ...value };\n    }\n\n    /**\n     * Inter-glyph spacing (pixels). Scaled by [[FontSize]].\n     */\n    get tracking(): number {\n        return this.m_params.tracking!;\n    }\n    set tracking(value: number) {\n        this.m_params.tracking = value;\n    }\n\n    /**\n     * Inter-line spacing (pixels). Scaled by [[FontSize]].\n     */\n    get leading(): number {\n        return this.m_params.leading!;\n    }\n    set leading(value: number) {\n        this.m_params.leading = value;\n    }\n\n    /**\n     * Maximum number of lines to be considered when using [[TextCanvas]].\n     */\n    get maxLines(): number {\n        return this.m_params.maxLines!;\n    }\n    set maxLines(value: number) {\n        this.m_params.maxLines = value;\n    }\n\n    /**\n     * Maximum line width (pixels).\n     */\n    get lineWidth(): number {\n        return this.m_params.lineWidth!;\n    }\n    set lineWidth(value: number) {\n        this.m_params.lineWidth = value;\n    }\n\n    /**\n     * [[TextCanvas]] rotation (radians).\n     */\n    get canvasRotation(): number {\n        return this.m_params.canvasRotation!;\n    }\n    set canvasRotation(value: number) {\n        this.m_params.canvasRotation = value;\n    }\n\n    /**\n     * Line typesetting rotation (radians).\n     */\n    get lineRotation(): number {\n        return this.m_params.lineRotation!;\n    }\n    set lineRotation(value: number) {\n        this.m_params.lineRotation = value;\n    }\n\n    /**\n     * Wrapping (line-breaking) mode.\n     */\n    get wrappingMode(): WrappingMode {\n        return this.m_params.wrappingMode!;\n    }\n    set wrappingMode(value: WrappingMode) {\n        this.m_params.wrappingMode = value;\n    }\n\n    /**\n     * Text position regarding the baseline.\n     */\n    get verticalAlignment(): VerticalAlignment {\n        return this.m_params.verticalAlignment!;\n    }\n    set verticalAlignment(value: VerticalAlignment) {\n        this.m_params.verticalAlignment = value;\n    }\n\n    /**\n     * Text position inside a line.\n     */\n    get horizontalAlignment(): HorizontalAlignment {\n        return this.m_params.horizontalAlignment!;\n    }\n    set horizontalAlignment(value: HorizontalAlignment) {\n        this.m_params.horizontalAlignment = value;\n    }\n\n    /**\n     * Text placement options relative to label anchor (origin).\n     *\n     * @note [[TextPlacement]]s options may override alignment settings.\n     */\n    get placements(): TextPlacements {\n        return this.m_params.placements!;\n    }\n    set placements(value: TextPlacements) {\n        const { horizontalAlignment, verticalAlignment, placements } = resolvePlacementAndAlignment(\n            this.horizontalAlignment,\n            this.verticalAlignment,\n            value\n        );\n        this.m_params.horizontalAlignment = horizontalAlignment;\n        this.m_params.verticalAlignment = verticalAlignment;\n        this.m_params.placements = placements;\n    }\n\n    /**\n     * Clone this [[TextLayoutStyle]].\n     *\n     * @param params Input [[TextLayoutParameters]].\n     *\n     * @returns Cloned [[TextLayoutStyle]].\n     */\n    clone(params: TextLayoutParameters = {}): TextLayoutStyle {\n        return new TextLayoutStyle({ ...this.m_params, ...params });\n    }\n\n    /**\n     * Copy other [[TextLayoutStyle]] properties into this object instance.\n     *\n     * @param other The object to be copied.\n     *\n     * @returns reference to `this` object.\n     */\n    copy(other: TextLayoutStyle): TextLayoutStyle {\n        this.params = { ...other.params };\n        return this;\n    }\n}\n\n/**\n * Deduce alignment and placement attributes depending on the availability.\n *\n * If placement is defined it may override alignment settings, if no attributes are\n * provided they may be retrieved from defaults.\n *\n * @param hAlignment The optional horizontal alignment.\n * @param vAlignment The vertical alignment - optional.\n * @param placementsOpt Possible text placements - optional.\n * @internal\n */\nexport function resolvePlacementAndAlignment(\n    hAlignment?: HorizontalAlignment,\n    vAlignment?: VerticalAlignment,\n    placementsOpt?: TextPlacements\n): {\n    horizontalAlignment: HorizontalAlignment;\n    verticalAlignment: VerticalAlignment;\n    placements: TextPlacements;\n} {\n    // Make a deep copy or create new array from defaults.\n    const placements: TextPlacements =\n        placementsOpt?.map(v => ({ ...v })) ??\n        DefaultTextStyle.DEFAULT_PLACEMENTS.map(v => ({ ...v }));\n    // Ignore alignment attributes when placements attributes are defined or provide default\n    // values if none of them are provided.\n    // NOTE: Alignment override may be removed if we decide to support both attributes.\n    const horizontalAlignment =\n        placements.length > 0\n            ? hAlignFromPlacement(placements[0].h)\n            : hAlignment ?? DefaultTextStyle.DEFAULT_HORIZONTAL_ALIGNMENT;\n\n    const verticalAlignment =\n        placements.length > 0\n            ? vAlignFromPlacement(placements[0].v)\n            : vAlignment ?? DefaultTextStyle.DEFAULT_VERTICAL_ALIGNMENT;\n\n    return { horizontalAlignment, verticalAlignment, placements };\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    BufferAttribute,\n    ColorUtils,\n    Env,\n    Expr,\n    getPropertyValue,\n    isExtrudedLineTechnique,\n    isExtrudedPolygonTechnique,\n    isShaderTechnique,\n    isStandardTechnique,\n    isTerrainTechnique,\n    isTextureBuffer,\n    parseStringEncodedColor,\n    ShaderTechnique,\n    Technique,\n    techniqueDescriptors,\n    TextureProperties,\n    TEXTURE_PROPERTY_KEYS,\n    TRANSPARENCY_PROPERTY_KEYS,\n    Value\n} from \"@here/harp-datasource-protocol\";\nimport {\n    CirclePointsMaterial,\n    disableBlending,\n    enableBlending,\n    HighPrecisionLineMaterial,\n    MapMeshBasicMaterial,\n    MapMeshStandardMaterial,\n    SolidLineMaterial\n} from \"@here/harp-materials\";\nimport { assert, LoggerManager, pick } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\nimport { DisplacedMesh } from \"./geometry/DisplacedMesh\";\nimport { SolidLineMesh } from \"./geometry/SolidLineMesh\";\nimport { MapAdapterUpdateEnv, MapMaterialAdapter, StyledProperties } from \"./MapMaterialAdapter\";\nimport { Circles, Squares } from \"./MapViewPoints\";\nimport { toPixelFormat, toTextureDataType, toTextureFilter, toWrappingMode } from \"./ThemeHelpers\";\nimport { Tile } from \"./Tile\";\n\nconst logger = LoggerManager.instance.create(\"DecodedTileHelpers\");\n\n/**\n * The structure of the options to pass into [[createMaterial]].\n */\nexport interface MaterialOptions {\n    /**\n     * The shader [[Technique]] to choose.\n     */\n    technique: Technique;\n\n    /**\n     * Environment used to evaluate dynamic technique attributes.\n     *\n     * Usually [[MapView.mapEnv]].\n     */\n    env: Env;\n\n    /**\n     * Properties to skip.\n     *\n     * @see [[applyTechniqueToMaterial]]\n     */\n    skipExtraProps?: string[];\n\n    /**\n     * `RawShaderMaterial` instances need to know about the fog at instantiation in order to avoid\n     * recompiling them manually later (ThreeJS does not update fog for `RawShaderMaterial`s).\n     */\n    fog?: boolean;\n\n    /**\n     * Whether shadows are enabled or not, this is required because we change the material used.\n     */\n    shadowsEnabled?: boolean;\n}\n\n/**\n * Create a material, depending on the rendering technique provided in the options.\n *\n * @param options The material options the subsequent functions need.\n * @param materialUpdateCallback Optional callback when the material gets updated,\n *                               e.g. after texture loading.\n *\n * @returns new material instance that matches `technique.name`\n */\nexport function createMaterial(\n    options: MaterialOptions,\n    textureReadyCallback?: (texture: THREE.Texture) => void\n): THREE.Material | undefined {\n    const technique = options.technique;\n    const Constructor = getMaterialConstructor(technique, options.shadowsEnabled === true);\n\n    const settings: { [key: string]: any } = {};\n\n    if (Constructor === undefined) {\n        return undefined;\n    }\n\n    if (\n        Constructor.prototype instanceof THREE.RawShaderMaterial &&\n        Constructor !== HighPrecisionLineMaterial\n    ) {\n        settings.fog = options.fog;\n    }\n    if (options.shadowsEnabled === true && technique.name === \"fill\") {\n        settings.removeDiffuseLight = true;\n    }\n\n    const material = new Constructor(settings);\n\n    if (technique.id !== undefined) {\n        material.name = technique.id;\n    }\n\n    if (isExtrudedPolygonTechnique(technique)) {\n        material.flatShading = true;\n    }\n\n    material.depthTest = isExtrudedPolygonTechnique(technique) && technique.depthTest !== false;\n\n    if (\n        isStandardTechnique(technique) ||\n        isTerrainTechnique(technique) ||\n        isExtrudedPolygonTechnique(technique)\n    ) {\n        TEXTURE_PROPERTY_KEYS.forEach((texturePropertyName: string) => {\n            const textureProperty = (technique as any)[texturePropertyName];\n            if (textureProperty === undefined) {\n                return;\n            }\n\n            const onLoad = (texture: THREE.Texture) => {\n                const properties = (technique as any)[\n                    texturePropertyName + \"Properties\"\n                ] as TextureProperties;\n                if (properties !== undefined) {\n                    if (properties.wrapS !== undefined) {\n                        texture.wrapS = toWrappingMode(properties.wrapS);\n                    }\n                    if (properties.wrapT !== undefined) {\n                        texture.wrapT = toWrappingMode(properties.wrapT);\n                    }\n                    if (properties.magFilter !== undefined) {\n                        texture.magFilter = toTextureFilter(properties.magFilter);\n                    }\n                    if (properties.minFilter !== undefined) {\n                        texture.minFilter = toTextureFilter(properties.minFilter);\n                    }\n                    if (properties.flipY !== undefined) {\n                        texture.flipY = properties.flipY;\n                    }\n                    if (properties.repeatU !== undefined) {\n                        texture.repeat.x = properties.repeatU;\n                    }\n                    if (properties.repeatV !== undefined) {\n                        texture.repeat.y = properties.repeatV;\n                    }\n                }\n                (material as any)[texturePropertyName] = texture;\n                texture.needsUpdate = true;\n                material.needsUpdate = true;\n\n                if (textureReadyCallback) {\n                    textureReadyCallback(texture);\n                }\n            };\n\n            const onError = (error: ErrorEvent | string) => {\n                logger.error(\"#createMaterial: Failed to load texture: \", error);\n            };\n\n            let textureUrl: string | undefined;\n            if (typeof textureProperty === \"string\") {\n                textureUrl = textureProperty;\n            } else if (isTextureBuffer(textureProperty)) {\n                if (textureProperty.type === \"image/raw\") {\n                    const properties = textureProperty.dataTextureProperties;\n                    if (properties !== undefined) {\n                        const textureDataType: THREE.TextureDataType | undefined = properties.type\n                            ? toTextureDataType(properties.type)\n                            : undefined;\n                        const textureBuffer = getTextureBuffer(\n                            textureProperty.buffer,\n                            textureDataType\n                        );\n\n                        const texture = new THREE.DataTexture(\n                            textureBuffer,\n                            properties.width,\n                            properties.height,\n                            properties.format ? toPixelFormat(properties.format) : undefined,\n                            textureDataType\n                        );\n                        onLoad(texture);\n                    } else {\n                        onError(\"no data texture properties provided.\");\n                    }\n                } else {\n                    const textureBlob = new Blob([textureProperty.buffer], {\n                        type: textureProperty.type\n                    });\n                    textureUrl = URL.createObjectURL(textureBlob);\n                }\n            }\n\n            if (textureUrl) {\n                new THREE.TextureLoader().load(\n                    textureUrl,\n                    onLoad,\n                    undefined, // onProgress\n                    onError\n                );\n            }\n        });\n    }\n\n    if (isShaderTechnique(technique)) {\n        // Special case for ShaderTechnique.\n        applyShaderTechniqueToMaterial(technique, material);\n    } else {\n        MapMaterialAdapter.create(material, getMainMaterialStyledProps(technique));\n    }\n    return material;\n}\n\n/**\n * Returns a [[THREE.BufferAttribute]] created from a provided [[BufferAttribute]] object.\n *\n * @param attribute BufferAttribute a WebGL compliant buffer\n */\nexport function getBufferAttribute(attribute: BufferAttribute): THREE.BufferAttribute {\n    switch (attribute.type) {\n        case \"float\":\n            return new THREE.BufferAttribute(\n                new Float32Array(attribute.buffer),\n                attribute.itemCount\n            );\n        case \"uint8\":\n            return new THREE.BufferAttribute(\n                new Uint8Array(attribute.buffer),\n                attribute.itemCount,\n                attribute.normalized\n            );\n        case \"uint16\":\n            return new THREE.BufferAttribute(\n                new Uint16Array(attribute.buffer),\n                attribute.itemCount,\n                attribute.normalized\n            );\n        case \"uint32\":\n            return new THREE.BufferAttribute(\n                new Uint32Array(attribute.buffer),\n                attribute.itemCount,\n                attribute.normalized\n            );\n        case \"int8\":\n            return new THREE.BufferAttribute(\n                new Int8Array(attribute.buffer),\n                attribute.itemCount,\n                attribute.normalized\n            );\n        case \"int16\":\n            return new THREE.BufferAttribute(\n                new Int16Array(attribute.buffer),\n                attribute.itemCount,\n                attribute.normalized\n            );\n        case \"int32\":\n            return new THREE.BufferAttribute(\n                new Int32Array(attribute.buffer),\n                attribute.itemCount,\n                attribute.normalized\n            );\n        default:\n            throw new Error(`unsupported buffer of type ${attribute.type}`);\n    } // switch\n}\n\n/**\n * Determines if a technique uses THREE.Object3D instances.\n * @param technique The technique to check.\n * @returns true if technique uses THREE.Object3D, false otherwise.\n */\nexport function usesObject3D(technique: Technique): boolean {\n    const name = technique.name;\n    return (\n        name !== undefined &&\n        name !== \"text\" &&\n        name !== \"labeled-icon\" &&\n        name !== \"line-marker\" &&\n        name !== \"label-rejection-line\"\n    );\n}\n\n/**\n * Builds the object associated with the given technique.\n *\n * @param technique The technique.\n * @param geometry The object's geometry.\n * @param material The object's material.\n * @param tile The tile where the object is located.\n * @param elevationEnabled True if elevation is enabled, false otherwise.\n */\nexport function buildObject(\n    technique: Technique,\n    geometry: THREE.BufferGeometry,\n    material: THREE.Material | THREE.Material[],\n    tile: Tile,\n    elevationEnabled: boolean\n): THREE.Object3D {\n    assert(technique.name !== undefined);\n\n    switch (technique.name) {\n        case \"extruded-line\":\n        case \"standard\":\n        case \"extruded-polygon\":\n        case \"fill\":\n            return elevationEnabled\n                ? new DisplacedMesh(geometry, material, () => ({\n                      min: tile.elevationRange.minElevation,\n                      max: tile.elevationRange.maxElevation\n                  }))\n                : new THREE.Mesh(geometry, material);\n        case \"terrain\":\n            return new THREE.Mesh(geometry, material);\n        case \"dashed-line\":\n        case \"solid-line\":\n            return elevationEnabled\n                ? new DisplacedMesh(\n                      geometry,\n                      material,\n                      () => ({\n                          min: tile.elevationRange.minElevation,\n                          max: tile.elevationRange.maxElevation\n                      }),\n                      SolidLineMesh.raycast\n                  )\n                : new SolidLineMesh(geometry, material);\n\n        case \"circles\":\n            return new Circles(geometry, material);\n\n        case \"squares\":\n            return new Squares(geometry, material);\n\n        case \"line\":\n            return new THREE.LineSegments(geometry, material);\n\n        case \"segments\":\n            return new THREE.LineSegments(geometry, material);\n\n        case \"shader\": {\n            assert(isShaderTechnique(technique), \"Invalid technique\");\n\n            switch (technique.primitive) {\n                case \"line\":\n                    return new THREE.Line(geometry, material);\n                case \"segments\":\n                    return new THREE.LineSegments(geometry, material);\n                case \"point\":\n                    return new THREE.Points(geometry, material);\n                case \"mesh\":\n                    return new THREE.Mesh(geometry, material);\n            }\n        }\n    }\n    assert(false, \"Invalid technique\");\n    return new THREE.Object3D();\n}\n\n/**\n * Non material properties of [[BaseTechnique]]\n */\nexport const BASE_TECHNIQUE_NON_MATERIAL_PROPS = [\"name\", \"id\", \"renderOrder\", \"transient\"];\n\n/**\n * Generic material type constructor.\n */\nexport type MaterialConstructor = new (params?: {}) => THREE.Material;\n\n/**\n * Returns a [[MaterialConstructor]] basing on provided technique object.\n *\n * @param technique [[Technique]] object which the material will be based on.\n * @param shadowsEnabled Whether the material can accept shadows, this is required for some\n * techniques to decide which material to create.\n */\nexport function getMaterialConstructor(\n    technique: Technique,\n    shadowsEnabled: boolean\n): MaterialConstructor | undefined {\n    if (technique.name === undefined) {\n        return undefined;\n    }\n\n    switch (technique.name) {\n        case \"extruded-line\":\n            if (!isExtrudedLineTechnique(technique)) {\n                throw new Error(\"Invalid extruded-line technique\");\n            }\n            return technique.shading === \"standard\"\n                ? MapMeshStandardMaterial\n                : MapMeshBasicMaterial;\n\n        case \"standard\":\n        case \"terrain\":\n        case \"extruded-polygon\":\n            return MapMeshStandardMaterial;\n\n        case \"dashed-line\":\n        case \"solid-line\":\n            return SolidLineMaterial;\n\n        case \"fill\":\n            return shadowsEnabled ? MapMeshStandardMaterial : MapMeshBasicMaterial;\n\n        case \"squares\":\n            return THREE.PointsMaterial;\n\n        case \"circles\":\n            return CirclePointsMaterial;\n\n        case \"line\":\n        case \"segments\":\n            return THREE.LineBasicMaterial;\n\n        case \"shader\":\n            return THREE.ShaderMaterial;\n\n        case \"text\":\n        case \"labeled-icon\":\n        case \"line-marker\":\n        case \"label-rejection-line\":\n            return undefined;\n    }\n}\n\n/**\n * Styled properties of main material (created by [[createMaterial]]) managed by\n * [[MapObjectAdapter]].\n */\nfunction getMainMaterialStyledProps(technique: Technique): StyledProperties {\n    switch (technique.name) {\n        case \"dashed-line\":\n        case \"solid-line\": {\n            const baseProps: StyledProperties = pick(technique, [\n                \"color\",\n                \"outlineColor\",\n                \"transparent\",\n                \"opacity\",\n                \"caps\",\n                \"drawRangeStart\",\n                \"drawRangeEnd\",\n                \"dashes\",\n                \"dashColor\",\n                \"polygonOffset\",\n                \"polygonOffsetFactor\",\n                \"polygonOffsetUnits\"\n            ]);\n            baseProps.lineWidth = buildMetricValueEvaluator(\n                technique.lineWidth ?? 0, // Compatibility: `undefined` lineWidth means hidden.\n                // tslint:disable-next-line: deprecation\n                technique.metricUnit\n            );\n            baseProps.outlineWidth = buildMetricValueEvaluator(\n                technique.outlineWidth,\n                // tslint:disable-next-line: deprecation\n                technique.metricUnit\n            );\n            baseProps.dashSize = buildMetricValueEvaluator(\n                technique.dashSize,\n                // tslint:disable-next-line: deprecation\n                technique.metricUnit\n            );\n            baseProps.gapSize = buildMetricValueEvaluator(\n                technique.gapSize,\n                // tslint:disable-next-line: deprecation\n                technique.metricUnit\n            );\n            baseProps.offset = buildMetricValueEvaluator(\n                technique.offset,\n                // tslint:disable-next-line: deprecation\n                technique.metricUnit\n            );\n            return baseProps;\n        }\n        case \"fill\":\n            return pick(technique, [\n                \"color\",\n                \"transparent\",\n                \"opacity\",\n                \"polygonOffset\",\n                \"polygonOffsetFactor\",\n                \"polygonOffsetUnits\"\n            ]);\n        case \"standard\":\n        case \"terrain\":\n        case \"extruded-polygon\": {\n            const baseProps: StyledProperties = pick(technique, [\n                \"vertexColors\",\n                \"wireframe\",\n                \"roughness\",\n                \"metalness\",\n                \"alphaTest\",\n                \"depthTest\",\n                \"transparent\",\n                \"opacity\",\n                \"emissive\",\n                \"emissiveIntensity\",\n                \"refractionRatio\",\n                \"normalMapType\"\n                // All texture related properties are skipped as for now as they are handled by\n                // [[createMaterial]] directly without possibility for them to be dynamic.\n                // TODO: move handling of texture-like params to [[MapMaterialAdapter]] with proper\n                // support for dynamic params\n            ]);\n            if (technique.vertexColors !== true) {\n                baseProps.color = technique.color;\n            }\n            return baseProps;\n        }\n        case \"circles\":\n        case \"squares\":\n            return pick(technique, [\"color\", \"size\", \"opacity\", \"transparent\"]);\n        case \"extruded-line\":\n            return pick(technique, [\n                \"color\",\n                \"wireframe\",\n                \"transparent\",\n                \"opacity\",\n                \"polygonOffset\",\n                \"polygonOffsetFactor\",\n                \"polygonOffsetUnits\"\n            ]);\n        case \"line\":\n        case \"segments\":\n            return pick(technique, [\"color\", \"transparent\", \"opacity\"]);\n        default:\n            return {};\n    }\n}\n\n/**\n * Convert metric style property to expression that accounts [[MapView.pixelToWorld]] if\n * `metricUnit === 'Pixel'`.\n */\nexport function buildMetricValueEvaluator(\n    value: Expr | Value | undefined,\n    metricUnit: string | undefined\n) {\n    if (value === undefined || value === null) {\n        return value;\n    }\n    if (typeof value === \"string\") {\n        if (value.endsWith(\"px\")) {\n            metricUnit = \"Pixel\";\n            value = Number.parseFloat(value);\n        } else if (value.endsWith(\"m\")) {\n            value = Number.parseFloat(value);\n        }\n    }\n    if (metricUnit === \"Pixel\") {\n        return (context: MapAdapterUpdateEnv) => {\n            const pixelToWorld = (context.env.lookup(\"$pixelToMeters\") as number) ?? 1;\n            const evaluated = getPropertyValue(value, context.env);\n            return pixelToWorld * evaluated;\n        };\n    } else {\n        return value;\n    }\n}\n\n/**\n * Allows to easy parse/encode technique's base color property value as number coded color.\n *\n * Function takes care about property parsing, interpolation and encoding if neccessary.\n *\n * @see ColorUtils\n * @param technique the technique where we search for base (transparency) color value\n * @param env [[Env]] instance used to evaluate [[Expr]] based properties of [[Technique]]\n * @returns [[number]] encoded color value (in custom #TTRRGGBB) format or `undefined` if\n * base color property is not defined in the technique passed.\n */\nexport function evaluateBaseColorProperty(technique: Technique, env: Env): number | undefined {\n    const baseColorProp = getBaseColorProp(technique);\n    if (baseColorProp !== undefined) {\n        return evaluateColorProperty(baseColorProp, env);\n    }\n    return undefined;\n}\n\n/**\n * Apply [[ShaderTechnique]] parameters to material.\n *\n * @param technique the [[ShaderTechnique]] which requires special handling\n * @param material material to which technique will be applied\n */\nfunction applyShaderTechniqueToMaterial(technique: ShaderTechnique, material: THREE.Material) {\n    if (technique.transparent) {\n        enableBlending(material);\n    } else {\n        disableBlending(material);\n    }\n\n    // The shader technique takes the argument from its `params' member.\n    const params = technique.params as { [key: string]: any };\n    // Remove base color and transparency properties from the processed set.\n    const baseColorPropName = getBaseColorPropName(technique);\n    const hasBaseColor = baseColorPropName && baseColorPropName in technique.params;\n    const props = Object.getOwnPropertyNames(params).filter(propertyName => {\n        // Omit base color and related transparency attributes if its defined in technique\n        if (\n            baseColorPropName === propertyName ||\n            (hasBaseColor && TRANSPARENCY_PROPERTY_KEYS.indexOf(propertyName) !== -1)\n        ) {\n            return false;\n        }\n        const prop = propertyName as keyof typeof params;\n        if (prop === \"name\") {\n            // skip reserved property names\n            return false;\n        }\n        return true;\n    });\n\n    // Apply all technique properties omitting base color and transparency attributes.\n    props.forEach(propertyName => {\n        // TODO: Check if properties values should not be interpolated, possible bug in old code!\n        // This behavior is kept in the new version too, level is set to undefined.\n        applyTechniquePropertyToMaterial(material, propertyName, params[propertyName]);\n    });\n\n    if (hasBaseColor) {\n        const propColor = baseColorPropName as keyof THREE.Material;\n        // Finally apply base color and related properties to material (opacity, transparent)\n        applyBaseColorToMaterial(material, material[propColor], technique, params[propColor]);\n    }\n}\n\n/**\n * Apply single and generic technique property to corresponding material parameter.\n *\n * @note Special handling for material attributes of [[THREE.Color]] type is provided thus it\n * does not provide constructor that would take [[string]] or [[number]] values.\n *\n * @param material target material\n * @param propertyName material and technique parameter name (or index) that is to be transferred\n * @param techniqueAttrValue technique property value which will be applied to material attribute\n * @param env [[Env]] instance used to evaluate [[Expr]] based properties of [[Technique]]\n */\nfunction applyTechniquePropertyToMaterial(\n    material: THREE.Material,\n    propertyName: string,\n    techniqueAttrValue: Value,\n    env?: Env\n) {\n    const m = material as any;\n    if (m[propertyName] instanceof THREE.Color) {\n        applySecondaryColorToMaterial(\n            material[propertyName as keyof THREE.Material],\n            techniqueAttrValue,\n            env\n        );\n    } else {\n        const value = evaluateProperty(techniqueAttrValue, env);\n        if (value !== null) {\n            m[propertyName] = value;\n        }\n    }\n}\n\n/**\n * Apply technique color to material taking special care with transparent (RGBA) colors.\n *\n * @note This function is intended to be used with secondary, triary etc. technique colors,\n * not the base ones that may contain transparency information. Such colors should be processed\n * with [[applyTechniqueBaseColorToMaterial]] function.\n *\n * @param technique an technique the applied color comes from\n * @param material the material to which color is applied\n * @param prop technique property (color) name\n * @param value color value\n * @param env [[Env]] instance used to evaluate [[Expr]] based properties of [[Technique]]\n */\nexport function applySecondaryColorToMaterial(\n    materialColor: THREE.Color,\n    techniqueColor: Value | Expr,\n    env?: Env\n) {\n    let value = evaluateColorProperty(techniqueColor, env);\n    if (value === undefined) {\n        return;\n    }\n    if (ColorUtils.hasAlphaInHex(value)) {\n        logger.warn(\"Used RGBA value for technique color without transparency support!\");\n        // Just for clarity remove transparency component, even if that would be ignored\n        // by THREE.Color.setHex() function.\n        value = ColorUtils.removeAlphaFromHex(value);\n    }\n\n    materialColor.setHex(value);\n}\n\n/**\n * Apply technique base color (transparency support) to material with modifying material opacity.\n *\n * This method applies main (or base) technique color with transparency support to the corresponding\n * material color, with an effect on entire [[THREE.Material]] __opacity__ and __transparent__\n * attributes.\n *\n * @note Transparent colors should be processed as the very last technique attributes,\n * since their effect on material properties like [[THREE.Material.opacity]] and\n * [[THREE.Material.transparent]] could be overridden by corresponding technique params.\n *\n * @param technique an technique the applied color comes from\n * @param material the material to which color is applied\n * @param prop technique property (color) name\n * @param value color value in custom number format\n * @param env [[Env]] instance used to evaluate [[Expr]] based properties of [[Technique]]\n */\nexport function applyBaseColorToMaterial(\n    material: THREE.Material,\n    materialColor: THREE.Color,\n    technique: Technique,\n    techniqueColor: Value,\n    env?: Env\n) {\n    const colorValue = evaluateColorProperty(techniqueColor, env);\n    if (colorValue === undefined) {\n        return;\n    }\n\n    const { r, g, b, a } = ColorUtils.getRgbaFromHex(colorValue);\n    // Override material opacity and blending by mixing technique defined opacity\n    // with main color transparency\n    const tech = technique as any;\n    let opacity = a;\n    if (tech.opacity !== undefined) {\n        opacity *= evaluateProperty(tech.opacity, env);\n    }\n\n    opacity = THREE.MathUtils.clamp(opacity, 0, 1);\n    material.opacity = opacity;\n    materialColor.setRGB(r, g, b);\n\n    const opaque = opacity >= 1.0;\n    if (!opaque) {\n        enableBlending(material);\n    } else {\n        disableBlending(material);\n    }\n}\n\n/**\n * Calculates the value of the technique defined property.\n *\n * Function takes care about property interpolation (when @param `env` is set) as also parsing\n * string encoded numbers.\n *\n * @note Use with care, because function does not recognize property type.\n * @param value the value of color property defined in technique\n * @param env [[Env]] instance used to evaluate [[Expr]] based properties of [[Technique]]\n */\nfunction evaluateProperty(value: any, env?: Env): any {\n    if (env !== undefined && Expr.isExpr(value)) {\n        value = getPropertyValue(value, env);\n    }\n    return value;\n}\n\n/**\n * Calculates the numerical value of the technique defined color property.\n *\n * Function takes care about color interpolation (when @param `env is set) as also parsing\n * string encoded colors.\n *\n * @note Use with care, because function does not recognize property type.\n * @param value the value of color property defined in technique\n * @param env [[Env]] instance used to evaluate [[Expr]] based properties of [[Technique]]\n */\nexport function evaluateColorProperty(value: Value, env?: Env): number | undefined {\n    value = evaluateProperty(value, env);\n\n    if (value === undefined || value === null) {\n        return undefined;\n    }\n\n    if (typeof value === \"number\") {\n        return value;\n    }\n\n    if (typeof value === \"string\") {\n        const parsed = parseStringEncodedColor(value);\n        if (parsed !== undefined) {\n            return parsed;\n        }\n    }\n\n    logger.error(`Unsupported color format: '${value}'`);\n    return undefined;\n}\n\n/**\n * Allows to access base color property value for given technique.\n *\n * The color value may be encoded in [[number]], [[string]] or even as\n * [[InterpolateProperty]].\n *\n * @param technique The techniqe where we seach for base color property.\n * @returns The value of technique color used to apply transparency.\n */\nfunction getBaseColorProp(technique: Technique): any {\n    const baseColorPropName = getBaseColorPropName(technique);\n    if (baseColorPropName !== undefined) {\n        if (!isShaderTechnique(technique)) {\n            const propColor = baseColorPropName as keyof typeof technique;\n            return technique[propColor];\n        } else {\n            const params = technique.params as { [key: string]: any };\n            const propColor = baseColorPropName as keyof typeof params;\n            return params[propColor];\n        }\n    }\n    return undefined;\n}\n\nfunction getBaseColorPropName(technique: Technique): string | undefined {\n    const techDescriptor = techniqueDescriptors[technique.name];\n    return techDescriptor !== undefined ? techDescriptor.attrTransparencyColor : undefined;\n}\n\nfunction getTextureBuffer(\n    buffer: ArrayBuffer,\n    textureDataType: THREE.TextureDataType | undefined\n): THREE.TypedArray {\n    if (textureDataType === undefined) {\n        return new Uint8Array(buffer);\n    }\n\n    switch (textureDataType) {\n        case THREE.UnsignedByteType:\n            return new Uint8Array(buffer);\n        case THREE.ByteType:\n            return new Int8Array(buffer);\n        case THREE.ShortType:\n            return new Int16Array(buffer);\n        case THREE.UnsignedShortType:\n            return new Uint16Array(buffer);\n        case THREE.IntType:\n            return new Int32Array(buffer);\n        case THREE.UnsignedIntType:\n            return new Uint32Array(buffer);\n        case THREE.FloatType:\n            return new Float32Array(buffer);\n        case THREE.HalfFloatType:\n            return new Uint16Array(buffer);\n    }\n\n    throw new Error(\"Unsupported texture data type\");\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    GeometryKind,\n    GeometryKindSet,\n    ImageTexture,\n    LineMarkerTechnique,\n    PoiStackMode,\n    PoiTechnique\n} from \"@here/harp-datasource-protocol\";\nimport {\n    GlyphData,\n    TextBufferObject,\n    TextLayoutParameters,\n    TextLayoutStyle,\n    TextRenderParameters,\n    TextRenderStyle\n} from \"@here/harp-text-canvas\";\nimport { Math2D, MathUtils } from \"@here/harp-utils\";\n\nimport * as THREE from \"three\";\n\nimport { ImageItem } from \"../image/Image\";\nimport { PickResult } from \"../PickHandler\";\nimport { TextElementType } from \"./TextElementType\";\n\n/**\n * Additional information for an icon that is to be rendered along with a [[TextElement]].\n */\nexport interface PoiInfo {\n    /**\n     * Technique defining the POI or LineMarker\n     */\n    technique: PoiTechnique | LineMarkerTechnique;\n\n    /**\n     * Name of the [[ImageTexture]].\n     */\n    imageTextureName: string;\n\n    /**\n     * Icon color override\n     *\n     * @see [[MarkerTechniqueParams.iconColor]];\n     */\n    iconColor?: THREE.Color;\n\n    /**\n     * Icon brightness.\n     *\n     * @see [[MarkerTechniqueParams.iconBrightness]];\n     */\n    iconBrightness?: number;\n\n    /**\n     * Name of the POI table [[PoiTable]].\n     */\n    poiTableName?: string;\n\n    /**\n     * Name of the POI description in the [[PoiTable]].\n     */\n    poiName?: string;\n\n    /**\n     * Specify stack mode. Defaults to `ShowInStack`.\n     */\n    stackMode?: PoiStackMode;\n\n    /**\n     * Minimum zoomLevel at which to display the label icon. No default.\n     */\n    iconMinZoomLevel?: number;\n\n    /**\n     * Maximum zoomLevel at which to display the label icon. No default.\n     */\n    iconMaxZoomLevel?: number;\n\n    /**\n     * Minimum zoomLevel at which to display the label text. No default.\n     */\n    textMinZoomLevel?: number;\n\n    /**\n     * Maximum zoomLevel at which to display the label text. No default.\n     */\n    textMaxZoomLevel?: number;\n\n    /**\n     * If true, the text icon will appear even if the text part is blocked by other labels. Defaults\n     * to `false`.\n     */\n    textIsOptional?: boolean;\n\n    /**\n     * If true, the text will appear even if the icon cannot be rendered because of missing icon\n     * graphics. Defaults to `true`.\n     */\n    iconIsOptional?: boolean;\n\n    /**\n     * If `true`, icon is allowed to overlap other labels or icons of lower priority.\n     */\n    mayOverlap?: boolean;\n\n    /**\n     * If `true`, icon will reserve screen space, other markers of lower priority will not be\n     * able to overlap.\n     */\n    reserveSpace?: boolean;\n\n    /**\n     * If isValid is `false`, the icon will no longer be placed or rendered. The reason may be a\n     * missing resource.\n     */\n    isValid?: boolean;\n\n    /**\n     * ID to identify the (POI) icon.\n     */\n    featureId?: number;\n\n    /**\n     * Reference back to owning [[TextElement]].\n     */\n    textElement: TextElement;\n\n    /**\n     * @hidden\n     * If false, text will not be rendered during camera movements. Defaults to `true`;\n     */\n    renderTextDuringMovements?: boolean;\n\n    /**\n     * @hidden\n     * Direct access to [[ImageItem]] once it is resolved.\n     */\n    imageItem?: ImageItem;\n\n    /**\n     * @hidden\n     * Direct access to [[ImageTexture]] once it is resolved.\n     */\n    imageTexture?: ImageTexture;\n\n    /**\n     * @hidden\n     * Layout help: A shield group is for all [[LineMarker]]s that have the same icon and text,\n     * making them the same road shield icon.\n     */\n    shieldGroupIndex?: number;\n\n    /**\n     * @hidden\n     * Internal reference to a render batch, made up of all icons that use the same Material.\n     */\n    poiRenderBatch?: number;\n\n    /**\n     * @hidden\n     * Should be computed during loading/initializing of `ImageTexture`.\n     */\n    computedWidth?: number;\n\n    /**\n     * @hidden\n     * Should be computed during loading/initializing of `ImageTexture`.\n     */\n    computedHeight?: number;\n\n    /**\n     * @hidden\n     * Should be computed during loading/initializing of `ImageTexture`.\n     */\n    uvBox?: Math2D.UvBox;\n\n    /**\n     * @hidden\n     * Computed from owning [[TextElement]]. Value is set when `PoiInfo` is assigned to\n     * [[TextElement]].\n     */\n    renderOrder?: number;\n}\n\n/**\n * Return 'true' if the POI has been successfully prepared for rendering.\n *\n * @param poiInfo PoiInfo containing information for rendering the POI icon.\n */\nexport function poiIsRenderable(poiInfo: PoiInfo): boolean {\n    return poiInfo.poiRenderBatch !== undefined;\n}\n\nexport interface TextPickResult extends PickResult {\n    /**\n     * Text of the picked [[TextElement]]\n     */\n    text?: string;\n}\n\n/**\n * State of loading.\n */\nexport enum LoadingState {\n    Requested,\n    Loaded,\n    Initialized\n}\n\n/**\n * `TextElement` is used to create 2D text elements (for example, labels).\n */\nexport class TextElement {\n    /**\n     * Text elements with this priority are placed on screen before any others.\n     */\n    static readonly HIGHEST_PRIORITY = Number.MAX_SAFE_INTEGER;\n\n    /**\n     * Determines visibility. If set to `false`, it will not be rendered.\n     */\n    visible: boolean = true;\n\n    /**\n     * Determines minimum zoom level for visibility. Can be used to reduce the number of visible\n     * `TextElement`s based on zoom level.\n     */\n    minZoomLevel?: number;\n    /**\n     * Determines maximum zoom level for visibility. Can be used to reduce the number of visible\n     * `TextElement`s based on zoom level.\n     */\n    maxZoomLevel?: number;\n\n    /**\n     * If `true`, label is allowed to overlap other labels or icons of lower priority.\n     * @default `false`\n     */\n    mayOverlap?: boolean;\n\n    /**\n     * If `true`, label will reserve screen space, other markers of lower priority will not be\n     * able to overlap.\n     * @default `true`\n     */\n    reserveSpace?: boolean;\n\n    /**\n     * If `true`, the label will always be rendered on top. If overlapping with other labels, the\n     * render order is undefined;\n     * @default `false`\n     */\n    alwaysOnTop?: boolean;\n\n    /**\n     * Ignore distance limit. Used for label in labeled-icons.\n     */\n    ignoreDistance?: boolean;\n\n    /**\n     * Scaling factor of text. Defaults to 0.5, reducing the size ot 50% in the distance.\n     */\n    distanceScale: number = 0.5;\n\n    /**\n     * Optional user data. Will be retrieved during picking.\n     */\n    userData?: any;\n\n    /**\n     * If specified, determines the render order between `TextElement`s. The number different\n     * renderOrders should be as small as possible, because every specific `renderOrder` may result\n     * in one or more draw calls.\n     *\n     * TextElements with the same integer `renderOrder` will be rendered in the same batch.\n     *\n     * The `renderOrder` of `TextElement`s are only relative to other `TextElement`s, and not other\n     * map elements.\n     *\n     * A `TextElement` with a higher `renderOrder` will be rendered after a `TextElement` with a\n     * lower `renderOrder`.\n     */\n    renderOrder?: number = 0;\n\n    /**\n     * Specified kind of geometry. One kind is set as default in the technique, and can be\n     * overridden in the style.\n     */\n    kind?: GeometryKind | GeometryKindSet;\n\n    /**\n     * @hidden\n     * Used during rendering.\n     */\n    loadingState?: LoadingState;\n\n    /**\n     * If set to `true` the geometry has been already overlaid on elevation.\n     */\n    elevated: boolean = false;\n\n    /**\n     * @hidden\n     * Array storing the style [[GlyphData]] for this `TextElement` to speed up label placement in\n     * [[TextElementsRenderer]]. Valid after `loadingState` is `Initialized`.\n     */\n    glyphs?: GlyphData[];\n\n    /**\n     * @hidden\n     * Array storing the casing (`true`: uppercase, `false`: lowercase) for this `TextElement`.\n     * Used by labels in [[TextElementsRenderer]] to support `SmallCaps`. Valid after `loadingState`\n     * is `Initialized`.\n     */\n    glyphCaseArray?: boolean[];\n\n    /**\n     * Screen space bounds for this `TextElement`. Used by point labels in [[TextElementsRenderer]].\n     * Valid after `loadingState` is `Initialized`.\n     */\n    bounds?: THREE.Box2;\n\n    /**\n     * @hidden\n     * Pre-computed text vertex buffer. Used by point labels in [[TextElementsRenderer]]. Valid\n     * after label becomes visible for the first time.\n     */\n    textBufferObject?: TextBufferObject;\n\n    /**\n     * @hidden\n     * If `true`, the estimated bounding box of the path is too small for the label to fit, so it is\n     * being ignored for rendering in the latest frame.\n     */\n    dbgPathTooSmall?: boolean;\n\n    pathLengthSqr?: number;\n\n    /**\n     * Time to fade in text in milliseconds.\n     * @default [[DEFAULT_FADE_TIME]] 800\n     */\n    textFadeTime?: number;\n\n    type: TextElementType;\n\n    private m_poiInfo?: PoiInfo;\n\n    private m_renderStyle?: TextRenderStyle;\n\n    private m_layoutStyle?: TextLayoutStyle;\n\n    /**\n     * Creates a new `TextElement`.\n     *\n     * @param text The text to display.\n     * @param points The position or a list of points for a curved text, both in world space.\n     * @param renderParams `TextElement` text rendering parameters.\n     * @param layoutParams `TextElement` text layout parameters.\n     * @param priority The priority of the `TextElement. Elements with the highest priority get\n     *              placed first, elements with priority of `0` are placed last, elements with a\n     *              negative value are always rendered, ignoring priorities and allowing overrides.\n     * @param xOffset Optional X offset of this `TextElement` in screen coordinates.\n     * @param yOffset Optional Y offset of this `TextElement` in screen coordinates.\n     * @param featureId Optional number to identify feature (originated from `OmvDataSource`).\n     * @param fadeNear Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the\n     *              label starts fading out (opacity decreases).\n     * @param fadeFar Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the\n     *              label becomes transparent. A value of <= 0.0 disables fading.\n     * @param offsetDirection Direction represented as an angle in degrees clockwise from north to\n     * offset the icon in world space.\n     */\n    constructor(\n        readonly text: string,\n        readonly points: THREE.Vector3[] | THREE.Vector3,\n        readonly renderParams: TextRenderParameters | TextRenderStyle,\n        readonly layoutParams: TextLayoutParameters | TextLayoutStyle,\n        public priority = 0,\n        public xOffset: number = 0,\n        public yOffset: number = 0,\n        public featureId?: number,\n        public style?: string,\n        public fadeNear?: number,\n        public fadeFar?: number,\n        readonly tileOffset?: number,\n        readonly offsetDirection?: number\n    ) {\n        if (renderParams instanceof TextRenderStyle) {\n            this.renderStyle = renderParams;\n        }\n        if (layoutParams instanceof TextLayoutStyle) {\n            this.layoutStyle = layoutParams;\n        }\n\n        this.type =\n            points instanceof THREE.Vector3 ? TextElementType.PoiLabel : TextElementType.PathLabel;\n    }\n\n    /**\n     * The text element position or the first point of the path used to render a curved text, both\n     * in world space.\n     */\n    get position(): THREE.Vector3 {\n        if (this.points instanceof Array) {\n            const p = this.points[0];\n            return p;\n        }\n        return this.points as THREE.Vector3;\n    }\n\n    /**\n     * The list of points in world space used to render the text along a path or `undefined`.\n     */\n    get path(): THREE.Vector3[] | undefined {\n        if (this.points instanceof Array) {\n            return this.points;\n        }\n        return undefined;\n    }\n\n    /**\n     * If `true`, `TextElement` is allowed to overlap other labels or icons of lower priority.\n     *\n     * @default `false`\n     */\n    get textMayOverlap(): boolean {\n        return this.mayOverlap === true;\n    }\n\n    set textMayOverlap(mayOverlap: boolean) {\n        this.mayOverlap = mayOverlap;\n    }\n\n    /**\n     * If `true`, `TextElement` will reserve screen space, other markers of lower priority will not\n     * be able to overlap.\n     *\n     * @default `true`\n     */\n    get textReservesSpace(): boolean {\n        return this.reserveSpace !== false;\n    }\n\n    set textReservesSpace(reserveSpace: boolean) {\n        this.reserveSpace = reserveSpace;\n    }\n\n    /**\n     * Contains additional information about icon to be rendered along with text.\n     */\n    get poiInfo(): PoiInfo | undefined {\n        return this.m_poiInfo;\n    }\n\n    set poiInfo(poiInfo: PoiInfo | undefined) {\n        this.m_poiInfo = poiInfo;\n        if (poiInfo !== undefined) {\n            if (this.path !== undefined) {\n                this.type = TextElementType.LineMarker;\n            }\n            const poiRenderOrder = this.renderOrder !== undefined ? this.renderOrder : 0;\n            poiInfo.renderOrder = poiRenderOrder;\n        }\n    }\n\n    /**\n     * @returns The style used to render this text element, undefined if not set yet.\n     */\n    get renderStyle(): TextRenderStyle | undefined {\n        return this.m_renderStyle;\n    }\n\n    /**\n     * Sets style used for text rendering.\n     * @param style The style to use.\n     */\n    set renderStyle(style: TextRenderStyle | undefined) {\n        this.m_renderStyle = style;\n    }\n\n    /**\n     * @returns The style used to layout this text element, undefined if not set yet.\n     */\n    get layoutStyle(): TextLayoutStyle | undefined {\n        return this.m_layoutStyle;\n    }\n\n    /**\n     * Sets the style used for text layout.\n     * @param style The style to use.\n     */\n    set layoutStyle(style: TextLayoutStyle | undefined) {\n        this.m_layoutStyle = style;\n    }\n\n    hasFeatureId(): boolean {\n        return this.featureId !== undefined && this.featureId !== 0;\n    }\n\n    /**\n     * Update the minZoomLevel and maxZoomLevel from the values set in [[PoiInfo]].\n     * Selects the smaller/larger one of the two min/max values for icon and text, because the\n     * TextElement is a container for both.\n     */\n    updateMinMaxZoomLevelsFromPoiInfo() {\n        if (this.poiInfo !== undefined) {\n            if (this.minZoomLevel === undefined) {\n                this.minZoomLevel = MathUtils.min2(\n                    this.poiInfo.iconMinZoomLevel,\n                    this.poiInfo.textMinZoomLevel\n                );\n            }\n            if (this.maxZoomLevel === undefined) {\n                this.maxZoomLevel = MathUtils.max2(\n                    this.poiInfo.iconMaxZoomLevel,\n                    this.poiInfo.textMaxZoomLevel\n                );\n            }\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeoBoxExtentLike } from \"./GeoBoxExtentLike\";\nimport { GeoCoordinates } from \"./GeoCoordinates\";\n\nimport * as THREE from \"three\";\n\n/**\n * `GeoBox` is used to represent a bounding box in geo coordinates.\n */\nexport class GeoBox implements GeoBoxExtentLike {\n    /**\n     * Returns a `GeoBox` with the given geo coordinates.\n     *\n     * @param southWest The south west position in geo coordinates.\n     * @param northEast The north east position in geo coordinates.\n     */\n    static fromCoordinates(southWest: GeoCoordinates, northEast: GeoCoordinates): GeoBox {\n        return new GeoBox(southWest, northEast);\n    }\n\n    /**\n     * Returns a `GeoBox` with the given center and dimensions.\n     *\n     * @param center The center position of geo box.\n     * @param extent Box latitude and logitude span\n     */\n    static fromCenterAndExtents(center: GeoCoordinates, extent: GeoBoxExtentLike): GeoBox {\n        return new GeoBox(\n            new GeoCoordinates(\n                center.latitude - extent.latitudeSpan / 2,\n                center.longitude - extent.longitudeSpan / 2\n            ),\n            new GeoCoordinates(\n                center.latitude + extent.latitudeSpan / 2,\n                center.longitude + extent.longitudeSpan / 2\n            )\n        );\n    }\n\n    /**\n     * Constructs a new `GeoBox` with the given geo coordinates.\n     *\n     * @param southWest The south west position in geo coordinates.\n     * @param northEast The north east position in geo coordinates.\n     */\n    constructor(readonly southWest: GeoCoordinates, readonly northEast: GeoCoordinates) {}\n\n    /**\n     * Returns the minimum altitude or `undefined`.\n     */\n    get minAltitude(): number | undefined {\n        if (this.southWest.altitude === undefined || this.northEast.altitude === undefined) {\n            return undefined;\n        }\n        return Math.min(this.southWest.altitude, this.northEast.altitude);\n    }\n\n    /**\n     * Returns the maximum altitude or `undefined`.\n     */\n    get maxAltitude(): number | undefined {\n        if (this.southWest.altitude === undefined || this.northEast.altitude === undefined) {\n            return undefined;\n        }\n        return Math.max(this.southWest.altitude, this.northEast.altitude);\n    }\n\n    /**\n     * Returns the south latitude in degrees of this `GeoBox`.\n     */\n    get south(): number {\n        return this.southWest.latitude;\n    }\n\n    /**\n     * Returns the north altitude in degrees of this `GeoBox`.\n     */\n    get north(): number {\n        return this.northEast.latitude;\n    }\n\n    /**\n     * Returns the west longitude in degrees of this `GeoBox`.\n     */\n    get west(): number {\n        return this.southWest.longitude;\n    }\n\n    /**\n     * Returns the east longitude in degrees of this `GeoBox`.\n     */\n    get east(): number {\n        return this.northEast.longitude;\n    }\n\n    /**\n     * Returns the center of this `GeoBox`.\n     */\n    get center(): GeoCoordinates {\n        const latitude = (this.south + this.north) * 0.5;\n        const { west, east } = this;\n        const { minAltitude, altitudeSpan } = this;\n\n        let altitude: number | undefined;\n\n        if (minAltitude !== undefined && altitudeSpan !== undefined) {\n            altitude = minAltitude + altitudeSpan * 0.5;\n        }\n\n        if (west < east) {\n            return new GeoCoordinates(latitude, (west + east) * 0.5, altitude);\n        }\n\n        let longitude = (360 + east + west) * 0.5;\n\n        if (longitude > 360) {\n            longitude -= 360;\n        }\n\n        return new GeoCoordinates(latitude, longitude, altitude);\n    }\n\n    /**\n     * Returns the latitude span in radians.\n     */\n    get latitudeSpanInRadians(): number {\n        return THREE.MathUtils.degToRad(this.latitudeSpan);\n    }\n\n    /**\n     * Returns the longitude span in radians.\n     */\n    get longitudeSpanInRadians(): number {\n        return THREE.MathUtils.degToRad(this.longitudeSpan);\n    }\n\n    /**\n     * Returns the latitude span in degrees.\n     */\n    get latitudeSpan(): number {\n        return this.north - this.south;\n    }\n\n    get altitudeSpan(): number | undefined {\n        if (this.maxAltitude === undefined || this.minAltitude === undefined) {\n            return undefined;\n        }\n        return this.maxAltitude - this.minAltitude;\n    }\n\n    /**\n     * Returns the longitude span in degrees.\n     */\n    get longitudeSpan(): number {\n        let width = this.northEast.longitude - this.southWest.longitude;\n\n        if (width < 0) {\n            width += 360;\n        }\n\n        return width;\n    }\n\n    /**\n     * Returns the latitude span in degrees.\n     * @deprecated Use [[latitudeSpan]] instead.\n     */\n    get latitudeSpanInDegrees(): number {\n        return this.latitudeSpan;\n    }\n\n    /**\n     * Returns the longitude span in degrees.\n     * @deprecated Use [[longitudeSpan]] instead.\n     */\n    get longitudeSpanInDegrees(): number {\n        return this.longitudeSpan;\n    }\n\n    /**\n     * Returns `true` if the given geo coordinates are contained in this `GeoBox`.\n     *\n     * @param point The geo coordinates.\n     */\n    contains(point: GeoCoordinates): boolean {\n        if (\n            point.altitude === undefined ||\n            this.minAltitude === undefined ||\n            this.maxAltitude === undefined\n        ) {\n            return this.containsHelper(point);\n        }\n\n        const isFlat = this.minAltitude === this.maxAltitude;\n        const isSameAltitude = this.minAltitude === point.altitude;\n        const isWithinAltitudeRange =\n            this.minAltitude <= point.altitude && this.maxAltitude > point.altitude;\n\n        // If box is flat, we should check the altitude and containment,\n        // otherwise we should check also altitude difference where we consider\n        // point to be inside if alt is from [m_minAltitude, m_maxAltitude) range!\n        if (isFlat ? isSameAltitude : isWithinAltitudeRange) {\n            return this.containsHelper(point);\n        }\n\n        return false;\n    }\n\n    /**\n     * Clones this `GeoBox` instance.\n     */\n    clone(): GeoBox {\n        return new GeoBox(this.southWest, this.northEast);\n    }\n\n    /**\n     * Update the bounding box by considering a given point.\n     *\n     * @param point The point that may expand the bounding box.\n     */\n    growToContain(point: GeoCoordinates) {\n        this.southWest.latitude = Math.min(this.southWest.latitude, point.latitude);\n        this.southWest.longitude = Math.min(this.southWest.longitude, point.longitude);\n        this.southWest.altitude =\n            this.southWest.altitude !== undefined && point.altitude !== undefined\n                ? Math.min(this.southWest.altitude, point.altitude)\n                : this.southWest.altitude !== undefined\n                ? this.southWest.altitude\n                : point.altitude !== undefined\n                ? point.altitude\n                : undefined;\n\n        this.northEast.latitude = Math.max(this.northEast.latitude, point.latitude);\n        this.northEast.longitude = Math.max(this.northEast.longitude, point.longitude);\n        this.northEast.altitude =\n            this.northEast.altitude !== undefined && point.altitude !== undefined\n                ? Math.max(this.northEast.altitude, point.altitude)\n                : this.northEast.altitude !== undefined\n                ? this.northEast.altitude\n                : point.altitude !== undefined\n                ? point.altitude\n                : undefined;\n    }\n\n    private containsHelper(point: GeoCoordinates): boolean {\n        if (point.latitude < this.southWest.latitude || point.latitude >= this.northEast.latitude) {\n            return false;\n        }\n\n        const { west, east } = this;\n\n        if (east > west) {\n            return point.longitude >= west && point.longitude < east;\n        }\n\n        return point.longitude > east || point.longitude <= west;\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Represents an object with `GeoCoordinates` like interface.\n */\nexport interface GeoCoordinatesLike {\n    /** The latitude in degrees. */\n    latitude: number;\n\n    /** The longitude in degrees. */\n    longitude: number;\n\n    /** The optional altitude in meters. */\n    altitude?: number;\n}\n\n/**\n * Type guard to assert that `object` conforms to [[GeoCoordinatesLike]] data interface.\n */\nexport function isGeoCoordinatesLike(object: any): object is GeoCoordinatesLike {\n    return (\n        object &&\n        typeof object.latitude === \"number\" &&\n        typeof object.longitude === \"number\" &&\n        (typeof object.altitude === \"number\" || typeof object.altitude === \"undefined\")\n    );\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeoBox } from \"../coordinates/GeoBox\";\nimport { GeoCoordinatesLike } from \"../coordinates/GeoCoordinatesLike\";\nimport { Box3Like } from \"../math/Box3Like\";\nimport { Projection } from \"../projection/Projection\";\nimport { FlatTileBoundingBoxGenerator } from \"./FlatTileBoundingBoxGenerator\";\nimport { SubdivisionScheme } from \"./SubdivisionScheme\";\nimport { TileKey } from \"./TileKey\";\nimport { TileKeyUtils } from \"./TileKeyUtils\";\nimport { TileTreeTraverse } from \"./TileTreeTraverse\";\n\n/**\n * The `TilingScheme` represents how the data is tiled.\n */\nexport class TilingScheme {\n    readonly boundingBoxGenerator: FlatTileBoundingBoxGenerator;\n    readonly tileTreeTraverse: TileTreeTraverse;\n\n    /**\n     * Constructs a new `TilingScheme` with the given subdivision scheme and projection.\n     *\n     * @param subdivisionScheme The subdivision scheme used by this `TilingScheme`.\n     * @param projection The projection used by this `TilingScheme`.\n     */\n    constructor(readonly subdivisionScheme: SubdivisionScheme, readonly projection: Projection) {\n        this.boundingBoxGenerator = new FlatTileBoundingBoxGenerator(this);\n        this.tileTreeTraverse = new TileTreeTraverse(subdivisionScheme);\n    }\n\n    /**\n     * Returns the sub tile keys of the given tile.\n     *\n     * @param tileKey The [[TileKey]].\n     * @returns The list of the sub tile keys.\n     */\n    getSubTileKeys(tileKey: TileKey): Iterable<TileKey> {\n        return this.tileTreeTraverse.subTiles(tileKey);\n    }\n\n    /**\n     * Gets the [[TileKey]] from the given geo position and level.\n     *\n     * @param geoPoint The position in geo coordinates.\n     * @param level The level of the resulting `TileKey`.\n     */\n    getTileKey(geoPoint: GeoCoordinatesLike, level: number): TileKey | null {\n        return TileKeyUtils.geoCoordinatesToTileKey(this, geoPoint, level);\n    }\n\n    /**\n     * Gets the list of [[TileKey]]s contained in the given [[GeoBox]].\n     *\n     * @param geoBox The bounding box in geo coordinates.\n     * @param level The level of the resulting `TileKey`.\n     */\n    getTileKeys(geoBox: GeoBox, level: number): TileKey[] {\n        return TileKeyUtils.geoRectangleToTileKeys(this, geoBox, level);\n    }\n\n    /**\n     * Returns the bounding box in geo coordinates for the given [[TileKey]].\n     *\n     * @param tileKey The `TileKey`.\n     */\n    getGeoBox(tileKey: TileKey): GeoBox {\n        return this.boundingBoxGenerator.getGeoBox(tileKey);\n    }\n\n    /**\n     * Returns the bounding box in world coordinates.\n     *\n     * @param tileKey The `TileKey`.\n     * @param result The optional object that will contain the resulting bounding box.\n     */\n    getWorldBox(tileKey: TileKey, result?: Box3Like): Box3Like {\n        return this.boundingBoxGenerator.getWorldBox(tileKey, result);\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { assert } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\nimport { RGBA } from \"./RGBA\";\n\nconst SHIFT_TRANSPARENCY: number = 24;\nconst SHIFT_RED: number = 16;\nconst SHIFT_GREEN: number = 8;\nconst SHIFT_BLUE: number = 0;\n\n// tslint:disable: no-bitwise\n//    Allow bitwise operations for colors decoding\n\n// tslint:disable-next-line: no-bitwise\nconst HEX_FULL_CHANNEL: number = 0xff;\nconst HEX_RGB_MASK: number = 0xffffff;\nconst HEX_TRGB_MASK: number = 0xffffffff;\n\nconst tmpColor = new THREE.Color();\n\n/**\n * Utilities to convert RGBA colors encoded in custom number (hex) format to THREE.Color objects.\n *\n * The functions provided allows for conversion from and to our custom number based color format,\n * which contains transparency, red, green and blue color channels in a way that each channel\n * occupies 8 bits of resulting number (color format 0xTTRRGGBB).\n * In order to preserve compatibility with THREE.Color class and its hexadecimal color\n * representation, we do not store __alpha__ channel in encoded color's number, but replace it\n * with __transparency__ channel, which is simply opposite to alpha:\n * ```transparency = 0xFF - alpha```\n * Such channel value is stored on the oldest bits (octet) in the integral color (numeric) value,\n * so it is fully compatible with THREE.Color numerical representation (@see [[THREE.Color.getHex]],\n * [[THREE.Color.setHex]]).\n * See also [[getHexFromRgba]] and [[getRgbaFromHex]] for more info about conversion.\n */\nexport namespace ColorUtils {\n    /**\n     * Encodes RGBA channels in custom number coded format (represented in hex as 0xTTRRGGBB).\n     *\n     * We do not use direct alpha channel mapping to hex in order to preserve compatibility\n     * with THREE.js color format (0xRRGGBB). This is done by encoding transparency\n     * (255 - alpha) instead of alpha on the oldest bits, shifted by [[SHIFT_TRANSPARENCY]].\n     * This way simple 0xRRGGBB color is equal to 0x00RRGGBB without transparency and\n     * color defining transparency (alpha < 255) is always recognizable by the oldest\n     * bit set:\n     * ```typescript\n     * (color >> SHIFT_TRANSPARENCY) !== 0.\n     * ```\n     * @note All input components are floating points in <0, 1> range (inclusively).\n     * @note Although method encodes transparency channel in single number value, it is still\n     * compatible with THREE.js number based color coding (0xRRGGBB), so you may pass this value to\n     * [[THREE.Color]] c-tor, but keep in mind that transparency will be silently ignored.\n     */\n    export function getHexFromRgba(r: number, g: number, b: number, a: number): number {\n        assert(a >= 0 && a <= 1);\n        const t = HEX_FULL_CHANNEL - Math.floor(a * HEX_FULL_CHANNEL);\n        return (\n            (t << SHIFT_TRANSPARENCY) ^\n            ((r * HEX_FULL_CHANNEL) << SHIFT_RED) ^\n            ((g * HEX_FULL_CHANNEL) << SHIFT_GREEN) ^\n            ((b * HEX_FULL_CHANNEL) << SHIFT_BLUE)\n        );\n    }\n\n    /**\n     * Encodes RGB all color channels in single number with format 0xRRGGBB.\n     *\n     * All input channels should be in <0, 1> range (inclusively).\n     * See also [[getHexFromRgba]] for more information about [[THREE.Color]] compatibility.\n     *\n     * @note This method is fully compatible with THREE.js color encoding, so\n     * you may pass this value directly to THREE.Color c-tor.\n     */\n    export function getHexFromRgb(r: number, g: number, b: number): number {\n        assert(r >= 0 && r <= 1);\n        assert(g >= 0 && g <= 1);\n        assert(b >= 0 && b <= 1);\n        return (\n            ((r * HEX_FULL_CHANNEL) << SHIFT_RED) ^\n            ((g * HEX_FULL_CHANNEL) << SHIFT_GREEN) ^\n            ((b * HEX_FULL_CHANNEL) << SHIFT_BLUE)\n        );\n    }\n\n    /**\n     * Encode and convert HSL value to number coded color format (0xRRGGBB).\n     *\n     * @see getHexFromRgb.\n     * @param h Hue component value between 0 and 1.\n     * @param s Saturation value between 0 and 1.\n     * @param l Lightness channel between 0 and 1.\n     */\n    export function getHexFromHsl(h: number, s: number, l: number): number {\n        assert(h >= 0 && h <= 1);\n        assert(s >= 0 && s <= 1);\n        assert(l >= 0 && l <= 1);\n        return tmpColor.setHSL(h, s, l).getHex();\n    }\n\n    /**\n     * Retrieve RGBA channels separately from number encoded custom color format.\n     *\n     * Provides an easy way for channels extraction (r, g, b, a) from custom number coded color\n     * format.\n     *\n     * @see getHexFromRgba.\n     * @param hex The number encoded color value (0xRRGGBB or 0xTTRRGGBB in hex).\n     * @returns r, g, b, a channels in simple object, where each channel value is saved as floating\n     * point from 0 to 1 inclusively.\n     */\n    export function getRgbaFromHex(hex: number, target = new RGBA()): RGBA {\n        assert((hex & ~HEX_TRGB_MASK) === 0, \"Wrong hex format\");\n        target.r = ((hex >> SHIFT_RED) & HEX_FULL_CHANNEL) / HEX_FULL_CHANNEL;\n        target.g = ((hex >> SHIFT_GREEN) & HEX_FULL_CHANNEL) / HEX_FULL_CHANNEL;\n        target.b = ((hex >> SHIFT_BLUE) & HEX_FULL_CHANNEL) / HEX_FULL_CHANNEL;\n        target.a =\n            (HEX_FULL_CHANNEL - ((hex >> SHIFT_TRANSPARENCY) & HEX_FULL_CHANNEL)) /\n            HEX_FULL_CHANNEL;\n        return target;\n    }\n\n    /**\n     * Determines if number encoded color contains alpha (opacity) defined and different then 255.\n     *\n     * @param hex The number encoded color (0xRRGGBB or 0xTTRRGGBB in hex).\n     * @returns True if color has transparency defined.\n     */\n    export function hasAlphaInHex(hex: number): boolean {\n        assert((hex & ~HEX_TRGB_MASK) === 0, \"Wrong hex format\");\n        return hex >> SHIFT_TRANSPARENCY !== 0;\n    }\n\n    /**\n     * Retrieves alpha color channel from hex encoded color value.\n     *\n     * @see getHexFromRgba.\n     * @param hex The number encoded color value (representable as 0xRRGGBB or 0xTTRRGGBB in hex).\n     * @returns The floating point alpha component in <0, 1> range.\n     */\n    export function getAlphaFromHex(hex: number): number {\n        assert((hex & ~HEX_TRGB_MASK) === 0, \"Wrong hex format\");\n        return (\n            ((HEX_FULL_CHANNEL - (hex >> SHIFT_TRANSPARENCY)) & HEX_FULL_CHANNEL) / HEX_FULL_CHANNEL\n        );\n    }\n\n    /**\n     * Remove transparency info from the number coded color, makes it compatible with external libs.\n     *\n     * @see getAlphaFromHex.\n     * @param hex The number encoded color value (representable as 0xRRGGBB or 0xTTRRGGBB in hex).\n     * @returns number coded color value representable as 0xRRGGBB in hex.\n     */\n    export function removeAlphaFromHex(hex: number): number {\n        assert((hex & ~HEX_TRGB_MASK) === 0, \"Wrong hex format\");\n        return hex & HEX_RGB_MASK;\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Namespace containing useful information when dealing with Unicode's code points.\n */\nexport namespace UnicodeUtils {\n    /**\n     * Range of Unicode code points considered as white space.\n     * https://en.wikipedia.org/wiki/Whitespace_character\n     */\n    export const whiteSpaceRanges = [\n        [0x0009, 0x0009],\n        [0x0020, 0x0020],\n        [0x1680, 0x1680],\n        [0x2000, 0x2006],\n        [0x2008, 0x200a],\n        [0x205f, 0x3000],\n        [0x180e, 0x180e],\n        [0x200b, 0x200d]\n    ];\n\n    /**\n     * Checks if a character should be considered as a white space.\n     *\n     * @param codePoint Character's Unicode code point.\n     *\n     * @returns Result of the test.\n     */\n    export function isWhiteSpace(codePoint: number) {\n        for (const range of whiteSpaceRanges) {\n            if (codePoint >= range[0] && codePoint <= range[1]) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Range of Unicode code points considered as `NewLine`.\n     * https://en.wikipedia.org/wiki/Newline#Unicode\n     */\n    export const newLineRanges = [\n        [0x000a, 0x000d],\n        [0x0085, 0x0085],\n        [0x2028, 0x2029]\n    ];\n\n    /**\n     * Checks if a character should be considered as a new line.\n     *\n     * @param codePoint Character's Unicode code point.\n     *\n     * @returns Result of the test.\n     */\n    export function isNewLine(codePoint: number) {\n        for (const range of newLineRanges) {\n            if (codePoint >= range[0] && codePoint <= range[1]) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Range of Unicode code points considered as non-printable.\n     * https://en.wikipedia.org/wiki/Unicode_control_characters\n     */\n    export const nonPrintableRanges = [\n        [0x0000, 0x001f],\n        [0x007f, 0x009f]\n    ];\n\n    /**\n     * Checks if a character's can be printed (rendered).\n     *\n     * @param codePoint Character's Unicode code point.\n     *\n     * @returns Result of the test.\n     */\n    export function isPrintable(codePoint: number) {\n        for (const range of nonPrintableRanges) {\n            if (codePoint >= range[0] && codePoint <= range[1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Unicode code point direction.\n     */\n    export enum Direction {\n        Neutral = 0.0,\n        Weak = 0.5,\n        LTR = 1.0,\n        RTL = -1.0\n    }\n\n    // TODO: Review/Remove/Add any additional needed blocks (HARP-3330).\n    /**\n     * Unicode Blocks which have inherent RTL direction.\n     * These blocks correspond to the scripts described here:\n     * https://en.wikipedia.org/wiki/Right-to-left#List_of_RTL_scripts\n     */\n    export const rtlBlocks: string[] = [\n        \"Hebrew\",\n        \"Alphabetic Presentation Forms\",\n        \"Arabic\",\n        \"Arabic Supplement\",\n        \"Arabic Extended-A\",\n        \"Arabic Presentation Forms-A\",\n        \"Arabic Presentation Forms-B\",\n        \"Arabic Mathematical Alphabetic Symbols\",\n        \"Indic Siyaq Numbers\",\n        \"Rumi Numeral Symbols\",\n        \"Syriac\",\n        \"Syriac Supplement\",\n        \"Samaritan\",\n        \"Mandaic\",\n        \"Thaana\",\n        \"Mende Kikakui\",\n        \"NKo\",\n        \"Adlam\",\n        \"Hanifi Rohingya\"\n    ];\n\n    /**\n     * ASCII punctuation is considered to have neutral direction:\n     * https://en.wikipedia.org/wiki/Basic_Latin_(Unicode_block)#Table_of_characters\n     */\n    export const neutralBidirectionalRanges = [\n        [0x0020, 0x002f],\n        [0x003a, 0x0040],\n        [0x005b, 0x0060],\n        [0x007b, 0x007e]\n    ];\n\n    /**\n     * Latin and arabic numerals are considered to have weak directionality:\n     * https://en.wikipedia.org/wiki/Basic_Latin_(Unicode_block)#Table_of_characters\n     * https://en.wikipedia.org/wiki/Arabic_(Unicode_block)#Block\n     */\n    export const weakBidirectionalRanges = [\n        [0x0030, 0x0039],\n        [0x0660, 0x0669],\n        [0x06f0, 0x06f9]\n    ];\n\n    /**\n     * Returns the Unicode's character direction.\n     *\n     * @param codePoint Character's Unicode code point.\n     * @param block Character's Unicode block.\n     *\n     * @returns Character's direction.\n     */\n    export function getDirection(codePoint: number, block: string): Direction {\n        // Test for neutral and weak code points first (they're inside LTR/RTL ranges).\n        for (const weakRange of weakBidirectionalRanges) {\n            if (codePoint >= weakRange[0] && codePoint <= weakRange[1]) {\n                return Direction.Weak;\n            }\n        }\n        for (const neutralRange of neutralBidirectionalRanges) {\n            if (codePoint >= neutralRange[0] && codePoint <= neutralRange[1]) {\n                return Direction.Neutral;\n            }\n        }\n\n        // Check for RTL/LTR.\n        const rtl = rtlBlocks.find(element => {\n            return element === block;\n        });\n        if (rtl !== undefined) {\n            return Direction.RTL;\n        } else {\n            return Direction.LTR;\n        }\n    }\n\n    /**\n     * Some punctuation characters (like: (, ), <, >, [,], {, }) need to be mirrored when rendering\n     * a RTL string to preserve their intrinsic meaning.\n     * https://en.wikipedia.org/wiki/Basic_Latin_(Unicode_block)#Table_of_characters\n     */\n    export const rtlMirroredCodePoints = [\n        0x0028,\n        0x0029,\n        0x003c,\n        0x003e,\n        0x005b,\n        0x005d,\n        0x007b,\n        0x007d\n    ];\n\n    /**\n     * Checks if a character should be mirrored on an RTL run.\n     *\n     * @param codePoint Character's Unicode code point.\n     *\n     * @returns Result of the test.\n     */\n    export function isRtlMirrored(codePoint: number): boolean {\n        return (\n            rtlMirroredCodePoints.find(element => {\n                return element === codePoint;\n            }) !== undefined\n        );\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Types of text elements.\n */\nexport enum TextElementType {\n    PoiLabel,\n    PathLabel,\n    LineMarker\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\n/**\n * The interface for the [[Pass]] class.\n */\nexport interface IPass {\n    /**\n     * Whether the [[Pass]] instance is active or not.\n     * @default `true`.\n     */\n    enabled: boolean;\n\n    /**\n     * Whether the render method should target a WebGLRenderTarget instance, or the frame buffer.\n     * @default `false`.\n     */\n    renderToScreen: boolean;\n\n    /**\n     * The resize method to extend in [[Pass]] implementations. It resizes the render targets. Call\n     * on resize events.\n     *\n     * @param width Width to resize to.\n     * @param height Height to resize to.\n     */\n    setSize(width: number, height: number): void;\n\n    /**\n     * The render method to extend in [[Pass]] implementations. This is the place where the desired\n     * effects or render operations are executed.\n     *\n     * @param renderer The WebGLRenderer instance in use.\n     * @param scene The scene to render.\n     * @param camera The camera to render the scene through.\n     * @param writeBuffer The optional WebGLRenderTarget instance to write to.\n     * @param readBuffer The optional WebGLRenderTarget instance of a previous pass to write onto.\n     * @param delta The time argument from the requestAnimationFrame.\n     */\n    render(\n        renderer: THREE.WebGLRenderer,\n        scene: THREE.Scene,\n        camera: THREE.Camera,\n        writeBuffer: THREE.WebGLRenderTarget | null,\n        readBuffer: THREE.WebGLRenderTarget | null,\n        delta?: number\n    ): void;\n}\n\n/**\n * The base class to extend for further passes in [[MapView]], like the [[MSAARenderPass]], possibly\n * a text pass, an AO effect etc. `Pass` provides the core logic for both :\n * - render passes (proper scene renders),\n * - and shader passes (quad renders, i.e. effects added on top of the render output as a\n * postprocess).\n *\n * Even some shader passes still actually fall within the render pass category as they need to\n * re-render the scene to then deduce an effect, such as masking, AO, DoF etc. Others just need the\n * previous input image to apply a shader on top of it, as for bloom or NVIDIA's FXAA for example.\n * These only are proper shader passes.\n */\nexport class Pass implements IPass {\n    enabled: boolean = false;\n    renderToScreen: boolean = false;\n    // tslint:disable-next-line:no-unused-variable\n    setSize(width: number, height: number) {\n        // Implemented in sub-classes.\n    }\n    // tslint:disable:no-unused-variable\n    render(\n        renderer: THREE.WebGLRenderer,\n        scene: THREE.Scene,\n        camera: THREE.Camera,\n        writeBuffer: THREE.WebGLRenderTarget | null,\n        readBuffer: THREE.WebGLRenderTarget | null,\n        delta?: number\n    ) {\n        // Implemented in sub-classes.\n    }\n    // tslint:enable:no-unused-variable\n}\n\n/**\n * The pass that does a default normal scene rendering for further post-effects.\n */\nexport class RenderPass extends Pass {\n    constructor() {\n        super();\n    }\n\n    /** @override */\n    render(\n        renderer: THREE.WebGLRenderer,\n        scene: THREE.Scene,\n        camera: THREE.Camera,\n        writeBuffer: THREE.WebGLRenderTarget | null,\n        readBuffer: THREE.WebGLRenderTarget | null\n    ) {\n        renderer.setRenderTarget(this.renderToScreen ? null : writeBuffer);\n        renderer.render(scene, camera);\n    }\n}\n\n/**\n * The base class to extend for post-effects on the final render (like Vignette, Sepia, color\n * correction...)\n */\nexport class ShaderPass extends Pass {\n    uniforms: { [uniform: string]: THREE.IUniform };\n    material: THREE.Material;\n    fsQuad: FullScreenQuad;\n    constructor(shader: THREE.Shader, private textureID: string = \"tDiffuse\") {\n        super();\n        if (shader instanceof THREE.ShaderMaterial) {\n            this.uniforms = shader.uniforms;\n            this.material = shader;\n        } else {\n            this.uniforms = THREE.UniformsUtils.clone(shader.uniforms);\n            this.material = new THREE.ShaderMaterial({\n                defines: { ...(shader as any).defines },\n                uniforms: this.uniforms,\n                vertexShader: shader.vertexShader,\n                fragmentShader: shader.fragmentShader\n            });\n        }\n        this.fsQuad = new FullScreenQuad(this.material);\n    }\n    /** @override */\n    render(\n        renderer: THREE.WebGLRenderer,\n        scene: THREE.Scene,\n        camera: THREE.Camera,\n        writeBuffer: THREE.WebGLRenderTarget,\n        readBuffer: THREE.WebGLRenderTarget,\n        delta?: number\n    ) {\n        if (this.uniforms[this.textureID]) {\n            this.uniforms[this.textureID].value = readBuffer.texture;\n        }\n        this.fsQuad.material = this.material;\n        renderer.setRenderTarget(this.renderToScreen ? null : writeBuffer);\n        this.fsQuad.render(renderer);\n    }\n}\n\nclass FullScreenQuad {\n    private m_mesh: THREE.Mesh;\n    private m_camera: THREE.Camera;\n    constructor(material: THREE.Material) {\n        this.m_camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);\n        const geometry = new THREE.PlaneBufferGeometry(2, 2);\n        this.m_mesh = new THREE.Mesh(geometry, material);\n    }\n    get material(): THREE.Material {\n        return this.m_mesh.material as THREE.Material;\n    }\n    set material(value: THREE.Material) {\n        this.m_mesh.material = value;\n    }\n    render(renderer: THREE.WebGLRenderer) {\n        renderer.render((this.m_mesh as any) as THREE.Scene, this.m_camera);\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeoBox } from \"../coordinates/GeoBox\";\nimport { GeoCoordinates } from \"../coordinates/GeoCoordinates\";\nimport { GeoCoordinatesLike, isGeoCoordinatesLike } from \"../coordinates/GeoCoordinatesLike\";\nimport { Box3Like, isBox3Like } from \"../math/Box3Like\";\nimport { MathUtils } from \"../math/MathUtils\";\nimport { isOrientedBox3Like, OrientedBox3Like } from \"../math/OrientedBox3Like\";\nimport { TransformLike } from \"../math/TransformLike\";\nimport { Vector3Like } from \"../math/Vector3Like\";\nimport { EarthConstants } from \"./EarthConstants\";\nimport { Projection, ProjectionType } from \"./Projection\";\n\nimport * as THREE from \"three\";\n\nclass MercatorProjection extends Projection {\n    protected static clamp(val: number, min: number, max: number): number {\n        return Math.min(Math.max(min, val), max);\n    }\n\n    protected static latitudeClamp(latitude: number): number {\n        return MercatorProjection.clamp(\n            latitude,\n            -MercatorConstants.MAXIMUM_LATITUDE,\n            MercatorConstants.MAXIMUM_LATITUDE\n        );\n    }\n\n    private static latitudeProject(latitude: number): number {\n        return Math.log(Math.tan(Math.PI * 0.25 + latitude * 0.5)) / Math.PI;\n    }\n\n    private static latitudeClampProject(latitude: number): number {\n        return MercatorProjection.latitudeProject(MercatorProjection.latitudeClamp(latitude));\n    }\n\n    private static unprojectLatitude(y: number): number {\n        return 2.0 * Math.atan(Math.exp(Math.PI * y)) - Math.PI * 0.5;\n    }\n\n    /** @override */\n    readonly type: ProjectionType = ProjectionType.Planar;\n\n    /** @override */\n    getScaleFactor(worldPoint: Vector3Like): number {\n        return Math.cosh(2 * Math.PI * (worldPoint.y / this.unitScale - 0.5));\n    }\n\n    /** @override */\n    worldExtent<WorldBoundingBox extends Box3Like>(\n        minAltitude: number,\n        maxAltitude: number,\n        result?: WorldBoundingBox\n    ): WorldBoundingBox {\n        if (!result) {\n            result = (new THREE.Box3() as Box3Like) as WorldBoundingBox;\n        }\n        result.min.x = 0;\n        result.min.y = 0;\n        result.min.z = minAltitude;\n        result.max.x = this.unitScale;\n        result.max.y = this.unitScale;\n        result.max.z = maxAltitude;\n        return result;\n    }\n\n    /** @override */\n    projectPoint<WorldCoordinates extends Vector3Like>(\n        geoPointLike: GeoCoordinatesLike,\n        result?: WorldCoordinates\n    ): WorldCoordinates {\n        let geoPoint: GeoCoordinates;\n\n        if (geoPointLike instanceof GeoCoordinates) {\n            geoPoint = geoPointLike;\n        } else {\n            geoPoint = new GeoCoordinates(\n                geoPointLike.latitude,\n                geoPointLike.longitude,\n                geoPointLike.altitude\n            );\n        }\n\n        if (!result) {\n            // tslint:disable-next-line:no-object-literal-type-assertion\n            result = { x: 0, y: 0, z: 0 } as WorldCoordinates;\n        }\n        result.x = ((geoPoint.longitude + 180) / 360) * this.unitScale;\n        result.y =\n            (MercatorProjection.latitudeClampProject(geoPoint.latitudeInRadians) * 0.5 + 0.5) *\n            this.unitScale;\n        result.z = geoPoint.altitude || 0;\n        return result;\n    }\n\n    /** @override */\n    unprojectPoint(worldPoint: Vector3Like): GeoCoordinates {\n        const geoPoint = GeoCoordinates.fromRadians(\n            MercatorProjection.unprojectLatitude((worldPoint.y / this.unitScale - 0.5) * 2.0),\n            (worldPoint.x / this.unitScale) * 2 * Math.PI - Math.PI,\n            worldPoint.z\n        );\n        return geoPoint;\n    }\n\n    /** @override */\n    unprojectAltitude(worldPoint: Vector3Like): number {\n        return worldPoint.z;\n    }\n\n    /** @override */\n    projectBox<WorldBoundingBox extends Box3Like | OrientedBox3Like>(\n        geoBox: GeoBox,\n        result?: WorldBoundingBox\n    ): WorldBoundingBox {\n        const worldCenter = this.projectPoint(geoBox.center);\n        const worldNorth =\n            (MercatorProjection.latitudeClampProject(geoBox.northEast.latitudeInRadians) * 0.5 +\n                0.5) *\n            this.unitScale;\n        const worldSouth =\n            (MercatorProjection.latitudeClampProject(geoBox.southWest.latitudeInRadians) * 0.5 +\n                0.5) *\n            this.unitScale;\n        const worldYCenter = (worldNorth + worldSouth) * 0.5;\n\n        worldCenter.y = worldYCenter;\n\n        const latitudeSpan = worldNorth - worldSouth;\n        const longitudeSpan = (geoBox.longitudeSpan / 360) * this.unitScale;\n        if (!result) {\n            result = (new THREE.Box3() as Box3Like) as WorldBoundingBox;\n        }\n        if (isBox3Like(result)) {\n            result.min.x = worldCenter.x - longitudeSpan * 0.5;\n            result.min.y = worldCenter.y - latitudeSpan * 0.5;\n            result.max.x = worldCenter.x + longitudeSpan * 0.5;\n            result.max.y = worldCenter.y + latitudeSpan * 0.5;\n            const altitudeSpan = geoBox.altitudeSpan;\n            if (altitudeSpan !== undefined) {\n                result.min.z = worldCenter.z - altitudeSpan * 0.5;\n                result.max.z = worldCenter.z + altitudeSpan * 0.5;\n            } else {\n                result.min.z = 0;\n                result.max.z = 0;\n            }\n        } else if (isOrientedBox3Like(result)) {\n            MathUtils.newVector3(1, 0, 0, result.xAxis);\n            MathUtils.newVector3(0, 1, 0, result.yAxis);\n            MathUtils.newVector3(0, 0, 1, result.zAxis);\n            result.position.x = worldCenter.x;\n            result.position.y = worldCenter.y;\n            result.position.z = worldCenter.z;\n            result.extents.x = longitudeSpan * 0.5;\n            result.extents.y = latitudeSpan * 0.5;\n            result.extents.z = Math.max(Number.EPSILON, (geoBox.altitudeSpan || 0) * 0.5);\n        } else {\n            throw new Error(\"invalid bounding box\");\n        }\n        return result;\n    }\n\n    /** @override */\n    unprojectBox(worldBox: Box3Like): GeoBox {\n        const minGeo = this.unprojectPoint(worldBox.min);\n        const maxGeo = this.unprojectPoint(worldBox.max);\n        const geoBox = GeoBox.fromCoordinates(minGeo, maxGeo);\n        return geoBox;\n    }\n\n    /** @override */\n    groundDistance(worldPoint: Vector3Like): number {\n        return worldPoint.z;\n    }\n\n    /** @override */\n    scalePointToSurface(worldPoint: Vector3Like): Vector3Like {\n        worldPoint.z = 0;\n        return worldPoint;\n    }\n\n    /** @override */\n    surfaceNormal(_worldPoint: Vector3Like, normal?: Vector3Like) {\n        if (normal === undefined) {\n            normal = { x: 0, y: 0, z: 1 };\n        } else {\n            normal.x = 0;\n            normal.y = 0;\n            normal.z = 1;\n        }\n        return normal;\n    }\n\n    /** @override */\n    reprojectPoint(\n        sourceProjection: Projection,\n        worldPos: Vector3Like,\n        result?: Vector3Like\n    ): Vector3Like {\n        // this implementation of [[reprojectPoint]] supports both\n        // [[WebMercatorProjection]] and [[MercatorProjection]]. The only\n        // difference betweeen these two variants of WEB Mercator\n        // is in the orientation of the Y axis, so we just flip Y coordinates\n        // when reprojecting between them.\n        if (\n            sourceProjection !== this &&\n            (sourceProjection === webMercatorProjection || sourceProjection === mercatorProjection)\n        ) {\n            if (result === undefined) {\n                // tslint:disable-next-line: no-object-literal-type-assertion\n                result = {} as Vector3Like;\n            }\n\n            result.x = worldPos.x;\n            result.y = this.unitScale - worldPos.y;\n            result.z = worldPos.z;\n\n            return result;\n        }\n\n        return super.reprojectPoint(sourceProjection, worldPos, result!);\n    }\n}\n\nclass WebMercatorProjection extends MercatorProjection {\n    /** @override */\n    projectPoint<WorldCoordinates extends Vector3Like>(\n        geoPointLike: GeoCoordinatesLike,\n        result?: WorldCoordinates\n    ): WorldCoordinates {\n        let geoPoint: GeoCoordinates;\n\n        if (geoPointLike instanceof GeoCoordinates) {\n            geoPoint = geoPointLike;\n        } else {\n            geoPoint = new GeoCoordinates(\n                geoPointLike.latitude,\n                geoPointLike.longitude,\n                geoPointLike.altitude\n            );\n        }\n\n        /*\n         * The following tslint:disable is due to the fact that the [[WorldCoordinates]]\n         * might be a concrete class which is not available at runtime.\n         * Consider the following example:\n         *\n         *  const x: THREE.Vector3 = new THREE.Vector3(0,0,0);\n         *  const result = EquirectangularProjection.projectPoint<THREE.Vector3>(x);\n         *\n         * Note: type of `result` is Vector3Like and not as expected: THREE.Vector3!\n         */\n        if (!result) {\n            // tslint:disable-next-line:no-object-literal-type-assertion\n            result = { x: 0, y: 0, z: 0 } as WorldCoordinates;\n        }\n\n        result.x = ((geoPoint.longitude + 180) / 360) * this.unitScale;\n        const sy = Math.sin(MercatorProjection.latitudeClamp(geoPoint.latitudeInRadians));\n        result.y = (0.5 - Math.log((1 + sy) / (1 - sy)) / (4 * Math.PI)) * this.unitScale;\n        result.z = geoPoint.altitude || 0;\n        return result;\n    }\n\n    /** @override */\n    unprojectPoint(worldPoint: Vector3Like): GeoCoordinates {\n        const x = worldPoint.x / this.unitScale - 0.5;\n        const y = 0.5 - worldPoint.y / this.unitScale;\n\n        const longitude = 360 * x;\n        const latitude = 90 - (360 * Math.atan(Math.exp(-y * 2 * Math.PI))) / Math.PI;\n\n        return new GeoCoordinates(latitude, longitude, worldPoint.z);\n    }\n\n    /** @override */\n    projectBox<WorldBoundingBox extends Box3Like | OrientedBox3Like>(\n        geoBox: GeoBox,\n        result?: WorldBoundingBox\n    ): WorldBoundingBox {\n        const r = super.projectBox(geoBox, result);\n        if (isBox3Like(r)) {\n            // Invert the y axis for web mercator, this means that max => min & min => max\n            const maxY = r.max.y;\n            r.max.y = this.unitScale - r.min.y;\n            r.min.y = this.unitScale - maxY;\n        } else if (isOrientedBox3Like(r)) {\n            MathUtils.newVector3(1, 0, 0, r.xAxis);\n            MathUtils.newVector3(0, -1, 0, r.yAxis);\n            MathUtils.newVector3(0, 0, -1, r.zAxis);\n            r.position.y = this.unitScale - r.position.y;\n        }\n        return r;\n    }\n\n    /** @override */\n    unprojectBox(worldBox: Box3Like): GeoBox {\n        const minGeo = this.unprojectPoint(worldBox.min);\n        const maxGeo = this.unprojectPoint(worldBox.max);\n        const geoBox = new GeoBox(\n            new GeoCoordinates(maxGeo.latitude, minGeo.longitude, minGeo.altitude),\n            new GeoCoordinates(minGeo.latitude, maxGeo.longitude, maxGeo.altitude)\n        );\n        return geoBox;\n    }\n\n    /** @override */\n    surfaceNormal(_worldPoint: Vector3Like, normal?: Vector3Like) {\n        if (normal === undefined) {\n            normal = { x: 0, y: 0, z: -1 };\n        } else {\n            normal.x = 0;\n            normal.y = 0;\n            normal.z = -1;\n        }\n        return normal;\n    }\n\n    /** @override */\n    localTangentSpace(\n        point: GeoCoordinatesLike | Vector3Like,\n        result: TransformLike\n    ): TransformLike {\n        if (isGeoCoordinatesLike(point)) {\n            this.projectPoint(point, result.position);\n        } else {\n            MathUtils.copyVector3(point, result.position);\n        }\n        MathUtils.newVector3(1, 0, 0, result.xAxis);\n        MathUtils.newVector3(0, -1, 0, result.yAxis);\n        MathUtils.newVector3(0, 0, -1, result.zAxis);\n        return result;\n    }\n}\n\nexport class MercatorConstants {\n    // Math.atan(Math.sinh(Math.PI))\n    static readonly MAXIMUM_LATITUDE: number = 1.4844222297453323;\n}\n\n/**\n * Mercator [[Projection]] used to convert geo coordinates to world coordinates and vice versa.\n */\nexport const mercatorProjection: Projection = new MercatorProjection(\n    EarthConstants.EQUATORIAL_CIRCUMFERENCE\n);\n\n/**\n * Web Mercator [[Projection]] used to convert geo coordinates to world coordinates and vice versa.\n */\nexport const webMercatorProjection: Projection = new WebMercatorProjection(\n    EarthConstants.EQUATORIAL_CIRCUMFERENCE\n);\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { SubdivisionScheme } from \"./SubdivisionScheme\";\n\nclass QuadTreeSubdivisionScheme implements SubdivisionScheme {\n    getSubdivisionX(): number {\n        return 2;\n    }\n    getSubdivisionY(): number {\n        return 2;\n    }\n    getLevelDimensionX(level: number): number {\n        // tslint:disable-next-line:no-bitwise\n        return 1 << level;\n    }\n    getLevelDimensionY(level: number): number {\n        // tslint:disable-next-line:no-bitwise\n        return 1 << level;\n    }\n}\n\n/**\n * [[SubdivisionScheme]] representing a quadtree.\n */\nexport const quadTreeSubdivisionScheme: SubdivisionScheme = new QuadTreeSubdivisionScheme();\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/** @hidden */\nconst powerOfTwo = [\n    0x1,\n    0x2,\n    0x4,\n    0x8,\n    0x10,\n    0x20,\n    0x40,\n    0x80,\n    0x100,\n    0x200,\n    0x400,\n    0x800,\n    0x1000,\n    0x2000,\n    0x4000,\n    0x8000,\n    0x10000,\n    0x20000,\n    0x40000,\n    0x80000,\n    0x100000,\n    0x200000,\n    0x400000,\n    0x800000,\n    0x1000000,\n    0x2000000,\n    0x4000000,\n    0x8000000,\n    0x10000000,\n    0x20000000,\n    0x40000000,\n    0x80000000,\n    0x100000000,\n    0x200000000,\n    0x400000000,\n    0x800000000,\n    0x1000000000,\n    0x2000000000,\n    0x4000000000,\n    0x8000000000,\n    0x10000000000,\n    0x20000000000,\n    0x40000000000,\n    0x80000000000,\n    0x100000000000,\n    0x200000000000,\n    0x400000000000,\n    0x800000000000,\n    0x1000000000000,\n    0x2000000000000,\n    0x4000000000000,\n    0x8000000000000,\n    0x10000000000000 // Math.pow(2, 52), highest bit that can be set correctly.\n];\n\n/**\n * The `TileKey` instances are used to address a tile in a quadtree.\n *\n * A tile key is defined by a row, a column, and a level. The tree has a root at level 0, with one\n * single tile. On every level, each tile is divided into four children (therefore the name\n * quadtree).\n *\n * Within each [[level]], any particular tile is addressed with [[row]] and [[column]]. The number\n * of rows and columns in each level is 2 to the power of the level. This means: On level 0, only\n * one tile exists, [[columnsAtLevel]]() and [[rowsAtLevel]]() are both 1. On level 1, 4 tiles\n * exist, in 2 rows and 2 columns. On level 2 we have 16 tiles, in 4 rows and 4 columns. And so on.\n *\n * A tile key is usually created using [[fromRowColumnLevel]]() method.\n *\n * `TileKey` instances are immutable, all members return new instances of `TileKey` and do not\n * modify the original object.\n *\n * Utility functions like [[parent]](), [[changedLevelBy]](), and [[changedLevelTo]]() allow for\n * easy vertical navigation of the tree. The number of available rows and columns in the tile's\n * level is given with [[rowCount]]() and [[columnCount]]().\n *\n * Tile keys can be created from and converted into various alternative formats:\n *\n *  - [[toQuadKey]]() / [[fromQuadKey]]() - string representation 4-based\n *  - [[toHereTile]]() / [[fromHereTile]]() - string representation 10-based\n *  - [[mortonCode]]() / [[fromMortonCode]]() - number representation\n *\n * Note - as JavaScript's number type can hold 53 bits in its mantissa, only levels up to 26 can be\n * represented in the number representation returned by [[mortonCode]]().\n */\nexport class TileKey {\n    /**\n     * Creates a tile key.\n     *\n     * @param row The requested row. Must be less than 2 to the power of level.\n     * @param column The requested column. Must be less than 2 to the power of level.\n     * @param level The requested level.\n     */\n    static fromRowColumnLevel(row: number, column: number, level: number): TileKey {\n        return new TileKey(row, column, level);\n    }\n\n    /**\n     * Creates a tile key from a quad string.\n     *\n     * The quad string can be created with [[toQuadKey]].\n     *\n     * @param quadkey The quadkey to convert.\n     * @returns A new instance of `TileKey`.\n     */\n    static fromQuadKey(quadkey: string): TileKey {\n        const level = quadkey.length;\n        let row = 0;\n        let column = 0;\n        // tslint:disable:no-bitwise\n        for (let i = 0; i < quadkey.length; ++i) {\n            const mask = 1 << i;\n            const d = parseInt(quadkey.charAt(level - i - 1), 10);\n            if (d & 0x1) {\n                column |= mask;\n            }\n            if (d & 0x2) {\n                row |= mask;\n            }\n        }\n        // tslint:enable:no-bitwise\n        return TileKey.fromRowColumnLevel(row, column, level);\n    }\n    /**\n     * Creates a tile key from a numeric Morton code representation.\n     *\n     * You can convert a tile key into a numeric Morton code with [[mortonCode]].\n     *\n     * @param quadKey64 The Morton code to be converted.\n     * @returns A new instance of [[TileKey]].\n     */\n    static fromMortonCode(quadKey64: number): TileKey {\n        let level = 0;\n        let row = 0;\n        let column = 0;\n        let quadKey = quadKey64;\n        // tslint:disable:no-bitwise\n        while (quadKey > 1) {\n            const mask: number = 1 << level;\n\n            if (quadKey & 0x1) {\n                column |= mask;\n            }\n            if (quadKey & 0x2) {\n                row |= mask;\n            }\n\n            level++;\n            quadKey = (quadKey - (quadKey & 0x3)) / 4;\n        }\n        // tslint:enable:no-bitwise\n        const result = TileKey.fromRowColumnLevel(row, column, level);\n        result.m_mortonCode = quadKey64;\n        return result;\n    }\n\n    /**\n     * Creates a tile key from a heretile code string.\n     *\n     * The string can be created with [[toHereTile]].\n     *\n     * @param quadkey64 The string representation of the HERE tile key.\n     * @returns A new instance of `TileKey`.\n     */\n    static fromHereTile(quadkey64: string): TileKey {\n        const result = TileKey.fromMortonCode(parseInt(quadkey64, 10));\n        result.m_hereTile = quadkey64;\n        return result;\n    }\n\n    /**\n     * Returns the number of available columns at a given level.\n     *\n     * This is 2 to the power of the level.\n     *\n     * @param level The level for which to return the number of columns.\n     * @returns The available columns at the given level.\n     */\n    static columnsAtLevel(level: number): number {\n        return Math.pow(2, level);\n    }\n\n    /**\n     * Returns the number of available rows at a given level.\n     *\n     * This is 2 to the power of the level.\n     *\n     * @param level The level for which to return the number of rows.\n     * @returns The available rows at the given level.\n     */\n    static rowsAtLevel(level: number): number {\n        return Math.pow(2, level);\n    }\n\n    /**\n     * Returns the closest matching `TileKey` in a cartesian coordinate system.\n     *\n     * @param level The level for the tile key.\n     * @param coordX The X coordinate.\n     * @param coordY The Y coordinate.\n     * @param totalWidth The maximum X coordinate.\n     * @param totalHeight The maximum Y coordinate.\n     * @returns A new tile key at the given level that includes the given coordinates.\n     */\n    static atCoords(\n        level: number,\n        coordX: number,\n        coordY: number,\n        totalWidth: number,\n        totalHeight: number\n    ): TileKey {\n        return TileKey.fromRowColumnLevel(\n            Math.floor(coordY / (totalHeight / TileKey.rowsAtLevel(level))),\n            Math.floor(coordX / (totalWidth / TileKey.columnsAtLevel(level))),\n            level\n        );\n    }\n\n    /**\n     * Computes the Morton code of the parent tile key of the given Morton code.\n     *\n     * Note: The parent key of the root key is the root key itself.\n     *\n     * @param mortonCode A Morton code, for example, obtained from [[mortonCode]].\n     * @returns The Morton code of the parent tile.\n     */\n    static parentMortonCode(mortonCode: number): number {\n        return Math.floor(mortonCode / 4);\n    }\n\n    private m_mortonCode?: number;\n    private m_hereTile?: string;\n\n    /**\n     * Constructs a new immutable instance of a `TileKey`.\n     *\n     * For the better readability, [[TileKey.fromRowColumnLevel]] should be preferred.\n     *\n     * Note - row and column must not be greater than the maximum rows/columns for the given level.\n     *\n     * @param row Represents the row in the quadtree.\n     * @param column Represents the column in the quadtree.\n     * @param level Represents the level in the quadtree.\n     */\n    constructor(readonly row: number, readonly column: number, readonly level: number) {}\n\n    /**\n     * Returns a tile key representing the parent of the tile addressed by this tile key.\n     *\n     * Throws an exception is this tile is already the root.\n     */\n    parent(): TileKey {\n        if (this.level === 0) {\n            throw new Error(\"Cannot get the parent of the root tile key\");\n        }\n        // tslint:disable-next-line:no-bitwise\n        return TileKey.fromRowColumnLevel(this.row >>> 1, this.column >>> 1, this.level - 1);\n    }\n\n    /**\n     * Returns a new tile key at a level that differs from this tile's level by delta.\n     *\n     * Equivalent to `changedLevelTo(level() + delta)`.\n     *\n     * Note - root key is returned if `delta` is smaller than the level of this tile key.\n     *\n     * @param delta The numeric difference between the current level and the requested level.\n     */\n    changedLevelBy(delta: number): TileKey {\n        const level = Math.max(0, this.level + delta);\n        let row = this.row;\n        let column = this.column;\n\n        // tslint:disable:no-bitwise\n        if (delta >= 0) {\n            row <<= delta;\n            column <<= delta;\n        } else {\n            row >>>= -delta;\n            column >>>= -delta;\n        }\n        // tslint:enable:no-bitwise\n        return TileKey.fromRowColumnLevel(row, column, level);\n    }\n\n    /**\n     * Returns a new tile key at the requested level.\n     *\n     * If the requested level is smaller than the tile's level, then the key of an ancestor of this\n     * tile is returned. If the requested level is larger than the tile's level, then the key of\n     * first child or grandchild of this tile is returned, for example, the child with the lowest\n     * row and column number. If the requested level equals this tile's level, then the tile key\n     * itself is returned. If the requested level is negative, the root tile key is returned.\n     *\n     * @param level The requested level.\n     */\n    changedLevelTo(level: number): TileKey {\n        return this.changedLevelBy(level - this.level);\n    }\n\n    /**\n     * Converts the tile key to a numeric code representation.\n     *\n     * You can create a tile key from a numeric Morton code with [[fromMortonCode]].\n     *\n     * Note - only levels <= 26 are supported.\n     */\n    mortonCode(): number {\n        if (this.m_mortonCode === undefined) {\n            let column = this.column;\n            let row = this.row;\n\n            // tslint:disable:no-bitwise\n            let result = powerOfTwo[this.level << 1];\n            for (let i = 0; i < this.level; ++i) {\n                if (column & 0x1) {\n                    result += powerOfTwo[2 * i];\n                }\n                if (row & 0x1) {\n                    result += powerOfTwo[2 * i + 1];\n                }\n                column >>>= 1;\n                row >>>= 1;\n            }\n            // tslint:enable:no-bitwise\n\n            this.m_mortonCode = result;\n        }\n        return this.m_mortonCode;\n    }\n\n    /**\n     * Converts the tile key into a string for using in REST API calls.\n     *\n     * The string is a quadkey Morton code representation as a string.\n     *\n     * You can convert back from a quadkey string with [[fromHereTile]].\n     */\n    toHereTile(): string {\n        if (this.m_hereTile === undefined) {\n            this.m_hereTile = this.mortonCode().toString();\n        }\n        return this.m_hereTile;\n    }\n\n    /**\n     * Converts the tile key into a string for using in REST API calls.\n     *\n     * If the tile is the root tile, the quadkey is '-'. Otherwise the string is a number to the\n     * base of 4, but without the leading 1, with the following properties:\n     *  1. the number of digits equals the level.\n     *  2. removing the last digit gives the parent tile's quadkey string, i.e. appending 0,1,2,3\n     *     to a quadkey string gives the tiles's children.\n     *\n     * You can convert back from a quadkey string with [[fromQuadKey]].\n     */\n    toQuadKey(): string {\n        let result: string = \"\";\n\n        // tslint:disable:no-bitwise\n        for (let i = this.level; i > 0; --i) {\n            const mask = 1 << (i - 1);\n\n            const col = (this.column & mask) !== 0;\n            const row = (this.row & mask) !== 0;\n\n            if (col && row) {\n                result += \"3\";\n            } else if (row) {\n                result += \"2\";\n            } else if (col) {\n                result += \"1\";\n            } else {\n                result += \"0\";\n            }\n        }\n        // tslint:enable:no-bitwise\n\n        return result;\n    }\n\n    /**\n     * Equality operator.\n     *\n     * @param qnr The tile key to compare to.\n     * @returns `true` if this tile key has identical row, column and level, `false` otherwise.\n     */\n    equals(qnr: TileKey): boolean {\n        return this.row === qnr.row && this.column === qnr.column && this.level === qnr.level;\n    }\n\n    /**\n     * Returns the absolute quadkey that is constructed from its sub quadkey.\n     *\n     * @param sub The sub key.\n     * @returns The absolute tile key in the quadtree.\n     */\n    addedSubKey(sub: string): TileKey {\n        const subQuad = TileKey.fromQuadKey(sub.length === 0 ? \"-\" : sub);\n        const child = this.changedLevelBy(subQuad.level);\n        return TileKey.fromRowColumnLevel(\n            child.row + subQuad.row,\n            child.column + subQuad.column,\n            child.level\n        );\n    }\n\n    /**\n     * Returns the absolute quadkey that is constructed from its sub HERE tile key.\n     *\n     * @param sub The sub HERE key.\n     * @returns The absolute tile key in the quadtree.\n     */\n    addedSubHereTile(sub: string): TileKey {\n        const subQuad = TileKey.fromHereTile(sub);\n        const child = this.changedLevelBy(subQuad.level);\n        return TileKey.fromRowColumnLevel(\n            child.row + subQuad.row,\n            child.column + subQuad.column,\n            child.level\n        );\n    }\n\n    /**\n     * Returns a sub quadkey that is relative to its parent.\n     *\n     * This function can be used to generate sub keys that are relative to a parent that is delta\n     * levels up in the quadtree.\n     *\n     * This function can be used to create shortened keys for quads on lower levels if the parent is\n     * known.\n     *\n     * Note - the sub quadkeys fit in a 16-bit unsigned integer if the `delta` is smaller than 8. If\n     * `delta` is smaller than 16, the sub quadkey fits into an unsigned 32-bit integer.\n     *\n     * Deltas larger than 16 are not supported.\n     *\n     * @param delta The number of levels relative to its parent quadkey. Must be greater or equal to\n     * 0 and smaller than 16.\n     * @returns The quadkey relative to its parent that is `delta` levels up the tree.\n     */\n    getSubHereTile(delta: number): string {\n        const key = this.mortonCode();\n        // tslint:disable-next-line:no-bitwise\n        const msb = 1 << (delta * 2);\n        const mask = msb - 1;\n        // tslint:disable-next-line:no-bitwise\n        const result = (key & mask) | msb;\n        return result.toString();\n    }\n\n    /**\n     * Returns the number of available rows in the tile's [[level]].\n     *\n     * This is 2 to the power of the level.\n     */\n    rowCount(): number {\n        return TileKey.rowsAtLevel(this.level);\n    }\n\n    /**\n     * Returns the number of available columns in the tile's [[level]].\n     *\n     * This is 2 to the power of the level.\n     */\n    columnCount(): number {\n        return TileKey.columnsAtLevel(this.level);\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport namespace ExtrusionFeatureDefs {\n    /**\n     * Minimum ratio value for extrusion effect\n     */\n    export const DEFAULT_RATIO_MIN: number = 0.0;\n    /**\n     * Maximum ratio value for extrusion effect\n     */\n    export const DEFAULT_RATIO_MAX: number = 1;\n\n    /**\n     * Buildings height used whenever no height-data is present or height is very small.\n     *\n     * Used to avoid z-fighting between ground plane and building.\n     */\n    export const MIN_BUILDING_HEIGHT = 0.01;\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport {\n    Env,\n    Expr,\n    GeometryKind,\n    getFeatureId,\n    getPropertyValue,\n    GradientSky,\n    ImageTexture,\n    IndexedTechnique,\n    Light,\n    MapEnv,\n    PostEffects,\n    Sky,\n    Theme,\n    Value\n} from \"@here/harp-datasource-protocol\";\nimport { ViewRanges } from \"@here/harp-datasource-protocol/lib/ViewRanges\";\nimport {\n    EarthConstants,\n    GeoBox,\n    GeoBoxExtentLike,\n    GeoCoordinates,\n    GeoCoordLike,\n    isGeoBoxExtentLike,\n    isGeoCoordinatesLike,\n    mercatorProjection,\n    Projection,\n    ProjectionType,\n    TilingScheme,\n    Vector3Like\n} from \"@here/harp-geoutils\";\nimport {\n    assert,\n    getOptionValue,\n    LoggerManager,\n    LogLevel,\n    PerformanceTimer,\n    UriResolver\n} from \"@here/harp-utils\";\nimport * as THREE from \"three\";\nimport { AnimatedExtrusionHandler } from \"./AnimatedExtrusionHandler\";\nimport { BackgroundDataSource } from \"./BackgroundDataSource\";\nimport { CameraMovementDetector } from \"./CameraMovementDetector\";\nimport { ClipPlanesEvaluator, createDefaultClipPlanesEvaluator } from \"./ClipPlanesEvaluator\";\nimport { IMapAntialiasSettings, IMapRenderingManager, MapRenderingManager } from \"./composing\";\nimport { ConcurrentDecoderFacade } from \"./ConcurrentDecoderFacade\";\nimport { CopyrightInfo } from \"./copyrights/CopyrightInfo\";\nimport { DataSource } from \"./DataSource\";\nimport { ElevationProvider } from \"./ElevationProvider\";\nimport { ElevationRangeSource } from \"./ElevationRangeSource\";\nimport { FrustumIntersection } from \"./FrustumIntersection\";\nimport { overlayOnElevation } from \"./geometry/overlayOnElevation\";\nimport { TileGeometryManager } from \"./geometry/TileGeometryManager\";\nimport { MapViewImageCache } from \"./image/MapViewImageCache\";\nimport { MapObjectAdapter } from \"./MapObjectAdapter\";\nimport { MapViewFog } from \"./MapViewFog\";\nimport { PickHandler, PickResult } from \"./PickHandler\";\nimport { PickingRaycaster } from \"./PickingRaycaster\";\nimport { PoiManager } from \"./poi/PoiManager\";\nimport { PoiRendererFactory } from \"./poi/PoiRendererFactory\";\nimport { PoiTableManager } from \"./poi/PoiTableManager\";\nimport { PolarTileDataSource } from \"./PolarTileDataSource\";\nimport { ScreenCollisions, ScreenCollisionsDebug } from \"./ScreenCollisions\";\nimport { ScreenProjector } from \"./ScreenProjector\";\nimport { SkyBackground } from \"./SkyBackground\";\nimport { FrameStats, PerformanceStatistics } from \"./Statistics\";\nimport { FontCatalogLoader } from \"./text/FontCatalogLoader\";\nimport { MapViewState } from \"./text/MapViewState\";\nimport { TextCanvasFactory } from \"./text/TextCanvasFactory\";\nimport { TextElement } from \"./text/TextElement\";\nimport { TextElementsRenderer, ViewUpdateCallback } from \"./text/TextElementsRenderer\";\nimport { TextElementsRendererOptions } from \"./text/TextElementsRendererOptions\";\nimport { createLight } from \"./ThemeHelpers\";\nimport { ThemeLoader } from \"./ThemeLoader\";\nimport { Tile, TileFeatureData, TileObject } from \"./Tile\";\nimport { MapViewUtils } from \"./Utils\";\nimport { ResourceComputationType, VisibleTileSet, VisibleTileSetOptions } from \"./VisibleTileSet\";\n\ndeclare const process: any;\n\n// Cache value, because access to process.env.NODE_ENV is SLOW!\nconst isProduction = process.env.NODE_ENV === \"production\";\nif (isProduction) {\n    // In production: silence logging below error.\n    LoggerManager.instance.setLogLevelForAll(LogLevel.Error);\n} else {\n    // In dev: silence logging below log (silences \"debug\" and \"trace\" levels).\n    LoggerManager.instance.setLogLevelForAll(LogLevel.Log);\n}\n/**\n * An interface describing [[THREE.Object3D]]s anchored on given [[GeoCoordinates]].\n *\n * Example:\n * ```typescript\n * const mesh: MapAnchor<THREE.Mesh> = new THREE.Mesh(geometry, material);\n * mesh.geoPosition = new GeoCoordinates(latitude, longitude, altitude);\n * mapView.mapAnchors.add(mesh);\n * ```\n *\n */\nexport type MapAnchor<T extends THREE.Object3D = THREE.Object3D> = T & {\n    /**\n     * The position of this [[MapAnchor]] in [[GeoCoordinates]].\n     */\n    geoPosition?: GeoCoordinates;\n    /**\n     * Flag defining if the object may be picked.\n     *\n     * @note By default all objects are pickable even if this flag is undefined.\n     */\n    pickable?: boolean;\n};\n\n/**\n * An interface describing [[THREE.Object3D]]s anchored on given world coordinates.\n *\n * Example:\n * ```typescript\n * const mesh: WorldAnchor<THREE.Mesh> = new THREE.Mesh(geometry, material);\n * mesh.worldPosition = new Vector3(x, y, z);\n * mesh.pickable = false;\n * mapView.worldAnchors.add(mesh);\n * ```\n * @internal\n */\nexport type WorldAnchor<T extends THREE.Object3D = THREE.Object3D> = T & {\n    /**\n     * The position of this [[WorldAnchor]] in world coordinates (and units).\n     *\n     * Word coordinates anchors may be used for objects that has not exact relation to the\n     * place on the Earth globe or map. This may include light sources, special cameras, effects.\n     */\n    worldPosition?: THREE.Vector3;\n    /**\n     * Flag defining if the object may be picked.\n     *\n     * @note By default all objects are pickable even if this flag is undefined.\n     */\n    pickable?: boolean;\n};\n\nexport enum MapViewEventNames {\n    /** Called before this `MapView` starts to render a new frame. */\n    Update = \"update\",\n    /** Called when the WebGL canvas is resized. */\n    Resize = \"resize\",\n    /** Called when the frame is about to be rendered. */\n    Render = \"render\",\n    /** Called after a frame has been rendered. */\n    AfterRender = \"didrender\",\n    /** Called after the first frame has been rendered. */\n    FirstFrame = \"first-render\",\n    /** Called when the first view has all the necessary tiles loaded and rendered. */\n    FrameComplete = \"frame-complete\",\n    /** Called when the theme has been loaded with the internal [[ThemeLoader]]. */\n    ThemeLoaded = \"theme-loaded\",\n    /** Called when the animation mode has started. */\n    AnimationStarted = \"animation-started\",\n    /** Called when the animation mode has stopped. */\n    AnimationFinished = \"animation-finished\",\n    /** Called when a camera interaction has been detected. */\n    MovementStarted = \"movement-started\",\n    /** Called when a camera interaction has been stopped. */\n    MovementFinished = \"movement-finished\",\n    /** Called when a data source has been connected or failed to connect. */\n    DataSourceConnect = \"datasource-connect\",\n    /** Emitted when copyright info of rendered map has been changed. */\n    CopyrightChanged = \"copyright-changed\",\n    /** Called when the WebGL context is lost. */\n    ContextLost = \"webglcontext-lost\",\n    /** Called when the WebGL context is restored. */\n    ContextRestored = \"webglcontext-restored\",\n    /** Called when camera position has been changed. */\n    CameraPositionChanged = \"camera-changed\"\n}\n\nconst logger = LoggerManager.instance.create(\"MapView\");\nconst DEFAULT_CLEAR_COLOR = 0xefe9e1;\nconst DEFAULT_FOV_CALCULATION: FovCalculation = { type: \"dynamic\", fov: 40 };\nconst DEFAULT_CAM_NEAR_PLANE = 0.1;\nconst DEFAULT_CAM_FAR_PLANE = 4000000;\nconst MAX_FIELD_OF_VIEW = 140;\nconst MIN_FIELD_OF_VIEW = 10;\n// All objects in fallback tiles are reduced by this amount.\nexport const FALLBACK_RENDER_ORDER_OFFSET = 20000;\n\nconst DEFAULT_MIN_ZOOM_LEVEL = 1;\n\n/**\n * Default maximum zoom level.\n */\nconst DEFAULT_MAX_ZOOM_LEVEL = 20;\n\n/**\n * Default minimum camera height.\n */\nconst DEFAULT_MIN_CAMERA_HEIGHT = 20;\n\n/**\n * Style set used by [[PolarTileDataSource]] by default.\n */\nconst DEFAULT_POLAR_STYLE_SET_NAME = \"polar\";\n\n/**\n * The type of `RenderEvent`.\n */\nexport interface RenderEvent extends THREE.Event {\n    type:\n        | MapViewEventNames.Render\n        | MapViewEventNames.FirstFrame\n        | MapViewEventNames.FrameComplete\n        | MapViewEventNames.ThemeLoaded\n        | MapViewEventNames.AnimationStarted\n        | MapViewEventNames.AnimationFinished\n        | MapViewEventNames.MovementStarted\n        | MapViewEventNames.MovementFinished\n        | MapViewEventNames.ContextLost\n        | MapViewEventNames.ContextRestored\n        | MapViewEventNames.CopyrightChanged;\n    time?: number;\n}\n\n// Event type: cast needed to workaround wrong THREE.js typings.\nconst UPDATE: RenderEvent = { type: MapViewEventNames.Update } as any;\nconst RENDER_EVENT: RenderEvent = { type: MapViewEventNames.Render } as any;\nconst DID_RENDER_EVENT: RenderEvent = { type: MapViewEventNames.AfterRender } as any;\nconst FIRST_FRAME_EVENT: RenderEvent = { type: MapViewEventNames.FirstFrame } as any;\nconst FRAME_COMPLETE_EVENT: RenderEvent = { type: MapViewEventNames.FrameComplete } as any;\nconst THEME_LOADED_EVENT: RenderEvent = { type: MapViewEventNames.ThemeLoaded } as any;\nconst ANIMATION_STARTED_EVENT: RenderEvent = { type: MapViewEventNames.AnimationStarted } as any;\nconst ANIMATION_FINISHED_EVENT: RenderEvent = { type: MapViewEventNames.AnimationFinished } as any;\nconst MOVEMENT_STARTED_EVENT: RenderEvent = { type: MapViewEventNames.MovementStarted } as any;\nconst MOVEMENT_FINISHED_EVENT: RenderEvent = { type: MapViewEventNames.MovementFinished } as any;\nconst CONTEXT_LOST_EVENT: RenderEvent = { type: MapViewEventNames.ContextLost } as any;\nconst CONTEXT_RESTORED_EVENT: RenderEvent = { type: MapViewEventNames.ContextRestored } as any;\nconst COPYRIGHT_CHANGED_EVENT: RenderEvent = { type: MapViewEventNames.CopyrightChanged } as any;\n\nconst cache = {\n    vector2: [new THREE.Vector2()],\n    vector3: [new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3()],\n    rayCaster: new THREE.Raycaster(),\n    groundPlane: new THREE.Plane(),\n    groundSphere: new THREE.Sphere(undefined, EarthConstants.EQUATORIAL_RADIUS),\n    frustumPoints: [\n        new THREE.Vector3(),\n        new THREE.Vector3(),\n        new THREE.Vector3(),\n        new THREE.Vector3(),\n        new THREE.Vector3(),\n        new THREE.Vector3(),\n        new THREE.Vector3(),\n        new THREE.Vector3()\n    ],\n    matrix4: [new THREE.Matrix4(), new THREE.Matrix4()],\n    transform: [\n        {\n            position: new THREE.Vector3(),\n            xAxis: new THREE.Vector3(),\n            yAxis: new THREE.Vector3(),\n            zAxis: new THREE.Vector3()\n        }\n    ]\n};\n\n/**\n * Specifies how the FOV (Field of View) should be calculated.\n */\nexport interface FovCalculation {\n    /**\n     * How to interpret the [[fov]], can be either `fixed` or `dynamic`.\n     *\n     * `fixed` means that the FOV is fixed regardless of the [[viewportHeight]], such that shrinking\n     * the height causes the map to shrink to keep the content in view. The benefit is that,\n     * regardless of any resizes, the field of view is constant, which means there is no change in\n     * the distortion of buildings near the edges. However the trade off is that the zoom level\n     * changes, which means that the map will pull in new tiles, hence causing some flickering.\n     *\n     * `dynamic` means that the focal length is calculated based on the supplied [[fov]] and\n     * [[viewportHeight]], this means that the map doesn't scale (the image is essentially cropped\n     * but not shrunk) when the [[viewportHeight]] or [[viewportWidth]] is changed. The benefit is\n     * that the zoom level is (currently) stable during resize, because the focal length is used,\n     * however the tradeoff is that changing from a small to a big height will cause the fov to\n     * change a lot, and thus introduce distortion.\n     */\n    type: \"fixed\" | \"dynamic\";\n\n    /**\n     * If [[type]] is `fixed` then the supplied [[fov]] is fixed regardless of\n     * [[viewportHeight]] or [[viewportWidth]].\n     *\n     * If [[type]] is `dynamic` then the supplied [[fov]] is applied to the\n     * first frame, and the focal length calculated. Changes to the viewport\n     * height no longer shrink the content because the field of view is updated\n     * dynamically.\n     */\n    fov: number;\n}\n\n/**\n * Hint for the WebGL implementation on which power mode to prefer.\n *\n * @see https://www.khronos.org/registry/webgl/specs/latest/1.0/#5.14.12\n */\nexport enum MapViewPowerPreference {\n    /** Default value. */\n    Default = \"default\",\n    /** Lower power mode, used to conserve energy. */\n    LowPower = \"low-power\",\n    /** Maximum performance. */\n    HighPerformance = \"high-performance\"\n}\n\n/**\n * User configuration for the [[MapView]].\n */\nexport interface MapViewOptions extends TextElementsRendererOptions, Partial<LookAtParams> {\n    /**\n     * The canvas element used to render the scene.\n     */\n    canvas: HTMLCanvasElement;\n\n    /**\n     * Optional WebGL Rendering Context.\n     * (https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext)\n     */\n    context?: WebGLRenderingContext;\n\n    /**\n     * `true` if the canvas contains an alpha (transparency) buffer or not. Default is `false`.\n     */\n    alpha?: boolean;\n\n    /**\n     * If `true`adds a Background Mesh for each tile\n     *\n     * @default `true`\n     */\n    addBackgroundDatasource?: boolean;\n\n    /**\n     * Whether the native WebGL antialiasing should be enabled. It is better to disable it if the\n     * MapView's MSAA is enabled.\n     *\n     * @default `true` for `pixelRatio` < `2.0`, `false` otherwise.\n     */\n    enableNativeWebglAntialias?: boolean;\n\n    /**\n     * Antialias settings for the map rendering. It is better to disable the native antialising if\n     * the custom antialiasing is enabled.\n     */\n    customAntialiasSettings?: IMapAntialiasSettings;\n\n    /**\n     * `Projection` used by the `MapView`.\n     *\n     * The default value is [[mercatorProjection]].\n     */\n    projection?: Projection;\n\n    /**\n     * The URL of the script that the decoder worker runs. The default URL is\n     * `./decoder.bundle.js`.\n     *\n     * Relative URIs are resolved to full URL using the document's base URL\n     * (see: https://www.w3.org/TR/WD-html40-970917/htmlweb.html#h-5.1.2).\n     */\n    decoderUrl?: string;\n\n    /**\n     * The number of Web Workers used to decode data. The default is\n     * CLAMP(`navigator.hardwareConcurrency` - 1, 1, 2).\n     */\n    decoderCount?: number;\n\n    /**\n     * The [[Theme]] used by Mapview.\n     *\n     * This Theme can be one of the following:\n     *  - `string` : the URI of the theme file used to style this map\n     *  - `Theme` : the `Theme` object already loaded\n     *  - `Promise<Theme>` : the future `Theme` object\n     *  - `undefined` : the theme is not yet set up, but can be set later. Rendering waits until\n     *     the theme is set.\n     *\n     * **Note:** Layers that use a theme do not render any content until that theme is available.\n     *\n     * Relative URIs are resolved to full URL using the document's base URL\n     * (see: https://www.w3.org/TR/WD-html40-970917/htmlweb.html#h-5.1.2).\n     *\n     * Custom URIs (of theme itself and of resources referenced by theme) may be resolved with help\n     * of [[uriResolver]].\n     *\n     * @see [[ThemeLoader.load]] for details how theme is loaded\n     */\n    theme?: string | Theme | Promise<Theme>;\n\n    /**\n     * Resolve `URI` referenced in `MapView` assets using this resolver.\n     *\n     * Use, to support application/deployment specific `URI`s into actual `URLs` that can be loaded\n     * with `fetch`.\n     *\n     * Example:\n     * ```\n     * uriResolver: new PrefixMapUriResolver({\n     *     \"local://poiMasterList\": \"/assets/poiMasterList.json\",\n     *        // will match only 'local//:poiMasterList' and\n     *        // resolve to `/assets/poiMasterList.json`\n     *     \"local://icons/\": \"/assets/icons/\"\n     *        // will match only 'local//:icons/ANYPATH' (and similar) and\n     *        // resolve to `/assets/icons/ANYPATH`\n     * })\n     * ```\n     *\n     * @see [[UriResolver]]\n     * @See [[PrefixMapUriResolver]]\n     */\n    uriResolver?: UriResolver;\n\n    /**\n     * The minimum zoom level; default is `1`.\n     */\n    minZoomLevel?: number;\n\n    /**\n     * Determines the minimum camera height, in meters.\n     */\n    minCameraHeight?: number;\n\n    /**\n     * The maximum zoom level. The default is `14`.\n     */\n    maxZoomLevel?: number;\n\n    /**\n     * User-defined camera clipping planes distance evaluator.\n     * If not defined, [[TiltViewClipPlanesEvaluator]] will be used by [[MapView]].\n     *\n     * @default [[TiltViewClipPlanesEvaluator]]\n     */\n    clipPlanesEvaluator?: ClipPlanesEvaluator;\n\n    /**\n     * Set to true to extend the frustum culling. This improves the rejection of some tiles, which\n     * normal frustum culling cannot detect. You can disable this property to measure performance.\n     *\n     * @default true\n     */\n    extendedFrustumCulling?: boolean;\n\n    /**\n     * The maximum number of tiles rendered from one data source at a time.\n     *\n     * @default See [[MapViewDefaults.maxVisibleDataSourceTiles]].\n     */\n    maxVisibleDataSourceTiles?: number;\n\n    /**\n     * Size of a tile cache for one data source.\n     *\n     * @default See [[MapViewDefaults.tileCacheSize]].\n     */\n    tileCacheSize?: number;\n\n    /**\n     * Specify if the cache should be counted in tiles or in megabytes.\n     *\n     * @see [[MapViewDefaults.resourceComputationType]].\n     */\n    resourceComputationType?: ResourceComputationType;\n\n    /**\n     * Limits the number of reduced zoom levels (lower detail) to be searched for fallback tiles.\n     *\n     * When zooming in, newly elected tiles may have not yet loaded. [[MapView]] searches through\n     * the tile cache for tiles ready to be displayed in lower zoom levels. The tiles may be\n     * located shallower in the quadtree.\n     *\n     * To disable a cache search, set the value to `0`.\n     *\n     * @default [[MapViewDefaults.quadTreeSearchDistanceUp]]\n     */\n    quadTreeSearchDistanceUp?: number;\n\n    /**\n     * Limits the number of higher zoom levels (more detailed) to be searched for fallback tiles.\n     *\n     * When zooming out, newly elected tiles may have not yet loaded. [[MapView]] searches through\n     * the tile cache for tiles ready to be displayed in higher zoom levels. These tiles may be\n     * located deeper in the quadtree.\n     *\n     * To disable a cache search, set the value to `0`.\n     *\n     * @default [[MapViewDefaults.quadTreeSearchDistanceDown]]\n     */\n    quadTreeSearchDistanceDown?: number;\n\n    /**\n     * Set to `true` to measure performance statistics.\n     */\n    enableStatistics?: boolean;\n\n    /**\n     * Preserve the buffers until they are cleared manually or overwritten.\n     *\n     * Set to `true` in order to copy [[MapView]] canvas contents to an image or another canvas.\n     *\n     * @default `false`.\n     * @see https://threejs.org/docs/#api/renderers/WebGLRenderer.preserveDrawingBuffer\n     */\n    preserveDrawingBuffer?: boolean;\n\n    /**\n     * @deprecated Not needed anymore, roads can be picked by default.\n     */\n    enableRoadPicking?: boolean;\n\n    /**\n     * Set to `true` to allow picking of technique information associated with objects.\n     */\n    enablePickTechnique?: boolean;\n\n    /**\n     * An optional canvas element that renders 2D collision debug information.\n     */\n    collisionDebugCanvas?: HTMLCanvasElement;\n\n    /**\n     * Maximum timeout, in milliseconds, before a [[MOVEMENT_FINISHED_EVENT]] is sent after the\n     * latest frame with a camera movement. The default is 300ms.\n     */\n    movementThrottleTimeout?: number;\n\n    /**\n     * How to calculate the Field of View, if not specified, then\n     * [[DEFAULT_FOV_CALCULATION]] is used.\n     */\n    fovCalculation?: FovCalculation;\n\n    /*\n     * An array of ISO 639-1 language codes for data sources.\n     */\n    languages?: string[];\n\n    /**\n     * Sets the data sources to use specific country point of view (political view).\n     *\n     * This option may result in rendering different country borders then commonly accepted for\n     * some regions and it mainly regards to so called __disputed borders__. Although not all\n     * data sources or themes may support it.\n     *\n     * @note Country code should be coded in lower-case ISO 3166-1 alpha-2 standard, if this option\n     * is `undefined` the majority point of view will be used.\n     */\n    politicalView?: string;\n\n    /**\n     * Set fixed pixel ratio for rendering. Useful when rendering on high resolution displays with\n     * low performance GPUs that may be fill-rate limited.\n     * @default `window.devicePixelRatio`\n     */\n    pixelRatio?: number;\n\n    /**\n     * Set fixed pixel ratio for rendering when the camera is moving or an animation is running.\n     * Useful when rendering on high resolution displays with low performance GPUs that may be\n     * fill-rate limited.\n     *\n     * If a value is specified, a low resolution render pass is used to render the scene into a\n     * low resolution render target, before it is copied to the screen.\n     *\n     * A value of `undefined` disables the low res render pass. Values between 0.5 and\n     * `window.devicePixelRatio` can be tried to give  good results. The value should not be larger\n     * than `window.devicePixelRatio`.\n     *\n     * @note Since no anti-aliasing is applied during dynamic rendering with `dynamicPixelRatio`\n     * defined, visual artifacts may occur, especially with thin lines..\n     *\n     * @note The resolution of icons and text labels is not affected.\n     *\n     * @default `undefined`\n     */\n    dynamicPixelRatio?: number;\n\n    /**\n     * Set maximum FPS (Frames Per Second). If VSync in enabled, the specified number may not be\n     * reached, but instead the next smaller number than `maxFps` that is equal to the refresh rate\n     * divided by an integer number.\n     *\n     * E.g.: If the monitors refresh rate is set to 60hz, and if `maxFps` is set to a value of `40`\n     * (60hz/1.5), the actual used FPS may be 30 (60hz/2). For displays that have a refresh rate of\n     * 60hz, good values for `maxFps` are 30, 20, 15, 12, 10, 6, 3 and 1. A value of `0` is ignored.\n     */\n    maxFps?: number;\n\n    /**\n     * Enable map repeat for planar projections.\n     * If `true`, map will be repeated in longitudinal direction continuously.\n     * If `false`, map will end on lon -180 & 180 deg.\n     *\n     * @default `true`\n     */\n    tileWrappingEnabled?: boolean;\n\n    /**\n     * Set tiling scheme for [[BackgroundDataSource]]\n     */\n    backgroundTilingScheme?: TilingScheme;\n\n    /**\n     * Should be the [[PolarTileDataSource]] used on spherical projection.\n     * Default is `true`.\n     */\n    enablePolarDataSource?: boolean;\n\n    /**\n     * The name of the [[StyleSet]] used by [[PolarTileDataSource]] to evaluate for the decoding.\n     * Default is `\"polar\"`.\n     */\n    polarStyleSetName?: string;\n\n    /**\n     * Storage level offset of regular tiles from reference datasource to align\n     * [[PolarTileDataSource]] tiles to.\n     * Default is `-1`.\n     */\n    polarGeometryLevelOffset?: number;\n\n    /**\n     * Hint for the WebGL implementation on which power mode to prefer.\n     */\n    powerPreference?: MapViewPowerPreference;\n\n    /**\n     * Set to `true` to allow rendering scene synchronously.\n     *\n     * By calling `renderSync()` scene draws immediately, opposite to default case when\n     * `update` method requests redraw and waits for the next animation frame.\n     *\n     * You need to set up your own render loop controller.\n     * Event `MapViewEventNames.Update` fired when [[MapView]] requests for an redraw.\n     * E.g.: When tiles loaded asynchronously and ready for rendering.\n     *\n     * @note Internal `maxFps` will be overridden and may not work properly as `renderSync`\n     * intended to be called from external render loop.\n     *\n     * @default false.\n     */\n    synchronousRendering?: boolean;\n\n    /**\n     * Set true to enable rendering mixed levels of detail (increases rendering performance).\n     * If not set will enable mixed levels of detail for spherical projection\n     * and disable for other projections.\n     *\n     * @default undefined\n     */\n    enableMixedLod?: boolean;\n\n    /**\n     * Enable shadows in the map. Shadows will only be casted on features that use the \"standard\"\n     * or \"extruded-polygon\" technique in the map theme.\n     * @default false\n     */\n    enableShadows?: boolean;\n}\n\n/**\n * Default settings used by [[MapView]] collected in one place.\n * @internal\n */\nconst MapViewDefaults = {\n    projection: mercatorProjection,\n    addBackgroundDatasource: true,\n\n    maxVisibleDataSourceTiles: 100,\n    extendedFrustumCulling: true,\n\n    tileCacheSize: 200,\n    resourceComputationType: ResourceComputationType.EstimationInMb,\n    quadTreeSearchDistanceUp: 3,\n    quadTreeSearchDistanceDown: 2,\n\n    pixelRatio:\n        typeof window !== \"undefined\" && window.devicePixelRatio !== undefined\n            ? window.devicePixelRatio\n            : 1.0,\n    target: new GeoCoordinates(25, 0),\n    zoomLevel: 5,\n    tilt: 0,\n    heading: 0,\n    theme: {}\n};\n\n/**\n * Parameters for [[MapView.lookAt]].\n */\nexport interface LookAtParams {\n    /**\n     * Target/look at point of the MapView.\n     *\n     * @note If the given point is not on the ground (altitude != 0) [[MapView]] will do a\n     * raycasting internally to find a target on the ground.\n     *\n     * As a consequence [[MapView.target]] and [[MapView.zoomLevel]] will not match the values\n     * that were passed into the [[MapView.lookAt]] method.\n     * @default `new GeoCoordinates(25, 0)` in [[MapView.constructor]] context.\n     * @default [[MapView.target]] in [[MapView.lookAt]] context.\n     */\n    target: GeoCoordLike;\n\n    /**\n     * Fit MapView to these boundaries.\n     *\n     * If specified, `zoomLevel` and `distance` parameters are ignored and `lookAt` calculates best\n     * `zoomLevel` to fit given bounds.\n     *\n     * * if `bounds` is [[GeoBox]], then `lookAt` use [[LookAtParams.target]] or `bounds.target` and\n     *   ensure whole box is visible\n     *\n     * * if `bounds` is [[GeoBoxExtentLike]], then `lookAt` will use [[LookAtParams.target]] or\n     *   current [[MapView.target]] and ensure whole extents are visible\n     *\n     * * if `bounds` is [[GeoCoordLike]][], then `lookAt` will use [[LookAtParams.target]] or\n     *   calculated `target` as center of world box covering given points and ensure all points are\n     *   visible\n     *\n     * Note in sphere projection some points are not visible if you specify bounds that span more\n     * than 180 degreess in any direction.\n     *\n     * @see [[MapView.lookAt]] for defails how `bounds` interact with `target` parameter\n     */\n    bounds: GeoBox | GeoBoxExtentLike | GeoCoordLike[];\n\n    /**\n     * Camera distance to the target point in world units.\n     * @default zoomLevel defaults will be used if not set.\n     */\n    distance: number;\n\n    /**\n     * Zoomlevel of the MapView.\n     * @note Takes precedence over distance.\n     * @default 5 in [[MapView.constructor]] context.\n     * @default [[MapView.zoomLevel]] in [[MapView.lookAt]] context.\n     */\n    zoomLevel: number;\n\n    /**\n     * Tilt angle in degrees. 0 is top down view.\n     * @default 0 in [[MapView.constructor]] context.\n     * @default [[MapView.tilt]] in [[MapView.lookAt]] context.\n     * @note Maximum supported tilt is 89°\n     */\n    tilt: number;\n\n    /**\n     * Heading angle in degrees and clockwise. 0 is north-up.\n     * @default 0 in [[MapView.constructor]] context.\n     * @default [[MapView.heading]] in [[MapView.lookAt]] context.\n     */\n    heading: number;\n}\n\n/**\n * The core class of the library to call in order to create a map visualization. It needs to be\n * linked to datasources.\n */\nexport class MapView extends THREE.EventDispatcher {\n    /**\n     * Maximum FPS (Frames Per Second). If VSync in enabled, the specified number may not be\n     * reached, but instead the next smaller number than `maxFps` that is equal to the refresh rate\n     * divided by an integer number.\n     *\n     * E.g.: If the monitors refresh rate is set to 60hz, and if `maxFps` is set to a value of `40`\n     * (60hz/1.5), the actual used FPS may be 30 (60hz/2). For displays that have a refresh rate of\n     * 60hz, good values for `maxFps` are 30, 20, 15, 12, 10, 6, 3 and 1. A value of `0` is ignored.\n     */\n    maxFps: number;\n\n    /**\n     * The instance of [[MapRenderingManager]] managing the rendering of the map. It is a public\n     * property to allow access and modification of some parameters of the rendering process at\n     * runtime.\n     */\n    readonly mapRenderingManager: IMapRenderingManager;\n\n    private m_renderLabels: boolean = true;\n\n    private m_movementFinishedUpdateTimerId?: any;\n    private m_postEffects?: PostEffects;\n\n    private m_skyBackground?: SkyBackground;\n    private m_createdLights?: THREE.Light[];\n\n    private readonly m_screenProjector: ScreenProjector;\n    private readonly m_screenCollisions:\n        | ScreenCollisions\n        | ScreenCollisionsDebug = new ScreenCollisions();\n\n    private m_visibleTiles: VisibleTileSet;\n\n    private m_elevationSource?: DataSource;\n    private m_elevationRangeSource?: ElevationRangeSource;\n    private m_elevationProvider?: ElevationProvider;\n    private m_visibleTileSetLock: boolean = false;\n    private m_tileGeometryManager: TileGeometryManager;\n\n    private m_tileWrappingEnabled: boolean = true;\n\n    private m_zoomLevel: number = DEFAULT_MIN_ZOOM_LEVEL;\n    private m_minZoomLevel: number = DEFAULT_MIN_ZOOM_LEVEL;\n    private m_maxZoomLevel: number = DEFAULT_MAX_ZOOM_LEVEL;\n    private m_minCameraHeight: number = DEFAULT_MIN_CAMERA_HEIGHT;\n\n    private readonly m_screenCamera = new THREE.OrthographicCamera(-1, 1, 1, -1);\n\n    private readonly m_camera: THREE.PerspectiveCamera;\n\n    /**\n     * Relative to eye camera.\n     *\n     * This camera is internal camera used to improve precision\n     * when rendering geometries.\n     */\n    private readonly m_rteCamera = new THREE.PerspectiveCamera();\n\n    private m_yaw = 0;\n    private m_pitch = 0;\n    private m_roll = 0;\n    private m_focalLength = 0;\n    private m_targetDistance = 0;\n    private m_targetGeoPos = GeoCoordinates.fromObject(MapViewDefaults.target!);\n    // Focus point world coords may be calculated after setting projection, use dummy value here.\n    private m_targetWorldPos = new THREE.Vector3();\n    private readonly m_viewRanges: ViewRanges = {\n        near: DEFAULT_CAM_NEAR_PLANE,\n        far: DEFAULT_CAM_FAR_PLANE,\n        minimum: DEFAULT_CAM_NEAR_PLANE,\n        maximum: DEFAULT_CAM_FAR_PLANE\n    };\n    private m_pointOfView?: THREE.PerspectiveCamera;\n\n    private m_pixelToWorld?: number;\n    private m_pixelRatio?: number;\n\n    private readonly m_scene: THREE.Scene = new THREE.Scene();\n    private readonly m_fog: MapViewFog = new MapViewFog(this.m_scene);\n    private readonly m_mapTilesRoot = new THREE.Object3D();\n    private readonly m_mapAnchors = new THREE.Object3D();\n    private readonly m_worldAnchors = new THREE.Object3D();\n\n    private m_animationCount: number = 0;\n    private m_animationFrameHandle: number | undefined;\n    private m_drawing: boolean = false;\n    private m_updatePending: boolean = false;\n    private m_renderer: THREE.WebGLRenderer;\n    private m_frameNumber = 0;\n\n    private m_textElementsRenderer: TextElementsRenderer;\n\n    private m_forceCameraAspect: number | undefined = undefined;\n\n    //\n    // sources\n    //\n    private readonly m_tileDataSources: DataSource[] = [];\n    private readonly m_connectedDataSources = new Set<string>();\n    private readonly m_failedDataSources = new Set<string>();\n    private m_backgroundDataSource?: BackgroundDataSource;\n    private m_polarDataSource?: PolarTileDataSource;\n    private m_enablePolarDataSource: boolean = true;\n\n    // gestures\n    private readonly m_raycaster: PickingRaycaster;\n    private readonly m_plane = new THREE.Plane(new THREE.Vector3(0, 0, 1));\n    private readonly m_sphere = new THREE.Sphere(undefined, EarthConstants.EQUATORIAL_RADIUS);\n\n    private readonly m_options: MapViewOptions;\n    private readonly m_visibleTileSetOptions: VisibleTileSetOptions;\n\n    private m_theme: Theme = {};\n    private m_uriResolver?: UriResolver;\n    private m_themeIsLoading: boolean = false;\n\n    private m_previousFrameTimeStamp?: number;\n    private m_firstFrameRendered = false;\n    private m_firstFrameComplete = false;\n    private m_initialTextPlacementDone = false;\n\n    private handleRequestAnimationFrame: (frameStartTime: number) => void;\n\n    private m_pickHandler: PickHandler;\n\n    private m_imageCache: MapViewImageCache = new MapViewImageCache(this);\n\n    private m_poiManager: PoiManager = new PoiManager(this);\n\n    private m_poiTableManager: PoiTableManager = new PoiTableManager(this);\n\n    private m_collisionDebugCanvas: HTMLCanvasElement | undefined;\n\n    // Detection of camera movement and scene change:\n    private m_movementDetector: CameraMovementDetector;\n\n    private m_thisFrameTilesChanged: boolean | undefined;\n    private m_lastTileIds: string = \"\";\n    private m_languages: string[] | undefined;\n    private m_politicalView: string | undefined;\n    private m_copyrightInfo: CopyrightInfo[] = [];\n    private m_animatedExtrusionHandler: AnimatedExtrusionHandler;\n\n    private m_env: MapEnv = new MapEnv({});\n\n    private m_enableMixedLod: boolean | undefined;\n\n    /**\n     * Constructs a new `MapView` with the given options or canvas element.\n     *\n     * @param options The `MapView` options or the HTML canvas element used to display the map.\n     */\n    constructor(options: MapViewOptions) {\n        super();\n\n        // make a copy to avoid unwanted changes to the original options.\n        this.m_options = { ...options };\n\n        this.m_uriResolver = this.m_options.uriResolver;\n\n        if (this.m_options.minZoomLevel !== undefined) {\n            this.m_minZoomLevel = this.m_options.minZoomLevel;\n        }\n\n        if (this.m_options.maxZoomLevel !== undefined) {\n            this.m_maxZoomLevel = this.m_options.maxZoomLevel;\n        }\n\n        if (this.m_options.minCameraHeight !== undefined) {\n            this.m_minCameraHeight = this.m_options.minCameraHeight;\n        }\n\n        if (this.m_options.decoderUrl !== undefined) {\n            ConcurrentDecoderFacade.defaultScriptUrl = this.m_uriResolver\n                ? this.m_uriResolver.resolveUri(this.m_options.decoderUrl)\n                : this.m_options.decoderUrl;\n        }\n\n        if (this.m_options.decoderCount !== undefined) {\n            ConcurrentDecoderFacade.defaultWorkerCount = this.m_options.decoderCount;\n        }\n\n        this.m_visibleTileSetOptions = {\n            ...MapViewDefaults,\n            clipPlanesEvaluator:\n                options.clipPlanesEvaluator !== undefined\n                    ? options.clipPlanesEvaluator\n                    : createDefaultClipPlanesEvaluator()\n        };\n\n        if (options.projection !== undefined) {\n            this.m_visibleTileSetOptions.projection = options.projection;\n        }\n\n        if (options.extendedFrustumCulling !== undefined) {\n            this.m_visibleTileSetOptions.extendedFrustumCulling = options.extendedFrustumCulling;\n        }\n\n        if (options.maxVisibleDataSourceTiles !== undefined) {\n            this.m_visibleTileSetOptions.maxVisibleDataSourceTiles =\n                options.maxVisibleDataSourceTiles;\n        }\n\n        if (options.tileCacheSize !== undefined) {\n            this.m_visibleTileSetOptions.tileCacheSize = options.tileCacheSize;\n        }\n\n        if (options.resourceComputationType !== undefined) {\n            this.m_visibleTileSetOptions.resourceComputationType = options.resourceComputationType;\n        }\n\n        if (options.quadTreeSearchDistanceUp !== undefined) {\n            this.m_visibleTileSetOptions.quadTreeSearchDistanceUp =\n                options.quadTreeSearchDistanceUp;\n        }\n\n        if (options.quadTreeSearchDistanceDown !== undefined) {\n            this.m_visibleTileSetOptions.quadTreeSearchDistanceDown =\n                options.quadTreeSearchDistanceDown;\n        }\n\n        if (options.enablePolarDataSource !== undefined) {\n            this.m_enablePolarDataSource = options.enablePolarDataSource;\n        }\n\n        this.m_pixelRatio = options.pixelRatio;\n        this.maxFps = options.maxFps === undefined ? 0 : options.maxFps;\n\n        this.m_options.enableStatistics = this.m_options.enableStatistics === true;\n\n        this.m_languages = this.m_options.languages;\n        this.m_politicalView = this.m_options.politicalView;\n\n        if (\n            !isProduction &&\n            this.m_options.collisionDebugCanvas !== undefined &&\n            this.m_options.collisionDebugCanvas !== null\n        ) {\n            this.m_collisionDebugCanvas = this.m_options.collisionDebugCanvas;\n            this.m_screenCollisions = new ScreenCollisionsDebug(this.m_collisionDebugCanvas);\n        }\n\n        this.handleRequestAnimationFrame = this.renderLoop.bind(this);\n        this.m_pickHandler = new PickHandler(\n            this,\n            this.m_rteCamera,\n            this.m_options.enablePickTechnique === true\n        );\n\n        if (this.m_options.tileWrappingEnabled !== undefined) {\n            this.m_tileWrappingEnabled = this.m_options.tileWrappingEnabled;\n        }\n\n        // Initialization of the stats\n        this.setupStats(this.m_options.enableStatistics);\n\n        this.canvas.addEventListener(\"webglcontextlost\", this.onWebGLContextLost);\n        this.canvas.addEventListener(\"webglcontextrestored\", this.onWebGLContextRestored);\n\n        // Initialization of the renderer\n        this.m_renderer = new THREE.WebGLRenderer({\n            canvas: this.canvas,\n            context: this.m_options.context,\n            antialias: this.nativeWebglAntialiasEnabled,\n            alpha: this.m_options.alpha,\n            preserveDrawingBuffer: this.m_options.preserveDrawingBuffer === true,\n            powerPreference:\n                this.m_options.powerPreference === undefined\n                    ? MapViewPowerPreference.Default\n                    : this.m_options.powerPreference\n        });\n        this.m_renderer.autoClear = false;\n        this.m_renderer.debug.checkShaderErrors = !isProduction;\n\n        // This is detailed at https://threejs.org/docs/#api/renderers/WebGLRenderer.info\n        // When using several WebGLRenderer#render calls per frame, it is the only way to get\n        // correct rendering data from ThreeJS.\n        this.m_renderer.info.autoReset = false;\n\n        this.setupRenderer();\n\n        this.m_options.fovCalculation =\n            this.m_options.fovCalculation === undefined\n                ? DEFAULT_FOV_CALCULATION\n                : this.m_options.fovCalculation;\n        this.m_options.fovCalculation.fov = THREE.MathUtils.clamp(\n            this.m_options.fovCalculation!.fov,\n            MIN_FIELD_OF_VIEW,\n            MAX_FIELD_OF_VIEW\n        );\n        // Initialization of mCamera and mVisibleTiles\n        const { width, height } = this.getCanvasClientSize();\n        const aspect = width / height;\n        this.m_camera = new THREE.PerspectiveCamera(\n            this.m_options.fovCalculation.fov,\n            aspect,\n            DEFAULT_CAM_NEAR_PLANE,\n            DEFAULT_CAM_FAR_PLANE\n        );\n        this.m_camera.up.set(0, 0, 1);\n        this.projection.projectPoint(this.m_targetGeoPos, this.m_targetWorldPos);\n        this.m_scene.add(this.m_camera); // ensure the camera is added to the scene.\n        this.m_screenProjector = new ScreenProjector(this.m_camera);\n        // setup camera with initial position\n\n        this.setupCamera();\n\n        this.m_raycaster = new PickingRaycaster(width, height);\n\n        this.m_movementDetector = new CameraMovementDetector(\n            this.m_options.movementThrottleTimeout,\n            () => this.movementStarted(),\n            () => this.movementFinished()\n        );\n\n        const mapPassAntialiasSettings = this.m_options.customAntialiasSettings;\n        this.mapRenderingManager = new MapRenderingManager(\n            width,\n            height,\n            this.m_options.dynamicPixelRatio,\n            mapPassAntialiasSettings\n        );\n\n        this.m_tileGeometryManager = new TileGeometryManager(this);\n\n        if (options.enableMixedLod !== undefined) {\n            this.m_enableMixedLod = options.enableMixedLod;\n        }\n        this.m_visibleTiles = this.createVisibleTileSet();\n\n        this.m_animatedExtrusionHandler = new AnimatedExtrusionHandler(this);\n\n        if (this.m_options.addBackgroundDatasource !== false) {\n            this.m_backgroundDataSource = new BackgroundDataSource();\n            this.addDataSource(this.m_backgroundDataSource);\n        }\n\n        if (this.m_enablePolarDataSource) {\n            const styleSetName =\n                options.polarStyleSetName !== undefined\n                    ? options.polarStyleSetName\n                    : DEFAULT_POLAR_STYLE_SET_NAME;\n\n            this.m_polarDataSource = new PolarTileDataSource({\n                styleSetName,\n                geometryLevelOffset: options.polarGeometryLevelOffset\n            });\n\n            this.updatePolarDataSource();\n        }\n\n        if (\n            this.m_options.backgroundTilingScheme !== undefined &&\n            this.m_backgroundDataSource !== undefined\n        ) {\n            this.m_backgroundDataSource.setTilingScheme(this.m_options.backgroundTilingScheme);\n        }\n\n        this.initTheme();\n\n        this.m_textElementsRenderer = this.createTextRenderer();\n\n        this.update();\n    }\n\n    /**\n     * @returns The lights configured by the theme, this is just a convenience method, because the\n     * lights can still be accessed by traversing the children of the [[scene]].\n     */\n    get lights(): THREE.Light[] {\n        return this.m_createdLights ?? [];\n    }\n\n    /**\n     * @returns Whether label rendering is enabled.\n     */\n    get renderLabels() {\n        return this.m_renderLabels;\n    }\n\n    /**\n     * Enables or disables rendering of labels.\n     * @param value `true` to enable labels `false` to disable them.\n     */\n    set renderLabels(value: boolean) {\n        this.m_renderLabels = value;\n    }\n\n    /**\n     * @hidden\n     * The [[TextElementsRenderer]] select the visible [[TextElement]]s and renders them.\n     */\n    get textElementsRenderer(): TextElementsRenderer {\n        return this.m_textElementsRenderer;\n    }\n\n    /**\n     * @hidden\n     * The [[CameraMovementDetector]] detects camera movements. Made available for performance\n     * measurements.\n     */\n    get cameraMovementDetector(): CameraMovementDetector {\n        return this.m_movementDetector;\n    }\n\n    /**\n     * The [[AnimatedExtrusionHandler]] controls animated extrusion effect\n     * of the extruded objects in the [[Tile]]\n     */\n    get animatedExtrusionHandler(): AnimatedExtrusionHandler {\n        return this.m_animatedExtrusionHandler;\n    }\n\n    /**\n     * The [[TileGeometryManager]] manages geometry during loading and handles hiding geometry of\n     * specified [[GeometryKind]]s.\n     */\n    get tileGeometryManager(): TileGeometryManager | undefined {\n        return this.m_tileGeometryManager;\n    }\n\n    get enableMixedLod(): boolean | undefined {\n        return this.m_enableMixedLod;\n    }\n\n    set enableMixedLod(enableMixedLod: boolean | undefined) {\n        // Skip unnecessary update\n        if (this.m_enableMixedLod === enableMixedLod) {\n            return;\n        }\n\n        this.m_enableMixedLod = enableMixedLod;\n        this.m_visibleTiles = this.createVisibleTileSet();\n        this.resetTextRenderer();\n        this.update();\n    }\n\n    /**\n     * Disposes this `MapView`.\n     *\n     * This function cleans the resources that are managed manually including those that exist in\n     * shared caches.\n     *\n     * Note: This function does not try to clean objects that can be disposed off easily by\n     * TypeScript's garbage collecting mechanism. Consequently, if you need to perform a full\n     * cleanup, you must ensure that all references to this `MapView` are removed.\n     */\n    dispose() {\n        if (this.m_movementFinishedUpdateTimerId) {\n            clearTimeout(this.m_movementFinishedUpdateTimerId);\n            this.m_movementFinishedUpdateTimerId = undefined;\n        }\n\n        if (this.m_animationFrameHandle !== undefined) {\n            cancelAnimationFrame(this.m_animationFrameHandle);\n            this.m_animationFrameHandle = undefined;\n        }\n\n        this.canvas.removeEventListener(\"webglcontextlost\", this.onWebGLContextLost);\n        this.canvas.removeEventListener(\"webglcontextrestored\", this.onWebGLContextRestored);\n\n        for (const dataSource of this.m_tileDataSources) {\n            dataSource.dispose();\n        }\n        this.m_visibleTiles.clearTileCache();\n        this.m_textElementsRenderer.clearRenderStates();\n        this.m_renderer.dispose();\n        this.m_imageCache.clear();\n\n        this.m_movementDetector.dispose();\n    }\n\n    /**\n     * The way the cache usage is computed, either based on size in MB (mega bytes) or in number of\n     * tiles.\n     */\n    get resourceComputationType(): ResourceComputationType {\n        return this.m_visibleTiles.resourceComputationType;\n    }\n\n    set resourceComputationType(value: ResourceComputationType) {\n        this.m_visibleTiles.resourceComputationType = value;\n    }\n\n    /**\n     * Returns the cache size.\n     */\n    getCacheSize(): number {\n        return this.m_visibleTiles.getDataSourceCacheSize();\n    }\n\n    /**\n     * Sets the cache size in number of tiles.\n     *\n     * @param size The cache size in tiles.\n     * @param numVisibleTiles The number of tiles visible, which is size/2 by default.\n     */\n    setCacheSize(size: number, numVisibleTiles?: number): void {\n        this.m_visibleTiles.setDataSourceCacheSize(size);\n        numVisibleTiles = numVisibleTiles !== undefined ? numVisibleTiles : size / 2;\n        this.m_visibleTiles.setNumberOfVisibleTiles(Math.floor(numVisibleTiles));\n        this.updateImages();\n        this.updateLighting();\n\n        this.m_textElementsRenderer.invalidateCache();\n\n        this.updateSkyBackground();\n        this.update();\n    }\n\n    /**\n     * Specfies whether extended frustum culling is enabled or disabled.\n     */\n    get extendedFrustumCulling(): boolean {\n        return this.m_options.extendedFrustumCulling !== undefined\n            ? this.m_visibleTileSetOptions.extendedFrustumCulling\n            : true;\n    }\n\n    /**\n     * Enable of disable extended frustum culling.\n     */\n    set extendedFrustumCulling(value: boolean) {\n        this.m_visibleTileSetOptions.extendedFrustumCulling = value;\n    }\n\n    /**\n     * Returns the status of frustum culling after each update.\n     */\n    get lockVisibleTileSet(): boolean {\n        return this.m_visibleTileSetLock;\n    }\n\n    /**\n     * Enable of disable frustum culling after each update.\n     */\n    set lockVisibleTileSet(value: boolean) {\n        this.m_visibleTileSetLock = value;\n    }\n\n    /**\n     * Gets the optional camera used to render the scene.\n     */\n    get pointOfView(): THREE.PerspectiveCamera | undefined {\n        return this.m_pointOfView;\n    }\n\n    /**\n     * Sets the optional camera used to render the scene.\n     */\n    set pointOfView(pointOfView: THREE.PerspectiveCamera | undefined) {\n        this.m_pointOfView = pointOfView;\n        this.update();\n    }\n\n    /**\n     * Loads a post effects definition file.\n     *\n     * @param postEffectsFile File URL describing the post effects.\n     */\n    loadPostEffects(postEffectsFile: string) {\n        fetch(postEffectsFile)\n            .then(response => response.json())\n            .then((postEffects: PostEffects) => {\n                this.m_postEffects = postEffects;\n                this.setPostEffects();\n            });\n    }\n\n    /**\n     * The abstraction of the [[MapRenderingManager]] API for post effects.\n     */\n    get postEffects(): PostEffects | undefined {\n        return this.m_postEffects;\n    }\n\n    set postEffects(postEffects: PostEffects | undefined) {\n        this.m_postEffects = postEffects;\n        this.setPostEffects();\n    }\n\n    /**\n     * Gets the current `Theme` used by this `MapView` to style map elements.\n     */\n    get theme(): Theme {\n        return this.m_theme;\n    }\n\n    /**\n     * Changes the `Theme` used by this `MapView` to style map elements.\n     */\n    set theme(theme: Theme) {\n        if (!ThemeLoader.isThemeLoaded(theme)) {\n            this.m_themeIsLoading = true;\n            // If theme is not yet loaded, let's set theme asynchronously\n            ThemeLoader.load(theme, { uriResolver: this.m_uriResolver })\n                .then(loadedTheme => {\n                    this.m_themeIsLoading = false;\n                    this.theme = loadedTheme;\n                })\n                .catch(error => {\n                    this.m_themeIsLoading = false;\n                    logger.error(`failed to set theme: ${error}`, error);\n                });\n            return;\n        }\n\n        // Fog and sky.\n        this.m_theme.fog = theme.fog;\n        this.m_theme.sky = theme.sky;\n        this.updateSkyBackground();\n        this.m_fog.reset(this.m_theme);\n\n        this.m_theme.lights = theme.lights;\n        this.updateLighting();\n\n        // Clear color.\n        this.m_theme.clearColor = theme.clearColor;\n        this.m_theme.clearAlpha = theme.clearAlpha;\n        this.renderer.setClearColor(new THREE.Color(theme.clearColor), theme.clearAlpha);\n        // Images.\n        this.m_theme.images = theme.images;\n        this.m_theme.imageTextures = theme.imageTextures;\n        this.updateImages();\n\n        // POI tables.\n        this.m_theme.poiTables = theme.poiTables;\n        this.loadPoiTables();\n\n        // Text.\n        this.m_theme.textStyles = theme.textStyles;\n        this.m_theme.defaultTextStyle = theme.defaultTextStyle;\n        this.m_theme.fontCatalogs = theme.fontCatalogs;\n\n        this.resetTextRenderer();\n\n        if (Array.isArray(theme.priorities)) {\n            this.m_theme.priorities = theme.priorities;\n        }\n\n        if (Array.isArray(theme.labelPriorities)) {\n            this.m_theme.labelPriorities = theme.labelPriorities;\n        }\n\n        if (this.m_theme.styles === undefined) {\n            this.m_theme.styles = {};\n        }\n        if (this.m_backgroundDataSource) {\n            this.m_backgroundDataSource.setTheme(this.m_theme);\n        }\n        this.m_theme.styles = theme.styles || {};\n        this.m_theme.definitions = theme.definitions;\n\n        for (const dataSource of this.m_tileDataSources) {\n            dataSource.setTheme(this.m_theme);\n        }\n        THEME_LOADED_EVENT.time = Date.now();\n        this.dispatchEvent(THEME_LOADED_EVENT);\n        this.update();\n    }\n\n    /**\n     * [[UriResolver]] used to resolve application/deployment specific `URI`s into actual `URLs`\n     * that can be loaded with `fetch`.\n     */\n    get uriResolver(): UriResolver | undefined {\n        return this.m_uriResolver;\n    }\n\n    /**\n     * Gets the value of the forced custom camera aspect.\n     * Every time a frame is rendered, `MapView` resets the camera aspect.\n     *\n     * You can disable this behavior by setting the value to `undefined`.\n     */\n    get forceCameraAspect(): number | undefined {\n        return this.m_forceCameraAspect;\n    }\n\n    /**\n     * Sets the custom forced camera aspect ratio to use while rendering.\n     */\n    set forceCameraAspect(aspect: number | undefined) {\n        this.m_forceCameraAspect = aspect;\n    }\n\n    /**\n     * Lists the ISO 639-1 language codes for DataSources to use.\n     */\n    get languages(): string[] | undefined {\n        return this.m_languages;\n    }\n\n    /**\n     * Sets the list of ISO 639-1 language codes for DataSources to use.\n     */\n    set languages(languages: string[] | undefined) {\n        this.m_languages = languages;\n        this.m_tileDataSources.forEach((dataSource: DataSource) => {\n            dataSource.setLanguages(this.m_languages);\n        });\n        this.update();\n    }\n\n    /**\n     * Get currently presented political point of view - the country code.\n     *\n     * @note Country code is stored in lower-case ISO 3166-1 alpha-2 standard.\n     * @return Country code or undefined if default\n     * (majorly accepted) point of view is used.\n     */\n    get politicalView(): string | undefined {\n        return this.m_politicalView;\n    }\n\n    /**\n     * Set the political view (country code) to be used when rendering disputed features (borders).\n     *\n     * @note Country code should be encoded in lower-case ISO 3166-1 alpha-2 standard.\n     * @param pov The code of the country which point of view should be presented,\n     * if `undefined` or empty string is set then \"defacto\" or most widely accepted point of view\n     * will be presented.\n     */\n    set politicalView(pov: string | undefined) {\n        if (this.m_politicalView === pov) {\n            return;\n        }\n        this.m_politicalView = pov;\n        this.m_tileDataSources.forEach((dataSource: DataSource) => {\n            dataSource.setPoliticalView(pov);\n        });\n    }\n\n    get copyrightInfo(): CopyrightInfo[] {\n        return this.m_copyrightInfo;\n    }\n\n    /**\n     * @hidden\n     * Disable all fading animations (for debugging and performance measurement). Defaults to\n     * `false`.\n     */\n    set disableFading(disable: boolean) {\n        this.m_textElementsRenderer.disableFading = disable;\n    }\n\n    get disableFading(): boolean {\n        return this.m_textElementsRenderer.disableFading;\n    }\n\n    /**\n     * @hidden\n     * Return current frame number.\n     */\n    get frameNumber(): number {\n        return this.m_frameNumber;\n    }\n\n    /**\n     * @hidden\n     * Reset the frame number to 0.\n     */\n    resetFrameNumber() {\n        this.m_frameNumber = 0;\n        this.m_previousFrameTimeStamp = undefined;\n    }\n\n    /**\n     * Adds an event listener. There are various events that are sent before or after a new frame\n     * is rendered.\n     *\n     * @see [[MapViewEventNames]].\n     *\n     * @example\n     * ```TypeScript\n     * let frameCount = 0;\n     * mapView.addEventListener(MapViewEventNames.Render, () => {\n     *     ++frameCount;\n     * });\n     * ```\n     *\n     * @param type One of the [[MapViewEventNames]] strings.\n     * @param listener The callback invoked when the `MapView` needs to render a new frame.\n     */\n    addEventListener(type: MapViewEventNames, listener: (event: RenderEvent) => void): void;\n\n    addEventListener(type: string, listener: any): void {\n        super.addEventListener(type, listener);\n    }\n\n    /**\n     * Removes an event listener. There are various events that are sent before or after a new frame\n     * is rendered.\n     *\n     * @see [[MapViewEventNames]].\n     *\n     * @example\n     * ```TypeScript\n     * mapView.removeEventListener(MapViewEventNames.Render, listener);\n     * ```\n     *\n     * @param type One of the [[MapViewEventNames]] strings.\n     * @param listener The callback invoked when the `MapView` needs to render a new frame.\n     */\n    removeEventListener(type: MapViewEventNames, listener: (event: RenderEvent) => void): void;\n\n    removeEventListener(type: string, listener: any): void {\n        super.removeEventListener(type, listener);\n    }\n\n    /**\n     * The HTML canvas element used by this `MapView`.\n     */\n    get canvas(): HTMLCanvasElement {\n        return this.m_options.canvas;\n    }\n\n    /**\n     * The HTML canvas element used by this `MapView`.\n     */\n    get collisionDebugCanvas(): HTMLCanvasElement | undefined {\n        return this.m_collisionDebugCanvas;\n    }\n\n    /**\n     * The THREE.js scene used by this `MapView`.\n     */\n    get scene(): THREE.Scene {\n        return this.m_scene;\n    }\n\n    /**\n     * The THREE.js camera used by this `MapView` to render the main scene.\n     * @note When modifying the camera all derived properties like:\n     * - [[MapView.target]]\n     * - [[MapView.zoomLevel]]\n     * - [[MapView.tilt]]\n     * - [[MapView.heading]]\n     * could change.\n     * These properties are cached internaly and will only be updated in the next animation frame.\n     * FIXME: Unfortunatley THREE.js is not dispatching any events when camera properties change\n     * so we should have an API for enforcing update of cached values.\n     */\n    get camera(): THREE.PerspectiveCamera {\n        return this.m_camera;\n    }\n\n    /**\n     * The THREE.js `WebGLRenderer` used by this scene.\n     */\n    get renderer(): THREE.WebGLRenderer {\n        return this.m_renderer;\n    }\n\n    /**\n     * The color used to clear the view.\n     */\n    get clearColor() {\n        const rendererClearColor = this.m_renderer.getClearColor();\n        return rendererClearColor !== undefined ? rendererClearColor.getHex() : 0;\n    }\n\n    /**\n     * The color used to clear the view.\n     */\n    set clearColor(color: number) {\n        this.m_renderer.setClearColor(color);\n    }\n\n    /**\n     * The alpha used to clear the view.\n     */\n    get clearAlpha() {\n        const rendererClearAlpha = this.m_renderer.getClearAlpha();\n        return rendererClearAlpha !== undefined ? rendererClearAlpha : 0;\n    }\n\n    /**\n     * The alpha used to clear the view.\n     */\n    set clearAlpha(alpha: number) {\n        this.m_renderer.setClearAlpha(alpha);\n    }\n\n    /**\n     * The projection used to project geo coordinates to world coordinates.\n     */\n    get projection(): Projection {\n        return this.m_visibleTileSetOptions.projection;\n    }\n\n    /**\n     * Changes the projection at run time.\n     *\n     * @param projection The [[Projection]] instance to use.\n     */\n    set projection(projection: Projection) {\n        // Remember tilt and heading before setting the projection.\n        const tilt = this.tilt;\n        const heading = this.heading;\n\n        this.m_visibleTileSetOptions.projection = projection;\n        this.updatePolarDataSource();\n        this.clearTileCache();\n        this.textElementsRenderer.clearRenderStates();\n        this.m_visibleTiles = this.createVisibleTileSet();\n\n        this.lookAtImpl({ tilt, heading });\n    }\n\n    /**\n     * Get camera clipping planes evaluator used.\n     */\n    get clipPlanesEvaluator(): ClipPlanesEvaluator {\n        return this.m_visibleTileSetOptions.clipPlanesEvaluator;\n    }\n\n    /**\n     * Changes the clip planes evaluator at run time.\n     */\n    set clipPlanesEvaluator(clipPlanesEvaluator: ClipPlanesEvaluator) {\n        this.m_visibleTileSetOptions.clipPlanesEvaluator = clipPlanesEvaluator;\n    }\n\n    /**\n     * The distance (in pixels) between the screen and the camera.\n     */\n    get focalLength(): number {\n        return this.m_focalLength;\n    }\n\n    /**\n     * Get geo coordinates of camera focus (target) point.\n     * This point is not necessarily on the ground, i.e.:\n     *  - if the tilt is high and projection is [[sphereProjection]]\n     *  - if the camera was modified directly and is not pointing to the ground.\n     * In any case the projection of the target point will be in the center of the screen.\n     *\n     * @returns geo coordinates of the camera focus point.\n     */\n    get target(): GeoCoordinates {\n        return this.m_targetGeoPos;\n    }\n\n    /** @internal\n     * Get world coordinates of camera focus point.\n     *\n     * @note The focus point coordinates are updated with each camera update so you don't need\n     * to re-calculate it, although if the camera started looking to the void, the last focus\n     * point is stored.\n     *\n     * @returns world coordinates of the camera focus point.\n     */\n    get worldTarget(): THREE.Vector3 {\n        return this.m_targetWorldPos;\n    }\n\n    /** @internal\n     * Get distance from camera to the point of focus in world units.\n     *\n     * @note If camera does not point to any ground anymore the last focus point distance is\n     * then returned.\n     *\n     * @returns Last known focus point distance.\n     */\n    get targetDistance(): number {\n        return this.m_targetDistance;\n    }\n\n    /**\n     * Get object describing frustum planes distances and min/max visibility range for actual\n     * camera setup.\n     * Near and far plane distance are self explanatory while minimum and maximum visibility range\n     * describes the extreme near/far planes distances that may be achieved with current camera\n     * settings, meaning at current zoom level (ground distance) and any possible orientation.\n     * @note Visibility is directly related to camera [[ClipPlaneEvaluator]] used and determines\n     * the maximum possible distance of camera far clipping plane regardless of tilt, but may change\n     * whenever zoom level changes. Distance is measured in world units which may be approximately\n     * equal to meters, but this depends on the distortion related to projection type used.\n     * @internal\n     */\n    get viewRanges(): ViewRanges {\n        return this.m_viewRanges;\n    }\n\n    /**\n     * The position in geo coordinates of the center of the scene.\n     * @internal\n     */\n    get geoCenter(): GeoCoordinates {\n        return this.projection.unprojectPoint(this.m_camera.position).normalized();\n    }\n\n    /**\n     * The position in geo coordinates of the center of the scene.\n     * Longitude values outside of -180 and +180 are acceptable.\n     */\n    set geoCenter(geoCenter: GeoCoordinates) {\n        if (geoCenter.altitude !== undefined) {\n            this.projection.projectPoint(geoCenter, this.m_camera.position);\n        } else {\n            // Preserve the current altitude\n            const altitude = this.geoCenter.altitude;\n\n            this.projection.projectPoint(\n                new GeoCoordinates(geoCenter.latitude, geoCenter.longitude, altitude),\n                this.m_camera.position\n            );\n        }\n\n        this.update();\n    }\n\n    /**\n     * The node in this MapView's scene containing the user [[MapAnchor]]s.\n     * All (first level) children of this node will be positioned in world space according to the\n     * [[MapAnchor.geoPosition]].\n     * Deeper level children can be used to position custom objects relative to the anchor node.\n     */\n    get mapAnchors(): THREE.Object3D {\n        return this.m_mapAnchors;\n    }\n\n    /**\n     * The root node for user's defined objects that will be positioned by world coordinates.\n     *\n     * This objects are transformed according to camera setup, but are not _attached_ to map\n     * geo position. Such anchors may be used to add custom rendering geometry of effects that are\n     * moving or just positioned in world space, i.e. light source, comet, spaceship, etc.\n     *\n     * @see mapAnchors.\n     * @internal\n     */\n    get worldAnchors(): THREE.Object3D {\n        return this.m_worldAnchors;\n    }\n\n    /**\n     * The position in world coordinates of the center of the scene.\n     */\n    get worldCenter(): THREE.Vector3 {\n        return this.m_camera.position;\n    }\n\n    /**\n     * Get the [[PickHandler]] for this `mapView`.\n     */\n    get pickHandler(): PickHandler {\n        return this.m_pickHandler;\n    }\n\n    /**\n     * Get the [[ImageCache]] that belongs to this `MapView`.\n     */\n    get imageCache(): MapViewImageCache {\n        return this.m_imageCache;\n    }\n\n    /**\n     * @hidden\n     * Get the [[PoiManager]] that belongs to this `MapView`.\n     */\n    get poiManager(): PoiManager {\n        return this.m_poiManager;\n    }\n\n    /**\n     * @hidden\n     * Get the array of [[PoiTableManager]] that belongs to this `MapView`.\n     */\n    get poiTableManager(): PoiTableManager {\n        return this.m_poiTableManager;\n    }\n\n    /**\n     * The minimum camera height in meters.\n     */\n    get minCameraHeight(): number {\n        return this.m_minCameraHeight;\n    }\n\n    /**\n     * The minimum zoom level.\n     */\n    get minZoomLevel(): number {\n        return this.m_minZoomLevel;\n    }\n\n    /**\n     * The minimum zoom level.\n     */\n    set minZoomLevel(zoomLevel: number) {\n        this.m_minZoomLevel = zoomLevel;\n        this.update();\n    }\n\n    /**\n     * The maximum zoom level. Default is 14.\n     */\n    get maxZoomLevel(): number {\n        return this.m_maxZoomLevel;\n    }\n\n    /**\n     * The maximum zoom level.\n     */\n    set maxZoomLevel(zoomLevel: number) {\n        this.m_maxZoomLevel = zoomLevel;\n        this.update();\n    }\n\n    /**\n     * Returns the zoom level for the given camera setup.\n     */\n    get zoomLevel(): number {\n        return this.m_zoomLevel;\n    }\n\n    set zoomLevel(zoomLevel: number) {\n        this.lookAtImpl({ zoomLevel });\n    }\n\n    /**\n     * Returns tilt angle in degrees.\n     */\n    get tilt(): number {\n        return THREE.MathUtils.radToDeg(this.m_pitch);\n    }\n\n    /**\n     * Set the tilt angle of the map.\n     * @param tilt: New tilt angle in degrees.\n     */\n    set tilt(tilt: number) {\n        this.lookAtImpl({ tilt });\n    }\n\n    /**\n     * Returns heading angle in degrees.\n     */\n    get heading(): number {\n        return -THREE.MathUtils.radToDeg(this.m_yaw);\n    }\n\n    /**\n     * Set the heading angle of the map.\n     * @param heading: New heading angle in degrees.\n     */\n    set heading(heading: number) {\n        this.lookAtImpl({ heading });\n    }\n\n    /**\n     * Environment used to evaluate dynamic scene expressions.\n     */\n    get env(): Env {\n        return this.m_env;\n    }\n\n    /**\n     * Returns the storage level for the given camera setup.\n     * Actual storage level of the rendered data also depends on [[DataSource.storageLevelOffset]].\n     */\n    get storageLevel(): number {\n        return THREE.MathUtils.clamp(\n            Math.floor(this.m_zoomLevel),\n            this.m_minZoomLevel,\n            this.m_maxZoomLevel\n        );\n    }\n\n    /**\n     * Returns height of the viewport in pixels.\n     */\n    get viewportHeight(): number {\n        return this.canvas.height;\n    }\n\n    /**\n     * Returns `true` if the native WebGL antialiasing is enabled.\n     *\n     * @default `true` for `pixelRatio` < `2.0`, `false` otherwise.\n     */\n    get nativeWebglAntialiasEnabled(): boolean {\n        return this.m_options.enableNativeWebglAntialias === undefined\n            ? this.pixelRatio < 2.0\n            : this.m_options.enableNativeWebglAntialias;\n    }\n\n    /**\n     * Returns [[DataSource]]s displayed by this `MapView`.\n     */\n    get dataSources(): DataSource[] {\n        return this.m_tileDataSources;\n    }\n\n    /**\n     * Set's the way in which the fov is calculated on the map view. Note, for\n     * this to take visual effect, the map should be rendered after calling this\n     * function.\n     * @param fovCalculation How the FOV is calculated.\n     */\n    setFovCalculation(fovCalculation: FovCalculation) {\n        this.m_options.fovCalculation = fovCalculation;\n        this.calculateFocalLength(this.m_renderer.getSize(cache.vector2[0]).height);\n        this.updateCameras();\n    }\n\n    /**\n     * Returns the unique [[DataSource]] matching the given name.\n     */\n    getDataSourceByName(dataSourceName: string): DataSource | undefined {\n        return this.m_tileDataSources.find(ds => ds.name === dataSourceName);\n    }\n\n    /**\n     * Returns the array of [[DataSource]]s referring to the same [[StyleSet]].\n     */\n    getDataSourcesByStyleSetName(styleSetName: string): DataSource[] {\n        return this.m_tileDataSources.filter(ds => ds.styleSetName === styleSetName);\n    }\n\n    /**\n     * Returns true if the specified [[DataSource]] is enabled.\n     */\n    isDataSourceEnabled(dataSource: DataSource): boolean {\n        return (\n            dataSource.enabled &&\n            dataSource.ready() &&\n            this.m_connectedDataSources.has(dataSource.name) &&\n            dataSource.isVisible(this.zoomLevel)\n        );\n    }\n\n    /**\n     * Adds a new [[DataSource]] to this `MapView`. `MapView` needs at least one [[DataSource]] to\n     * display something.\n     *\n     * @param dataSource The data source.\n     */\n    addDataSource(dataSource: DataSource): Promise<void> {\n        const twinDataSource = this.getDataSourceByName(dataSource.name);\n        if (twinDataSource !== undefined) {\n            throw new Error(\n                `A DataSource with the name \"${dataSource.name}\" already exists in this MapView.`\n            );\n        }\n\n        dataSource.attach(this);\n        dataSource.setEnableElevationOverlay(this.m_elevationProvider !== undefined);\n        this.m_tileDataSources.push(dataSource);\n\n        if (this.m_backgroundDataSource) {\n            this.m_backgroundDataSource.updateStorageLevelOffset();\n        }\n\n        return dataSource\n            .connect()\n            .then(() => {\n                return new Promise(resolve => {\n                    if (this.theme !== undefined && this.theme.styles !== undefined) {\n                        resolve();\n                        return;\n                    }\n\n                    const resolveOnce = () => {\n                        this.removeEventListener(MapViewEventNames.ThemeLoaded, resolveOnce);\n                        resolve();\n                    };\n\n                    this.addEventListener(MapViewEventNames.ThemeLoaded, resolveOnce);\n                });\n            })\n            .then(() => {\n                const alreadyRemoved = this.m_tileDataSources.indexOf(dataSource) === -1;\n                if (alreadyRemoved) {\n                    return;\n                }\n                dataSource.addEventListener(MapViewEventNames.Update, () => {\n                    this.update();\n                });\n\n                dataSource.setTheme(this.m_theme);\n\n                this.m_connectedDataSources.add(dataSource.name);\n\n                this.dispatchEvent({\n                    type: MapViewEventNames.DataSourceConnect,\n                    dataSourceName: dataSource.name\n                });\n\n                this.update();\n            })\n            .catch(error => {\n                logger.error(\n                    `Failed to connect to datasource ${dataSource.name}: ${error.message}`\n                );\n\n                this.m_failedDataSources.add(dataSource.name);\n                this.dispatchEvent({\n                    type: MapViewEventNames.DataSourceConnect,\n                    dataSourceName: dataSource.name,\n                    error\n                });\n            });\n    }\n\n    /**\n     * Removes [[DataSource]] from this `MapView`.\n     *\n     * @param dataSource The data source to be removed\n     */\n    removeDataSource(dataSource: DataSource) {\n        const dsIndex = this.m_tileDataSources.indexOf(dataSource);\n        if (dsIndex === -1) {\n            return;\n        }\n        dataSource.detach(this);\n\n        this.m_visibleTiles.removeDataSource(dataSource);\n        this.m_tileDataSources.splice(dsIndex, 1);\n        this.m_connectedDataSources.delete(dataSource.name);\n        this.m_failedDataSources.delete(dataSource.name);\n\n        if (this.m_backgroundDataSource) {\n            this.m_backgroundDataSource.updateStorageLevelOffset();\n        }\n\n        this.update();\n    }\n\n    /**\n     * Access the `VisibleTileSet` to get access to all current datasources and their visible tiles.\n     */\n    get visibleTileSet(): VisibleTileSet {\n        return this.m_visibleTiles;\n    }\n\n    /**\n     * Adds new overlay text elements to this `MapView`.\n     *\n     * @param textElements Array of [[TextElement]] to be added.\n     */\n    addOverlayText(textElements: TextElement[]): void {\n        this.m_textElementsRenderer.addOverlayText(textElements);\n        this.update();\n    }\n\n    /**\n     * Adds new overlay text elements to this `MapView`.\n     *\n     * @param textElements Array of [[TextElement]] to be added.\n     */\n    clearOverlayText(): void {\n        this.m_textElementsRenderer.clearOverlayText();\n    }\n\n    // tslint:disable: max-line-length\n    /**\n     * Adjusts the camera to look at a given geo coordinate with tilt and heading angles.\n     *\n     * #### Note on `target` and `bounds`\n     *\n     * If `bounds` are specified, `zoomLevel` and `distance` parameters are ignored and `lookAt`\n     * calculates best zoomLevel (and possibly target) to fit given bounds.\n     *\n     * Following table shows how relation between `bounds` and target.\n     *\n     * | `bounds`             | `target`    | actual `target`\n     * | ------               | ------      | --------\n     * | [[GeoBox]]           | _defined_   | `params.target` is used\n     * | [[GeoBox]]           | `undefined` | `bounds.center` is used as new `target`\n     * | [[GeoBoxExtentLike]] | `undefined` | current `MapView.target` is used\n     * | [[GeoBoxExtentLike]] | _defined_   | `params.target` is used\n     * | [[GeoCoordLike]][]   | `undefined` | new `target` is calculated as center of world box covering given points\n     * | [[GeoCoordLike]][]   | _defined_   | `params.target` is used and zoomLevel is adjusted to view all given geo points\n     *\n     * In each case, `lookAt` finds minimum `zoomLevel` that covers given extents or geo points.\n     *\n     * With flat projection, if `bounds` represents points on both sides of antimeridian, and\n     * [[MapViewOptions.tileWrappingEnabled]] is used, `lookAt` will use this knowledge and find\n     * minimal view that may cover \"next\" or \"previous\" world.\n     *\n     * With sphere projection if `bounds` represents points on both sides of globe, best effort\n     * method is used to find best `target``.\n     *\n     * #### Examples\n     *\n     * ```\n     * mapView.lookAt({heading: 90})\n     *     // look east retaining current `target`, `zoomLevel` and `tilt`\n     *\n     * mapView.lookAt({lat: 40.707, lng: -74.01})\n     *    // look at Manhattan, New York retaining other view params\n     *\n     * mapView.lookAt(bounds: { latitudeSpan: 10, longitudeSpan: 10})\n     *    // look at current `target`, but extending zoomLevel so we see 10 degrees of lat/long span\n     * ```\n     *\n     * @see More examples in [[LookAtExample]].\n     *\n     * @param params [[LookAtParams]]\n     */\n    lookAt(params: Partial<LookAtParams>): void;\n    // tslint:enable: max-line-length\n\n    /**\n     * The method that sets the camera to the desired angle (`tiltDeg`) and `distance` (in meters)\n     * to the `target` location, from a certain heading (`headingAngle`).\n     *\n     * @param target The location to look at.\n     * @param distance The distance of the camera to the target in meters.\n     * @param tiltDeg The camera tilt angle in degrees (0 is vertical), curbed below 89deg\n     *                @default 0\n     * @param headingDeg The camera heading angle in degrees and clockwise (as opposed to yaw)\n     *                   @default 0\n     * starting north.\n     * @deprecated Use lookAt version with [[LookAtParams]] object parameter.\n     */\n    lookAt(target: GeoCoordLike, distance: number, tiltDeg?: number, headingDeg?: number): void;\n\n    lookAt(\n        targetOrParams: GeoCoordLike | Partial<LookAtParams>,\n        distance?: number,\n        tiltDeg?: number,\n        headingDeg?: number\n    ): void {\n        if (isGeoCoordinatesLike(targetOrParams)) {\n            const zoomLevel =\n                distance !== undefined\n                    ? MapViewUtils.calculateZoomLevelFromDistance(this, distance)\n                    : undefined;\n\n            const params: Partial<LookAtParams> = {\n                target: targetOrParams,\n                zoomLevel,\n                tilt: tiltDeg,\n                heading: headingDeg\n            };\n            this.lookAtImpl(params);\n        } else if (typeof targetOrParams === \"object\") {\n            this.lookAtImpl(targetOrParams as Partial<LookAtParams>);\n        }\n    }\n\n    /**\n     * Moves the camera to the specified [[GeoCoordinates]], sets the desired `zoomLevel` and\n     * adjusts the yaw and pitch. The pitch of the camera is always curbed so that the camera cannot\n     * look above the horizon. This paradigm is necessary in [[MapControls]], where the center of \\\n     * the screen is used for the orbiting interaction (3 fingers / right mouse button).\n     *\n     * @param geoPos Geolocation to move the camera to.\n     * @param zoomLevel Desired zoom level.\n     * @param yawDeg Camera yaw in degrees, counter-clockwise (as opposed to heading), starting\n     * north.\n     * @param pitchDeg Camera pitch in degrees.\n     * @deprecated Use [[MapView.lookAt]] instead.\n     */\n    setCameraGeolocationAndZoom(\n        geoPos: GeoCoordinates,\n        zoomLevel: number,\n        yawDeg: number = 0,\n        pitchDeg: number = 0\n    ): void {\n        this.geoCenter = geoPos;\n        let limitedPitch = Math.min(MapViewUtils.MAX_TILT_DEG, pitchDeg);\n        if (this.projection.type === ProjectionType.Spherical) {\n            const maxPitchRadWithCurvature = Math.asin(\n                EarthConstants.EQUATORIAL_RADIUS /\n                    (MapViewUtils.calculateDistanceToGroundFromZoomLevel(this, zoomLevel) +\n                        EarthConstants.EQUATORIAL_RADIUS)\n            );\n            const maxPitchDegWithCurvature = THREE.MathUtils.radToDeg(maxPitchRadWithCurvature);\n            limitedPitch = Math.min(limitedPitch, maxPitchDegWithCurvature);\n        }\n        MapViewUtils.zoomOnTargetPosition(this, 0, 0, zoomLevel);\n        MapViewUtils.setRotation(this, yawDeg, limitedPitch);\n        this.update();\n    }\n\n    /**\n     * Updates the value of a dynamic property.\n     *\n     * Property names starting with a `$`-sign are reserved and any attempt to change their value\n     * will result in an error.\n     *\n     * Themes can access dynamic properties using the `Expr` operator `[\"dynamic-properties\"]`,\n     * for example:\n     *\n     *   `[\"get\", \"property name\", [\"dynamic-properties\"]]`\n     *\n     * @param name The name of the property.\n     * @param value The value of the property.\n     */\n    setDynamicProperty(name: string, value: Value) {\n        if (name.startsWith(\"$\")) {\n            throw new Error(`failed to update the value of the dynamic property '${name}'`);\n        }\n        this.m_env.entries[name] = value;\n        this.update();\n    }\n\n    /**\n     * Removes the given dynamic property from this [[MapView]].\n     *\n     * Property names starting with a `$`-sign are reserved and any attempt to change their value\n     * will result in an error.\n     *\n     * @param name The name of the property to remove.\n     */\n    removeDynamicProperty(name: string) {\n        if (name.startsWith(\"$\")) {\n            throw new Error(`failed to remove the dynamic property '${name}'`);\n        }\n        delete this.m_env.entries[name];\n        this.update();\n    }\n\n    /**\n     * Returns `true` if this `MapView` is constantly redrawing the scene.\n     */\n    get animating(): boolean {\n        return this.m_animationCount > 0;\n    }\n\n    /**\n     * Begin animating the scene.\n     */\n    beginAnimation() {\n        if (this.m_animationCount++ === 0) {\n            this.update();\n            ANIMATION_STARTED_EVENT.time = Date.now();\n            this.dispatchEvent(ANIMATION_STARTED_EVENT);\n        }\n    }\n\n    /**\n     * Stop animating the scene.\n     */\n    endAnimation() {\n        if (this.m_animationCount > 0) {\n            --this.m_animationCount;\n        }\n\n        if (this.m_animationCount === 0) {\n            ANIMATION_FINISHED_EVENT.time = Date.now();\n            this.dispatchEvent(ANIMATION_FINISHED_EVENT);\n        }\n    }\n\n    /**\n     * Returns `true` if the camera moved in the last frame.\n     */\n    get cameraIsMoving() {\n        return this.m_movementDetector.cameraIsMoving;\n    }\n\n    /**\n     * Returns `true` if the current frame will immediately be followed by another frame.\n     */\n    get isDynamicFrame(): boolean {\n        return (\n            this.cameraIsMoving ||\n            this.animating ||\n            this.m_updatePending ||\n            this.m_animatedExtrusionHandler.isAnimating\n        );\n    }\n\n    /**\n     * Returns the ratio between a pixel and a world unit for the current camera (in the center of\n     * the camera projection).\n     */\n    get pixelToWorld(): number {\n        if (this.m_pixelToWorld === undefined) {\n            // At this point fov calculation should be always defined.\n            assert(this.m_options.fovCalculation !== undefined);\n            // NOTE: Look at distance is the distance to camera focus (and pivot) point.\n            // In screen space this point is located in the center of canvas.\n            // Given that zoom level is not modified (clamped by camera pitch), the following\n            // formulas are all equivalent:\n            // lookAtDistance = (EQUATORIAL_CIRCUMFERENCE * focalLength) / (256 * zoomLevel^2);\n            // lookAtDistance = abs(cameraPos.z) / cos(cameraPitch);\n            // Here we may use precalculated target distance (once pre frame):\n            const lookAtDistance = this.m_targetDistance;\n\n            // Find world space object size that corresponds to one pixel on screen.\n            this.m_pixelToWorld = MapViewUtils.calculateWorldSizeByFocalLength(\n                this.m_focalLength,\n                lookAtDistance,\n                1\n            );\n        }\n        return this.m_pixelToWorld;\n    }\n\n    /**\n     * Returns the ratio between a world and a pixel unit for the current camera (in the center of\n     * the camera projection).\n     */\n    get worldToPixel() {\n        return 1.0 / this.pixelToWorld;\n    }\n\n    get pixelRatio(): number {\n        if (this.m_pixelRatio !== undefined) {\n            return this.m_pixelRatio;\n        }\n        return typeof window !== \"undefined\" && window.devicePixelRatio !== undefined\n            ? window.devicePixelRatio\n            : 1.0;\n    }\n\n    /**\n     * PixelRatio in the WebGlRenderer. May contain values > 1.0 for high resolution screens\n     * (HiDPI).\n     *\n     * A value of `undefined` will make the getter return `window.devicePixelRatio`, setting a value\n     * of `1.0` will disable the use of HiDPI on all devices.\n     *\n     * @note Since the current pixelRatio may have been used in some calculations (e.g. the icons)\n     * they may appear in the wrong size now. To ensure proper display of data, a call to\n     * `clearTileCache()` is required if the pixelRatio is changed after tiles have been loaded.\n     *\n     * @memberof MapView\n     */\n    set pixelRatio(pixelRatio: number) {\n        this.m_pixelRatio = pixelRatio;\n        if (this.renderer.getPixelRatio() !== this.pixelRatio) {\n            this.renderer.setPixelRatio(this.pixelRatio);\n        }\n    }\n\n    /**\n     * PixelRatio ratio for rendering when the camera is moving or an animation is running. Useful\n     * when rendering on high resolution displays with low performance GPUs that may be\n     * fill-rate-limited.\n     *\n     * If a value is specified, a low resolution render pass is used to render the scene into a\n     * low resolution render target, before it is copied to the screen.\n     *\n     * A value of `undefined` disables the low res render pass. Values between 0.5 and\n     * `window.devicePixelRatio` can be tried to give  good results. The value should not be larger\n     * than `window.devicePixelRatio`.\n     *\n     * @note Since no anti-aliasing is applied during dynamic rendering with `dynamicPixelRatio`\n     * defined, visual artifacts may occur, especially with thin lines..\n     *\n     * @note The resolution of icons and text labels is not affected.\n     *\n     * @default `undefined`\n     */\n    set dynamicPixelRatio(ratio: number | undefined) {\n        this.mapRenderingManager.lowResPixelRatio = ratio;\n    }\n\n    get dynamicPixelRatio(): number | undefined {\n        return this.mapRenderingManager.lowResPixelRatio;\n    }\n\n    /**\n     * Returns the screen position of the given geo coordinates.\n     *\n     * @param geoPos The geo coordinates.\n     * @returns The screen position in CSS/client coordinates (no pixel ratio applied) or\n     * `undefined`.\n     */\n    getScreenPosition(geoPos: GeoCoordinates): THREE.Vector2 | undefined {\n        this.projection.projectPoint(geoPos, cache.vector3[0]);\n        const p = this.m_screenProjector.project(cache.vector3[0]);\n        if (p !== undefined) {\n            const { width, height } = this.getCanvasClientSize();\n            p.x = p.x + width / 2;\n            p.y = height - (p.y + height / 2);\n        }\n        return p;\n    }\n\n    /**\n     * Returns a ray caster using the supplied screen positions.\n     *\n     * @param x The X position in css/client coordinates (without applied display ratio).\n     * @param y The Y position in css/client coordinates (without applied display ratio).\n     *\n     * @alpha\n     *\n     * @return Raycaster with origin at the camera and direction based on the supplied x / y screen\n     * points.\n     */\n    raycasterFromScreenPoint(x: number, y: number): THREE.Raycaster {\n        this.m_raycaster.setFromCamera(this.getNormalizedScreenCoordinates(x, y), this.m_rteCamera);\n        return this.m_raycaster;\n    }\n\n    /**\n     * Returns the world space position from the given screen position. The return value can be\n     * `null`, in case the camera is facing the horizon and the given `(x, y)` value is not\n     * intersecting the ground plane.\n     *\n     * @param x The X position in css/client coordinates (without applied display ratio).\n     * @param y The Y position in css/client coordinates (without applied display ratio).\n     */\n    getWorldPositionAt(x: number, y: number): THREE.Vector3 | null {\n        this.m_raycaster.setFromCamera(this.getNormalizedScreenCoordinates(x, y), this.m_camera);\n        return this.projection.type === ProjectionType.Spherical\n            ? this.m_raycaster.ray.intersectSphere(this.m_sphere, cache.vector3[0])\n            : this.m_raycaster.ray.intersectPlane(this.m_plane, cache.vector3[0]);\n    }\n\n    /**\n     * Returns the [[GeoCoordinates]] from the given screen position. The return value can be\n     * `null`, in case the camera is facing the horizon and the given `(x, y)` value is not\n     * intersecting the ground plane.\n     *\n     * @param x The X position in css/client coordinates (without applied display ratio).\n     * @param y The Y position in css/client coordinates (without applied display ratio).\n     */\n    getGeoCoordinatesAt(x: number, y: number): GeoCoordinates | null {\n        const worldPosition = this.getWorldPositionAt(x, y);\n        if (!worldPosition) {\n            return null;\n        }\n        return this.projection.unprojectPoint(worldPosition);\n    }\n\n    /**\n     * Returns the normalized screen coordinates from the given pixel position.\n     *\n     * @param x The X position in css/client coordinates (without applied display ratio).\n     * @param y The Y position in css/client coordinates (without applied display ratio).\n     */\n    getNormalizedScreenCoordinates(x: number, y: number): THREE.Vector3 {\n        // use clientWidth and clientHeight as it does not apply the pixelRatio and\n        // therefore supports also HiDPI devices\n        const { width, height } = this.getCanvasClientSize();\n        return new THREE.Vector3((x / width) * 2 - 1, -((y / height) * 2) + 1, 0);\n    }\n\n    /**\n     * Do a raycast on all objects in the scene. Useful for picking. Limited to objects that\n     * THREE.js can raycast, the solid lines that get their geometry in the shader cannot be tested\n     * for intersection.\n     *\n     * Note, if a [[DataSource]] adds an [[Object3D]] to a [[Tile]], it will be only pickable once\n     * [[MapView.render]] has been called, this is because [[MapView.render]] method creates the\n     * internal three.js root [[Object3D]] which is used in the [[PickHandler]] internally.\n     * This method will not test for intersection custom objects added to the scene by for\n     * example calling directly the [[scene.add]] method from THREE.\n     *\n     * @param x The X position in css/client coordinates (without applied display ratio).\n     * @param y The Y position in css/client coordinates (without applied display ratio).\n     * @returns The list of intersection results.\n     */\n    intersectMapObjects(x: number, y: number): PickResult[] {\n        return this.m_pickHandler.intersectMapObjects(x, y);\n    }\n\n    /**\n     * Resize the HTML canvas element and the THREE.js `WebGLRenderer`.\n     *\n     * @param width The new width.\n     * @param height The new height.\n     */\n    resize(width: number, height: number) {\n        this.m_renderer.setSize(width, height, false);\n        if (this.m_renderer.getPixelRatio() !== this.pixelRatio) {\n            this.m_renderer.setPixelRatio(this.pixelRatio);\n        }\n\n        if (this.mapRenderingManager !== undefined) {\n            this.mapRenderingManager.setSize(width, height);\n        }\n\n        if (this.collisionDebugCanvas !== undefined) {\n            this.collisionDebugCanvas.width = width;\n            this.collisionDebugCanvas.height = height;\n        }\n\n        this.updateCameras();\n        this.update();\n\n        this.dispatchEvent({\n            type: MapViewEventNames.Resize,\n            size: {\n                width,\n                height\n            }\n        });\n    }\n\n    /**\n     * Redraws scene immediately\n     *\n     * @note Before using this method, set `synchronousRendering` to `true`\n     * in the [[MapViewOptions]]\n     *\n     * @param frameStartTime Optional timestamp for start of frame.\n     * Default: [[PerformanceTimer.now()]]\n     */\n    renderSync(frameStartTime?: number) {\n        if (frameStartTime === undefined) {\n            frameStartTime = PerformanceTimer.now();\n        }\n        this.render(frameStartTime);\n    }\n\n    /**\n     * Requests a redraw of the scene.\n     */\n    update() {\n        this.dispatchEvent(UPDATE);\n\n        // Skip if update is already in progress\n        if (this.m_updatePending) {\n            return;\n        }\n\n        // Set update flag\n        this.m_updatePending = true;\n\n        this.startRenderLoop();\n    }\n\n    /**\n     * Returns `true` if an update has already been requested, such that after a currently rendering\n     * frame, the next frame will be rendered immediately.\n     */\n    get updatePending(): boolean {\n        return this.m_updatePending;\n    }\n\n    /**\n     * Requests a redraw of the scene.\n     * @deprecated Use the [[update]] method instead.\n     */\n    requestUpdateIfNeeded() {\n        this.update();\n    }\n\n    /**\n     * Clear the tile cache.\n     *\n     * Remove the [[Tile]] objects created by cacheable [[DataSource]]s. If a [[DataSource]] name is\n     * provided, this method restricts the eviction the [[DataSource]] with the given name.\n     *\n     * @param dataSourceName The name of the [[DataSource]].\n     */\n    clearTileCache(dataSourceName?: string) {\n        if (this.m_visibleTiles === undefined) {\n            // This method is called in the shadowsEnabled function, which is initialized in the\n            // setupRenderer function,\n            return;\n        }\n        if (dataSourceName !== undefined) {\n            const dataSource = this.getDataSourceByName(dataSourceName);\n            if (dataSource) {\n                this.m_visibleTiles.clearTileCache(dataSource);\n                dataSource.clearCache();\n            }\n        } else {\n            this.m_visibleTiles.clearTileCache();\n            this.m_tileDataSources.forEach(dataSource => dataSource.clearCache());\n        }\n\n        if (this.m_elevationProvider !== undefined) {\n            this.m_elevationProvider.clearCache();\n        }\n    }\n\n    /**\n     * Apply visitor to all visible tiles.\n     *\n     * @param fun Visitor function\n     */\n    forEachVisibleTile(fun: (tile: Tile) => void) {\n        this.m_visibleTiles.forEachVisibleTile(fun);\n    }\n\n    /**\n     * Apply a visitor function to all tiles in the cache.\n     *\n     * @param visitor Visitor function\n     */\n    forEachCachedTile(visitor: (tile: Tile) => void) {\n        this.m_visibleTiles.forEachCachedTile(visitor);\n    }\n\n    /**\n     * Visit each tile in visible, rendered, and cached sets.\n     *\n     *  * Visible and temporarily rendered tiles will be marked for update and retained.\n     *  * Cached but not rendered/visible will be evicted.\n     *\n     * @param dataSource If passed, only the tiles from this [[DataSource]] instance are processed.\n     * If `undefined`, tiles from all [[DataSource]]s are processed.\n     */\n    markTilesDirty(dataSource?: DataSource) {\n        this.m_visibleTiles.markTilesDirty(dataSource);\n    }\n\n    /**\n     * Sets the DataSource which contains the elevations, the elevation range source, and the\n     * elevation provider. Only a single elevation source is possible per [[MapView]]\n     *\n     * If the terrain-datasource is merged with this repository, we could internally construct\n     * the [[ElevationRangeSource]] and the [[ElevationProvider]] and access would be granted to\n     * the application when it asks for it, to simplify the API.\n     *\n     * @param elevationSource The datasource containing the terrain tiles.\n     * @param elevationRangeSource Allows access to the elevation min / max per tile.\n     * @param elevationProvider Allows access to the elevation at a given location or a ray\n     *      from the camera.\n     */\n    async setElevationSource(\n        elevationSource: DataSource,\n        elevationRangeSource: ElevationRangeSource,\n        elevationProvider: ElevationProvider\n    ) {\n        // Remove previous elevation source if present\n        if (this.m_elevationSource && this.m_elevationSource !== elevationSource) {\n            this.removeDataSource(this.m_elevationSource);\n        }\n\n        // Add as datasource if it was not added before\n        const isPresent = this.m_tileDataSources.indexOf(elevationSource) !== -1;\n        if (!isPresent) {\n            await this.addDataSource(elevationSource);\n        }\n        this.m_elevationSource = elevationSource;\n        this.m_elevationRangeSource = elevationRangeSource;\n        if (!this.m_elevationRangeSource.ready()) {\n            await this.m_elevationRangeSource.connect();\n        }\n        this.m_elevationProvider = elevationProvider;\n        this.dataSources.forEach(dataSource => {\n            dataSource.setEnableElevationOverlay(true);\n        });\n        this.m_tileGeometryManager.setTileUpdateCallback((tile: Tile) => {\n            overlayOnElevation(tile);\n        });\n        this.clearTileCache();\n    }\n\n    /**\n     * Clears any elevation sources and provider previously set.\n     * @param elevationSource The datasource to be cleared.\n     */\n    clearElevationSource(elevationSource: DataSource) {\n        this.removeDataSource(elevationSource);\n        this.m_elevationSource = undefined;\n        this.m_elevationRangeSource = undefined;\n        this.m_elevationProvider = undefined;\n        this.dataSources.forEach(dataSource => {\n            dataSource.setEnableElevationOverlay(false);\n        });\n        this.m_tileGeometryManager.setTileUpdateCallback(undefined);\n        this.clearTileCache();\n    }\n\n    /**\n     * Public access to [[MapViewFog]] allowing to toggle it by setting its `enabled` property.\n     */\n    get fog(): MapViewFog {\n        return this.m_fog;\n    }\n\n    private setPostEffects() {\n        // First clear all the effects, then enable them from what is specified.\n        this.mapRenderingManager.bloom.enabled = false;\n        this.mapRenderingManager.outline.enabled = false;\n        this.mapRenderingManager.vignette.enabled = false;\n        this.mapRenderingManager.sepia.enabled = false;\n\n        if (this.m_postEffects !== undefined) {\n            if (this.m_postEffects.bloom !== undefined) {\n                this.mapRenderingManager.bloom = this.m_postEffects.bloom;\n            }\n            if (this.m_postEffects.outline !== undefined) {\n                this.mapRenderingManager.outline.enabled = this.m_postEffects.outline.enabled;\n                this.mapRenderingManager.updateOutline(this.m_postEffects.outline);\n            }\n            if (this.m_postEffects.vignette !== undefined) {\n                this.mapRenderingManager.vignette = this.m_postEffects.vignette;\n            }\n            if (this.m_postEffects.sepia !== undefined) {\n                this.mapRenderingManager.sepia = this.m_postEffects.sepia;\n            }\n        }\n    }\n\n    /**\n     * Returns the elevation provider.\n     */\n    get elevationProvider(): ElevationProvider | undefined {\n        return this.m_elevationProvider;\n    }\n\n    get shadowsEnabled(): boolean {\n        return this.m_options.enableShadows === true;\n    }\n\n    set shadowsEnabled(enabled: boolean) {\n        // shadowMap is undefined if we are testing (three.js always set it to be defined).\n        if (\n            this.m_renderer.shadowMap === undefined ||\n            enabled === this.m_renderer.shadowMap.enabled\n        ) {\n            return;\n        }\n        this.m_options.enableShadows = enabled;\n        // There is a bug in three.js where this doesn't currently work once enabled.\n        this.m_renderer.shadowMap.enabled = enabled;\n        // TODO: Make this configurable. Note, there is currently issues when using the\n        // VSMShadowMap type, this should be investigated if this type is requested.\n        this.m_renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n        this.clearTileCache();\n    }\n\n    private extractAttitude() {\n        const camera = this.m_camera;\n        const projection = this.projection;\n\n        const cameraPos = cache.vector3[1];\n        const transform = cache.transform[0];\n        const tangentSpaceMatrix = cache.matrix4[1];\n        // 1. Build the matrix of the tangent space of the camera.\n        cameraPos.setFromMatrixPosition(camera.matrixWorld); // Ensure using world position.\n        projection.localTangentSpace(this.m_targetGeoPos, transform);\n        tangentSpaceMatrix.makeBasis(transform.xAxis, transform.yAxis, transform.zAxis);\n\n        // 2. Change the basis of matrixWorld to the tangent space to get the new base axes.\n        cache.matrix4[0].getInverse(tangentSpaceMatrix).multiply(camera.matrixWorld);\n        transform.xAxis.setFromMatrixColumn(cache.matrix4[0], 0);\n        transform.yAxis.setFromMatrixColumn(cache.matrix4[0], 1);\n        transform.zAxis.setFromMatrixColumn(cache.matrix4[0], 2);\n\n        // 3. Deduce orientation from the base axes.\n        let yaw = 0;\n        let pitch = 0;\n        let roll = 0;\n\n        // Decompose rotation matrix into Z0 X Z1 Euler angles.\n        const epsilon = 1e-10;\n        const d = transform.zAxis.dot(cameraPos.set(0, 0, 1));\n        if (d < 1.0 - epsilon) {\n            if (d > -1.0 + epsilon) {\n                yaw = Math.atan2(transform.zAxis.x, -transform.zAxis.y);\n                pitch = Math.acos(transform.zAxis.z);\n                roll = Math.atan2(transform.xAxis.x, transform.yAxis.z);\n            } else {\n                // Looking bottom-up with space.z.z == -1.0\n                yaw = -Math.atan2(-transform.yAxis.x, transform.xAxis.x);\n                pitch = 180;\n                roll = 0;\n            }\n        } else {\n            // Looking top-down with space.z.z == 1.0\n            yaw = Math.atan2(-transform.yAxis.x, transform.xAxis.x);\n            pitch = 0.0;\n            roll = 0.0;\n        }\n\n        return {\n            yaw,\n            pitch,\n            roll\n        };\n    }\n\n    private lookAtImpl(params: Partial<LookAtParams>): void {\n        const tilt = Math.min(getOptionValue(params.tilt, this.tilt), MapViewUtils.MAX_TILT_DEG);\n        const heading = getOptionValue(params.heading, this.heading);\n\n        let target: GeoCoordinates | undefined;\n        if (params.bounds !== undefined) {\n            let geoPoints: GeoCoordLike[];\n\n            if (params.bounds instanceof GeoBox) {\n                target = params.target\n                    ? GeoCoordinates.fromObject(params.target)\n                    : params.bounds.center;\n                geoPoints = MapViewUtils.geoBoxToGeoPoints(params.bounds);\n            } else if (isGeoBoxExtentLike(params.bounds)) {\n                target = params.target ? GeoCoordinates.fromObject(params.target) : this.target;\n                const box = GeoBox.fromCenterAndExtents(target, params.bounds);\n                geoPoints = MapViewUtils.geoBoxToGeoPoints(box);\n            } else if (Array.isArray(params.bounds)) {\n                geoPoints = params.bounds;\n                if (params.target !== undefined) {\n                    target = GeoCoordinates.fromObject(params.target);\n                }\n            } else {\n                throw Error(\"#lookAt: Invalid 'bounds' value\");\n            }\n            if (this.m_tileWrappingEnabled && this.projection.type === ProjectionType.Planar) {\n                // In flat projection, with wrap around enabled, we should detect clusters of\n                // points around  antimeridian and possible move some points to sibling worlds.\n                //\n                // Here, we fit points into minimal geo box taking world wrapping into account.\n                geoPoints = MapViewUtils.wrapGeoPointsToScreen(geoPoints, target!);\n            }\n            const worldPoints = geoPoints.map(point =>\n                this.projection.projectPoint(GeoCoordinates.fromObject(point), new THREE.Vector3())\n            );\n            const worldTarget = new THREE.Vector3();\n            if (target! === undefined) {\n                const box = new THREE.Box3().setFromPoints(worldPoints);\n                box.getCenter(worldTarget);\n                this.projection.scalePointToSurface(worldTarget);\n                target = this.projection.unprojectPoint(worldTarget);\n            } else {\n                this.projection.projectPoint(target, worldTarget);\n            }\n            return this.lookAtImpl(\n                MapViewUtils.getFitBoundsLookAtParams(target, worldTarget, worldPoints, {\n                    tilt,\n                    heading,\n                    minDistance: MapViewUtils.calculateDistanceFromZoomLevel(\n                        this,\n                        this.maxZoomLevel\n                    ),\n                    projection: this.projection,\n                    camera: this.camera\n                })\n            );\n        }\n        target =\n            params.target !== undefined ? GeoCoordinates.fromObject(params.target) : this.target;\n\n        const distance =\n            params.zoomLevel !== undefined\n                ? MapViewUtils.calculateDistanceFromZoomLevel(\n                      this,\n                      THREE.MathUtils.clamp(\n                          params.zoomLevel,\n                          this.m_minZoomLevel,\n                          this.m_maxZoomLevel\n                      )\n                  )\n                : params.distance !== undefined\n                ? params.distance\n                : this.m_targetDistance;\n\n        // MapViewUtils#setRotation uses pitch, not tilt, which is different in sphere projection.\n        // But in sphere, in the tangent space of the target of the camera, pitch = tilt. So, put\n        // the camera on the target, so the tilt can be passed to getRotation as a pitch.\n        MapViewUtils.getCameraRotationAtTarget(\n            this.projection,\n            target,\n            -heading,\n            tilt,\n            this.camera.quaternion\n        );\n        MapViewUtils.getCameraPositionFromTargetCoordinates(\n            target,\n            distance,\n            -heading,\n            tilt,\n            this.projection,\n            this.camera.position\n        );\n        this.camera.updateMatrixWorld(true);\n\n        // Make sure to update all properties that are accessable via API (e.g. zoomlevel) b/c\n        // otherwise they would be updated as recently as in the next animation frame.\n        this.updateLookAtSettings();\n        this.update();\n    }\n\n    /**\n     * Plug-in PolarTileDataSource for spherical projection and plug-out otherwise\n     */\n    private updatePolarDataSource() {\n        const dataSource = this.m_polarDataSource;\n        if (this.m_enablePolarDataSource === true && dataSource !== undefined) {\n            const twinDataSource = this.getDataSourceByName(dataSource.name);\n\n            if (this.projection.type === ProjectionType.Spherical) {\n                if (twinDataSource === undefined) {\n                    this.addDataSource(dataSource);\n                }\n            } else {\n                if (twinDataSource !== undefined) {\n                    this.removeDataSource(dataSource);\n                }\n            }\n        }\n    }\n\n    /**\n     * Updates the camera and the projections and resets the screen collisions,\n     * note, setupCamera must be called before this is called.\n     * @param viewRanges optional parameter that supplies new view ranges, most importantly\n     * near/far clipping planes distance. If parameter is not provided view ranges will be\n     * calculated from [[ClipPlaneEvaluator]] used in [[VisibleTileSet]].\n     */\n    private updateCameras(viewRanges?: ViewRanges) {\n        // Update look at settings first, so that other components (e.g. ClipPlanesEvaluator) get\n        // the up to date tilt, targetDistance, ...\n        this.m_camera.updateMatrixWorld(false);\n        this.updateLookAtSettings();\n\n        const { width, height } = this.m_renderer.getSize(cache.vector2[0]);\n        this.m_camera.aspect =\n            this.m_forceCameraAspect !== undefined ? this.m_forceCameraAspect : width / height;\n        this.setFovOnCamera(this.m_options.fovCalculation!, height);\n\n        // When calculating clip planes account for the highest building on the earth,\n        // multiplying its height by projection scaling factor. This approach assumes\n        // constantHeight property of extruded polygon technique is set as default false,\n        // otherwise the near plane margins will be bigger then required, but still correct.\n        const projectionScale = this.projection.getScaleFactor(this.camera.position);\n        const maxGeometryHeightScaled =\n            projectionScale *\n            this.m_tileDataSources.reduce((r, ds) => Math.max(r, ds.maxGeometryHeight), 0);\n\n        // Copy all properties from new view ranges to our readonly object.\n        // This allows to keep all view ranges references valid and keeps up-to-date\n        // information within them. Works the same as copping all properties one-by-one.\n        Object.assign(\n            this.m_viewRanges,\n            viewRanges === undefined\n                ? this.m_visibleTiles.updateClipPlanes(maxGeometryHeightScaled)\n                : viewRanges\n        );\n        this.m_camera.near = this.m_viewRanges.near;\n        this.m_camera.far = this.m_viewRanges.far;\n\n        this.m_camera.updateProjectionMatrix();\n\n        // Update the \"relative to eye\" camera. Copy the public camera parameters\n        // and place the \"relative to eye\" at the world's origin.\n        this.m_rteCamera.copy(this.m_camera);\n        this.m_rteCamera.position.setScalar(0);\n        this.m_rteCamera.updateMatrixWorld(true);\n\n        this.m_screenCamera.left = width / -2;\n        this.m_screenCamera.right = width / 2;\n        this.m_screenCamera.bottom = height / -2;\n        this.m_screenCamera.top = height / 2;\n        this.m_screenCamera.updateProjectionMatrix();\n        this.m_screenCamera.updateMatrixWorld(false);\n\n        this.m_screenProjector.update(this.camera, width, height);\n        this.m_screenCollisions.update(width, height);\n\n        this.m_pixelToWorld = undefined;\n        this.m_fog.update(this, this.m_viewRanges.maximum);\n    }\n\n    /**\n     * Derive the look at settings (i.e. target, zoom, ...) from the current camera.\n     */\n    private updateLookAtSettings() {\n        // tslint:disable-next-line: deprecation\n        const { target, distance } = MapViewUtils.getTargetAndDistance(\n            this.projection,\n            this.camera,\n            this.elevationProvider\n        );\n\n        this.m_targetWorldPos.copy(target);\n        this.m_targetGeoPos = this.projection.unprojectPoint(this.m_targetWorldPos);\n        this.m_targetDistance = distance;\n        this.m_zoomLevel = MapViewUtils.calculateZoomLevelFromDistance(this, this.m_targetDistance);\n\n        const { yaw, pitch, roll } = this.extractAttitude();\n        this.m_yaw = yaw;\n        this.m_pitch = pitch;\n        this.m_roll = roll;\n    }\n\n    /**\n     * Update `Env` instance used for style `Expr` evaluations.\n     */\n    private updateEnv() {\n        this.m_env.entries.$zoom = this.m_zoomLevel;\n\n        // This one introduces unnecessary calculation of pixelToWorld, even if it's barely\n        // used in our styles.\n        this.m_env.entries.$pixelToMeters = this.pixelToWorld;\n\n        this.m_env.entries.$frameNumber = this.m_frameNumber;\n    }\n\n    /**\n     * Transfer the NDC point to view space.\n     * @param vector Vector to transform.\n     * @param result Result to place calculation.\n     */\n    private ndcToView(vector: Vector3Like, result: THREE.Vector3): THREE.Vector3 {\n        result\n            .set(vector.x, vector.y, vector.z)\n            .applyMatrix4(this.camera.projectionMatrixInverse)\n            // Make sure to apply rotation, hence use the rte camera\n            .applyMatrix4(this.m_rteCamera.matrixWorld);\n        return result;\n    }\n\n    /**\n     * Transfer from view space to camera space.\n     * @param viewPos position in view space, result is stored here.\n     */\n    private viewToLightSpace(viewPos: THREE.Vector3, camera: THREE.Camera): THREE.Vector3 {\n        return viewPos.applyMatrix4(camera.matrixWorldInverse);\n    }\n\n    /**\n     * Update the directional light camera. Note, this requires the cameras to first be updated.\n     */\n    private updateLights() {\n        // TODO: HARP-9479 Globe doesn't support shadows.\n        if (\n            !this.shadowsEnabled ||\n            this.projection.type === ProjectionType.Spherical ||\n            this.m_createdLights === undefined ||\n            this.m_createdLights.length === 0\n        ) {\n            return;\n        }\n\n        const points: Vector3Like[] = [\n            // near plane points\n            { x: -1, y: -1, z: -1 },\n            { x: 1, y: -1, z: -1 },\n            { x: -1, y: 1, z: -1 },\n            { x: 1, y: 1, z: -1 },\n\n            // far planes points\n            { x: -1, y: -1, z: 1 },\n            { x: 1, y: -1, z: 1 },\n            { x: -1, y: 1, z: 1 },\n            { x: 1, y: 1, z: 1 }\n        ];\n        const transformedPoints = points.map((p, i) => this.ndcToView(p, cache.frustumPoints[i]));\n\n        this.m_createdLights.forEach(element => {\n            const directionalLight = element as THREE.DirectionalLight;\n            if (directionalLight.isDirectionalLight === true) {\n                const lightDirection = cache.vector3[0];\n                lightDirection.copy(directionalLight.target.position);\n                lightDirection.sub(directionalLight.position);\n                lightDirection.normalize();\n\n                const normal = cache.vector3[1];\n                if (this.projection.type === ProjectionType.Planar) {\n                    // -Z points to the camera, we can't use Projection.surfaceNormal, because\n                    // webmercator and mercator give different results.\n                    normal.set(0, 0, -1);\n                } else {\n                    // Enable shadows for globe...\n                    //this.projection.surfaceNormal(target, normal);\n                }\n\n                // The camera of the shadow has the same height as the map camera, and the target is\n                // also the same. The position is then calculated based on the light direction and\n                // the height\n                // using basic trigonometry.\n                const tilt = this.m_pitch;\n                const cameraHeight = this.targetDistance * Math.cos(tilt);\n                const lightPosHyp = cameraHeight / normal.dot(lightDirection);\n\n                directionalLight.target.position.copy(this.worldTarget).sub(this.camera.position);\n                directionalLight.position.copy(this.worldTarget);\n                directionalLight.position.addScaledVector(lightDirection, -lightPosHyp);\n                directionalLight.position.sub(this.camera.position);\n                directionalLight.updateMatrixWorld();\n                directionalLight.shadow.updateMatrices(directionalLight);\n\n                const camera = directionalLight.shadow.camera;\n                const pointsInLightSpace = transformedPoints.map(p =>\n                    this.viewToLightSpace(p.clone(), camera)\n                );\n\n                const box = new THREE.Box3();\n                pointsInLightSpace.forEach(point => {\n                    box.expandByPoint(point);\n                });\n                camera.left = box.min.x;\n                camera.right = box.max.x;\n                camera.top = box.max.y;\n                camera.bottom = box.min.y;\n                // Moving back to the light the near plane in order to catch high buildings, that\n                // are not visible by the camera, but existing on the scene.\n                camera.near = -box.max.z * 0.95;\n                camera.far = -box.min.z;\n                camera.updateProjectionMatrix();\n            }\n        });\n    }\n\n    /**\n     * Render loop callback that should only be called by [[requestAnimationFrame]].\n     * Will trigger [[requestAnimationFrame]] again if updates are pending or  animation is running.\n     * @param frameStartTime The start time of the current frame\n     */\n    private renderLoop(frameStartTime: number) {\n        // Render loop shouldn't run when synchronous rendering is enabled\n        if (this.m_options.synchronousRendering) {\n            return;\n        }\n\n        if (this.maxFps === 0) {\n            // Render with max fps\n            this.render(frameStartTime);\n        } else {\n            // Limit fps by skipping frames\n\n            // Magic ingredient to compensate time flux.\n            const fudgeTimeInMs = 3;\n            const frameInterval = 1000 / this.maxFps;\n            const previousFrameTime =\n                this.m_previousFrameTimeStamp === undefined ? 0 : this.m_previousFrameTimeStamp;\n            const targetTime = previousFrameTime + frameInterval - fudgeTimeInMs;\n\n            if (frameStartTime >= targetTime) {\n                this.render(frameStartTime);\n            }\n        }\n\n        // Continue rendering if update is pending or animation is running\n        // tslint:disable-next-line: prefer-conditional-expression\n        if (this.m_updatePending || this.animating) {\n            this.m_animationFrameHandle = requestAnimationFrame(this.handleRequestAnimationFrame);\n        } else {\n            // Stop rendering if no update is pending\n            this.m_animationFrameHandle = undefined;\n        }\n    }\n\n    /**\n     * Start render loop if not already running.\n     */\n    private startRenderLoop() {\n        if (this.m_animationFrameHandle !== undefined || this.m_options.synchronousRendering) {\n            return;\n        }\n\n        this.m_animationFrameHandle = requestAnimationFrame(this.handleRequestAnimationFrame);\n    }\n\n    /**\n     * Returns the list of the enabled data sources.\n     */\n    private getEnabledTileDataSources(): DataSource[] {\n        // ### build this list once decoders && datasources are ready\n\n        const enabledDataSources: DataSource[] = [];\n\n        for (const dataSource of this.m_tileDataSources) {\n            if (this.isDataSourceEnabled(dataSource)) {\n                enabledDataSources.push(dataSource);\n            }\n        }\n\n        return enabledDataSources;\n    }\n\n    /**\n     * Renders the current frame.\n     */\n    private render(frameStartTime: number): void {\n        if (this.m_drawing) {\n            return;\n        }\n\n        RENDER_EVENT.time = frameStartTime;\n        this.dispatchEvent(RENDER_EVENT);\n\n        ++this.m_frameNumber;\n\n        let currentFrameEvent: FrameStats | undefined;\n        const stats = PerformanceStatistics.instance;\n        const gatherStatistics: boolean = stats.enabled;\n        if (gatherStatistics) {\n            currentFrameEvent = stats.currentFrame;\n\n            if (this.m_previousFrameTimeStamp !== undefined) {\n                // In contrast to fullFrameTime we also measure the application code\n                // for the FPS. This means FPS != 1000 / fullFrameTime.\n                const timeSincePreviousFrame = frameStartTime - this.m_previousFrameTimeStamp;\n                currentFrameEvent.setValue(\"render.fps\", 1000 / timeSincePreviousFrame);\n            }\n\n            // We store the last frame statistics at the beginning of the next frame b/c additional\n            // work (i.e. geometry creation) is done outside of the animation frame but still needs\n            // to be added to the `fullFrameTime` (see [[TileGeometryLoader]]).\n            stats.storeAndClearFrameInfo();\n\n            currentFrameEvent = currentFrameEvent as FrameStats;\n            currentFrameEvent.setValue(\"renderCount.frameNumber\", this.m_frameNumber);\n        }\n\n        this.m_previousFrameTimeStamp = frameStartTime;\n\n        let setupTime: number | undefined;\n        let cullTime: number | undefined;\n        let textPlacementTime: number | undefined;\n        let drawTime: number | undefined;\n        let textDrawTime: number | undefined;\n        let endTime: number | undefined;\n\n        this.m_renderer.info.reset();\n\n        this.m_updatePending = false;\n        this.m_thisFrameTilesChanged = undefined;\n\n        this.m_drawing = true;\n\n        if (this.m_renderer.getPixelRatio() !== this.pixelRatio) {\n            this.m_renderer.setPixelRatio(this.pixelRatio);\n        }\n\n        this.updateCameras();\n        this.updateEnv();\n        this.updateLights();\n\n        this.m_renderer.clear();\n\n        // clear the scene\n        this.m_mapTilesRoot.children.length = 0;\n\n        if (gatherStatistics) {\n            setupTime = PerformanceTimer.now();\n        }\n\n        // TBD: Update renderList only any of its params (camera, etc...) has changed.\n        if (!this.lockVisibleTileSet) {\n            const viewRangesStatus = this.m_visibleTiles.updateRenderList(\n                this.storageLevel,\n                Math.floor(this.zoomLevel),\n                this.getEnabledTileDataSources(),\n                this.m_elevationRangeSource\n            );\n            // View ranges has changed due to features (with elevation) that affects clip planes\n            // positioning, update cameras with new clip planes positions.\n            if (viewRangesStatus.viewRangesChanged) {\n                this.updateCameras(viewRangesStatus.viewRanges);\n            }\n        }\n\n        if (gatherStatistics) {\n            cullTime = PerformanceTimer.now();\n        }\n\n        const renderList = this.m_visibleTiles.dataSourceTileList;\n\n        // no need to check everything if we're not going to create text renderer.\n        renderList.forEach(({ zoomLevel, renderedTiles }) => {\n            renderedTiles.forEach(tile => {\n                this.renderTileObjects(tile, zoomLevel);\n\n                //We know that rendered tiles are visible (in the view frustum), so we update the\n                //frame number, note we don't do this for the visibleTiles because some may still be\n                //loading (and therefore aren't visible in the sense of being seen on the screen).\n                //Note also, this number isn't currently used anywhere so should be considered to be\n                //removed in the future (though could be good for debugging purposes).\n                tile.frameNumLastVisible = this.m_frameNumber;\n            });\n        });\n\n        // Check if this is the time to place the labels for the first time. Pretty much everything\n        // should have been loaded, and no animation should be running.\n        if (\n            !this.m_initialTextPlacementDone &&\n            !this.m_firstFrameComplete &&\n            !this.isDynamicFrame &&\n            !this.m_themeIsLoading &&\n            this.m_poiTableManager.finishedLoading &&\n            this.m_visibleTiles.allVisibleTilesLoaded &&\n            this.m_connectedDataSources.size + this.m_failedDataSources.size ===\n                this.m_tileDataSources.length &&\n            !this.m_textElementsRenderer.initializing &&\n            !this.m_textElementsRenderer.loading\n        ) {\n            this.m_initialTextPlacementDone = true;\n        }\n\n        this.m_mapAnchors.children.forEach((childObject: MapAnchor) => {\n            if (childObject.geoPosition !== undefined) {\n                this.projection.projectPoint(childObject.geoPosition, childObject.position);\n                childObject.position.sub(this.camera.position);\n            }\n        });\n        this.m_worldAnchors.children.forEach((childObject: WorldAnchor) => {\n            if (childObject.worldPosition !== undefined) {\n                const wp = childObject.worldPosition;\n                childObject.position.set(wp.x, wp.y, wp.z);\n                childObject.position.sub(this.camera.position);\n            }\n        });\n\n        this.m_animatedExtrusionHandler.zoom = this.m_zoomLevel;\n\n        if (currentFrameEvent !== undefined) {\n            // Make sure the counters all have a value.\n            currentFrameEvent.addValue(\"renderCount.numTilesRendered\", 0);\n            currentFrameEvent.addValue(\"renderCount.numTilesVisible\", 0);\n            currentFrameEvent.addValue(\"renderCount.numTilesLoading\", 0);\n\n            // Increment the counters for all data sources.\n            renderList.forEach(({ zoomLevel, renderedTiles, visibleTiles, numTilesLoading }) => {\n                currentFrameEvent!.addValue(\"renderCount.numTilesRendered\", renderedTiles.size);\n                currentFrameEvent!.addValue(\"renderCount.numTilesVisible\", visibleTiles.length);\n                currentFrameEvent!.addValue(\"renderCount.numTilesLoading\", numTilesLoading);\n            });\n        }\n\n        if (this.m_movementDetector.checkCameraMoved(this, frameStartTime)) {\n            //FIXME: Shouldn't we use target here?\n            const { latitude, longitude, altitude } = this.geoCenter;\n            this.dispatchEvent({\n                type: MapViewEventNames.CameraPositionChanged,\n                latitude,\n                longitude,\n                altitude,\n                // FIXME: Can we remove yaw, pitch and roll\n                yaw: this.m_yaw,\n                pitch: this.m_pitch,\n                roll: this.m_roll,\n                tilt: this.tilt,\n                heading: this.heading,\n                zoom: this.zoomLevel\n            });\n        }\n\n        // The camera used to render the scene.\n        const camera = this.m_pointOfView !== undefined ? this.m_pointOfView : this.m_rteCamera;\n\n        if (this.renderLabels) {\n            this.prepareRenderTextElements(frameStartTime);\n        }\n\n        if (gatherStatistics) {\n            textPlacementTime = PerformanceTimer.now();\n        }\n        if (this.m_skyBackground !== undefined && this.projection.type === ProjectionType.Planar) {\n            this.m_skyBackground.updateCamera(this.m_camera);\n        }\n\n        this.mapRenderingManager.render(\n            this.m_renderer,\n            this.m_scene,\n            camera,\n            !this.isDynamicFrame\n        );\n\n        if (gatherStatistics) {\n            drawTime = PerformanceTimer.now();\n        }\n\n        if (this.renderLabels) {\n            this.finishRenderTextElements();\n        }\n\n        if (gatherStatistics) {\n            textDrawTime = PerformanceTimer.now();\n        }\n\n        if (!this.m_firstFrameRendered) {\n            this.m_firstFrameRendered = true;\n\n            if (gatherStatistics) {\n                stats.appResults.set(\"firstFrame\", frameStartTime);\n            }\n\n            FIRST_FRAME_EVENT.time = frameStartTime;\n            this.dispatchEvent(FIRST_FRAME_EVENT);\n        }\n\n        this.m_visibleTiles.disposePendingTiles();\n\n        this.m_drawing = false;\n\n        this.checkCopyrightUpdates();\n\n        if (currentFrameEvent !== undefined) {\n            endTime = PerformanceTimer.now();\n\n            const frameRenderTime = endTime - frameStartTime;\n\n            currentFrameEvent.setValue(\"render.setupTime\", setupTime! - frameStartTime);\n            currentFrameEvent.setValue(\"render.cullTime\", cullTime! - setupTime!);\n            currentFrameEvent.setValue(\"render.textPlacementTime\", textPlacementTime! - cullTime!);\n            currentFrameEvent.setValue(\"render.drawTime\", drawTime! - textPlacementTime!);\n            currentFrameEvent.setValue(\"render.textDrawTime\", textDrawTime! - drawTime!);\n            currentFrameEvent.setValue(\"render.cleanupTime\", endTime - textDrawTime!);\n            currentFrameEvent.setValue(\"render.frameRenderTime\", frameRenderTime);\n\n            // Initialize the fullFrameTime with the frameRenderTime If we also create geometry in\n            // this frame, this number will be increased in the TileGeometryLoader.\n            currentFrameEvent.setValue(\"render.fullFrameTime\", frameRenderTime);\n            currentFrameEvent.setValue(\"render.geometryCreationTime\", 0);\n\n            // Add THREE.js statistics\n            stats.addWebGLInfo(this.m_renderer.info);\n\n            // Add memory statistics\n            // FIXME:\n            // This will only measure the memory of the rendering and not of the geometry creation.\n            // Assuming the garbage collector is not kicking in immediately we will at least see\n            // the geometry creation memory consumption acounted in the next frame.\n            stats.addMemoryInfo();\n        }\n\n        DID_RENDER_EVENT.time = frameStartTime;\n        this.dispatchEvent(DID_RENDER_EVENT);\n\n        // After completely rendering this frame, it is checked if this frame was the first complete\n        // frame, with no more tiles, geometry and labels waiting to be added, and no animation\n        // running. The initial placement of text in this render call may have changed the loading\n        // state of the TextElementsRenderer, so this has to be checked again.\n        if (\n            !this.m_firstFrameComplete &&\n            this.m_initialTextPlacementDone &&\n            !this.isDynamicFrame &&\n            !this.textElementsRenderer.loading\n        ) {\n            this.m_firstFrameComplete = true;\n\n            if (gatherStatistics) {\n                stats.appResults.set(\"firstFrameComplete\", frameStartTime);\n            }\n\n            FRAME_COMPLETE_EVENT.time = frameStartTime;\n            this.dispatchEvent(FRAME_COMPLETE_EVENT);\n        }\n    }\n\n    private renderTileObjects(tile: Tile, zoomLevel: number) {\n        const worldOffsetX = tile.computeWorldOffsetX();\n        if (tile.willRender(zoomLevel)) {\n            for (const object of tile.objects) {\n                const mapObjectAdapter = MapObjectAdapter.get(object);\n                if (!this.processTileObject(tile, object, mapObjectAdapter)) {\n                    continue;\n                }\n                object.position.copy(tile.center);\n                if (object.displacement !== undefined) {\n                    object.position.add(object.displacement);\n                }\n                object.position.x += worldOffsetX;\n                object.position.sub(this.m_camera.position);\n                if (tile.localTangentSpace) {\n                    object.setRotationFromMatrix(tile.boundingBox.getRotationMatrix());\n                }\n                object.frustumCulled = false;\n                if (object._backupRenderOrder === undefined) {\n                    object._backupRenderOrder = object.renderOrder;\n                }\n\n                const isBuilding = mapObjectAdapter?.kind?.includes(GeometryKind.Building);\n\n                // When falling back to a parent tile (i.e. tile.levelOffset < 0) there will\n                // be overlaps with the already loaded tiles. Therefore all (flat) objects\n                // in a fallback tile must be shifted, such that their renderOrder is less\n                // than the groundPlane that each neighbouring Tile has (it has a renderOrder\n                // of -10000, see addGroundPlane in TileGeometryCreator), only then can we be\n                // sure that nothing of the parent will be rendered on top of the children,\n                // as such, we shift using the FALLBACK_RENDER_ORDER_OFFSET.\n                // This does not apply to buildings b/c they are 3d and the overlaps\n                // are resolved with a depth prepass. Note we set this always to ensure that if\n                // the Tile is used as a fallback, and then used normally, that we have the correct\n                // renderOrder.\n                object.renderOrder =\n                    object._backupRenderOrder +\n                    (!isBuilding && tile.levelOffset < 0\n                        ? FALLBACK_RENDER_ORDER_OFFSET * tile.levelOffset\n                        : 0);\n\n                this.m_mapTilesRoot.add(object);\n            }\n            tile.didRender();\n        }\n    }\n\n    /**\n     * Process dynamic updates of [[TileObject]]'s style.\n     *\n     * @returns `true` if object shall be used in scene, `false` otherwise\n     */\n    private processTileObject(tile: Tile, object: TileObject, mapObjectAdapter?: MapObjectAdapter) {\n        if (!object.visible) {\n            return false;\n        }\n        if (!this.processTileObjectFeatures(tile, object)) {\n            return false;\n        }\n\n        if (mapObjectAdapter) {\n            mapObjectAdapter.ensureUpdated(this);\n            if (!mapObjectAdapter.isVisible()) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Process the features owned by the given [[TileObject]].\n     *\n     * @param tile The [[Tile]] owning the [[TileObject]]'s features.\n     * @param object The [[TileObject]] to process.\n     * @returns `false` if the given [[TileObject]] should not be added to the scene.\n     */\n    private processTileObjectFeatures(tile: Tile, object: TileObject): boolean {\n        const technique: IndexedTechnique = object.userData.technique;\n\n        if (!technique || technique.enabled === undefined) {\n            // Nothing to do, there's no technique.\n            return true;\n        }\n\n        const feature: TileFeatureData = object.userData.feature;\n\n        if (!feature || !Expr.isExpr(technique.enabled)) {\n            return Boolean(getPropertyValue(technique.enabled, this.m_env));\n        }\n\n        const { starts, objInfos } = feature;\n\n        if (!Array.isArray(objInfos) || !Array.isArray(starts)) {\n            // Nothing to do, the object is missing feature ids and their position\n            // in the index buffer.\n            return true;\n        }\n\n        const geometry: THREE.BufferGeometry | undefined = (object as any).geometry;\n\n        if (!geometry || !geometry.isBufferGeometry) {\n            // Nothing to do, the geometry is not a [[THREE.BufferGeometry]]\n            // and we can't generate groups.\n            return true;\n        }\n\n        const index = geometry.getIndex()!;\n\n        // clear the groups.\n        geometry.clearGroups();\n\n        // The offset in the index buffer of the end of the last\n        // pushed group.\n        let endOfLastGroup: number | undefined;\n\n        objInfos.forEach((properties, featureIndex) => {\n            // the id of the current feature.\n            const featureId = getFeatureId(properties);\n\n            let enabled = true;\n\n            if (Expr.isExpr(technique.enabled)) {\n                // the state of current feature.\n                const featureState = tile.dataSource.getFeatureState(featureId);\n\n                // create a new [[Env]] that can be used\n                // to evaluate expressions that access the feature state.\n                const $state = featureState ? new MapEnv(featureState) : null;\n\n                const parentEnv =\n                    typeof properties === \"object\"\n                        ? new MapEnv(properties, this.m_env)\n                        : this.m_env;\n\n                const env = new MapEnv({ $state }, parentEnv);\n\n                enabled = Boolean(getPropertyValue(technique.enabled, env));\n            }\n\n            if (!enabled) {\n                // skip this feature, it was disabled.\n                return;\n            }\n\n            const start = starts[featureIndex];\n            const end = starts[featureIndex + 1] ?? index.count;\n            const count = end - start;\n\n            if (start === endOfLastGroup) {\n                // extend the last group\n                geometry.groups[geometry.groups.length - 1].count += count;\n            } else {\n                geometry.addGroup(start, count);\n            }\n\n            endOfLastGroup = start + count;\n        });\n\n        return geometry.groups.length > 0;\n    }\n\n    private prepareRenderTextElements(time: number) {\n        // Disable rendering of text elements for debug camera. TextElements are rendered using an\n        // orthographic camera that covers the entire available screen space. Unfortunately, this\n        // particular camera set up is not compatible with the debug camera.\n        const debugCameraActive = this.m_pointOfView !== undefined;\n\n        if (debugCameraActive) {\n            return;\n        }\n\n        this.m_textElementsRenderer.placeText(this.m_visibleTiles.dataSourceTileList, time);\n    }\n\n    private finishRenderTextElements() {\n        const canRenderTextElements = this.m_pointOfView === undefined;\n\n        if (canRenderTextElements) {\n            // copy far value from scene camera, as the distance to the POIs matter now.\n            this.m_screenCamera.far = this.m_viewRanges.maximum;\n            this.m_textElementsRenderer.renderText(this.m_screenCamera);\n        }\n    }\n\n    private initTheme() {\n        const theme = getOptionValue(this.m_options.theme, MapViewDefaults.theme);\n\n        this.m_themeIsLoading = true;\n        Promise.resolve<string | Theme>(theme)\n            // tslint:disable-next-line: no-shadowed-variable\n            .then(theme => ThemeLoader.load(theme, { uriResolver: this.m_uriResolver }))\n            // tslint:disable-next-line: no-shadowed-variable\n            .then(theme => {\n                this.m_themeIsLoading = false;\n                this.theme = theme;\n            })\n            .catch(error => {\n                this.m_themeIsLoading = false;\n                const themeName =\n                    typeof this.m_options.theme === \"string\" ? ` from ${this.m_options.theme}` : \"\";\n                logger.error(`Failed to load theme${themeName}: ${error}`, error);\n            });\n    }\n\n    private setupCamera() {\n        const { width, height } = this.getCanvasClientSize();\n\n        this.calculateFocalLength(height);\n        this.m_visibleTiles = this.createVisibleTileSet();\n\n        this.m_options.target = GeoCoordinates.fromObject(\n            getOptionValue(this.m_options.target, MapViewDefaults.target)\n        );\n        // ensure that look at target has height of 0\n        (this.m_options.target as GeoCoordinates).altitude = 0;\n        this.m_options.tilt = getOptionValue(this.m_options.tilt, MapViewDefaults.tilt);\n\n        this.m_options.heading = getOptionValue(this.m_options.heading, MapViewDefaults.heading);\n\n        this.m_options.zoomLevel = getOptionValue(\n            this.m_options.zoomLevel,\n            MapViewDefaults.zoomLevel\n        );\n\n        this.lookAtImpl(this.m_options);\n\n        // ### move & customize\n        this.resize(width, height);\n\n        this.m_screenCamera.position.z = 1;\n        this.m_screenCamera.near = 0;\n    }\n\n    private createVisibleTileSet(): VisibleTileSet {\n        const enableMixedLod =\n            this.m_enableMixedLod === undefined\n                ? this.projection.type === ProjectionType.Spherical\n                : this.m_enableMixedLod;\n\n        return new VisibleTileSet(\n            new FrustumIntersection(\n                this.m_camera,\n                this,\n                this.m_visibleTileSetOptions.extendedFrustumCulling,\n                this.m_tileWrappingEnabled,\n                enableMixedLod\n            ),\n            this.m_tileGeometryManager,\n            this.m_visibleTileSetOptions\n        );\n    }\n\n    private updateSkyBackground() {\n        if (this.m_theme === undefined) {\n            return;\n        }\n        const theme = this.m_theme;\n        if (this.m_skyBackground instanceof SkyBackground && theme.sky !== undefined) {\n            // there is a sky in the view and there is a sky option in the theme. Update the colors\n            this.updateSkyBackgroundColors(theme.sky, theme.clearColor);\n        } else if (this.m_skyBackground === undefined && theme.sky !== undefined) {\n            // there is no sky in the view but there is a sky option in the theme\n            this.addNewSkyBackground(theme.sky, theme.clearColor);\n            return;\n        } else if (this.m_skyBackground instanceof SkyBackground && theme.sky === undefined) {\n            // there is a sky in the view, but not in the theme\n            this.removeSkyBackGround();\n        }\n    }\n\n    private addNewSkyBackground(sky: Sky, clearColor: string | undefined) {\n        if (sky.type === \"gradient\" && (sky as GradientSky).groundColor === undefined) {\n            sky.groundColor = getOptionValue(clearColor, \"#000000\");\n        }\n        this.m_skyBackground = new SkyBackground(sky, this.projection.type, this.m_camera);\n        this.m_scene.background = this.m_skyBackground.texture;\n    }\n\n    private removeSkyBackGround() {\n        this.m_scene.background = null;\n        if (this.m_skyBackground !== undefined) {\n            this.m_skyBackground.dispose();\n            this.m_skyBackground = undefined;\n        }\n    }\n\n    private updateSkyBackgroundColors(sky: Sky, clearColor: string | undefined) {\n        if (sky.type === \"gradient\" && (sky as GradientSky).groundColor === undefined) {\n            sky.groundColor = getOptionValue(clearColor, \"#000000\");\n        }\n        if (this.m_skyBackground !== undefined) {\n            this.m_skyBackground.updateTexture(sky, this.projection.type);\n        }\n    }\n\n    private updateLighting() {\n        if (!this.m_theme) {\n            return;\n        }\n\n        const theme = this.m_theme as Theme;\n        if (theme.clearColor !== undefined) {\n            this.m_renderer.setClearColor(new THREE.Color(theme.clearColor));\n        }\n\n        if (this.m_createdLights) {\n            this.m_createdLights.forEach((light: THREE.Light) => {\n                this.m_scene.remove(light);\n            });\n        }\n        if (theme.lights !== undefined) {\n            this.m_createdLights = [];\n            theme.lights.forEach((lightDescription: Light) => {\n                const light = createLight(lightDescription);\n                if (!light) {\n                    logger.warn(\n                        // tslint:disable-next-line: max-line-length\n                        `MapView: failed to create light ${lightDescription.name} of type ${lightDescription.type}`\n                    );\n                    return;\n                }\n                this.m_scene.add(light);\n                if ((light as any).isDirectionalLight) {\n                    const directionalLight = light as THREE.DirectionalLight;\n                    // This is needed so that the target is updated automatically, see:\n                    // https://threejs.org/docs/#api/en/lights/DirectionalLight.target\n                    this.m_scene.add(directionalLight.target);\n                }\n                this.m_createdLights!.push(light);\n            });\n        }\n    }\n\n    private movementStarted() {\n        this.m_textElementsRenderer.movementStarted();\n\n        MOVEMENT_STARTED_EVENT.time = Date.now();\n        this.dispatchEvent(MOVEMENT_STARTED_EVENT);\n    }\n\n    private movementFinished() {\n        this.m_textElementsRenderer.movementFinished();\n\n        MOVEMENT_FINISHED_EVENT.time = Date.now();\n        this.dispatchEvent(MOVEMENT_FINISHED_EVENT);\n\n        // render at the next possible time.\n        if (!this.animating) {\n            if (this.m_movementFinishedUpdateTimerId !== undefined) {\n                clearTimeout(this.m_movementFinishedUpdateTimerId);\n            }\n            this.m_movementFinishedUpdateTimerId = setTimeout(() => {\n                this.m_movementFinishedUpdateTimerId = undefined;\n                this.update();\n            }, 0);\n        }\n    }\n\n    /**\n     * Check if the set of visible tiles changed since the last frame.\n     *\n     * May be called multiple times per frame.\n     *\n     * Equality is computed by creating a string containing the IDs of the tiles.\n     */\n    private checkIfTilesChanged() {\n        if (this.m_thisFrameTilesChanged !== undefined) {\n            return this.m_thisFrameTilesChanged;\n        }\n        const renderList = this.m_visibleTiles.dataSourceTileList;\n\n        const tileIdList: string[] = [];\n\n        tileIdList.length = 0;\n\n        renderList.forEach(({ dataSource, renderedTiles }) => {\n            renderedTiles.forEach(tile => {\n                tileIdList.push(dataSource.name + \"-\" + tile.tileKey.mortonCode());\n            });\n        });\n\n        tileIdList.sort();\n\n        const newTileIds = tileIdList.join(\"#\");\n\n        if (newTileIds !== this.m_lastTileIds) {\n            this.m_lastTileIds = newTileIds;\n            this.m_thisFrameTilesChanged = true;\n        } else {\n            this.m_thisFrameTilesChanged = false;\n        }\n\n        return this.m_thisFrameTilesChanged;\n    }\n\n    private checkCopyrightUpdates() {\n        if (!this.checkIfTilesChanged()) {\n            return;\n        }\n\n        const newCopyrightInfo = this.getRenderedTilesCopyrightInfo();\n        if (newCopyrightInfo === this.m_copyrightInfo) {\n            return;\n        }\n        if (newCopyrightInfo.length === this.m_copyrightInfo.length) {\n            let allEqual = true;\n            for (let i = 0; i < newCopyrightInfo.length; i++) {\n                const a = newCopyrightInfo[i];\n                const b = this.m_copyrightInfo[i];\n                if (a.label !== b.label) {\n                    allEqual = false;\n                    break;\n                }\n            }\n            if (allEqual) {\n                return;\n            }\n        }\n        this.m_copyrightInfo = newCopyrightInfo;\n        this.dispatchEvent(COPYRIGHT_CHANGED_EVENT);\n    }\n\n    private getRenderedTilesCopyrightInfo(): CopyrightInfo[] {\n        let result: CopyrightInfo[] = [];\n        for (const tileList of this.m_visibleTiles.dataSourceTileList) {\n            for (const tile of tileList.renderedTiles.values()) {\n                const tileCopyrightInfo = tile.copyrightInfo;\n                if (tileCopyrightInfo === undefined || tileCopyrightInfo.length === 0) {\n                    continue;\n                }\n                result = CopyrightInfo.mergeArrays(result, tileCopyrightInfo);\n            }\n        }\n        return result;\n    }\n\n    private updateImages() {\n        if (!this.m_theme) {\n            return;\n        }\n\n        const theme = this.m_theme as Theme;\n\n        this.m_imageCache.clear();\n        this.poiManager.clear();\n\n        if (theme.images !== undefined) {\n            for (const name of Object.keys(theme.images)) {\n                const image = theme.images[name];\n                this.m_imageCache.addImage(name, image.url, image.preload === true);\n                if (typeof image.atlas === \"string\") {\n                    this.poiManager.addTextureAtlas(name, image.atlas);\n                }\n            }\n        }\n\n        if (theme.imageTextures !== undefined) {\n            theme.imageTextures.forEach((imageTexture: ImageTexture) => {\n                this.poiManager.addImageTexture(imageTexture);\n            });\n        }\n    }\n\n    private loadPoiTables() {\n        if (this.m_theme === undefined) {\n            return;\n        }\n\n        this.poiTableManager.clear();\n\n        // Add the POI tables defined in the theme.\n        this.poiTableManager\n            .loadPoiTables(this.m_theme as Theme)\n            .then(() => this.update())\n            .catch(() => this.update());\n    }\n\n    private setupStats(enable: boolean) {\n        // tslint:disable-next-line:no-unused-expression\n        new PerformanceStatistics(enable, 1000);\n    }\n\n    private setupRenderer() {\n        this.m_renderer.setClearColor(DEFAULT_CLEAR_COLOR);\n\n        this.m_scene.add(this.m_mapTilesRoot);\n        this.m_scene.add(this.m_mapAnchors);\n        this.m_scene.add(this.m_worldAnchors);\n\n        this.shadowsEnabled = this.m_options.enableShadows ?? false;\n    }\n\n    private createTextRenderer(): TextElementsRenderer {\n        const updateCallback: ViewUpdateCallback = () => {\n            this.update();\n        };\n\n        return new TextElementsRenderer(\n            new MapViewState(this, this.checkIfTilesChanged.bind(this)),\n            this.m_camera,\n            updateCallback,\n            this.m_screenCollisions,\n            this.m_screenProjector,\n            new TextCanvasFactory(this.m_renderer),\n            this.m_poiManager,\n            new PoiRendererFactory(this),\n            new FontCatalogLoader(this.m_theme),\n            this.m_theme,\n            this.m_options\n        );\n    }\n\n    private resetTextRenderer(): void {\n        const overlayText = this.m_textElementsRenderer.overlayText;\n        this.m_textElementsRenderer = this.createTextRenderer();\n        if (overlayText !== undefined) {\n            this.m_textElementsRenderer.addOverlayText(overlayText);\n        }\n    }\n\n    /**\n     * Default handler for webglcontextlost event.\n     *\n     * Note: The renderer `this.m_renderer` may not be initialized when this function is called.\n     */\n    private onWebGLContextLost = (event: Event) => {\n        this.dispatchEvent(CONTEXT_LOST_EVENT);\n        logger.warn(\"WebGL context lost\", event);\n    };\n\n    /**\n     * Default handler for webglcontextrestored event.\n     *\n     * Note: The renderer `this.m_renderer` may not be initialized when this function is called.\n     */\n    private onWebGLContextRestored = (event: Event) => {\n        this.dispatchEvent(CONTEXT_RESTORED_EVENT);\n        if (this.m_renderer !== undefined) {\n            if (this.m_theme !== undefined && this.m_theme.clearColor !== undefined) {\n                this.m_renderer.setClearColor(new THREE.Color(this.m_theme.clearColor));\n            } else {\n                this.m_renderer.setClearColor(DEFAULT_CLEAR_COLOR);\n            }\n            this.update();\n        }\n        logger.warn(\"WebGL context restored\", event);\n    };\n\n    private limitFov(fov: number, aspect: number): number {\n        fov = THREE.MathUtils.clamp(fov, MIN_FIELD_OF_VIEW, MAX_FIELD_OF_VIEW);\n\n        let hFov = THREE.MathUtils.radToDeg(\n            MapViewUtils.calculateHorizontalFovByVerticalFov(THREE.MathUtils.degToRad(fov), aspect)\n        );\n\n        if (hFov > MAX_FIELD_OF_VIEW || hFov < MIN_FIELD_OF_VIEW) {\n            hFov = THREE.MathUtils.clamp(hFov, MIN_FIELD_OF_VIEW, MAX_FIELD_OF_VIEW);\n            fov = THREE.MathUtils.radToDeg(\n                MapViewUtils.calculateVerticalFovByHorizontalFov(\n                    THREE.MathUtils.degToRad(hFov),\n                    aspect\n                )\n            );\n        }\n        return fov as number;\n    }\n\n    /**\n     * Sets the field of view calculation, and applies it immediately to the camera.\n     *\n     * @param type How to calculate the FOV\n     */\n    private setFovOnCamera(fovCalculation: FovCalculation, height: number) {\n        let fov = 0;\n        if (fovCalculation.type === \"fixed\") {\n            this.calculateFocalLength(height);\n            fov = fovCalculation.fov;\n        } else {\n            assert(this.m_focalLength !== 0);\n            fov = MapViewUtils.calculateFovByFocalLength(this.m_focalLength, height);\n        }\n        this.m_camera.fov = this.limitFov(fov, this.m_camera.aspect);\n    }\n\n    /**\n     * Sets the focal length based on the supplied fov and the height of the canvas. This must be\n     * called at least once. This is necessary to be recalled when the [[FovCalculation]]'s type is\n     * fixed. In such cases, when the height changes, the focal length must be readjusted whereas\n     * the FOV stays the same. The opposite is true for the dynamic case, where the focal length is\n     * fixed but the FOV changes.\n     * @param height Height of the canvas in css / client pixels.\n     */\n    private calculateFocalLength(height: number) {\n        assert(this.m_options.fovCalculation !== undefined);\n        this.m_focalLength = MapViewUtils.calculateFocalLengthByVerticalFov(\n            THREE.MathUtils.degToRad(this.m_options.fovCalculation!.fov),\n            height\n        );\n    }\n\n    /**\n     * Get canvas client size in css/client pixels.\n     *\n     * Supports canvases not attached to DOM, which have 0 as `clientWidth` and `clientHeight` by\n     * calculating it from actual canvas size and current pixel ratio.\n     */\n    private getCanvasClientSize(): { width: number; height: number } {\n        const { clientWidth, clientHeight } = this.canvas;\n        if (\n            clientWidth === 0 ||\n            clientHeight === 0 ||\n            typeof clientWidth !== \"number\" ||\n            typeof clientHeight !== \"number\"\n        ) {\n            const pixelRatio = this.m_renderer.getPixelRatio();\n            return {\n                width: Math.round(this.canvas.width / pixelRatio),\n                height: Math.round(this.canvas.height / pixelRatio)\n            };\n        } else {\n            return { width: clientWidth, height: clientHeight };\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { MathUtils } from \"three\";\nimport { ColorUtils } from \"./ColorUtils\";\nimport { StringEncodedColorFormats } from \"./StringEncodedNumeral\";\n\n/**\n * A class representing RGBA colors.\n *\n * @hidden\n * @internal\n */\nexport class RGBA {\n    /**\n     * Parses a string describing a color.\n     *\n     * @param text The string color literal\n     */\n    static parse(text: string) {\n        const format = StringEncodedColorFormats.find(f => f.regExp.test(text));\n        if (format === undefined) {\n            return undefined;\n        }\n\n        const components = [1, 1, 1, 1];\n        format.decoder(text, components);\n        return new RGBA(...components);\n    }\n\n    /**\n     * Constructs a [[RGBA]] color using the given components in the [0..1] range.\n     */\n    constructor(\n        public r: number = 1,\n        public g: number = 1,\n        public b: number = 1,\n        public a: number = 1\n    ) {}\n\n    /**\n     * Clones this [[RGBA]] color.\n     */\n    clone() {\n        return new RGBA(this.r, this.g, this.b, this.a);\n    }\n\n    /**\n     * Returns this color encoded as one single number.\n     */\n    getHex() {\n        return ColorUtils.getHexFromRgba(this.r, this.g, this.b, this.a);\n    }\n\n    /**\n     * Linearly interpolate the components of this color.\n     */\n    lerp(target: RGBA, t: number) {\n        this.r = MathUtils.lerp(this.r, target.r, t);\n        this.g = MathUtils.lerp(this.g, target.g, t);\n        this.b = MathUtils.lerp(this.b, target.b, t);\n        this.a = MathUtils.lerp(this.a, target.a, t);\n        return this;\n    }\n\n    /**\n     * Returns this color encoded as JSON literal.\n     */\n    toJSON() {\n        // tslint:disable-next-line: no-bitwise\n        return `rgba(${(this.r * 255) << 0}, ${(this.g * 255) << 0}, ${(this.b * 255) << 0}, ${\n            this.a\n        })`;\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { assert } from \"@here/harp-utils\";\nimport { Color } from \"three\";\nimport { ColorUtils } from \"./ColorUtils\";\n\nconst tmpColor = new Color();\n\n/**\n * Enumeration of supported string encoded numerals.\n */\nexport enum StringEncodedNumeralType {\n    Meters,\n    Pixels,\n    Hex,\n    RGB,\n    RGBA,\n    HSL\n}\n\n/**\n * Interface containing information about a [[StringEncodedNumeral]] format, component size and\n * evaluation.\n */\nexport interface StringEncodedNumeralFormat {\n    readonly type: StringEncodedNumeralType;\n    readonly size: number;\n    readonly regExp: RegExp;\n    mask?: number;\n    decoder: (encodedValue: string, target: number[]) => boolean;\n}\nconst StringEncodedMeters: StringEncodedNumeralFormat = {\n    type: StringEncodedNumeralType.Meters,\n    size: 1,\n    regExp: /^((?=\\.\\d|\\d)(?:\\d+)?(?:\\.?\\d*))m$/,\n    decoder: (encodedValue: string, target: number[]) => {\n        const match = StringEncodedMeters.regExp.exec(encodedValue);\n        return match ? (target[0] = Number(match[1])) !== undefined : false;\n    }\n};\nconst StringEncodedPixels: StringEncodedNumeralFormat = {\n    type: StringEncodedNumeralType.Pixels,\n    size: 1,\n    mask: 1.0,\n    regExp: /^((?=\\.\\d|\\d)(?:\\d+)?(?:\\.?\\d*))px$/,\n    decoder: (encodedValue: string, target: number[]) => {\n        const match = StringEncodedPixels.regExp.exec(encodedValue);\n        if (match === null) {\n            return false;\n        }\n        target[0] = Number(match[1]);\n        return true;\n    }\n};\nconst StringEncodedHex: StringEncodedNumeralFormat = {\n    type: StringEncodedNumeralType.Hex,\n    size: 4,\n    regExp: /^\\#((?:[0-9A-Fa-f][0-9A-Fa-f]){3,4}|[0-9A-Fa-f]{3,4})$/,\n    decoder: (encodedValue: string, target: number[]) => {\n        const match = StringEncodedHex.regExp.exec(encodedValue);\n        if (match === null) {\n            return false;\n        }\n        const hex = match[1];\n        const size = hex.length;\n        // Only few sizes are possible for given reg-exp.\n        assert(\n            size === 3 || size === 4 || size === 6 || size === 8,\n            `Matched incorrect hex color format`\n        );\n        // Note that we simply ignore alpha channel value.\n        // TODO: To be resolved with HARP-7517\n        if (size === 3 || size === 4) {\n            // #RGB or #RGBA\n            target[0] = parseInt(hex.charAt(0) + hex.charAt(0), 16) / 255;\n            target[1] = parseInt(hex.charAt(1) + hex.charAt(1), 16) / 255;\n            target[2] = parseInt(hex.charAt(2) + hex.charAt(2), 16) / 255;\n            target[3] = size === 4 ? parseInt(hex.charAt(3) + hex.charAt(3), 16) / 255 : 1;\n        } else if (size === 6 || size === 8) {\n            // #RRGGBB or #RRGGBBAA\n            target[0] = parseInt(hex.charAt(0) + hex.charAt(1), 16) / 255;\n            target[1] = parseInt(hex.charAt(2) + hex.charAt(3), 16) / 255;\n            target[2] = parseInt(hex.charAt(4) + hex.charAt(5), 16) / 255;\n            target[3] = size === 8 ? parseInt(hex.charAt(6) + hex.charAt(7), 16) / 255 : 1;\n        }\n        return true;\n    }\n};\nconst StringEncodedRGB: StringEncodedNumeralFormat = {\n    type: StringEncodedNumeralType.RGB,\n    size: 3,\n    // tslint:disable-next-line:max-line-length\n    regExp: /^rgb\\( ?(?:([0-9]{1,2}|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]), ?)(?:([0-9]{1,2}|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]), ?)(?:([0-9]{1,2}|1[0-9]{1,2}|2[0-4][0-9]|25[0-5])) ?\\)$/,\n    decoder: (encodedValue: string, target: number[]) => {\n        const channels = StringEncodedRGB.regExp.exec(encodedValue);\n        if (channels === null) {\n            return false;\n        }\n        target[0] = parseInt(channels[1], 10) / 255;\n        target[1] = parseInt(channels[2], 10) / 255;\n        target[2] = parseInt(channels[3], 10) / 255;\n        return true;\n    }\n};\nconst StringEncodedRGBA: StringEncodedNumeralFormat = {\n    type: StringEncodedNumeralType.RGBA,\n    size: 4,\n    // tslint:disable-next-line:max-line-length\n    regExp: /^rgba\\( ?(?:([0-9]{1,2}|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]), ?)(?:([0-9]{1,2}|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]), ?)(?:([0-9]{1,2}|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]), ?)(?:(0?(?:\\.[0-9]+)?|1(?:\\.0+)?)) ?\\)$/,\n    decoder: (encodedValue: string, target: number[]) => {\n        const channels = StringEncodedRGBA.regExp.exec(encodedValue);\n        if (channels === null) {\n            return false;\n        }\n        target[0] = parseInt(channels[1], 10) / 255;\n        target[1] = parseInt(channels[2], 10) / 255;\n        target[2] = parseInt(channels[3], 10) / 255;\n        target[3] = parseFloat(channels[4]);\n        return true;\n    }\n};\nconst StringEncodedHSL: StringEncodedNumeralFormat = {\n    type: StringEncodedNumeralType.HSL,\n    size: 3,\n    // tslint:disable-next-line:max-line-length\n    regExp: /^hsl\\( ?((?:[0-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-9]{1,2}|3[0-5][0-9]|360)), ?(?:([0-9]|[1-9][0-9]|100)%), ?(?:([0-9]|[1-9][0-9]|100)%) ?\\)$/,\n    decoder: (encodedValue: string, target: number[]) => {\n        const channels = StringEncodedHSL.regExp.exec(encodedValue);\n        if (channels === null) {\n            return false;\n        }\n        tmpColor.setHSL(\n            parseInt(channels[1], 10) / 360,\n            parseInt(channels[2], 10) / 100,\n            parseInt(channels[3], 10) / 100\n        );\n        target[0] = tmpColor.r;\n        target[1] = tmpColor.g;\n        target[2] = tmpColor.b;\n        return true;\n    }\n};\n\n/**\n * Array of all supported [[StringEncodedNumeralFormat]]s describing sizes, lengths and distances.\n */\nexport const StringEncodedMetricFormats: StringEncodedNumeralFormat[] = [\n    StringEncodedMeters,\n    StringEncodedPixels\n];\n\nconst StringEncodedMetricFormatMaxSize = StringEncodedMetricFormats.reduce(\n    (a, b) => Math.max(a, b.size),\n    0\n);\n\n/**\n * Array of all supported [[StringEncodedNumeralFormat]]s describing color data.\n */\nexport const StringEncodedColorFormats: StringEncodedNumeralFormat[] = [\n    StringEncodedHex,\n    StringEncodedRGB,\n    StringEncodedRGBA,\n    StringEncodedHSL\n];\n\nconst StringEncodedColorFormatMaxSize = StringEncodedColorFormats.reduce(\n    (a, b) => Math.max(a, b.size),\n    0\n);\n\n/**\n * Array of supported [[StringEncodedNumeralFormat]]s (intended to be indexed with\n * [[StringEncodedNumeralType]] enum).\n */\nexport const StringEncodedNumeralFormats: StringEncodedNumeralFormat[] = [\n    ...StringEncodedMetricFormats,\n    ...StringEncodedColorFormats\n];\n\nexport const StringEncodedNumeralFormatMaxSize = Math.max(\n    StringEncodedColorFormatMaxSize,\n    StringEncodedMetricFormatMaxSize\n);\n\nconst tmpBuffer: number[] = new Array(StringEncodedNumeralFormatMaxSize);\n\n/**\n * Parse string encoded numeral values using all known [[StringEncodedNumeralFormats]].\n *\n * @param numeral The string representing numeric value.\n * @param pixelToMeters The ratio used to convert from meters to pixels (default 1.0).\n * @returns Number parsed or __undefined__ if non of the numeral patterns matches the expression\n * provided in [[numeral]].\n */\nexport function parseStringEncodedNumeral(\n    numeral: string,\n    pixelToMeters: number = 1.0\n): number | undefined {\n    let result: number | undefined;\n    const formatMatch = (format: StringEncodedNumeralFormat) => {\n        if (format.decoder(numeral, tmpBuffer)) {\n            switch (format.type) {\n                case StringEncodedNumeralType.Meters:\n                    result = tmpBuffer[0];\n                    break;\n                case StringEncodedNumeralType.Pixels:\n                    result = tmpBuffer[0] * pixelToMeters;\n                    break;\n                case StringEncodedNumeralType.Hex:\n                case StringEncodedNumeralType.RGBA:\n                    result = ColorUtils.getHexFromRgba(\n                        tmpBuffer[0],\n                        tmpBuffer[1],\n                        tmpBuffer[2],\n                        tmpBuffer[3]\n                    );\n                    break;\n                case StringEncodedNumeralType.RGB:\n                case StringEncodedNumeralType.HSL:\n                    result = ColorUtils.getHexFromRgb(tmpBuffer[0], tmpBuffer[1], tmpBuffer[2]);\n                    break;\n                default:\n                    result = tmpBuffer[0];\n                    break;\n            }\n            return true;\n        }\n        return false;\n    };\n    StringEncodedNumeralFormats.some(formatMatch);\n    return result;\n}\n\n/**\n * Parse string encoded color value using all known [[StringEncodedColorFormats]].\n *\n * @param color The string encoded color expression (i.e. '#FFF', 'rgb(255, 0, 0)', etc.).\n * @returns The color parsed or __undefined__ if non of the known representations matches\n * the expression provided in [[color]].\n */\nexport function parseStringEncodedColor(color: string): number | undefined {\n    const matchedFormat = matchFormat(StringEncodedColorFormats, color, tmpBuffer);\n    if (matchedFormat === undefined) {\n        return undefined;\n    }\n    switch (matchedFormat.type) {\n        case StringEncodedNumeralType.Hex:\n        case StringEncodedNumeralType.RGBA:\n            return ColorUtils.getHexFromRgba(\n                tmpBuffer[0],\n                tmpBuffer[1],\n                tmpBuffer[2],\n                tmpBuffer[3]\n            );\n        case StringEncodedNumeralType.RGB:\n        case StringEncodedNumeralType.HSL:\n            return ColorUtils.getHexFromRgb(tmpBuffer[0], tmpBuffer[1], tmpBuffer[2]);\n        default:\n            return tmpBuffer[0];\n    }\n}\n\nfunction matchFormat(\n    formats: StringEncodedNumeralFormat[],\n    numeral: string,\n    result: number[]\n): StringEncodedNumeralFormat | undefined {\n    return formats.find(format => {\n        return format.decoder(numeral, result) ? true : false;\n    });\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @hidden\n */\nexport type Value = null | boolean | number | string | object;\n\n/**\n * @hidden\n */\nexport interface ValueMap {\n    [name: string]: Value;\n}\n\n/**\n * @hidden\n */\nexport class Env {\n    /**\n     * Returns `true` if the given object is an instance of [[Env]].\n     *\n     * @param object The object to test.\n     */\n    static isEnv(object: any): object is Env {\n        return object instanceof Env;\n    }\n\n    /**\n     * Returns property in [[Env]] by name.\n     *\n     * @param name Name of property.\n     */\n    lookup(_name: string): Value | undefined {\n        return undefined;\n    }\n    /**\n     * Return an object containing all properties of this environment. (Here: empty object).\n     */\n    unmap(): ValueMap {\n        return {};\n    }\n}\n\n/**\n * Adds access to map specific environment properties.\n */\nexport class MapEnv extends Env {\n    constructor(readonly entries: ValueMap, private readonly parent?: Env) {\n        super();\n    }\n    /**\n     * Returns property in [[Env]] by name.\n     *\n     * @param name Name of property.\n     * @override\n     */\n    lookup(name: string): Value | undefined {\n        if (this.entries.hasOwnProperty(name)) {\n            const value = this.entries[name];\n            if (value !== undefined) {\n                return value;\n            }\n        }\n        return this.parent ? this.parent.lookup(name) : undefined;\n    }\n    /**\n     * Return an object containing all properties of this environment, takes care of the parent\n     * object.\n     * @override\n     */\n    unmap(): ValueMap {\n        const obj: any = this.parent ? this.parent.unmap() : {};\n        for (const key in this.entries) {\n            if (this.entries.hasOwnProperty(key)) {\n                obj[key] = this.entries[key];\n            }\n        }\n        return obj;\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { JsonExpr } from \"./Expr\";\n\n/**\n * Interpolation mode used when computing a [[InterpolatedProperty]] value for a given zoom level.\n */\nexport enum InterpolationMode {\n    Discrete,\n    Linear,\n    Cubic,\n    Exponential\n}\n\n/**\n * Interpolated property could have its value (some initial value should be provided) changed\n * according to an interpolation type.\n *\n * Here is an example of an interpolated property from a map style:\n * \"lineWidth\": {\n *  \"interpolation\": \"Linear\",\n *  \"zoomLevels\": [13, 14, 15],\n *  \"values\": [ 1.5, 1.2, 0.9]\n * }\n */\nexport interface InterpolatedPropertyDefinition<T> {\n    interpolation?: \"Discrete\" | \"Linear\" | \"Cubic\" | \"Exponential\";\n    zoomLevels: number[];\n    values: T[];\n    exponent?: number;\n}\n\n/**\n * Checks if a property is interpolated.\n * @param p property to be checked\n */\nexport function isInterpolatedPropertyDefinition<T>(\n    p: any\n): p is InterpolatedPropertyDefinition<T> {\n    if (\n        p &&\n        p.interpolationMode === undefined &&\n        Array.isArray(p.values) &&\n        p.values.length > 0 &&\n        p.values[0] !== undefined &&\n        Array.isArray(p.zoomLevels) &&\n        p.zoomLevels.length > 0 &&\n        p.zoomLevels[0] !== undefined &&\n        p.values.length === p.zoomLevels.length\n    ) {\n        return true;\n    }\n    return false;\n}\n\n/**\n * Converts an [[InterpolatedPropertyDefinition]] to a [[JsonExpr]].\n *\n * @param property A valid [[InterpolatedPropertyDefinition]]\n */\nexport function interpolatedPropertyDefinitionToJsonExpr(\n    property: InterpolatedPropertyDefinition<any>\n): JsonExpr {\n    if (property.interpolation === undefined || property.interpolation === \"Discrete\") {\n        const step: JsonExpr = [\"step\", [\"zoom\"], property.values[0]];\n        for (let i = 1; i < property.zoomLevels.length; ++i) {\n            step.push(property.zoomLevels[i], property.values[i]);\n        }\n        return step;\n    }\n    const interpolation: JsonExpr = [\"interpolate\"];\n    switch (property.interpolation) {\n        case \"Linear\":\n            interpolation.push([\"linear\"]);\n            break;\n        case \"Cubic\":\n            interpolation.push([\"cubic\"]);\n            break;\n        case \"Exponential\":\n            interpolation.push([\n                \"exponential\",\n                property.exponent !== undefined ? property.exponent : 2\n            ]);\n            break;\n        default:\n            throw new Error(`interpolation mode '${property.interpolation}' is not supported`);\n    } //switch\n    interpolation.push([\"zoom\"]);\n    for (let i = 0; i < property.zoomLevels.length; ++i) {\n        interpolation.push(property.zoomLevels[i], property.values[i]);\n    }\n    return interpolation;\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Vector3Like } from \"@here/harp-geoutils/lib/math/Vector3Like\";\nimport { isJsonExpr, JsonExpr } from \"./Expr\";\nimport { isInterpolatedPropertyDefinition } from \"./InterpolatedPropertyDefs\";\nimport {\n    BaseTechniqueParams,\n    BasicExtrudedLineTechniqueParams,\n    DynamicProperty,\n    ExtrudedPolygonTechniqueParams,\n    FillTechniqueParams,\n    LineTechniqueParams,\n    MarkerTechniqueParams,\n    PointTechniqueParams,\n    SegmentsTechniqueParams,\n    ShaderTechniqueParams,\n    SolidLineTechniqueParams,\n    StandardExtrudedLineTechniqueParams,\n    StandardTechniqueParams,\n    TerrainTechniqueParams,\n    TextTechniqueParams\n} from \"./TechniqueParams\";\n\n/**\n * Map theme is used to define what features are shown and how the map is styled, for example\n * which lightning is used or whether fog should be displayed.\n */\nexport interface Theme {\n    /**\n     * The URI of the JSON schema describing themes.\n     */\n    $schema?: string;\n\n    /**\n     * The base `Theme`s or `theme` URLs to extend.\n     *\n     * If used, base themes are loaded first, and then all the properties from inherited theme\n     * overwrite these defined in base theme.\n     */\n\n    extends?: string | Theme | Array<string | Theme>;\n\n    //\n    // TODO: We support also [[FlatTheme]], but it's not exposed here since ts-json-schema-generator\n    // fails with too complex typing.\n    // See: https://github.com/vega/ts-json-schema-generator/issues/192\n    // Typing should look like this:\n    // extends?: string | Theme | FlatTheme| Array<string | Theme | FlatTheme>;\n    //\n\n    /**\n     * Actual URL the theme has been loaded from.\n     */\n    url?: string;\n\n    /**\n     * Color to be used as a clear background - no map objects.\n     * @format color-hex\n     */\n    clearColor?: string;\n\n    /**\n     * Alpha to be used as a clear background - no map objects.\n     * @format 0-1\n     */\n    clearAlpha?: number;\n\n    /**\n     * Define the default text style for styling labels and texts.\n     */\n    defaultTextStyle?: TextStyleDefinition;\n\n    /**\n     * Define the lightning available on the three.js scene.\n     */\n    lights?: Light[];\n\n    /**\n     * Define the style of the sky presented in the map scene.\n     */\n    sky?: Sky;\n\n    /**\n     * Define the fog used in the map scene.\n     */\n    fog?: Fog;\n\n    /**\n     * The definitions exported by these theme.\n     */\n    definitions?: Definitions;\n\n    /**\n     * Map styles available for datasources used to render the map.\n     */\n    styles?: Styles;\n\n    /**\n     * Define the style to render different types of text used on the map.\n     */\n    textStyles?: TextStyleDefinition[];\n\n    /**\n     * List available fonts to be used while rendering text.\n     */\n    fontCatalogs?: FontCatalogConfig[];\n\n    /**\n     * Optional images to be rendered on the map view.\n     */\n    images?: ImageDefinitions;\n\n    /**\n     * Image textures to be used while rendering geometries on the map view.\n     */\n    imageTextures?: ImageTexture[];\n\n    /**\n     * Optional list of [[ThemePoiTableDef]]s.\n     */\n    poiTables?: PoiTableRef[];\n\n    /**\n     * Optional list of symbolic priorities for the object\n     * created using this [[Theme]].\n     *\n     * The attribute `styleSet` and `category` of the [[Technique]]\n     * are used together with [[Theme.priorities]] to sort\n     * the objects created using this [[Theme]], for example:\n     *\n     * ```json\n     * {\n     *      \"priorities\": [\n     *          { \"group\": \"tilezen\", \"category\": \"outline-1\" }\n     *      ],\n     *      \"styles\": [\n     *          {\n     *              \"technique\": \"solid-line\",\n     *              \"styleSet\": \"tilezen\",\n     *              \"category\": \"outline-1\"\n     *          }\n     *      ]\n     * }\n     * ```\n     */\n    priorities?: StylePriority[];\n\n    /**\n     * Optional list of priorities for the screen-space\n     * objects created using this style.\n     *\n     * The name of the `category` attribute of the screen-space\n     * technique (e.g. `\"text\"`) must match on the strings\n     * defined by this [[Theme.labelPriorities]], for example:\n     *\n     * ```json\n     * {\n     *      \"labelPriorities\": [\n     *          \"continent-labels\",\n     *          \"country-labels\",\n     *          \"state-labels\"\n     *      ],\n     *      \"styles\": [\n     *          {\n     *              \"technique\": \"text\",\n     *              \"category\": \"state-labels\"\n     *          }\n     *      ]\n     * }\n     * ```\n     */\n    labelPriorities?: string[];\n}\n\n/**\n * A type representing symbolic render orders.\n */\nexport interface StylePriority {\n    /**\n     * The group of this [[StylePriority]].\n     */\n    group: string;\n\n    /**\n     * The category of this [[StylePriority]].\n     */\n    category?: string;\n}\n\n/**\n * A type representing HARP themes with all the styleset declarations\n * grouped in one [[Array]].\n *\n * @internal This type will merge with [[Theme]].\n */\nexport type FlatTheme = Omit<Theme, \"styles\"> & {\n    /**\n     * The style rules used to render the map.\n     */\n    styles?: StyleSet;\n};\n\n/**\n * Checks if the given definition implements the [[BoxedDefinition]] interface.\n */\nexport function isBoxedDefinition(def: Definition): def is BoxedDefinition {\n    const bdef = def as BoxedDefinition;\n    return (\n        typeof bdef === \"object\" &&\n        bdef !== null &&\n        (typeof bdef.type === \"string\" || typeof bdef.type === \"undefined\") &&\n        (typeof bdef.value === \"string\" ||\n            typeof bdef.value === \"number\" ||\n            typeof bdef.value === \"boolean\" ||\n            isInterpolatedPropertyDefinition(bdef.value) ||\n            isJsonExpr(bdef.value))\n    );\n}\n\nexport function isLiteralDefinition(def: Definition): def is LiteralValue {\n    return typeof def === \"string\" || typeof def === \"number\" || typeof def === \"boolean\";\n}\n\n/**\n * Value definition commons.\n */\nexport interface BaseValueDefinition {\n    /**\n     * The type of the definition.\n     */\n    type?: string;\n\n    /**\n     * The description of the definition.\n     */\n    description?: string;\n}\n\n/**\n * Possible types of unboxed literal values carried by [[Definition]].\n */\nexport type LiteralValue = string | number | boolean;\n\n/**\n * Boxed definition without type.\n */\nexport interface BoxedAnyDefinition extends BaseValueDefinition {\n    /**\n     * The value of the definition.\n     */\n    value: LiteralValue | JsonExpr;\n}\n\n/**\n * A boxed boolean value definition.\n */\nexport interface BoxedBooleanDefinition extends BaseValueDefinition {\n    /**\n     * The type of the definition.\n     */\n    type: \"boolean\";\n\n    /**\n     * The value of the definition.\n     */\n    value: DynamicProperty<boolean>;\n}\n\n/**\n * A boxed numerical value definition.\n */\nexport interface BoxedNumericDefinition extends BaseValueDefinition {\n    /**\n     * The type of the definition.\n     */\n    type: \"number\";\n\n    /**\n     * The value of the definition.\n     */\n    value: DynamicProperty<number>;\n}\n\n/**\n * A boxed string value definition.\n */\nexport interface BoxedStringDefinition extends BaseValueDefinition {\n    /**\n     * The type of the definition.\n     */\n    type: \"string\";\n\n    /**\n     * The value of the definition.\n     */\n    value: DynamicProperty<string>;\n}\n\n/**\n * A boxed color value definition.\n */\nexport interface BoxedColorDefinition extends BaseValueDefinition {\n    /**\n     * The type of the definition.\n     */\n    type: \"color\";\n\n    /**\n     * The value of the definition.\n     */\n    value: DynamicProperty<string>;\n}\n\n/**\n * A boxed selector value definition.\n */\nexport interface BoxedSelectorDefinition extends BaseValueDefinition {\n    /**\n     * The type of the definition.\n     */\n    type: \"selector\";\n\n    /**\n     * The value of the definition.\n     *\n     * See [[BaseStyle.when]].\n     */\n    value: string | JsonExpr;\n}\n\n/**\n * A boxed value definition.\n */\nexport type BoxedDefinition =\n    | BoxedAnyDefinition\n    | BoxedBooleanDefinition\n    | BoxedNumericDefinition\n    | BoxedStringDefinition\n    | BoxedColorDefinition\n    | BoxedSelectorDefinition;\n\n/**\n * Possible values for `definitions` element of [Theme].\n */\nexport type Definition = LiteralValue | JsonExpr | BoxedDefinition | StyleDeclaration;\n\n/**\n * An array of [[Definition]]s.\n */\nexport interface Definitions {\n    [name: string]: Definition;\n}\n\n/**\n * Base [StyleSelector] attributes required to match [Style] object against given feature.\n *\n * Contains [Style]'s members related to feature matching in [[StyleSetEvaluator]].\n */\nexport interface StyleSelector {\n    /**\n     * Condition that is applied to feature properties to check if given [[Style]] this feature\n     * should emit geometry of this style.\n     *\n     * Conditions are defined using [[Array]]s describing literals, built-in symbols and function\n     * calls:\n     *  - `[\"has\", string]` returns `true` if the given property exists.\n     *  - `[\"get\", string]` returns the value of the given feature property with the given name.\n     *  - `[\"all\", expressions...]` returns `true` if all the sub expressions evaluate to true.\n     *  - `[\"any\", expressions...]` returns `true` if any sub expression evaluates to true.\n     *  - `[\"in\", expression, [literals...]]` returns `true` if the result of evaluating the first\n     *    expression is included in the given `Array` of literals.\n     *  - `[\"!\", expression]` returns `false` if the sub expression evaluates to `true`.\n     *  - `[\"<\", expression, expression]` returns `true` if the result of evaluating the first\n     *    expression is less than the result of evaluating the second expression.\n     *  - `[\">\", expression, expression]` returns `true` if the result of evaluating the first\n     *    expression is greater than the result of evaluating the second expression.\n     *  - `[\"<=\", expression, expression]` returns `true` if the result of evaluating the first\n     *    expression is less than or equal the result of evaluating the second expression.\n     *  - `[\">=\", expression, expression]` returns `true` if the result of evaluating the first\n     *    expression is greater than or equal the result of evaluating the second expression.\n     *  - `[\"==\", expression, expression]` returns `true` if the result of evaluating the first\n     *    expression is equal the result of evaluating the second expression.\n     *  - `[\"!=\", expression, expression]` returns `true` if the result of evaluating the first\n     *    expression is not equal to the result of evaluating the second expression.\n     *  - `[\"length\", expression]` returns the length of the given expression if it evaluates to\n     *    a `string` or an `Array`; otherwise, returns `undefined`.\n     *  - `[\"~=\", expression, expression]` if the expressions evaluate to `string`, returns `true`\n     *    if the `string` obtained from the first expression contains the `string` obtained from the\n     *    second expression; otherwise, returns `undefined`.\n     *  - `[\"^=\", expression, expression]` if the expressions evaluate to `string`, returns `true`\n     *    if the `string` obtained from the first expression starts with the `string` obtained from\n     *    the second expression; otherwise, returns `undefined`.\n     *  - `[\"$=\", expression, expression]` if the expressions evaluate to `string`, returns `true`\n     *    if the `string` obtained from the first expression ends with the `string` obtained from\n     *    the second expression; otherwise, returns `undefined`.\n     */\n    when: string | JsonExpr;\n\n    /**\n     * The layer containing the carto features processed by this style rule.\n     */\n    layer?: string;\n\n    /**\n     * Optional. If `true`, no more matching styles will be evaluated.\n     */\n    final?: boolean;\n}\n\nexport type JsonExprReference = [\"ref\", string];\n\n/**\n * Checks if the given value is a reference to a definition.\n *\n * @param value The value of a technique property.\n */\nexport function isJsonExprReference(value: any): value is JsonExprReference {\n    return (\n        Array.isArray(value) &&\n        value.length === 2 &&\n        value[0] === \"ref\" &&\n        typeof value[1] === \"string\"\n    );\n}\n\n/**\n * Like [[StyleDeclaration]], but without [[Reference]] type.\n */\nexport type ResolvedStyleDeclaration = Style & StyleSelector;\n\n/**\n * Like [[StyleSet]], but without [[Reference]] type.\n */\nexport type ResolvedStyleSet = ResolvedStyleDeclaration[];\n\n/**\n * Compound type that merges all raw [Style] with selector arguments from [BaseSelector], optionally\n * a [[Reference]].\n */\nexport type StyleDeclaration = (Style & StyleSelector) | JsonExpr;\n\nexport function isActualSelectorDefinition(def: Definition): def is Style & StyleSelector {\n    const styleDef = def as StyleDeclaration;\n    return (\n        typeof styleDef === \"object\" &&\n        styleDef !== null &&\n        !Array.isArray(styleDef) &&\n        typeof styleDef.technique === \"string\"\n    );\n}\n\n/**\n * An array of [[StyleSelector]]s that are used together to define how a [[DataSource]] should be\n * rendered. `StyleSet`s are applied to sources providing vector tiles via their method\n * `setStyleSet`. This is also handle internally when a whole theme is passed to a [[MapView]] via\n * `mapview.theme`.\n */\nexport type StyleSet = StyleDeclaration[];\n\n/**\n * The object that defines what way an item of a [[DataSource]] should be decoded to assemble a\n * tile. [[Style]] is describing which features are shown on a map and in what way they are being\n * shown.\n */\nexport type BaseStyle<Technique, Params> = Partial<Params> & {\n    /**\n     * Human readable description.\n     */\n    description?: string;\n\n    /**\n     * The style set referenced by this styling rule.\n     */\n    styleSet?: string;\n\n    /**\n     * The category of this style.\n     */\n    category?: string | JsonExpr;\n\n    /**\n     * Technique name. See the classes extending from this class to determine what possible\n     * techniques are possible, includes `\"line\"`, `\"fill\"`, `\"solid-line\"`, `\"extruded-line\"`,\n     * `\"extruded-polygon\"`, `\"text\"`, `\"none\"`.\n     */\n    technique: Technique;\n\n    /**\n     * Specify `renderOrder` of value.\n     *\n     * @default If not specified in style file, `renderOrder` will be assigned with monotonically\n     * increasing values according to style position in file.\n     */\n    renderOrder?: number | JsonExpr;\n\n    /**\n     * Minimal zoom level. If the current zoom level is smaller, the technique will not be used.\n     */\n    minZoomLevel?: number | JsonExpr;\n\n    /**\n     * Maximum zoom level. If the current zoom level is larger, the technique will not be used.\n     */\n    maxZoomLevel?: number | JsonExpr;\n\n    /**\n     * Optional. If `true`, no IDs will be saved for the geometry this style creates. Default is\n     * `false`.\n     */\n    transient?: boolean;\n\n    /**\n     * Optional: If `true`, the objects with matching `when` statement will be printed to the\n     * console.\n     */\n    debug?: boolean;\n\n    // TODO: Make pixel units default.\n    /**\n     * Units in which different size properties are specified. Either `Meter` (default) or `Pixel`.\n     *\n     * @deprecated use \"string encoded numerals\" as documented in TODO, wher eis the doc ?\n     */\n    metricUnit?: \"Meter\" | \"Pixel\";\n\n    /**\n     * XYZ defines the property to display as text label of a feature in the styles.\n     */\n    labelProperty?: string;\n\n    attr?: Partial<Params>;\n};\n\n/**\n *\n * @defaultSnippets [\n *     {\n *         \"label\": \"New solid-line\",\n *         \"description\": \"Add a new 'solid-line' Styling Rule\",\n *         \"body\": {\n *             \"technique\": \"solid-line\",\n *             \"when\": \"$1\",\n *             \"attr\": {\n *                 \"color\": \"#${2:fff}\",\n *                 \"lineWidth\": \"^${3:1}\",\n *                 \"secondaryColor\": \"#$4ddd\",\n *                 \"secondaryWidth\": \"^${5:2}\"\n *             }\n *         }\n *     },\n *     {\n *         \"label\": \"New dashed-line\",\n *         \"description\": \"Add a new 'dashed-line' Styling Rule\",\n *         \"body\": {\n *             \"technique\": \"solid-line\",\n *             \"when\": \"$1\",\n *             \"attr\": {\n *                 \"color\": \"#${2:fff}\",\n *                 \"lineWidth\": \"^${3:1}\",\n *                 \"gapSize\": \"^${4:10}\",\n *                 \"dashSize\": \"^${5:10}\"\n *             }\n *         }\n *     },\n *     {\n *         \"label\": \"New fill\",\n *         \"description\": \"Add a new 'fill' Styling Rule\",\n *         \"body\": {\n *             \"technique\": \"fill\",\n *             \"when\": \"$1\",\n *             \"attr\": {\n *                 \"color\": \"#${2:fff}\",\n *                 \"lineWidth\": \"^${3:0}\"\n *             }\n *         }\n *     },\n *     {\n *         \"label\": \"New text\",\n *         \"description\": \"Add a new 'text' Styling Rule\",\n *         \"body\": {\n *             \"technique\": \"text\",\n *             \"when\": \"$1\",\n *             \"attr\": {\n *                 \"size\": \"^${2:24}\",\n *                 \"color\": \"#${3:fff}\"\n *             }\n *         }\n *     },\n *     {\n *         \"label\": \"New labeled-icon\",\n *         \"description\": \"Add a new 'labeled-icon' marker styling\",\n *         \"body\": {\n *             \"technique\": \"labeled-icon\",\n *             \"when\": \"$1\",\n *             \"attr\": {\n *                 \"size\": \"^${2:24}\",\n *                 \"color\": \"#${3:fff}\",\n *                 \"backgroundSize\": \"^${4:32}\",\n *                 \"backgroundColor\": \"#${5:aaa}\"\n *             }\n *         }\n *     },\n *     {\n *         \"label\": \"New line-marker\",\n *         \"description\": \"Add a new 'line-marker' marker styling\",\n *         \"body\": {\n *             \"technique\": \"line-marker\",\n *             \"when\": \"$1\",\n *             \"attr\": {\n *                 \"size\": \"^${2:24}\",\n *                 \"color\": \"#${3:fff}\",\n *                 \"backgroundSize\": \"^${4:32}\",\n *                 \"backgroundColor\": \"#${5:aaa}\"\n *             }\n *         }\n *     },\n *     {\n *         \"label\": \"New line\",\n *         \"description\": \"Add a new 'line' Styling Rule\",\n *         \"body\": {\n *             \"technique\": \"line\",\n *             \"when\": \"$1\",\n *             \"attr\": {\n *                 \"color\": \"#${2:fff}\",\n *                 \"lineWidth\": \"^${3:1}\"\n *             }\n *         }\n *     },\n *     {\n *         \"label\": \"New segments\",\n *         \"description\": \"Add a new 'segments' Styling Rule\",\n *         \"body\": {\n *             \"technique\": \"segments\",\n *             \"when\": \"$1\",\n *             \"attr\": {\n *                 \"color\": \"#${2:fff}\",\n *                 \"lineWidth\": \"^${3:1}\"\n *             }\n *         }\n *     },\n *     {\n *         \"label\": \"New standard\",\n *         \"description\": \"Add a new 'standard' Styling Rule\",\n *         \"body\": {\n *             \"technique\": \"standard\",\n *             \"when\": \"$1\",\n *             \"attr\": {\n *                 \"color\": \"#${2:fff}\",\n *                 \"roughness\": \"^${3:0.5}\",\n *                 \"metalness\": \"^${4:0.5}\",\n *                 \"emissive\": \"#${5:c44}\",\n *                 \"emissiveIntensity\": \"^${6:0.8}\"\n *             }\n *         }\n *     },\n *     {\n *         \"label\": \"New extruded-line\",\n *         \"description\": \"Add a new 'extruded-line' Styling Rule\",\n *         \"body\": {\n *             \"technique\": \"extruded-line\",\n *             \"when\": \"$1\",\n *             \"attr\": {\n *                 \"shading\": \"${2:standard}\",\n *                 \"color\": \"#${3:fff}\",\n *                 \"lineWidth\": \"^${4:1}\",\n *                 \"caps\": \"${5:Circle}\"\n *             }\n *         }\n *     },\n *     {\n *         \"label\": \"New extruded-polygon\",\n *         \"description\": \"Add a new 'extruded-polygon' Styling Rule\",\n *         \"body\": {\n *             \"technique\": \"extruded-polygon\",\n *             \"when\": \"$1\",\n *             \"attr\": {\n *                 \"color\": \"#${2:fff}\",\n *                 \"roughness\": \"^${3:0.5}\",\n *                 \"metalness\": \"^${4:0.5}\",\n *                 \"emissive\": \"#${5:c44}\",\n *                 \"emissiveIntensity\": \"^${6:0.8}\",\n *                 \"lineWidth\": \"^${7:1}\",\n *                 \"lineColor\": \"#${8:c0f}\",\n *                 \"defaultHeight\": \"^${9:20}\",\n *                 \"animateExtrusion\": \"^${10:true}\",\n *                 \"animateExtrusionDuration\": \"^${11:300}\"\n *             }\n *         }\n *     },\n *     {\n *         \"label\": \"New none\",\n *         \"description\": \"Add a new 'none' Styling Rule\",\n *         \"body\": {\n *             \"technique\": \"none\",\n *             \"when\": \"$1\",\n *             \"attr\": {}\n *         }\n *     },\n *     {\n *         \"label\": \"New shader\",\n *         \"description\": \"Add a new 'shader' Styling Rule\",\n *         \"body\": {\n *             \"technique\": \"shader\",\n *             \"when\": \"$1\",\n *             \"attr\": {\n *                 \"primitive\": \"${2:mesh}\",\n *                 \"params\": {}\n *             }\n *         }\n *     },\n *     {\n *         \"label\": \"New squares\",\n *         \"description\": \"Add a new 'squares' point styling\",\n *         \"body\": {\n *             \"technique\": \"squares\",\n *             \"when\": \"$1\",\n *             \"attr\": {\n *                 \"color\": \"#${2:fff}\",\n *                 \"size\": \"^${3:32}\",\n *                 \"texture\": \"${4:url}\",\n *                 \"enablePicking\": \"^${5:true}\"\n *             }\n *         }\n *     },\n *     {\n *         \"label\": \"New circles\",\n *         \"description\": \"Add a new 'circles' point styling\",\n *         \"body\": {\n *             \"technique\": \"circles\",\n *             \"when\": \"$1\",\n *             \"attr\": {\n *                 \"color\": \"#${2:fff}\",\n *                 \"size\": \"^${3:32}\",\n *                 \"texture\": \"${4:url}\",\n *                 \"enablePicking\": \"^${5:true}\"\n *             }\n *         }\n *     }\n * ]\n *\n */\nexport type AllStyles =\n    | SquaresStyle\n    | CirclesStyle\n    | PoiStyle\n    | LineMarkerStyle\n    | LineStyle\n    | SegmentsStyle\n    | SolidLineStyle\n    | LabelRejectionLineStyle\n    | FillStyle\n    | StandardStyle\n    | BasicExtrudedLineStyle\n    | StandardExtrudedLineStyle\n    | ExtrudedPolygonStyle\n    | ShaderStyle\n    | TerrainStyle\n    | TextTechniqueStyle\n    | NoneStyle;\n\nexport type Style = AllStyles;\n/**\n * A dictionary of [[StyleSet]]s.\n */\nexport interface Styles {\n    [styleSetName: string]: StyleSet;\n}\n\n/**\n * A reference to a style definition.\n *\n * Use as value `attrs` to reference value from `definitions`.\n *\n * Example of usage:\n * ```json\n * {\n *   \"definitions\": {\n *     \"roadColor\": { \"type\": \"color\", \"value\": \"#f00\" }\n *   },\n *   \"styles\": { \"tilezen\": [\n *      {\n *       \"when\": \"kind == 'road\",\n *       \"technique\": \"solid-line\",\n *       \"attr\": {\n *         \"lineColor\": { \"$ref\": \"roadColor\" }\n *       }\n *     }\n *   ] }\n * }\n * ```\n */\n\n/**\n * The attributes of a technique.\n */\nexport type Attr<T> = { [P in keyof T]?: T[P] | JsonExpr };\n\n/**\n * Render feature as set of squares rendered in screen space.\n *\n * @see [[PointTechniqueParams]].\n */\nexport type SquaresStyle = BaseStyle<\"squares\", PointTechniqueParams>;\n\n/**\n * Render feature as set of circles rendered in screen space.\n *\n * @see [[PointTechniqueParams]].\n */\nexport type CirclesStyle = BaseStyle<\"circles\", PointTechniqueParams>;\n\n/**\n * Render feature as POIs (icons and text) rendered in screen space.\n *\n * @see [[MarkerTechniqueParams]].\n */\nexport type PoiStyle = BaseStyle<\"labeled-icon\", MarkerTechniqueParams>;\n\n/**\n * Render feature as line markers, which is a recurring marker along a line (usually road).\n *\n * @see [[MarkerTechniqueParams]].\n */\nexport type LineMarkerStyle = BaseStyle<\"line-marker\", MarkerTechniqueParams>;\n\n/**\n * Render feature as line.\n */\nexport type LineStyle = BaseStyle<\"line\", LineTechniqueParams>;\n\n/**\n * Render feature as segments.\n */\nexport type SegmentsStyle = BaseStyle<\"segments\", SegmentsTechniqueParams>;\n\nexport type SolidLineStyle = BaseStyle<\"solid-line\" | \"dashed-line\", SolidLineTechniqueParams>;\n\nexport type LabelRejectionLineStyle = BaseStyle<\"label-rejection-line\", BaseTechniqueParams>;\n\nexport type FillStyle = BaseStyle<\"fill\", FillTechniqueParams>;\n\nexport type StandardStyle = BaseStyle<\"standard\", StandardTechniqueParams>;\n\nexport type TerrainStyle = BaseStyle<\"terrain\", TerrainTechniqueParams>;\n\nexport type BasicExtrudedLineStyle = BaseStyle<\"extruded-line\", BasicExtrudedLineTechniqueParams>;\n\nexport type StandardExtrudedLineStyle = BaseStyle<\n    \"extruded-line\",\n    StandardExtrudedLineTechniqueParams\n>;\n\n/**\n * Style used to draw a geometry as an extruded polygon, for example extruded buildings.\n */\nexport type ExtrudedPolygonStyle = BaseStyle<\"extruded-polygon\", ExtrudedPolygonTechniqueParams>;\n\nexport type ShaderStyle = BaseStyle<\"shader\", ShaderTechniqueParams>;\n\nexport type TextTechniqueStyle = BaseStyle<\"text\", TextTechniqueParams>;\n\nexport interface NoneStyle\n    extends BaseStyle<\n        \"none\",\n        {\n            [name: string]: any;\n        }\n    > {\n    [name: string]: any;\n}\n\n/**\n * Possible lights used for light the map.\n */\nexport type Light = AmbientLight | DirectionalLight;\n\nexport interface BaseLight {\n    type: string;\n    name: string;\n}\n\n/**\n * Light type: ambient.\n * @defaultSnippets [\n *     {\n *         \"label\": \"New Ambient Light\",\n *         \"description\": \"Adds a new Ambient Light\",\n *         \"body\": {\n *             \"type\": \"ambient\",\n *             \"name\": \"${1:ambient light}\",\n *             \"color\": \"#${2:fff}\",\n *             \"intensity\": \"^${3:1}\"\n *         }\n *     }\n * ]\n */\nexport interface AmbientLight extends BaseLight {\n    type: \"ambient\";\n    /**\n     * @format color-hex\n     */\n    color: string;\n    intensity?: number;\n}\n\n/**\n * Light type: directional.\n * @defaultSnippets [\n *     {\n *         \"label\": \"New Directional Light\",\n *         \"description\": \"Adds a new Directional Light\",\n *         \"body\": {\n *             \"type\": \"directional\",\n *             \"name\": \"${1:directional-light$:1}\",\n *             \"color\": \"#${2:fff}\",\n *             \"intensity\": \"^${3:1}\",\n *             \"direction\": {\n *                 \"x\": \"^${4:1}\",\n *                 \"y\": \"^${5:0}\",\n *                 \"z\": \"^${6:0}\"\n *             }\n *         }\n *     }\n * ]\n */\nexport interface DirectionalLight extends BaseLight {\n    type: \"directional\";\n    /**\n     * @format color-hex\n     */\n    color: string;\n    intensity: number;\n    direction: Vector3Like;\n    castShadow?: boolean;\n}\n\n/**\n * Various text styles used with labels and texts.\n */\nexport interface TextStyleDefinition {\n    name?: string;\n    fontCatalogName?: string;\n\n    fontName?: string;\n    size?: number;\n    backgroundSize?: number;\n    fontStyle?: \"Regular\" | \"Bold\" | \"Italic\" | \"BoldItalic\";\n    fontVariant?: \"Regular\" | \"AllCaps\" | \"SmallCaps\";\n    rotation?: number;\n    /**\n     * @format color-hex\n     */\n    color?: string;\n    /**\n     * @format color-hex\n     */\n    backgroundColor?: string;\n    opacity?: number;\n    backgroundOpacity?: number;\n\n    tracking?: number;\n    leading?: number;\n    maxLines?: number;\n    lineWidth?: number;\n    canvasRotation?: number;\n    lineRotation?: number;\n    wrappingMode?: \"None\" | \"Character\" | \"Word\";\n    hAlignment?: \"Left\" | \"Center\" | \"Right\";\n    vAlignment?: \"Above\" | \"Center\" | \"Below\";\n    /**\n     * @format comma separated list of placement tokens, i.e. \"TR, TL, C\"\n     * @see [[PlacementToken]]\n     */\n    placements?: string;\n}\n\n/**\n * Interface that defines a procedural gradient sky.\n */\nexport interface GradientSky {\n    /** Sky type. */\n    type: \"gradient\";\n    /**\n     * Color of the upper part of the gradient.\n     * @format color-hex\n     */\n    topColor: string;\n    /**\n     * Color of bottom part of the gradient.\n     * @format color-hex\n     */\n    bottomColor: string;\n    /**\n     * Color of the ground plane.\n     * @format color-hex\n     */\n    groundColor: string;\n    /** Texture's gradient power. */\n    monomialPower?: number;\n}\n\n/**\n * Interface that defines a cubemap sky.\n */\nexport interface CubemapSky {\n    /** Sky type. */\n    type: \"cubemap\";\n    /** Positive X cube map face. */\n    positiveX: string;\n    /** Negative X cube map face. */\n    negativeX: string;\n    /** Positive Y cube map face. */\n    positiveY: string;\n    /** Negative Y cube map face. */\n    negativeY: string;\n    /** Positive Z cube map face. */\n    positiveZ: string;\n    /** Negative Z cube map face. */\n    negativeZ: string;\n}\n\n/**\n * Interface that defines the options to configure the sky.\n */\nexport type Sky = GradientSky | CubemapSky;\n\n/**\n * Interface that defines the options to configure fog.\n */\nexport interface Fog {\n    /** Fog's color. */\n    color: string;\n    /** Distance ratio to far plane at which the linear fog begins. */\n    startRatio: number;\n}\n\n/**\n * Define an image (e.g. icon).\n */\nexport interface ImageDefinition {\n    /** Url to load content from. */\n    url: string;\n    /** `true` to start loading at init tile, `false` to lazily wait until required. */\n    preload: boolean;\n    /** Url of JSON file containing the texture atlas */\n    atlas?: string;\n}\n\nexport interface ImageDefinitions {\n    /** Name of Image. */\n    [name: string]: ImageDefinition;\n}\n\n/**\n * Can be used to create a texture atlas.\n */\nexport interface ImageTexture {\n    /** Name of ImageTexture. Used to reference texture in the styles. */\n    name: string;\n    /** Name of ImageDefinition to use. */\n    image: string;\n    /** Origin of image, defaults to \"topleft\" */\n    origin?: string;\n    /** Specify sub-region: Defaults to 0. */\n    xOffset?: number;\n    /** Specify sub-region: Defaults to 0. */\n    yOffset?: number;\n    /** Specify sub-region:  Defaults to 0, meaning width is taken from loaded image. */\n    width?: number;\n    /** Specify sub-region:  Defaults to 0, meaning height is taken from loaded image. */\n    height?: number;\n    /** Defaults to false. */\n    flipH?: boolean;\n    /** Defaults to false. */\n    flipV?: boolean;\n    /** Defaults to 1. */\n    opacity?: number;\n}\n\n/**\n * Definition for a [[PoiTable]] reference as part of the [[Theme]] object.\n */\nexport interface PoiTableRef {\n    /** Required name of the [[PoiTable]] for later reference. */\n    name: string;\n    /**\n     * Required URL from where to load [[PoiTable]].\n     *\n     * Should refer to JSON that is matched [[PoiTableDef]] interface.\n     */\n    url: string;\n    /**\n     * If set to `true`, the list of values in the field \"altNames\" will be used as names for this\n     * POI.\n     */\n    useAltNamesForKey: boolean;\n}\n\n/**\n * Interface for the JSON description of the [[PoiTable]]. It is being implemented in [[PoiTable]].\n */\nexport interface PoiTableDef {\n    /** Name of the `PoiTable`. Must be unique. */\n    name?: string;\n    /**\n     * Stores the list of [[PoiTableEntry]]s.\n     */\n    poiList?: PoiTableEntryDef[];\n}\n\n/**\n * Interface for the JSON description of the [[PoiTableEntry]]. The interface is being implemented\n * as [[PoiTableEntry]].\n */\nexport interface PoiTableEntryDef {\n    /** Default name of the POI as the key for looking it up. */\n    name?: string;\n    /** Alternative names of the POI. */\n    altNames?: string[];\n    /** Visibility of the POI. If `false`, the POI will not be rendered. */\n    visible?: boolean;\n    /** Name of the icon, defined in the the texture atlases. */\n    iconName?: string;\n    /** Stacking mode of the POI. For future use. */\n    stackMode?: string;\n    /**\n     * Priority of the POI to select the visible set in case there are more POIs than can be\n     * handled.\n     */\n    priority?: number;\n    /** Minimum zoom level to render the icon on. */\n    iconMinLevel?: number;\n    /** Maximum zoom level to render the icon on. */\n    iconMaxLevel?: number;\n    /** Minimum zoom level to render the text label on. */\n    textMinLevel?: number;\n    /** Maximum zoom level to render the text label on. */\n    textMaxLevel?: number;\n}\n\n/**\n * Fonts used for all text related rendering.\n */\nexport interface FontCatalogConfig {\n    url: string;\n    name: string;\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nimport { GeometryKind, Technique } from \"@here/harp-datasource-protocol\";\nimport { MapAdapterUpdateEnv, MapMaterialAdapter } from \"./MapMaterialAdapter\";\n\n/**\n * @hidden\n *\n * Construction params of [[MapObjectAdapter]].\n */\nexport interface MapObjectAdapterParams {\n    technique?: Technique;\n    kind?: GeometryKind[];\n\n    // TODO: Move here in following refactor.\n    //featureData?: TileFeatureData;\n}\n\n/**\n * @hidden\n *\n * [[MapView]] specific data assigned to `THREE.Object3D` instance in installed in `userData`.\n *\n * [[MapObjectAdapter]] is registered in `usedData.mapAdapter` property of `THREE.Object3D`.\n */\nexport class MapObjectAdapter {\n    /**\n     * Resolve `MapObjectAdapter` associated with `object`.\n     */\n    static get(object: THREE.Object3D): MapObjectAdapter | undefined {\n        return object.userData?.mapAdapter instanceof MapObjectAdapter\n            ? object.userData.mapAdapter\n            : undefined;\n    }\n\n    static install(objData: MapObjectAdapter): MapObjectAdapter {\n        if (!objData.object.userData) {\n            objData.object.userData = {};\n        }\n        return (objData.object.userData.mapAdapter = objData);\n    }\n\n    static create(object: THREE.Object3D, params: MapObjectAdapterParams): MapObjectAdapter {\n        return MapObjectAdapter.install(new MapObjectAdapter(object, params));\n    }\n\n    static ensureUpdated(object: THREE.Object3D, context: MapAdapterUpdateEnv): boolean {\n        return MapObjectAdapter.get(object)?.ensureUpdated(context) ?? false;\n    }\n\n    /**\n     * Associated scene object.\n     */\n    readonly object: THREE.Object3D;\n\n    /**\n     * [[Technique]] that constituted this object.\n     */\n    readonly technique?: Technique;\n\n    /**\n     * [[GeometryKind]] of `object`.\n     */\n    readonly kind: GeometryKind[] | undefined;\n\n    private m_lastUpdateFrameNumber = -1;\n    private m_notCompletlyTransparent = true;\n\n    constructor(object: THREE.Object3D, params: MapObjectAdapterParams) {\n        this.object = object;\n        this.technique = params.technique;\n        this.kind = params.kind;\n        this.m_notCompletlyTransparent = this.getObjectMaterials().some(\n            material => material.opacity > 0\n        );\n    }\n\n    /**\n     * Serialize contents.\n     *\n     * `THREE.Object3d.userData` is serialized during `clone`/`toJSON`, so we need to ensure that\n     * we emit only \"data\" set of this object.\n     */\n    toJSON() {\n        return { kind: this.kind, technique: this.technique };\n    }\n\n    /**\n     * Ensure that underlying object is updated to current state of [[MapView]].\n     *\n     * Updates object and attachments like materials to current state by evaluating scene dependent\n     * expressions.\n     *\n     * Executes updates only once per frame basing on [[MapView.frameNumber]].\n     *\n     * Delegates updates of materials to [[MapMaterialAdapter.ensureUpdated]].\n     *\n     * @returns `true` if object performed some kind of update, `false` if no update was needed.\n     */\n    ensureUpdated(context: MapAdapterUpdateEnv): boolean {\n        if (this.m_lastUpdateFrameNumber === context.frameNumber) {\n            return false;\n        }\n        this.m_lastUpdateFrameNumber = context.frameNumber;\n\n        return this.updateMaterials(context);\n    }\n\n    /**\n     * Whether underlying `THREE.Object3D` is actually visible in scene.\n     */\n    isVisible() {\n        return this.object.visible && this.m_notCompletlyTransparent;\n    }\n\n    private updateMaterials(context: MapAdapterUpdateEnv) {\n        let somethingChanged: boolean = false;\n        const materials = this.getObjectMaterials();\n        for (const material of materials) {\n            const changed = MapMaterialAdapter.ensureUpdated(material, context);\n            somethingChanged = somethingChanged || changed;\n        }\n        if (somethingChanged) {\n            this.m_notCompletlyTransparent = materials.some(material => material.opacity > 0);\n        }\n        return somethingChanged;\n    }\n\n    private getObjectMaterials(): THREE.Material[] {\n        const object = this.object as THREE.Mesh;\n        return Array.isArray(object.material)\n            ? object.material\n            : object.material !== undefined\n            ? [object.material]\n            : [];\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { LineMarkerTechnique, Theme } from \"@here/harp-datasource-protocol\";\nimport {\n    AdditionParameters,\n    DEFAULT_TEXT_CANVAS_LAYER,\n    FontCatalog,\n    TextBufferAdditionParameters,\n    TextBufferCreationParameters,\n    TextCanvas,\n    TextLayoutStyle,\n    TextRenderStyle\n} from \"@here/harp-text-canvas\";\nimport {\n    assert,\n    LoggerManager,\n    LogLevel,\n    Math2D,\n    MathUtils,\n    PerformanceTimer\n} from \"@here/harp-utils\";\nimport * as THREE from \"three\";\n\nimport { TileKey } from \"@here/harp-geoutils\";\nimport { DataSource } from \"../DataSource\";\nimport { debugContext } from \"../DebugContext\";\nimport { overlayTextElement } from \"../geometry/overlayOnElevation\";\nimport { PickObjectType, PickResult } from \"../PickHandler\";\nimport { PoiManager } from \"../poi/PoiManager\";\nimport { PoiRenderer } from \"../poi/PoiRenderer\";\nimport { PoiRendererFactory } from \"../poi/PoiRendererFactory\";\nimport { IBox, LineWithBound, ScreenCollisions } from \"../ScreenCollisions\";\nimport { ScreenProjector } from \"../ScreenProjector\";\nimport { Tile } from \"../Tile\";\nimport { MapViewUtils } from \"../Utils\";\nimport { DataSourceTileList } from \"../VisibleTileSet\";\nimport { FontCatalogLoader } from \"./FontCatalogLoader\";\nimport {\n    checkReadyForPlacement,\n    computeViewDistance,\n    getMaxViewDistance,\n    getWorldPosition,\n    isPathLabelTooSmall,\n    placeIcon,\n    PlacementResult,\n    placePathLabel,\n    placePointLabel,\n    pointToPlaneDistance,\n    PrePlacementResult\n} from \"./Placement\";\nimport { PlacementStats } from \"./PlacementStats\";\nimport { RenderState } from \"./RenderState\";\nimport { SimpleLineCurve, SimplePath } from \"./SimplePath\";\nimport { TextCanvasFactory } from \"./TextCanvasFactory\";\nimport { TextCanvasRenderer } from \"./TextCanvasRenderer\";\nimport { LoadingState, TextElement, TextPickResult } from \"./TextElement\";\nimport { TextElementGroup } from \"./TextElementGroup\";\nimport { TextElementFilter, TextElementGroupState } from \"./TextElementGroupState\";\nimport {\n    initializeDefaultOptions,\n    TextElementsRendererOptions\n} from \"./TextElementsRendererOptions\";\nimport { TextElementState } from \"./TextElementState\";\nimport { TextElementStateCache } from \"./TextElementStateCache\";\nimport { TextElementType } from \"./TextElementType\";\nimport { TextElementStyle, TextStyleCache } from \"./TextStyleCache\";\nimport { UpdateStats } from \"./UpdateStats\";\nimport { ViewState } from \"./ViewState\";\n\ninterface RenderParams {\n    numRenderedTextElements: number;\n    // TODO: HARP-7373. Move to update() method at the end of the frame.\n    fadeAnimationRunning: boolean;\n    time: number;\n}\n\nenum Pass {\n    PersistentLabels,\n    NewLabels\n}\n\n/**\n * Default distance scale. Will be applied if distanceScale is not defined in the technique.\n * Defines the scale that will be applied to labeled icons (icon and text) in the distance.\n */\nexport const DEFAULT_TEXT_DISTANCE_SCALE = 0.5;\n\n/**\n * Maximum number of recommended labels. If more labels are encountered, the \"overloaded\" mode is\n * set, which modifies the behavior of label placement and rendering, trying to keep delivering an\n * interactive performance. The overloaded mode should not be activated if the [[MapView]] is\n * rendering a static image (camera not moving and no animation running).\n */\nconst OVERLOAD_LABEL_LIMIT = 20000;\n\n/**\n * If \"overloaded\" is `true`:\n *\n * Default number of labels/POIs updated in a frame. They are rendered only if they fit. If the\n * camera is not moving, it is ignored. See [[TextElementsRenderer.isDynamicFrame]].\n */\nconst OVERLOAD_UPDATED_LABEL_LIMIT = 100;\n\n/**\n * If \"overloaded\" is `true`:\n *\n * Maximum time in milliseconds available for placement. If value is <= 0, or if the camera is not\n * moving, it is ignored. See [[TextElementsRenderer.isDynamicFrame]].\n */\nconst OVERLOAD_UPDATE_TIME_LIMIT = 5;\n\n/**\n * If \"overloaded\" is `true`:\n *\n * Maximum time in milliseconds available for rendering. If value is <= 0, or if the camera is not\n * moving, it is ignored. See [[TextElementsRenderer.isDynamicFrame]].\n */\nconst OVERLOAD_PLACE_TIME_LIMIT = 10;\n\nconst logger = LoggerManager.instance.create(\"TextElementsRenderer\", { level: LogLevel.Log });\n\n// Development flag: Enable debug print.\nconst PRINT_LABEL_DEBUG_INFO: boolean = false;\nconst updateStats = PRINT_LABEL_DEBUG_INFO ? new UpdateStats(logger) : undefined;\nconst placementStats = PRINT_LABEL_DEBUG_INFO ? new PlacementStats(logger) : undefined;\n\nconst tempPosition = new THREE.Vector3();\nconst tempScreenPosition = new THREE.Vector2();\nconst tempScreenPoints: THREE.Vector2[] = [];\nconst tempPoiScreenPosition = new THREE.Vector2();\nconst tmpTextBufferCreationParams: TextBufferCreationParameters = {};\nconst tmpAdditionParams: AdditionParameters = {};\nconst tmpBufferAdditionParams: TextBufferAdditionParameters = {};\n\nclass TileTextElements {\n    constructor(readonly tile: Tile, readonly group: TextElementGroup) {}\n}\n\nclass TextElementLists {\n    constructor(readonly lists: TileTextElements[]) {}\n\n    get priority() {\n        assert(this.lists.length > 0);\n        // All text element lists here have the same priority.\n        return this.lists[0].group.priority;\n    }\n    /**\n     * Sum up the number of elements in all lists.\n     */\n    count(): number {\n        let n = 0;\n        for (const list of this.lists) {\n            n += list.group.elements.length;\n        }\n        return n;\n    }\n}\n\nfunction checkIfTextElementsChanged(dataSourceTileList: DataSourceTileList[]) {\n    let textElementsChanged = false;\n\n    dataSourceTileList.forEach(({ renderedTiles }) => {\n        renderedTiles.forEach(tile => {\n            if (tile.textElementsChanged) {\n                tile.textElementsChanged = false;\n                textElementsChanged = true;\n            }\n        });\n    });\n\n    return textElementsChanged;\n}\n\nfunction addTextToCanvas(\n    textElement: TextElement,\n    canvas: TextCanvas,\n    screenPosition: THREE.Vector3,\n    path?: THREE.Path,\n    pathOverflow?: boolean\n) {\n    tmpAdditionParams.path = path;\n    tmpAdditionParams.pathOverflow = pathOverflow;\n    tmpAdditionParams.layer = textElement.renderOrder;\n    tmpAdditionParams.letterCaseArray = textElement.glyphCaseArray;\n    tmpAdditionParams.pickingData = textElement.userData ? textElement : undefined;\n    canvas.addText(textElement.glyphs!, screenPosition, tmpAdditionParams);\n}\n\nfunction addTextBufferToCanvas(\n    textElementState: TextElementState,\n    canvas: TextCanvas,\n    screenPosition: THREE.Vector3,\n    fadeFactor: number,\n    scaleFactor: number\n): boolean {\n    const textElement = textElementState.element;\n    const textRenderState = textElementState.textRenderState;\n    const opacity = textRenderState!.opacity * fadeFactor * textElement.renderStyle!.opacity;\n\n    if (opacity === 0) {\n        return false;\n    }\n\n    // Compute the TextBufferObject when we know we're gonna render this label.\n    tmpTextBufferCreationParams.letterCaseArray = textElement.glyphCaseArray;\n    if (textElement.textBufferObject === undefined) {\n        textElement.textBufferObject = canvas.createTextBufferObject(\n            textElement.glyphs!,\n            tmpTextBufferCreationParams\n        );\n    }\n    const backgroundIsVisible =\n        textElement.renderStyle!.backgroundOpacity > 0 &&\n        canvas.textRenderStyle.fontSize.backgroundSize > 0;\n\n    tmpBufferAdditionParams.layer = textElement.renderOrder;\n    tmpBufferAdditionParams.position = screenPosition;\n    tmpBufferAdditionParams.scale = scaleFactor;\n    tmpBufferAdditionParams.opacity = opacity;\n    tmpBufferAdditionParams.backgroundOpacity = backgroundIsVisible\n        ? tmpBufferAdditionParams.opacity * textElement.renderStyle!.backgroundOpacity\n        : 0.0;\n    tmpBufferAdditionParams.pickingData = textElement.userData ? textElement : undefined;\n    canvas.addTextBufferObject(textElement.textBufferObject!, tmpBufferAdditionParams);\n    return true;\n}\n\nfunction shouldRenderPointText(\n    labelState: TextElementState,\n    viewState: ViewState,\n    options: TextElementsRendererOptions\n): boolean {\n    const textRenderState: RenderState | undefined = labelState.textRenderState;\n    const label = labelState.element;\n    const poiInfo = label.poiInfo;\n\n    assert(label.type !== TextElementType.PathLabel);\n\n    const hasText = textRenderState !== undefined && label.text !== \"\";\n    if (!hasText) {\n        return false;\n    }\n\n    const visibleInZoomLevel =\n        poiInfo === undefined ||\n        viewState.zoomLevel === undefined ||\n        MathUtils.isClamped(\n            viewState.zoomLevel,\n            poiInfo.iconMinZoomLevel,\n            poiInfo.iconMaxZoomLevel\n        );\n    if (!visibleInZoomLevel) {\n        return false;\n    }\n\n    const poiTextMaxDistance = getMaxViewDistance(viewState, options.maxDistanceRatioForPoiLabels!);\n    const visibleAtDistance =\n        label.ignoreDistance === true ||\n        labelState.viewDistance === undefined ||\n        labelState.viewDistance < poiTextMaxDistance;\n    if (!visibleAtDistance) {\n        return false;\n    }\n\n    // Do not render text if POI cannot be rendered and is not optional.\n    return poiInfo === undefined || poiInfo.isValid === true || poiInfo.iconIsOptional !== false;\n}\n\nfunction shouldRenderPoiText(labelState: TextElementState, viewState: ViewState) {\n    // Do not actually render (just allocate space) if camera is moving and\n    // renderTextDuringMovements is not true.\n    const poiInfo = labelState.element.poiInfo;\n\n    return (\n        !viewState.cameraIsMoving ||\n        poiInfo === undefined ||\n        poiInfo.renderTextDuringMovements === true\n    );\n}\n\nexport type ViewUpdateCallback = () => void;\n\nfunction isPlacementTimeExceeded(startTime: number | undefined): boolean {\n    // startTime is set in overload mode.\n    if (startTime === undefined || OVERLOAD_PLACE_TIME_LIMIT <= 0) {\n        return false;\n    }\n    const endTime = PerformanceTimer.now();\n    const elapsedTime = endTime - startTime;\n    if (elapsedTime > OVERLOAD_PLACE_TIME_LIMIT) {\n        logger.debug(\"Placement time limit exceeded.\");\n        return true;\n    }\n    return false;\n}\n\n/**\n *\n * Internal class to manage all text rendering.\n */\nexport class TextElementsRenderer {\n    private m_initialized: boolean = false;\n    private m_initPromise: Promise<void> | undefined;\n    private m_glyphLoadingCount: number = 0;\n    private m_loadPromise: Promise<any> | undefined;\n    private readonly m_options: TextElementsRendererOptions;\n\n    private readonly m_textStyleCache: TextStyleCache;\n    private m_textRenderers: TextCanvasRenderer[] = [];\n\n    private m_overlayTextElements?: TextElement[];\n\n    // TODO: Replace this for an array of textures when more fonts are in use.\n    private m_debugGlyphTextureCacheMesh?: THREE.Mesh;\n    private m_debugGlyphTextureCacheWireMesh?: THREE.LineSegments;\n\n    private m_tmpVector = new THREE.Vector2();\n    private m_tmpVector3 = new THREE.Vector3();\n    private m_cameraLookAt = new THREE.Vector3();\n    private m_overloaded: boolean = false;\n    private m_cacheInvalidated: boolean = false;\n    private m_forceNewLabelsPass: boolean = false;\n\n    private readonly m_textElementStateCache: TextElementStateCache = new TextElementStateCache();\n\n    /**\n     * Create the `TextElementsRenderer` which selects which labels should be placed on screen as\n     * a preprocessing step, which is not done every frame, and also renders the placed\n     * [[TextElement]]s every frame.\n     *\n     * @param m_viewState State of the view for which this renderer will draw text.\n     * @param m_viewCamera Camera used by the view for which this renderer will draw text.\n     * @param m_viewUpdateCallback To be called whenever the view needs to be updated.\n     * @param m_screenCollisions General 2D screen occlusion management, may be shared between\n     *     instances.\n     * @param m_screenProjector Projects 3D coordinates into screen space.\n     * @param m_textCanvasFactory To create TextCanvas instances.\n     * @param m_poiRendererFactory To create PoiRenderer instances.\n     * @param m_poiManager To prepare pois for rendering.\n     * @param m_fontCatalogLoader To load font catalogs.\n     * @param m_theme Theme defining  text styles.\n     * @param options Configuration options for the text renderer. See\n     * [[TextElementsRendererOptions]].\n     */\n    constructor(\n        private m_viewState: ViewState,\n        private m_viewCamera: THREE.Camera,\n        private m_viewUpdateCallback: ViewUpdateCallback,\n        private m_screenCollisions: ScreenCollisions,\n        private m_screenProjector: ScreenProjector,\n        private m_textCanvasFactory: TextCanvasFactory,\n        private m_poiManager: PoiManager,\n        private m_poiRendererFactory: PoiRendererFactory,\n        private m_fontCatalogLoader: FontCatalogLoader,\n        private m_theme: Theme,\n        options: TextElementsRendererOptions\n    ) {\n        this.m_textStyleCache = new TextStyleCache(this.m_theme);\n\n        this.m_options = { ...options };\n        initializeDefaultOptions(this.m_options);\n\n        this.m_textCanvasFactory.setGlyphCountLimits(\n            this.m_options.minNumGlyphs!,\n            this.m_options.maxNumGlyphs!\n        );\n    }\n\n    /**\n     * Disable all fading animations (for debugging and performance measurement). Defaults to\n     * `false`.\n     */\n    set disableFading(disable: boolean) {\n        this.m_options.disableFading = disable;\n    }\n\n    get disableFading(): boolean {\n        return this.m_options.disableFading === true;\n    }\n\n    get styleCache() {\n        return this.m_textStyleCache;\n    }\n\n    /**\n     * Render the text using the specified camera into the current canvas.\n     *\n     * @param camera Orthographic camera to use.\n     */\n    renderText(camera: THREE.OrthographicCamera) {\n        if (!this.initialized) {\n            return;\n        }\n\n        this.updateGlyphDebugMesh();\n\n        for (const textRenderer of this.m_textRenderers) {\n            textRenderer.textCanvas.render(camera);\n        }\n    }\n\n    /**\n     * Forces update of text elements in the next call to [[placeText]].\n     */\n    invalidateCache() {\n        this.m_cacheInvalidated = true;\n    }\n\n    /**\n     * Notify `TextElementsRenderer` that the camera has started a movement.\n     */\n    movementStarted() {\n        // Nothing to do (yet)\n    }\n\n    /**\n     * Notify `TextElementsRenderer` that the camera has finished its movement.\n     */\n    movementFinished() {\n        this.invalidateCache();\n    }\n\n    /**\n     * Is `true` if number of [[TextElement]]s in visible tiles is larger than the recommended\n     * number `OVERLOAD_LABEL_LIMIT`.\n     */\n    get overloaded(): boolean {\n        return this.m_overloaded;\n    }\n\n    /**\n     * Places text elements for the current frame.\n     * @param dataSourceTileList List of tiles to be rendered for each data source.\n     * @param time Current frame time.\n     * @param elevationProvider\n     */\n    placeText(dataSourceTileList: DataSourceTileList[], time: number) {\n        const tileTextElementsChanged = checkIfTextElementsChanged(dataSourceTileList);\n\n        const textElementsAvailable = this.hasOverlayText() || tileTextElementsChanged;\n        if (!this.initialize(textElementsAvailable)) {\n            return;\n        }\n\n        const updateTextElements =\n            this.m_cacheInvalidated ||\n            tileTextElementsChanged ||\n            this.m_viewState.renderedTilesChanged;\n\n        logger.debug(\n            `FRAME: ${this.m_viewState.frameNumber}, ZOOM LEVEL: ${this.m_viewState.zoomLevel}`\n        );\n\n        if (updateTextElements) {\n            this.m_textElementStateCache.clearVisited();\n            this.updateTextElements(dataSourceTileList);\n        }\n        const findReplacements = updateTextElements;\n        const anyTextGroupEvicted = this.m_textElementStateCache.update(\n            time,\n            this.m_options.disableFading!,\n            findReplacements,\n            this.m_viewState.zoomLevel\n        );\n\n        this.reset();\n        this.prepopulateScreenWithBlockingElements(dataSourceTileList);\n\n        // New text elements must be placed either if text elements were updated in this frame\n        // or if any text element group was evicted. The second case happens when the group is not\n        // visited anymore and all it's elements just became invisible, which means there's newly\n        // available screen space where new text elements could be placed. A common scenario where\n        // this happens is zooming in/out: text groups from the old level may still be fading out\n        // after all groups in the new level were updated.\n        const placeNewTextElements = updateTextElements || anyTextGroupEvicted;\n        this.placeTextElements(time, placeNewTextElements);\n        this.placeOverlayTextElements();\n        this.updateTextRenderers();\n    }\n\n    /**\n     * Adds new overlay text elements to this `MapView`.\n     *\n     * @param textElements Array of [[TextElement]] to be added.\n     */\n    addOverlayText(textElements: TextElement[]): void {\n        if (textElements.length === 0) {\n            return;\n        }\n        this.m_overlayTextElements =\n            this.m_overlayTextElements === undefined\n                ? textElements.slice()\n                : this.m_overlayTextElements.concat(textElements);\n    }\n\n    /**\n     * Adds new overlay text elements to this `MapView`.\n     *\n     * @param textElements Array of [[TextElement]] to be added.\n     */\n    clearOverlayText(): void {\n        this.m_overlayTextElements = [];\n    }\n\n    /**\n     * @returns Whether there's overlay text to be rendered.\n     */\n    hasOverlayText(): boolean {\n        return this.m_overlayTextElements !== undefined && this.m_overlayTextElements.length > 0;\n    }\n\n    get overlayText(): TextElement[] | undefined {\n        return this.m_overlayTextElements;\n    }\n\n    /**\n     * Fill the picking results for the pixel with the given screen coordinate. If multiple\n     * [[TextElement]]s are found, the order of the results is unspecified.\n     *\n     * Note: [[TextElement]]s with identical `featureId` or identical `userData` will only appear\n     * once in the list `pickResults`.\n     *\n     * @param screenPosition Screen coordinate of picking position.\n     * @param pickResults Array filled with pick results.\n     */\n    pickTextElements(screenPosition: THREE.Vector2, pickResults: PickResult[]) {\n        const pickHandler = (pickData: any | undefined, pickObjectType: PickObjectType) => {\n            const textElement = pickData as TextElement;\n\n            if (textElement === undefined) {\n                return;\n            }\n\n            let isDuplicate = false;\n\n            if (textElement.featureId !== undefined) {\n                isDuplicate = pickResults.some(pickResult => {\n                    return (\n                        pickResult !== undefined &&\n                        pickObjectType === pickResult.type &&\n                        ((pickResult.featureId !== undefined &&\n                            pickResult.featureId === textElement.featureId) ||\n                            (pickResult.userData !== undefined &&\n                                pickResult.userData === textElement.userData))\n                    );\n                });\n\n                if (!isDuplicate) {\n                    const pickResult: TextPickResult = {\n                        type: pickObjectType,\n                        point: screenPosition,\n                        distance: 0,\n                        featureId: textElement.featureId,\n                        userData: textElement.userData,\n                        text: textElement.text\n                    };\n\n                    pickResults.push(pickResult);\n                }\n            }\n        };\n\n        for (const textRenderer of this.m_textRenderers) {\n            textRenderer.textCanvas.pickText(screenPosition, (pickData: any | undefined) => {\n                pickHandler(pickData, PickObjectType.Text);\n            });\n            textRenderer.poiRenderer.pickTextElements(\n                screenPosition,\n                (pickData: any | undefined) => {\n                    pickHandler(pickData, PickObjectType.Icon);\n                }\n            );\n        }\n    }\n\n    /**\n     * `true` if any resource used by any `FontCatalog` is still loading.\n     */\n    get loading(): boolean {\n        return this.m_fontCatalogLoader.loading || this.m_glyphLoadingCount > 0;\n    }\n\n    /**\n     * Waits till all pending resources from any `FontCatalog` are loaded.\n     */\n    async waitLoaded(): Promise<boolean> {\n        const initialized = await this.waitInitialized();\n        if (!initialized) {\n            return false;\n        }\n        if (this.m_loadPromise === undefined) {\n            return false;\n        }\n        await this.m_loadPromise;\n        return true;\n    }\n\n    /**\n     * Reset the current text render states of all visible tiles. All [[TextElement]]s will fade in\n     * after that as if they have just been added.\n     */\n    clearRenderStates() {\n        this.m_textElementStateCache.clear();\n    }\n\n    /**\n     * Return memory used by all objects managed by `TextElementsRenderer`.\n     *\n     * @returns `MemoryUsage` Heap and GPU memory used by this `TextElementsRenderer`.\n     */\n    getMemoryUsage(): MapViewUtils.MemoryUsage {\n        const memoryUsage = {\n            heapSize: 0,\n            gpuSize: 0\n        };\n\n        for (const renderer of this.m_textRenderers) {\n            renderer.textCanvas.getMemoryUsage(memoryUsage);\n            renderer.poiRenderer.getMemoryUsage(memoryUsage);\n        }\n\n        return memoryUsage;\n    }\n\n    get initialized(): boolean {\n        return this.m_initialized;\n    }\n\n    get initializing(): boolean {\n        return this.m_initPromise !== undefined;\n    }\n\n    /**\n     * Waits until initialization is done.\n     * @returns Promise resolved to true if initialization was done, false otherwise.\n     */\n    async waitInitialized(): Promise<boolean> {\n        if (this.initialized) {\n            return true;\n        }\n\n        if (!this.initializing) {\n            return false;\n        }\n        await this.m_initPromise;\n        return true;\n    }\n\n    /**\n     * Initializes the text renderer once there's any text element available for rendering.\n     * @param textElementsAvailable Indicates whether there's any text element to be rendered.\n     * @returns Whether the text renderer is initialized.\n     */\n    private initialize(textElementsAvailable: boolean): boolean {\n        if (!this.initialized && !this.initializing && textElementsAvailable) {\n            this.initializeDefaultAssets();\n            this.m_initPromise = this.initializeTextCanvases().then(() => {\n                this.m_initialized = true;\n                this.m_initPromise = undefined;\n                this.invalidateCache(); // Force cache update after initialization.\n                this.m_viewUpdateCallback();\n            });\n        }\n        return this.initialized;\n    }\n\n    /**\n     * Reset internal state at the beginning of a frame.\n     */\n    private reset() {\n        this.m_cameraLookAt.copy(this.m_viewState.lookAtVector);\n        this.m_screenCollisions.reset();\n        for (const textRenderer of this.m_textRenderers) {\n            textRenderer.textCanvas.clear();\n            textRenderer.poiRenderer.reset();\n        }\n    }\n\n    /**\n     * Update state at the end of a frame.\n     */\n    private updateTextRenderers() {\n        for (const textRenderer of this.m_textRenderers) {\n            textRenderer.poiRenderer.update();\n        }\n    }\n\n    /**\n     * Fills the screen with lines projected from world space, see [[Tile.blockingElements]].\n     * @note These boxes have highest priority, so will block all other labels.\n     * @param dataSourceTileList List of tiles to be rendered for each data source.\n     */\n    private prepopulateScreenWithBlockingElements(dataSourceTileList: DataSourceTileList[]) {\n        const boxes: IBox[] = [];\n        dataSourceTileList.forEach(renderListEntry => {\n            const startLinePointProj = new THREE.Vector3();\n            const endLinePointProj = new THREE.Vector3();\n            for (const tile of renderListEntry.renderedTiles.values()) {\n                for (const pathBlockingElement of tile.blockingElements) {\n                    if (pathBlockingElement.points.length < 2) {\n                        continue;\n                    }\n                    this.m_screenProjector.project3(\n                        pathBlockingElement.points[0],\n                        startLinePointProj\n                    );\n                    for (let i = 1; i < pathBlockingElement.points.length; i++) {\n                        this.m_screenProjector.project3(\n                            pathBlockingElement.points[i],\n                            endLinePointProj\n                        );\n                        const line = pathBlockingElement.screenSpaceLines[i - 1];\n                        line.start.copy(startLinePointProj);\n                        line.end.copy(endLinePointProj);\n                        const lineWithBound: LineWithBound = {\n                            minX: Math.min(startLinePointProj.x, endLinePointProj.x),\n                            maxX: Math.max(startLinePointProj.x, endLinePointProj.x),\n                            minY: Math.min(startLinePointProj.y, endLinePointProj.y),\n                            maxY: Math.max(startLinePointProj.y, endLinePointProj.y),\n                            line\n                        };\n                        boxes.push(lineWithBound);\n                        startLinePointProj.copy(endLinePointProj);\n                    }\n                }\n            }\n        });\n        this.m_screenCollisions.allocateIBoxes(boxes);\n    }\n\n    /**\n     * @returns True if whole group was processed for placement,\n     * false otherwise (e.g. placement limit reached).\n     */\n    private placeTextElementGroup(\n        groupState: TextElementGroupState,\n        renderParams: RenderParams,\n        maxNumPlacedLabels: number,\n        pass: Pass\n    ): boolean {\n        // Unvisited text elements are never placed.\n        assert(groupState.visited);\n\n        if (this.m_textRenderers.length === 0) {\n            logger.warn(\"No text renderers initialized.\");\n            return false;\n        }\n\n        const shieldGroups: number[][] = [];\n        const hiddenKinds = this.m_viewState.hiddenGeometryKinds;\n        const projection = this.m_viewState.projection;\n        const elevationProvider = this.m_viewState.elevationProvider;\n        const elevationMap = elevationProvider?.getDisplacementMap(groupState.tileKey);\n\n        for (const textElementState of groupState.textElementStates) {\n            if (pass === Pass.PersistentLabels) {\n                if (placementStats) {\n                    ++placementStats.total;\n                }\n            }\n            // Limit labels only in new labels pass (Pass.NewLabels).\n            else if (\n                maxNumPlacedLabels >= 0 &&\n                renderParams.numRenderedTextElements >= maxNumPlacedLabels\n            ) {\n                logger.debug(\"Placement label limit exceeded.\");\n                return false;\n            }\n\n            // Skip all labels that are not initialized (didn't pass early placement tests)\n            // or don't belong to this pass.\n            if (!textElementState.initialized) {\n                if (placementStats) {\n                    ++placementStats.uninitialized;\n                }\n                continue;\n            }\n            if (textElementState.viewDistance === undefined) {\n                if (placementStats) {\n                    ++placementStats.tooFar;\n                }\n                continue;\n            }\n\n            const elementVisible = textElementState.visible;\n            if (\n                (pass === Pass.PersistentLabels && !elementVisible) ||\n                (pass === Pass.NewLabels && elementVisible)\n            ) {\n                continue;\n            }\n\n            const textElement = textElementState.element;\n\n            // Get the TextElementStyle.\n            const textElementStyle = this.m_textStyleCache.getTextElementStyle(textElement.style);\n            const textCanvas = textElementStyle.textCanvas;\n            const poiRenderer = textElementStyle.poiRenderer;\n            if (textCanvas === undefined || poiRenderer === undefined) {\n                logger.warn(\"Text canvas or poi renderer not ready.\");\n                continue;\n            }\n\n            // TODO: HARP-7648. Discard hidden kinds sooner, before placement.\n            // Check if the label should be hidden.\n            if (\n                hiddenKinds !== undefined &&\n                textElement.kind !== undefined &&\n                hiddenKinds.hasOrIntersects(textElement.kind)\n            ) {\n                continue;\n            }\n\n            if (elevationProvider !== undefined && !textElement.elevated) {\n                if (!elevationMap) {\n                    this.m_viewUpdateCallback(); // Update view until elevation is loaded.\n                    this.m_forceNewLabelsPass = true;\n                    continue;\n                }\n                overlayTextElement(textElement, elevationProvider, elevationMap, projection);\n            }\n            const elementType = textElement.type;\n            const isPathLabel = elementType === TextElementType.PathLabel;\n\n            // For paths, check if the label may fit.\n            if (isPathLabel) {\n                if (isPathLabelTooSmall(textElement, this.m_screenProjector, tempScreenPoints)) {\n                    if (placementStats) {\n                        placementStats.numNotVisible++;\n                    }\n                    if (textElement.dbgPathTooSmall === true) {\n                        if (placementStats) {\n                            placementStats.numPathTooSmall++;\n                        }\n                    }\n                    textElementState.reset();\n                    continue;\n                }\n            }\n\n            const forceNewPassOnLoaded = true;\n            // This ensures that textElement.renderStyle and textElement.layoutStyle are\n            // already instantiated and initialized with theme style values.\n            if (!this.initializeGlyphs(textElement, textElementStyle, forceNewPassOnLoaded)) {\n                continue;\n            }\n\n            const layer = textCanvas.getLayer(textElement.renderOrder || DEFAULT_TEXT_CANVAS_LAYER);\n\n            // Move onto the next TextElement if we cannot continue adding glyphs to this layer.\n            if (layer !== undefined) {\n                if (layer.storage.drawCount + textElement.glyphs!.length > layer.storage.capacity) {\n                    if (placementStats) {\n                        ++placementStats.numCannotAdd;\n                    }\n                    logger.warn(\"layer glyph storage capacity exceeded.\");\n                    continue;\n                }\n            }\n\n            // Set the current style for the canvas.\n            // This means text canvas has always references (not a copy) to text element styles.\n            // The only exception is multi-anchor placement where layoutStyle need to be\n            // modified and thus textCanvas will using its own copy of textElement.layoutStyle.\n            // See: placePointLabel()\n            textCanvas.textRenderStyle = textElement.renderStyle!;\n            textCanvas.textLayoutStyle = textElement.layoutStyle!;\n\n            switch (elementType) {\n                case TextElementType.PoiLabel:\n                    this.addPoiLabel(textElementState, poiRenderer, textCanvas, renderParams);\n                    break;\n                case TextElementType.LineMarker:\n                    this.addLineMarkerLabel(\n                        textElementState,\n                        poiRenderer,\n                        shieldGroups,\n                        textCanvas,\n                        renderParams\n                    );\n                    break;\n                case TextElementType.PathLabel:\n                    this.addPathLabel(textElementState, tempScreenPoints, textCanvas, renderParams);\n            }\n        }\n        return true;\n    }\n\n    private initializeGlyphs(\n        textElement: TextElement,\n        textElementStyle: TextElementStyle,\n        forceNewPassOnLoaded: boolean\n    ): boolean {\n        // Trigger the glyph load if needed.\n        if (textElement.loadingState === LoadingState.Initialized) {\n            return true;\n        }\n\n        assert(textElementStyle.textCanvas !== undefined);\n        const textCanvas = textElementStyle.textCanvas!;\n\n        if (textElement.loadingState === undefined) {\n            textElement.loadingState = LoadingState.Requested;\n\n            if (textElement.renderStyle === undefined) {\n                textElement.renderStyle = new TextRenderStyle({\n                    ...textElementStyle.renderParams,\n                    ...textElement.renderParams\n                });\n            }\n            if (textElement.layoutStyle === undefined) {\n                textElement.layoutStyle = new TextLayoutStyle({\n                    ...textElementStyle.layoutParams,\n                    ...textElement.layoutParams\n                });\n            }\n\n            if (textElement.text === \"\") {\n                textElement.loadingState = LoadingState.Loaded;\n            } else {\n                const newLoadPromise = textCanvas.fontCatalog\n                    .loadCharset(textElement.text, textElement.renderStyle)\n                    .then(() => {\n                        --this.m_glyphLoadingCount;\n                        textElement.loadingState = LoadingState.Loaded;\n                        // Ensure that text elements still loading glyphs get a chance to\n                        // be rendered if there's no text element updates in the next frames.\n                        this.m_forceNewLabelsPass =\n                            this.m_forceNewLabelsPass || forceNewPassOnLoaded;\n                        this.m_viewUpdateCallback();\n                    });\n                if (this.m_glyphLoadingCount === 0) {\n                    this.m_loadPromise = undefined;\n                }\n                ++this.m_glyphLoadingCount;\n\n                this.m_loadPromise =\n                    this.m_loadPromise === undefined\n                        ? newLoadPromise\n                        : Promise.all([this.m_loadPromise, newLoadPromise]);\n            }\n        }\n        if (textElement.loadingState === LoadingState.Loaded) {\n            textCanvas.textRenderStyle = textElement.renderStyle!;\n            textCanvas.textLayoutStyle = textElement.layoutStyle!;\n            textElement.glyphCaseArray = [];\n            textElement.bounds = undefined;\n            textElement.glyphs = textCanvas.fontCatalog.getGlyphs(\n                textElement.text,\n                textCanvas.textRenderStyle,\n                textElement.glyphCaseArray\n            );\n            textElement.loadingState = LoadingState.Initialized;\n        }\n        // Return true as soon as a text element has some glyphs assigned so that it's rendered.\n        // The glyphs may be either the final ones or some temporal glyphs inherited from a\n        // predecessor as part of the text element replacement process.\n        // See TextElementState.replace().\n        return textElement.glyphs !== undefined;\n    }\n\n    private initializeDefaultAssets(): void {\n        const defaultFontCatalogName = this.m_fontCatalogLoader.initialize(\n            this.m_options.fontCatalog!\n        );\n        this.m_textStyleCache.initializeDefaultTextElementStyle(defaultFontCatalogName);\n    }\n\n    private async initializeTextCanvases(): Promise<void> {\n        const catalogCallback = (name: string, catalog: FontCatalog) => {\n            const loadedTextCanvas = this.m_textCanvasFactory.createTextCanvas(catalog);\n\n            this.m_textRenderers.push({\n                fontCatalog: name,\n                textCanvas: loadedTextCanvas,\n                poiRenderer: this.m_poiRendererFactory.createPoiRenderer(loadedTextCanvas)\n            });\n        };\n\n        return this.m_fontCatalogLoader.loadCatalogs(catalogCallback).then(() => {\n            // Find the default TextCanvas and PoiRenderer.\n            let defaultTextCanvas: TextCanvas | undefined;\n            this.m_textRenderers.forEach(textRenderer => {\n                if (defaultTextCanvas === undefined) {\n                    defaultTextCanvas = textRenderer.textCanvas;\n                }\n            });\n            const defaultPoiRenderer = this.m_poiRendererFactory.createPoiRenderer(\n                defaultTextCanvas!\n            );\n\n            this.m_textStyleCache.initializeTextElementStyles(\n                defaultPoiRenderer,\n                defaultTextCanvas!,\n                this.m_textRenderers\n            );\n        });\n    }\n\n    private updateGlyphDebugMesh() {\n        const debugGlyphs = debugContext.getValue(\"DEBUG_GLYPHS\");\n        if (debugGlyphs === undefined) {\n            return;\n        }\n\n        if (debugGlyphs && this.m_debugGlyphTextureCacheMesh === undefined) {\n            this.initializeGlyphDebugMesh();\n        }\n        assert(this.m_debugGlyphTextureCacheMesh !== undefined);\n        assert(this.m_debugGlyphTextureCacheWireMesh !== undefined);\n\n        this.m_debugGlyphTextureCacheMesh!.visible = debugGlyphs;\n        this.m_debugGlyphTextureCacheWireMesh!.visible = debugGlyphs;\n    }\n\n    private initializeGlyphDebugMesh() {\n        const defaultFontCatalog = this.m_textRenderers[0].textCanvas.fontCatalog;\n\n        // Initialize glyph-debugging mesh.\n        const planeGeometry = new THREE.PlaneGeometry(\n            defaultFontCatalog.textureSize.width / 2.5,\n            defaultFontCatalog.textureSize.height / 2.5,\n            defaultFontCatalog.textureSize.width / defaultFontCatalog.maxWidth,\n            defaultFontCatalog.textureSize.height / defaultFontCatalog.maxHeight\n        );\n        const material = new THREE.MeshBasicMaterial({\n            transparent: true,\n            depthWrite: false,\n            depthTest: false,\n            map: defaultFontCatalog.texture\n        });\n        this.m_debugGlyphTextureCacheMesh = new THREE.Mesh(planeGeometry, material);\n        this.m_debugGlyphTextureCacheMesh.renderOrder = 10000;\n        this.m_debugGlyphTextureCacheMesh.visible = false;\n\n        this.m_debugGlyphTextureCacheMesh.name = \"glyphDebug\";\n\n        const wireframe = new THREE.WireframeGeometry(planeGeometry);\n        const wireframeMaterial = new THREE.LineBasicMaterial({\n            transparent: true,\n            color: 0x999999,\n            depthWrite: false,\n            depthTest: false\n        });\n        this.m_debugGlyphTextureCacheWireMesh = new THREE.LineSegments(\n            wireframe,\n            wireframeMaterial\n        );\n        this.m_debugGlyphTextureCacheWireMesh.renderOrder = 9999;\n        this.m_debugGlyphTextureCacheWireMesh.visible = false;\n\n        this.m_debugGlyphTextureCacheWireMesh.name = \"glyphDebug\";\n\n        this.m_textRenderers[0].textCanvas\n            .getLayer(DEFAULT_TEXT_CANVAS_LAYER)!\n            .storage.scene.add(\n                this.m_debugGlyphTextureCacheMesh,\n                this.m_debugGlyphTextureCacheWireMesh\n            );\n    }\n\n    /**\n     * Visit all visible tiles and add/ their text elements to cache. The update of\n     * [[TextElement]]s is a time consuming process, and cannot be done every frame, but should only\n     * be done when the camera moved (a lot) of whenever the set of visible tiles change.\n     *\n     * The actually rendered [[TextElement]]s are stored internally until the next update is done\n     * to speed up rendering when no camera movement was detected.\n     * @param dataSourceTileList List of tiles to be rendered for each data source.\n     */\n    private updateTextElements(dataSourceTileList: DataSourceTileList[]) {\n        logger.debug(\"updateTextElements\");\n\n        if (updateStats) {\n            updateStats.clear();\n        }\n\n        this.m_textElementStateCache.clearTextCache();\n        this.m_cacheInvalidated = false;\n\n        this.checkIfOverloaded(dataSourceTileList);\n\n        // Used with tile offset to compute the x coordinate offset for tiles.\n        const updateStartTime =\n            this.overloaded && this.m_viewState.isDynamic ? PerformanceTimer.now() : undefined;\n\n        // TODO: HARP-7648. Skip all data sources that won't contain text.\n        // TODO: HARP-7651. Higher priority labels should be updated before lower priority ones\n        // across all data sources.\n        // TODO: HARP-7373. Use rendered tiles (tiles currently rendered to cover the view,\n        // including fallbacks if necessary) instead of visible tiles (target tiles that might not\n        // be decoded yet).\n        // Otherwise labels persistent when crossing a zoom level boundary will flicker (fade out\n        // and back in) due to the delay in decoding the visible tiles.\n        dataSourceTileList.forEach(tileList => {\n            this.updateTextElementsFromSource(\n                tileList.dataSource,\n                tileList.storageLevel,\n                Array.from(tileList.renderedTiles.values()),\n                updateStartTime\n            );\n        });\n\n        if (updateStats) {\n            updateStats.log();\n        }\n    }\n\n    private updateTextElementsFromSource(\n        tileDataSource: DataSource,\n        storageLevel: number,\n        visibleTiles: Tile[],\n        updateStartTime: number | undefined\n    ) {\n        if (updateStats) {\n            updateStats.tiles += visibleTiles.length;\n        }\n        const sortedTiles = visibleTiles;\n\n        // TODO: HARP-7648. Really needed? Should it be done here or in VisibleTileSet?\n        sortedTiles.sort((a: Tile, b: Tile) => {\n            return a.tileKey.mortonCode() - b.tileKey.mortonCode();\n        });\n\n        const sortedGroups: TextElementLists[] = [];\n        this.createSortedGroupsForSorting(tileDataSource, storageLevel, sortedTiles, sortedGroups);\n\n        let numTextElementsUpdated = 0;\n\n        for (const textElementLists of sortedGroups) {\n            this.selectTextElementsToUpdateByDistance(textElementLists);\n\n            // The value of updateStartTime is set if this.overloaded is true.\n            if (updateStartTime !== undefined) {\n                // If overloaded and all time is used up, exit early.\n                if (OVERLOAD_UPDATE_TIME_LIMIT > 0) {\n                    const endTime = PerformanceTimer.now();\n                    const elapsedTime = endTime - updateStartTime;\n                    if (elapsedTime > OVERLOAD_UPDATE_TIME_LIMIT) {\n                        logger.debug(\"Update time limit exceeded.\");\n                        break;\n                    }\n                }\n\n                // Try not to update too many elements. They will be checked for visibility each\n                // frame.\n                numTextElementsUpdated += textElementLists.count();\n                if (numTextElementsUpdated >= OVERLOAD_UPDATED_LABEL_LIMIT) {\n                    logger.debug(\"Update label limit exceeded.\");\n                    break;\n                }\n            }\n        }\n    }\n\n    private prepareTextElementGroup(\n        textElementGroup: TextElementGroup,\n        tileKey: TileKey,\n        maxViewDistance?: number\n    ) {\n        if (textElementGroup.elements.length === 0) {\n            return;\n        }\n\n        const textElementSelection: TextElementFilter = (\n            textElementState: TextElementState\n        ): number | undefined => {\n            let { result, viewDistance } = checkReadyForPlacement(\n                textElementState.element,\n                this.m_viewState,\n                this.m_viewCamera,\n                this.m_poiManager,\n                maxViewDistance\n            );\n\n            if (\n                result === PrePlacementResult.Ok &&\n                !this.m_textElementStateCache.deduplicateElement(\n                    this.m_viewState.zoomLevel,\n                    textElementState\n                )\n            ) {\n                result = PrePlacementResult.Duplicate;\n                viewDistance = undefined;\n            }\n\n            if (updateStats) {\n                updateStats.totalLabels++;\n                updateStats.results[result]++;\n            }\n            return viewDistance;\n        };\n\n        const [, found] = this.m_textElementStateCache.getOrSet(\n            textElementGroup,\n            tileKey,\n            textElementSelection\n        );\n\n        if (updateStats) {\n            ++updateStats.totalGroups;\n            if (!found) {\n                ++updateStats.newGroups;\n            }\n        }\n    }\n\n    private createSortedGroupsForSorting(\n        tileDataSource: DataSource,\n        storageLevel: number,\n        sortedTiles: Tile[],\n        sortedGroups: TextElementLists[]\n    ) {\n        if (sortedTiles.length === 0) {\n            return;\n        }\n\n        const tilesToRender: Tile[] = [];\n\n        for (const tile of sortedTiles) {\n            if (tileDataSource.shouldRenderText(storageLevel, tile.tileKey)) {\n                tilesToRender.push(tile);\n            }\n        }\n\n        const groupedPriorityLists: Map<number, TextElementLists> = new Map();\n\n        for (const tile of tilesToRender) {\n            for (const group of tile.textElementGroups.groups.values()) {\n                if (group.elements.length === 0) {\n                    continue;\n                }\n\n                const foundGroup = groupedPriorityLists.get(group.priority);\n                if (foundGroup === undefined) {\n                    groupedPriorityLists.set(\n                        group.priority,\n                        new TextElementLists([new TileTextElements(tile, group)])\n                    );\n                } else {\n                    foundGroup.lists.push(new TileTextElements(tile, group));\n                }\n            }\n        }\n\n        if (groupedPriorityLists.size === 0) {\n            return;\n        }\n\n        for (const g of groupedPriorityLists) {\n            const lists = g[1];\n            sortedGroups.push(lists);\n        }\n\n        sortedGroups.sort((a: TextElementLists, b: TextElementLists) => {\n            return b.priority - a.priority;\n        });\n\n        const printTextInfo = false;\n\n        if (PRINT_LABEL_DEBUG_INFO && printTextInfo) {\n            let outString = \"\";\n            for (const textElementLists of sortedGroups) {\n                let size = 0;\n                for (const tileTextElements of textElementLists.lists) {\n                    size += tileTextElements.group.elements.length;\n                }\n                outString += `priority ${textElementLists.priority} size: ${size}\\n`;\n            }\n            logger.log(outString);\n        }\n    }\n\n    private selectTextElementsToUpdateByDistance(textElementLists: TextElementLists) {\n        const farDistanceLimitRatio = Math.max(\n            this.m_options.maxDistanceRatioForTextLabels!,\n            this.m_options.maxDistanceRatioForPoiLabels!\n        );\n        const maxViewDistance = getMaxViewDistance(this.m_viewState, farDistanceLimitRatio);\n\n        for (const tileTextElements of textElementLists.lists) {\n            this.prepareTextElementGroup(\n                tileTextElements.group,\n                tileTextElements.tile.tileKey,\n                maxViewDistance\n            );\n        }\n    }\n\n    private placeTextElements(time: number, placeNewTextElements: boolean) {\n        const renderParams: RenderParams = {\n            numRenderedTextElements: 0,\n            fadeAnimationRunning: false,\n            time\n        };\n\n        const placeStartTime =\n            this.overloaded && this.m_viewState.isDynamic ? PerformanceTimer.now() : undefined;\n\n        if (placementStats) {\n            placementStats.clear();\n        }\n\n        if (this.m_textElementStateCache.size === 0) {\n            logger.debug(\"Text element cache empty.\");\n            return;\n        }\n\n        const placeNew = this.m_forceNewLabelsPass || placeNewTextElements;\n        if (this.m_forceNewLabelsPass) {\n            if (!placeNewTextElements) {\n                logger.debug(\"Force new label pass\");\n            }\n            this.m_forceNewLabelsPass = false;\n        }\n        const maxNumPlacedTextElements = this.m_options.maxNumVisibleLabels!;\n\n        // TODO: HARP-7648. Potential performance improvement. Place persistent labels + rejected\n        // candidates from previous frame if there's been no placement in this one.\n        const groupStates = this.m_textElementStateCache.sortedGroupStates;\n        let currentPriority: number = groupStates[0].priority;\n        let currentPriorityBegin: number = 0;\n\n        for (let i = 0; i < groupStates.length; ++i) {\n            const textElementGroupState = groupStates[i];\n            if (placementStats) {\n                ++placementStats.totalGroups;\n            }\n\n            const newPriority = textElementGroupState.priority;\n            if (placeNew && currentPriority !== newPriority) {\n                // Place all new labels of the previous priority before placing the persistent\n                // labels of this priority.\n                this.placeNewTextElements(currentPriorityBegin, i, renderParams);\n                if (isPlacementTimeExceeded(placeStartTime)) {\n                    break;\n                }\n                currentPriority = newPriority;\n                currentPriorityBegin = i;\n            }\n            if (\n                !this.placeTextElementGroup(\n                    textElementGroupState,\n                    renderParams,\n                    maxNumPlacedTextElements,\n                    Pass.PersistentLabels\n                )\n            ) {\n                break;\n            }\n\n            if (isPlacementTimeExceeded(placeStartTime)) {\n                break;\n            }\n        }\n\n        if (placeNew) {\n            // Place new text elements of the last priority.\n            this.placeNewTextElements(currentPriorityBegin, groupStates.length, renderParams);\n        }\n\n        if (placementStats) {\n            placementStats.numRenderedTextElements = renderParams.numRenderedTextElements;\n            placementStats.log();\n        }\n\n        if (renderParams.fadeAnimationRunning) {\n            this.m_viewUpdateCallback();\n        }\n    }\n\n    private placeNewTextElements(\n        beginGroupIndex: number,\n        endGroupIndex: number,\n        renderParams: RenderParams\n    ) {\n        const groupStates = this.m_textElementStateCache.sortedGroupStates;\n        for (let i = beginGroupIndex; i < endGroupIndex; ++i) {\n            if (\n                !this.placeTextElementGroup(\n                    groupStates[i],\n                    renderParams,\n                    this.m_options.maxNumVisibleLabels!,\n                    Pass.NewLabels\n                )\n            ) {\n                break;\n            }\n        }\n    }\n\n    private placeOverlayTextElements() {\n        if (this.m_overlayTextElements === undefined || this.m_overlayTextElements.length === 0) {\n            return;\n        }\n\n        const screenSize = this.m_tmpVector.set(\n            this.m_screenProjector.width,\n            this.m_screenProjector.height\n        );\n        const screenXOrigin = -screenSize.width / 2.0;\n        const screenYOrigin = screenSize.height / 2.0;\n\n        // Place text elements one by one.\n        for (const textElement of this.m_overlayTextElements!) {\n            // Get the TextElementStyle.\n            const textElementStyle = this.m_textStyleCache.getTextElementStyle(textElement.style);\n            const textCanvas = textElementStyle.textCanvas;\n            if (textCanvas === undefined) {\n                continue;\n            }\n\n            const forceNewPassOnLoaded = false;\n            this.initializeGlyphs(textElement, textElementStyle, forceNewPassOnLoaded);\n\n            if (textElement.loadingState !== LoadingState.Initialized) {\n                continue;\n            }\n\n            const layer = textCanvas.getLayer(textElement.renderOrder || DEFAULT_TEXT_CANVAS_LAYER);\n\n            // Move onto the next TextElement if we cannot continue adding glyphs to this layer.\n            if (layer !== undefined) {\n                if (layer.storage.drawCount + textElement.glyphs!.length > layer.storage.capacity) {\n                    continue;\n                }\n            }\n\n            // Set the current style for the canvas.\n            textCanvas.textRenderStyle = textElement.renderStyle!;\n            textCanvas.textLayoutStyle = textElement.layoutStyle!;\n\n            // Place text.\n            let textPath;\n            if (!(textElement.type === TextElementType.PathLabel)) {\n                // Adjust the label positioning.\n                tempScreenPosition.x = screenXOrigin + textElement.position.x * screenSize.width;\n                tempScreenPosition.y = screenYOrigin - textElement.position.y * screenSize.height;\n                if (textElement.xOffset !== undefined) {\n                    tempScreenPosition.x += textElement.xOffset;\n                }\n                if (textElement.yOffset !== undefined) {\n                    tempScreenPosition.y -= textElement.yOffset;\n                }\n\n                tempPosition.x = tempScreenPosition.x;\n                tempPosition.y = tempScreenPosition.y;\n                tempPosition.z = 0.0;\n                addTextToCanvas(textElement, textCanvas, tempPosition);\n            } else {\n                // Adjust the label positioning.\n                tempScreenPosition.x = screenXOrigin;\n                tempScreenPosition.y = screenYOrigin;\n                if (textElement.xOffset !== undefined) {\n                    tempScreenPosition.x += textElement.xOffset;\n                }\n                if (textElement.yOffset !== undefined) {\n                    tempScreenPosition.y -= textElement.yOffset;\n                }\n\n                // Get the screen points that define the label's segments and create a path with\n                // them.\n                // TODO: HARP-7648. Optimize array allocations.\n                const screenPoints: THREE.Vector2[] = [];\n                for (const pt of textElement.path!) {\n                    const pX = tempScreenPosition.x + pt.x * screenSize.width;\n                    const pY = tempScreenPosition.y - pt.y * screenSize.height;\n                    screenPoints.push(new THREE.Vector2(pX, pY));\n                }\n                textPath = new SimplePath();\n                for (let i = 0; i < screenPoints.length - 1; ++i) {\n                    textPath.add(new THREE.LineCurve(screenPoints[i], screenPoints[i + 1]));\n                }\n                addTextToCanvas(textElement, textCanvas, tempPosition, textPath, true);\n            }\n        }\n    }\n\n    private getDistanceScalingFactor(\n        label: TextElement,\n        distance: number,\n        lookAtDistance: number\n    ): number {\n        // Distance scale is based on relation between camera focus point distance and\n        // the actual label distance. For labels close to camera look at point the scale\n        // remains unchanged, the farther is label from that point the smaller size it is\n        // rendered in screen space. This method is unaffected by near and far clipping planes\n        // distances, but may be improved by taking FOV into equation or customizing the\n        // focus point screen position based on horizon, actual ground, tilt ets.\n        let factor = lookAtDistance / distance;\n        // The label.distanceScale property defines the influence ratio at which\n        // distance affects the final scaling of label.\n        factor = 1.0 + (factor - 1.0) * label.distanceScale;\n        // Preserve the constraints\n        factor = Math.max(factor, this.m_options.labelDistanceScaleMin!);\n        factor = Math.min(factor, this.m_options.labelDistanceScaleMax!);\n        return factor;\n    }\n\n    private getDistanceFadingFactor(\n        label: TextElement,\n        state: TextElementState,\n        maxVisibilityDist: number\n    ): number {\n        let distanceFadeValue = 1.0;\n        const textDistance = state.viewDistance;\n\n        if (textDistance !== undefined && label.fadeFar !== undefined && label.fadeFar > 0.0) {\n            const fadeNear = label.fadeNear === undefined ? 0.0 : label.fadeNear;\n            const fadeFar = label.fadeFar;\n            if (fadeFar > fadeNear) {\n                distanceFadeValue =\n                    1.0 -\n                    THREE.MathUtils.clamp(\n                        (textDistance / maxVisibilityDist - fadeNear) / (fadeFar - fadeNear),\n                        0.0,\n                        1.0\n                    );\n            }\n        }\n        return distanceFadeValue;\n    }\n\n    private addPointLabel(\n        labelState: TextElementState,\n        position: THREE.Vector3,\n        screenPosition: THREE.Vector2,\n        poiRenderer: PoiRenderer,\n        textCanvas: TextCanvas,\n        renderParams: RenderParams,\n        iconIndex?: number\n    ): boolean {\n        const pointLabel: TextElement = labelState.element;\n        const textRenderState: RenderState | undefined = labelState.textRenderState;\n\n        assert(iconIndex === undefined || labelState.iconRenderStates !== undefined);\n        const iconRenderState: RenderState =\n            iconIndex !== undefined\n                ? labelState.iconRenderStates![iconIndex]\n                : labelState.iconRenderState!;\n        assert(iconRenderState !== undefined);\n\n        // Find the label's original position.\n        tempScreenPosition.x = tempPoiScreenPosition.x = screenPosition.x;\n        tempScreenPosition.y = tempPoiScreenPosition.y = screenPosition.y;\n\n        // Scale the text depending on the label's distance to the camera \"zero\" plane.\n        const textDistance = pointToPlaneDistance(\n            position,\n            this.m_viewState.worldCenter,\n            this.m_cameraLookAt\n        );\n        if (\n            pointLabel.fadeFar !== undefined &&\n            (pointLabel.fadeFar <= 0.0 ||\n                pointLabel.fadeFar * this.m_viewState.maxVisibilityDist < textDistance)\n        ) {\n            // The label is farther away than fadeFar value, which means it is totally\n            // transparent.\n            if (placementStats) {\n                ++placementStats.tooFar;\n            }\n            return false;\n        }\n        labelState.setViewDistance(textDistance);\n\n        // Check if there is need to check for screen space for the label's icon.\n        const poiInfo = pointLabel.poiInfo;\n        let iconRejected = false;\n\n        // Check if icon should be rendered at this zoomLevel\n        const renderIcon =\n            poiInfo !== undefined &&\n            MathUtils.isClamped(\n                this.m_viewState.zoomLevel,\n                poiInfo.iconMinZoomLevel,\n                poiInfo.iconMaxZoomLevel\n            ) &&\n            poiInfo!.isValid !== false;\n\n        const distanceScaleFactor = this.getDistanceScalingFactor(\n            pointLabel,\n            textDistance,\n            this.m_viewState.lookAtDistance\n        );\n        const iconReady = renderIcon && poiRenderer.prepareRender(pointLabel, this.m_viewState.env);\n\n        if (iconReady) {\n            const result = placeIcon(\n                iconRenderState,\n                poiInfo!,\n                tempPoiScreenPosition,\n                distanceScaleFactor,\n                this.m_viewState.env,\n                this.m_screenCollisions\n            );\n            if (result === PlacementResult.Invisible) {\n                iconRenderState.reset();\n\n                if (placementStats) {\n                    ++placementStats.numNotVisible;\n                }\n                return false;\n            }\n            iconRejected = result === PlacementResult.Rejected;\n        } else if (renderIcon && poiInfo!.isValid !== false) {\n            // Ensure that text elements still loading icons get a chance to be rendered if\n            // there's no text element updates in the next frames.\n            this.m_forceNewLabelsPass = true;\n        }\n\n        const distanceFadeFactor = this.getDistanceFadingFactor(\n            pointLabel,\n            labelState,\n            this.m_viewState.maxVisibilityDist\n        );\n        const renderText = shouldRenderPointText(labelState, this.m_viewState, this.m_options);\n\n        // Render the label's text...\n        // textRenderState is always defined at this point.\n        if (renderText) {\n            // Multi point (icons) features (line markers) will use single placement anchor, but\n            // single point labels (POIs, etc.) may use multi-placement algorithm.\n            const placeResult = placePointLabel(\n                labelState,\n                tempScreenPosition,\n                distanceScaleFactor,\n                textCanvas,\n                this.m_viewState.env,\n                this.m_screenCollisions,\n                iconRejected,\n                tempPosition,\n                iconIndex === undefined\n            );\n            if (placeResult === PlacementResult.Invisible) {\n                if (placementStats) {\n                    placementStats.numPoiTextsInvisible++;\n                }\n                labelState.reset();\n                return false;\n            }\n\n            const textRejected = placeResult === PlacementResult.Rejected;\n            if (!iconRejected) {\n                const textIsOptional: boolean =\n                    pointLabel.poiInfo !== undefined && pointLabel.poiInfo.textIsOptional === true;\n                iconRejected = textRejected && !textIsOptional;\n            }\n\n            if (textRejected) {\n                textRenderState!.startFadeOut(renderParams.time);\n            }\n\n            const textNeedsDraw =\n                (!textRejected && shouldRenderPoiText(labelState, this.m_viewState)) ||\n                textRenderState!.isFading();\n\n            if (textNeedsDraw) {\n                if (!textRejected) {\n                    textRenderState!.startFadeIn(renderParams.time);\n                }\n                renderParams.fadeAnimationRunning =\n                    renderParams.fadeAnimationRunning || textRenderState!.isFading();\n                if (\n                    addTextBufferToCanvas(\n                        labelState,\n                        textCanvas,\n                        tempPosition,\n                        distanceFadeFactor,\n                        distanceScaleFactor\n                    ) &&\n                    placementStats\n                ) {\n                    placementStats.numRenderedPoiTexts++;\n                }\n            }\n        }\n        // ... and render the icon (if any).\n        if (iconReady) {\n            if (iconRejected) {\n                iconRenderState!.startFadeOut(renderParams.time);\n            } else {\n                iconRenderState!.startFadeIn(renderParams.time);\n            }\n\n            renderParams.fadeAnimationRunning =\n                renderParams.fadeAnimationRunning || iconRenderState!.isFading();\n\n            const opacity = iconRenderState.opacity * distanceFadeFactor;\n            if (opacity > 0) {\n                // Same as for text, don't allocate screen space for an icon that's fading out so\n                // that any label blocked by it gets a chance to be placed as soon as any other\n                // surrounding new labels.\n                const allocateSpace = poiInfo!.reserveSpace !== false && !iconRejected;\n                poiRenderer.renderPoi(\n                    poiInfo!,\n                    tempPoiScreenPosition,\n                    this.m_screenCollisions,\n                    labelState.renderDistance,\n                    distanceScaleFactor,\n                    allocateSpace,\n                    opacity,\n                    this.m_viewState.env\n                );\n\n                if (placementStats) {\n                    placementStats.numRenderedPoiIcons++;\n                }\n            }\n        }\n        renderParams.numRenderedTextElements++;\n        return true;\n    }\n\n    private addPoiLabel(\n        labelState: TextElementState,\n        poiRenderer: PoiRenderer,\n        textCanvas: TextCanvas,\n        renderParams: RenderParams\n    ): boolean {\n        const worldPosition = getWorldPosition(\n            labelState.element,\n            this.m_viewState.projection,\n            this.m_viewState.env,\n            this.m_tmpVector3\n        );\n        // Only process labels frustum-clipped labels\n        if (this.m_screenProjector.project(worldPosition, tempScreenPosition) === undefined) {\n            return false;\n        }\n        // Add this POI as a point label.\n        return this.addPointLabel(\n            labelState,\n            worldPosition,\n            tempScreenPosition,\n            poiRenderer,\n            textCanvas,\n            renderParams\n        );\n    }\n\n    private addLineMarkerLabel(\n        labelState: TextElementState,\n        poiRenderer: PoiRenderer,\n        shieldGroups: number[][],\n        textCanvas: TextCanvas,\n        renderParams: RenderParams\n    ): void {\n        const lineMarkerLabel = labelState.element;\n        const path = lineMarkerLabel.points as THREE.Vector3[];\n\n        // Early exit if the line marker doesn't have the necessary data.\n        const poiInfo = lineMarkerLabel.poiInfo!;\n        if (\n            path.length === 0 ||\n            !poiRenderer.prepareRender(lineMarkerLabel, this.m_viewState.env)\n        ) {\n            return;\n        }\n\n        // Initialize the shield group for this lineMarker.\n        let shieldGroup: number[] | undefined;\n        if (poiInfo.shieldGroupIndex !== undefined) {\n            shieldGroup = shieldGroups[poiInfo.shieldGroupIndex];\n            if (shieldGroup === undefined) {\n                shieldGroup = [];\n                shieldGroups[poiInfo.shieldGroupIndex] = shieldGroup;\n            }\n        }\n\n        const lineTechnique = poiInfo.technique as LineMarkerTechnique;\n        const minDistanceSqr =\n            lineTechnique.minDistance !== undefined\n                ? lineTechnique.minDistance * lineTechnique.minDistance\n                : 0;\n\n        // Process markers (with shield groups).\n        if (minDistanceSqr > 0 && shieldGroup !== undefined) {\n            for (let pointIndex = 0; pointIndex < path.length; ++pointIndex) {\n                const point = path[pointIndex];\n                // Only process labels frustum-clipped labels\n                if (this.m_screenProjector.project(point, tempScreenPosition) !== undefined) {\n                    // Find a suitable location for the lineMarker to be placed at.\n                    let tooClose = false;\n                    for (let j = 0; j < shieldGroup.length; j += 2) {\n                        const distanceSqr = Math2D.distSquared(\n                            shieldGroup[j],\n                            shieldGroup[j + 1],\n                            tempScreenPosition.x,\n                            tempScreenPosition.y\n                        );\n                        tooClose = distanceSqr < minDistanceSqr;\n                        if (tooClose) {\n                            break;\n                        }\n                    }\n\n                    // Place it as a point label if it's not to close to other marker in the\n                    // same shield group.\n                    if (!tooClose) {\n                        if (\n                            this.addPointLabel(\n                                labelState,\n                                point,\n                                tempScreenPosition,\n                                poiRenderer,\n                                textCanvas,\n                                renderParams,\n                                pointIndex\n                            )\n                        ) {\n                            shieldGroup.push(tempScreenPosition.x, tempScreenPosition.y);\n                        }\n                    }\n                }\n            }\n        }\n        // Process markers (without shield groups).\n        else {\n            for (let pointIndex = 0; pointIndex < path.length; ++pointIndex) {\n                const point = path[pointIndex];\n                // Only process labels frustum-clipped labels\n                if (this.m_screenProjector.project(point, tempScreenPosition) !== undefined) {\n                    this.addPointLabel(\n                        labelState,\n                        point,\n                        tempScreenPosition,\n                        poiRenderer,\n                        textCanvas,\n                        renderParams,\n                        pointIndex\n                    );\n                }\n            }\n        }\n    }\n\n    private addPathLabel(\n        labelState: TextElementState,\n        screenPoints: THREE.Vector2[],\n        textCanvas: TextCanvas,\n        renderParams: RenderParams\n    ): boolean {\n        // TODO: HARP-7649. Add fade out transitions for path labels.\n        const textMaxDistance = getMaxViewDistance(\n            this.m_viewState,\n            this.m_options.maxDistanceRatioForTextLabels!\n        );\n        const pathLabel = labelState.element;\n\n        // Limit the text rendering of path labels in the far distance.\n        if (\n            !(\n                pathLabel.ignoreDistance === true ||\n                labelState.viewDistance === undefined ||\n                labelState.viewDistance < textMaxDistance\n            )\n        ) {\n            if (placementStats) {\n                ++placementStats.tooFar;\n            }\n            labelState.textRenderState!.reset();\n            return false;\n        }\n\n        if (\n            pathLabel.fadeFar !== undefined &&\n            (pathLabel.fadeFar <= 0.0 ||\n                pathLabel.fadeFar * this.m_viewState.maxVisibilityDist < labelState.renderDistance)\n        ) {\n            // The label is farther away than fadeFar value, which means it is totally\n            // transparent\n            if (placementStats) {\n                ++placementStats.tooFar;\n            }\n            labelState.textRenderState!.reset();\n            return false;\n        }\n\n        // Get the screen points that define the label's segments and create a path with\n        // them.\n        let textPath = new THREE.Path();\n        tempScreenPosition.copy(screenPoints[0]);\n        for (let i = 0; i < screenPoints.length - 1; ++i) {\n            textPath.add(new SimpleLineCurve(screenPoints[i], screenPoints[i + 1]));\n        }\n        // Flip the path if the label is gonna be rendered downwards.\n        if (textPath.getPoint(0.5).x - textPath.getPoint(0.51).x > 0) {\n            tempScreenPosition.copy(screenPoints[screenPoints.length - 1]);\n            textPath = new THREE.Path();\n            for (let i = screenPoints.length - 1; i > 0; --i) {\n                textPath.add(new SimpleLineCurve(screenPoints[i], screenPoints[i - 1]));\n            }\n        }\n\n        // Update the real rendering distance to have smooth fading and scaling\n        labelState.setViewDistance(\n            computeViewDistance(pathLabel, this.m_viewState.worldCenter, this.m_cameraLookAt)\n        );\n        const textRenderDistance = -labelState.renderDistance;\n\n        // Scale the text depending on the label's distance to the camera.\n        const distanceScaleFactor = this.getDistanceScalingFactor(\n            pathLabel,\n            textRenderDistance,\n            this.m_viewState.lookAtDistance\n        );\n        const prevSize = textCanvas.textRenderStyle.fontSize.size;\n        textCanvas.textRenderStyle.fontSize.size *= distanceScaleFactor;\n\n        if (\n            placePathLabel(\n                labelState,\n                textPath,\n                tempScreenPosition,\n                textCanvas,\n                this.m_screenCollisions\n            ) !== PlacementResult.Ok\n        ) {\n            textCanvas.textRenderStyle.fontSize.size = prevSize;\n            if (placementStats) {\n                ++placementStats.numNotVisible;\n            }\n            labelState.textRenderState!.reset();\n            return false;\n        }\n\n        labelState.textRenderState!.startFadeIn(renderParams.time);\n\n        let opacity = pathLabel.renderStyle!.opacity;\n\n        if (labelState.textRenderState!.isFading()) {\n            opacity *= labelState.textRenderState!.opacity;\n            renderParams.fadeAnimationRunning = true;\n        }\n\n        if (labelState.textRenderState!.opacity === 0) {\n            textCanvas.textRenderStyle.fontSize.size = prevSize;\n            return false;\n        }\n\n        const prevOpacity = textCanvas.textRenderStyle.opacity;\n        const prevBgOpacity = textCanvas.textRenderStyle.backgroundOpacity;\n        const distanceFadeFactor = this.getDistanceFadingFactor(\n            pathLabel,\n            labelState,\n            this.m_viewState.maxVisibilityDist\n        );\n        textCanvas.textRenderStyle.opacity = opacity * distanceFadeFactor;\n        textCanvas.textRenderStyle.backgroundOpacity =\n            textCanvas.textRenderStyle.opacity * pathLabel.renderStyle!.backgroundOpacity;\n\n        tempPosition.z = labelState.renderDistance;\n\n        addTextToCanvas(pathLabel, textCanvas, tempPosition, textPath);\n        renderParams.numRenderedTextElements++;\n\n        // Restore previous style values for text elements using the same style.\n        textCanvas.textRenderStyle.fontSize.size = prevSize;\n        textCanvas.textRenderStyle.opacity = prevOpacity;\n        textCanvas.textRenderStyle.backgroundOpacity = prevBgOpacity;\n        return true;\n    }\n\n    private checkIfOverloaded(dataSourceTileList: DataSourceTileList[]): boolean {\n        // Count the number of TextElements in the scene to see if we have to switch to\n        // \"overloadMode\".\n        let numTextElementsInScene = 0;\n\n        dataSourceTileList.forEach(renderListEntry => {\n            for (const tile of renderListEntry.renderedTiles.values()) {\n                numTextElementsInScene += tile.textElementGroups.count();\n            }\n        });\n        const newOverloaded = numTextElementsInScene > OVERLOAD_LABEL_LIMIT;\n\n        if (newOverloaded && !this.m_overloaded) {\n            logger.debug(\"Overloaded Mode enabled.\");\n        }\n        this.m_overloaded = newOverloaded;\n        return this.m_overloaded;\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { DecodedTile, GeometryType, TextPathGeometry } from \"@here/harp-datasource-protocol\";\nimport { GeoBox, OrientedBox3, Projection, TileKey } from \"@here/harp-geoutils\";\nimport { assert, CachedResource, LoggerManager } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\nimport { AnimatedExtrusionTileHandler } from \"./AnimatedExtrusionHandler\";\nimport { CopyrightInfo } from \"./copyrights/CopyrightInfo\";\nimport { DataSource } from \"./DataSource\";\nimport { ElevationRange } from \"./ElevationRangeSource\";\nimport { LodMesh } from \"./geometry/LodMesh\";\nimport { TileGeometryLoader } from \"./geometry/TileGeometryLoader\";\nimport { MapView } from \"./MapView\";\nimport { PathBlockingElement } from \"./PathBlockingElement\";\nimport { PerformanceStatistics } from \"./Statistics\";\nimport { TextElement } from \"./text/TextElement\";\nimport { TextElementGroup } from \"./text/TextElementGroup\";\nimport { TextElementGroupPriorityList } from \"./text/TextElementGroupPriorityList\";\nimport { TileTextStyleCache } from \"./text/TileTextStyleCache\";\nimport { MapViewUtils, TileOffsetUtils } from \"./Utils\";\n\nconst logger = LoggerManager.instance.create(\"Tile\");\n\nexport type TileObject = THREE.Object3D & {\n    /**\n     * Distance of this object from the [[Tile]]'s center.\n     */\n    displacement?: THREE.Vector3;\n\n    /**\n     * This stores the THREE.Object3D renderOrder property, we need to back it up because we need to\n     * reduce it if the tile is used as fall back. When it is used normally, the renderOrder needs\n     * to be reset.\n     * @hidden\n     */\n    _backupRenderOrder?: number;\n};\n\ninterface DisposableObject {\n    geometry?: THREE.BufferGeometry | THREE.Geometry;\n    geometries?: Array<THREE.BufferGeometry | THREE.Geometry>;\n    material?: THREE.Material[] | THREE.Material;\n}\n\n/**\n * An interface for optional feature data that is saved in a `THREE.Object3D`'s `userData`\n * property.\n */\nexport interface TileFeatureData {\n    /**\n     * The original type of geometry.\n     */\n    geometryType?: GeometryType;\n\n    /**\n     * An optional array of sorted indices into geometry where the feature starts. The lists of IDs\n     * and starting indices (starts) must have the same size.\n     * Feature i starts at starts[i] and ends at starts[i+1]-1, except for the last feature, which\n     * ends at the last index in the object's geometry.\n     */\n    starts?: number[];\n\n    /**\n     * An optional object containing properties defined by the developer. It has the same size as\n     * the list of IDs and the starting indices (starts).\n     */\n    objInfos?: Array<{} | undefined>;\n}\n\n/**\n * Minimum estimated size of a JS object.\n */\nconst MINIMUM_SMALL_OBJECT_SIZE_ESTIMATION = 16;\nconst MINIMUM_OBJECT_SIZE_ESTIMATION = 100;\n\n/**\n * Compute the memory footprint of `TileFeatureData`.\n */\nexport function getFeatureDataSize(featureData: TileFeatureData): number {\n    let numBytes = MINIMUM_OBJECT_SIZE_ESTIMATION;\n\n    if (featureData.starts !== undefined) {\n        numBytes += featureData.starts.length * 8;\n    }\n    if (featureData.objInfos !== undefined) {\n        // 16 (estimated) bytes per objInfos\n        numBytes += featureData.objInfos.length * MINIMUM_SMALL_OBJECT_SIZE_ESTIMATION;\n    }\n\n    return numBytes;\n}\n\n/**\n * Missing Typedoc\n */\nexport enum TileLoaderState {\n    Initialized,\n    Loading,\n    Loaded,\n    Decoding,\n    Ready,\n    Canceled,\n    Failed\n}\n\nexport interface ITileLoader {\n    state: TileLoaderState;\n    payload?: ArrayBufferLike | {};\n    decodedTile?: DecodedTile;\n\n    isFinished: boolean;\n\n    loadAndDecode(): Promise<TileLoaderState>;\n    waitSettled(): Promise<TileLoaderState>;\n\n    updatePriority(area: number): void;\n\n    cancel(): void;\n}\n\n/**\n * An object that contains information about resources used by a tile.\n */\nexport interface TileResourceUsage {\n    /**\n     * The estimated memory usage, in bytes.\n     */\n    estimatedMemoryUsage: number;\n    /**\n     * The amount of vertices used by a tile.\n     */\n    numVertices: number;\n    /**\n     * The amount of colors used by a tile.\n     */\n    numColors: number;\n    /**\n     * The amount of objects used by a tile.\n     */\n    numObjects: number;\n    /**\n     * The amount of geometries used by a tile.\n     */\n    numGeometries: number;\n    /**\n     * The amount of materials used by a tile.\n     */\n    numMaterials: number;\n}\n\n/**\n * Simple information about resource usage by the [[Tile]]. Heap and GPU information are\n * estimations.\n */\nexport interface TileResourceInfo {\n    /**\n     * Estimated number of bytes used on the heap.\n     */\n    heapSize: number;\n    /**\n     * Estimated number of bytes used on the GPU.\n     */\n    gpuSize: number;\n    /**\n     * Number of [[THREE.Object3D]] in this tile.\n     */\n    num3dObjects: number;\n    /**\n     * Number of [[TextElement]]s in this tile.\n     */\n    numTextElements: number;\n    /**\n     * @deprecated This counter has been merged with numTextElements.\n     * Number of user [[TextElement]]s in this tile.\n     */\n    numUserTextElements: number;\n}\n\nexport interface TextElementIndex {\n    groupIndex: number;\n    elementIndex: number;\n}\n\n/**\n * The class that holds the tiled data for a [[DataSource]].\n */\nexport class Tile implements CachedResource {\n    /**\n     * A list of the THREE.js objects stored in this `Tile`.\n     */\n    readonly objects: TileObject[] = [];\n\n    /**\n     * The optional list of HERE TileKeys of tiles with geometries that cross\n     * the boundaries of this `Tile`.\n     */\n    readonly dependencies: string[] = new Array<string>();\n\n    /**\n     * The bounding box of this `Tile` in geocoordinates.\n     */\n    readonly geoBox: GeoBox;\n\n    /**\n     * Copyright information of this `Tile`'s data.\n     */\n    copyrightInfo?: CopyrightInfo[];\n\n    /**\n     * Keeping some stats for the individual [[Tile]]s to analyze caching behavior.\n     *\n     * The frame the [[Tile]] was last requested. This is required to know when the given [[Tile]]\n     * can be removed from the cache.\n     */\n    frameNumLastRequested: number = -1;\n\n    /**\n     * The frame the `Tile` was first visible.\n     */\n    frameNumVisible: number = -1;\n\n    /**\n     * The last frame this `Tile` has been rendered (or was in the visible set). Used to determine\n     * visibility of `Tile` at the end of a frame, if the number is the current frame number, it is\n     * visible.\n     */\n    frameNumLastVisible: number = -1;\n\n    /**\n     * After removing from cache, this is the number of frames the `Tile` was visible.\n     */\n    numFramesVisible: number = 0;\n\n    /**\n     * Version stamp of the visibility set in the [[TileManager]]. If the counter is different, the\n     * visibility of the Tile's objects has to be calculated. Optimization to reduce overhead of\n     * computing visibility.\n     */\n    visibilityCounter: number = -1;\n\n    /**\n     * @hidden\n     *\n     * Used to tell if the Tile is used temporarily as a fallback tile.\n     *\n     * levelOffset is in in the range [-quadTreeSearchDistanceUp,\n     * quadTreeSearchDistanceDown], where these values come from the\n     * [[VisibleTileSetOptions]]\n     */\n    levelOffset: number = 0;\n\n    /**\n     * If the tile should not be rendered, this is used typically when the tile in question\n     * is completely covered by another tile and therefore can be skipped without any visual\n     * impact. Setting this value directly affects the [[willRender]] method, unless\n     * overriden by deriving classes.\n     */\n    skipRendering = false;\n\n    /**\n     * @hidden\n     *\n     * Prepared text geometries optimized for display.\n     */\n    protected preparedTextPaths: TextPathGeometry[] | undefined;\n\n    /**\n     * The bounding box of this `Tile` in world coordinates.\n     */\n    private readonly m_boundingBox = new OrientedBox3();\n\n    private m_disposed: boolean = false;\n    private m_localTangentSpace = false;\n\n    private m_forceHasGeometry: boolean | undefined = undefined;\n\n    private m_tileLoader?: ITileLoader;\n    private m_decodedTile?: DecodedTile;\n    private m_tileGeometryLoader?: TileGeometryLoader;\n\n    // Used for [[TextElement]]s that are stored in the data, and that are placed explicitly,\n    // fading in and out.\n    private m_textElementGroups = new TextElementGroupPriorityList();\n\n    // Blocks other labels from showing.\n    private readonly m_pathBlockingElements: PathBlockingElement[] = [];\n\n    // If `true`, the text content of the [[Tile]] changed after the last time it was rendered.\n    // It's `Undefined` when no text content has been added yet.\n    private m_textElementsChanged: boolean | undefined;\n\n    // Center of the tile's unelevated bounding box world coordinates.\n    private readonly m_worldCenter = new THREE.Vector3();\n    private m_visibleArea: number = 0;\n    // Tile elevation range in meters\n    private readonly m_elevationRange: ElevationRange = { minElevation: 0, maxElevation: 0 };\n    // Maximum height of geometry on this tile above ground level.\n    private m_maxGeometryHeight?: number;\n\n    private m_resourceInfo: TileResourceInfo | undefined;\n\n    // List of owned textures for disposal\n    private m_ownedTextures: WeakSet<THREE.Texture> = new WeakSet();\n\n    private m_animatedExtrusionTileHandler: AnimatedExtrusionTileHandler | undefined;\n\n    private m_textStyleCache: TileTextStyleCache;\n    private m_uniqueKey: number;\n    private m_offset: number;\n    /**\n     * Creates a new [[Tile]].\n     *\n     * @param dataSource The [[DataSource]] that created this [[Tile]].\n     * @param tileKey The unique identifier for this [[Tile]]. Currently only up to level 24 is\n     * supported, because of the use of the upper bits for the offset.\n     * @param offset The optional offset, this is an integer which represents what multiple of 360\n     * degrees to shift, only useful for flat projections, hence optional.\n     * @param localTangentSpace Whether the tile geometry is in local tangent space or not.\n     */\n    constructor(\n        readonly dataSource: DataSource,\n        readonly tileKey: TileKey,\n        offset: number = 0,\n        localTangentSpace?: boolean\n    ) {\n        this.geoBox = this.dataSource.getTilingScheme().getGeoBox(this.tileKey);\n        this.updateBoundingBox();\n        this.m_worldCenter.copy(this.boundingBox.position);\n        this.m_localTangentSpace = localTangentSpace !== undefined ? localTangentSpace : false;\n        this.m_textStyleCache = new TileTextStyleCache(this);\n        this.m_offset = offset;\n        this.m_uniqueKey = TileOffsetUtils.getKeyForTileKeyAndOffset(this.tileKey, this.offset);\n    }\n\n    /**\n     * The visibility status of the [[Tile]]. It is actually visible or planned to become visible.\n     */\n    get isVisible(): boolean {\n        // Tiles are not evaluated as invisible until the second frame they aren't requested.\n        // This happens in order to prevent that, during [[VisibleTileSet]] visibility evaluation,\n        // visible tiles that haven't yet been evaluated for the current frame are preemptively\n        // removed from [[DataSourceCache]].\n        return this.frameNumLastRequested >= this.dataSource.mapView.frameNumber - 1;\n    }\n\n    set isVisible(visible: boolean) {\n        this.frameNumLastRequested = visible ? this.dataSource.mapView.frameNumber : -1;\n    }\n\n    /**\n     * The [[Projection]] currently used by the [[MapView]].\n     */\n    get projection(): Projection {\n        return this.dataSource.projection;\n    }\n\n    /**\n     * The [[MapView]] this `Tile` belongs to.\n     */\n    get mapView(): MapView {\n        return this.dataSource.mapView;\n    }\n\n    /**\n     * Whether the data of this tile is in local tangent space or not.\n     * If the data is in local tangent space (i.e. up vector is (0,0,1) for high zoomlevels) then\n     * [[MapView]] will rotate the objects before rendering using the rotation matrix of the\n     * oriented [[boundingBox]].\n     */\n    get localTangentSpace(): boolean {\n        return this.m_localTangentSpace;\n    }\n\n    /*\n     * The size of this Tile in system memory.\n     */\n    get memoryUsage(): number {\n        if (this.m_resourceInfo === undefined) {\n            this.computeResourceInfo();\n        }\n        return this.m_resourceInfo!.heapSize;\n    }\n\n    /**\n     * The center of this `Tile` in world coordinates.\n     */\n    get center(): THREE.Vector3 {\n        return this.m_worldCenter;\n    }\n\n    /**\n     * Gets the key to uniquely represent this tile (based on the [[tileKey]] and [[offset]]), note\n     * this key is only unique within the given [[DataSource]], to get a key which is unique across\n     * [[DataSource]]s see [[DataSourceCache.getKeyForTile]].\n     */\n    get uniqueKey(): number {\n        return this.m_uniqueKey;\n    }\n\n    /**\n     * The optional offset, this is an integer which represents what multiple of 360 degrees to\n     * shift, only useful for flat projections, hence optional.\n     */\n    get offset(): number {\n        return this.m_offset;\n    }\n\n    /**\n     * The optional offset, this is an integer which represents what multiple of 360 degrees to\n     * shift, only useful for flat projections, hence optional.\n     * @param offset Which multiple of 360 degrees to apply to the [[Tile]].\n     */\n    set offset(offset: number) {\n        if (this.m_offset !== offset) {\n            this.m_uniqueKey = TileOffsetUtils.getKeyForTileKeyAndOffset(this.tileKey, offset);\n        }\n        this.m_offset = offset;\n    }\n\n    /**\n     * Compute [[TileResourceInfo]] of this `Tile`. May be using a cached value. The method\n     * `invalidateResourceInfo` can be called beforehand to force a recalculation.\n     *\n     * @returns `TileResourceInfo` for this `Tile`.\n     */\n    getResourceInfo(): TileResourceInfo {\n        if (this.m_resourceInfo === undefined) {\n            this.computeResourceInfo();\n        }\n        return this.m_resourceInfo!;\n    }\n\n    /**\n     * Force invalidation of the cached [[TileResourceInfo]]. Useful after the `Tile` has been\n     * modified.\n     */\n    invalidateResourceInfo(): void {\n        this.m_resourceInfo = undefined;\n    }\n\n    /**\n     * Add ownership of a texture to this tile. The texture will be disposed if the `Tile` is\n     * disposed.\n     * @param texture Texture to be owned by the `Tile`\n     */\n    addOwnedTexture(texture: THREE.Texture): void {\n        this.m_ownedTextures.add(texture);\n    }\n\n    /**\n     * @internal\n     * @deprecated\n     *\n     * Gets the list of developer-defined [[TextElement]] in this `Tile`. This list is always\n     * rendered first.\n     */\n    get userTextElements(): TextElementGroup {\n        let group = this.m_textElementGroups.groups.get(TextElement.HIGHEST_PRIORITY);\n        if (group === undefined) {\n            group = new TextElementGroup(TextElement.HIGHEST_PRIORITY);\n            this.m_textElementGroups.groups.set(group.priority, group);\n        }\n        return group;\n    }\n\n    /**\n     * Adds a developer-defined [[TextElement]] to this `Tile`. The [[TextElement]] is always\n     * visible, if it's in the map's currently visible area.\n     *\n     * @deprecated use [[addTextElement]].\n     *\n     * @param textElement The Text element to add.\n     */\n    addUserTextElement(textElement: TextElement) {\n        textElement.priority = TextElement.HIGHEST_PRIORITY;\n        this.addTextElement(textElement);\n    }\n\n    /**\n     * Removes a developer-defined [[TextElement]] from this `Tile`.\n     *\n     * @deprecated use [[removeTextElement]].\n     *\n     * @param textElement A developer-defined TextElement to remove.\n     * @returns `true` if the element has been removed successfully; `false` otherwise.\n     */\n    removeUserTextElement(textElement: TextElement): boolean {\n        textElement.priority = TextElement.HIGHEST_PRIORITY;\n        return this.removeTextElement(textElement);\n    }\n\n    /**\n     * Adds a [[TextElement]] to this `Tile`, which is added to the visible set of\n     * [[TextElement]]s based on the capacity and visibility. The [[TextElement]]'s priority\n     * controls if or when it becomes visible.\n     *\n     * To ensure that a TextElement is visible, use a high value for its priority, such as\n     * `TextElement.HIGHEST_PRIORITY`. Since the number of visible TextElements is limited by the\n     * screen space, not all TextElements are visible at all times.\n     *\n     * @param textElement The TextElement to add.\n     */\n    addTextElement(textElement: TextElement) {\n        this.textElementGroups.add(textElement);\n\n        if (this.m_textElementsChanged === false) {\n            // HARP-8733: Clone all groups so that they are handled as new element groups\n            // by TextElementsRenderer and it doesn't try to reuse the same state stored\n            // for the old groups.\n            this.m_textElementGroups = this.textElementGroups.clone();\n        }\n        this.textElementsChanged = true;\n    }\n\n    /**\n     * Adds a [[PathBlockingElement]] to this `Tile`. This path has the highest priority and blocks\n     * all other labels. There maybe in future a use case to give it a priority, but as that isn't\n     * yet required, it is left to be implemented later if required.\n     * @param blockingElement Element which should block all other labels.\n     */\n    addBlockingElement(blockingElement: PathBlockingElement) {\n        this.m_pathBlockingElements.push(blockingElement);\n    }\n\n    /**\n     * Removes a [[TextElement]] from this `Tile`. For the element to be removed successfully, the\n     * priority of the [[TextElement]] has to be equal to its priority when it was added.\n     *\n     * @param textElement The TextElement to remove.\n     * @returns `true` if the TextElement has been removed successfully; `false` otherwise.\n     */\n    removeTextElement(textElement: TextElement): boolean {\n        const groups = this.textElementGroups;\n        if (!groups.remove(textElement)) {\n            return false;\n        }\n        if (this.m_textElementsChanged === false) {\n            // HARP-8733: Clone all groups so that they are handled as new element groups\n            // by TextElementsRenderer and it doesn't try to reuse the same state stored\n            // for the old groups.\n            this.m_textElementGroups = groups.clone();\n        }\n        this.textElementsChanged = true;\n        return true;\n    }\n\n    /**\n     * @internal\n     *\n     * Gets the current [[GroupedPriorityList]] which contains a list of all [[TextElement]]s to be\n     * selected and placed for rendering.\n     */\n    get textElementGroups(): TextElementGroupPriorityList {\n        return this.m_textElementGroups;\n    }\n\n    /**\n     * Gets the current modification state for the list of [[TextElement]]s in the `Tile`. If the\n     * value is `true` the TextElement is placed for rendering during the next frame.\n     */\n    get textElementsChanged(): boolean {\n        return this.m_textElementsChanged ?? false;\n    }\n\n    set textElementsChanged(changed: boolean) {\n        this.m_textElementsChanged = changed;\n    }\n\n    /**\n     * Returns true if the `Tile` has any text elements to render.\n     */\n    hasTextElements(): boolean {\n        return this.m_textElementGroups.count() > 0;\n    }\n\n    /**\n     * Get the current blocking elements.\n     */\n    get blockingElements(): PathBlockingElement[] {\n        return this.m_pathBlockingElements;\n    }\n\n    /**\n     * Called before [[MapView]] starts rendering this `Tile`.\n     *\n     * @param zoomLevel The current zoom level.\n     * @returns Returns `true` if this `Tile` should be rendered. Influenced directly by the\n     * [[skipRendering]] property unless specifically overriden in deriving classes.\n     */\n    willRender(_zoomLevel: number): boolean {\n        return !this.skipRendering;\n    }\n\n    /**\n     * Called after [[MapView]] has rendered this `Tile`.\n     */\n    didRender(): void {\n        // to be overridden by subclasses\n    }\n\n    /**\n     * Estimated visible area of tile used for sorting the priorities during loading.\n     */\n    get visibleArea(): number {\n        return this.m_visibleArea;\n    }\n\n    set visibleArea(area: number) {\n        this.m_visibleArea = area;\n        if (this.tileLoader !== undefined) {\n            this.tileLoader.updatePriority(area);\n        }\n    }\n\n    /**\n     * @internal\n     * Gets the tile's ground elevation range in meters.\n     */\n    get elevationRange(): ElevationRange {\n        return this.m_elevationRange;\n    }\n\n    /**\n     * @internal\n     * Sets the tile's ground elevation range in meters.\n     *\n     * @param elevationRange The elevation range.\n     */\n    set elevationRange(elevationRange: ElevationRange) {\n        if (\n            elevationRange.minElevation === this.m_elevationRange.minElevation &&\n            elevationRange.maxElevation === this.m_elevationRange.maxElevation &&\n            elevationRange.calculationStatus === this.m_elevationRange.calculationStatus\n        ) {\n            return;\n        }\n\n        this.m_elevationRange.minElevation = elevationRange.minElevation;\n        this.m_elevationRange.maxElevation = elevationRange.maxElevation;\n        this.m_elevationRange.calculationStatus = elevationRange.calculationStatus;\n        this.elevateGeoBox();\n\n        // Only update bounding box if tile has already been decoded and a maximum geometry height\n        // is provided by the data source.\n        if (this.m_maxGeometryHeight !== undefined) {\n            assert(this.decodedTile?.boundingBox === undefined);\n            this.updateBoundingBox();\n        }\n    }\n\n    /**\n     * Gets the decoded tile; it is removed after geometry handling.\n     */\n    get decodedTile(): DecodedTile | undefined {\n        return this.m_decodedTile;\n    }\n\n    /**\n     * Applies the decoded tile to the tile.\n     * If the geometry is empty, then the tile's forceHasGeometry flag is set.\n     * Map is updated.\n     * @param decodedTile The decoded tile to set.\n     */\n    set decodedTile(decodedTile: DecodedTile | undefined) {\n        this.m_decodedTile = decodedTile;\n        this.invalidateResourceInfo();\n\n        if (decodedTile === undefined) {\n            return;\n        }\n\n        if (decodedTile.geometries.length === 0) {\n            this.forceHasGeometry(true);\n        }\n\n        // If the decoder provides a more accurate bounding box than the one we computed from\n        // the flat geo box we take it instead. Otherwise, if an elevation range was set, elevate\n        // bounding box to match the elevated geometry.\n        this.m_maxGeometryHeight = decodedTile.boundingBox\n            ? undefined\n            : decodedTile.maxGeometryHeight ?? 0;\n        this.elevateGeoBox();\n        this.updateBoundingBox(decodedTile.boundingBox);\n\n        const stats = PerformanceStatistics.instance;\n        if (stats.enabled && decodedTile.decodeTime !== undefined) {\n            stats.currentFrame.addValue(\"decode.decodingTime\", decodedTile.decodeTime);\n            stats.currentFrame.addValue(\"decode.decodedTiles\", 1);\n        }\n\n        if (decodedTile.copyrightHolderIds !== undefined) {\n            this.copyrightInfo = decodedTile.copyrightHolderIds.map(id => ({ id }));\n        }\n\n        this.dataSource.requestUpdate();\n    }\n\n    /**\n     * Remove the decodedTile when no longer needed.\n     */\n    removeDecodedTile() {\n        this.m_decodedTile = undefined;\n        this.invalidateResourceInfo();\n    }\n\n    /**\n     * Called by the [[TileLoader]] after the `Tile` has finished loading its map data. Can be used\n     * to add content to the `Tile`. The [[DecodedTile]] should still be available.\n     */\n    loadingFinished() {\n        // To be used in subclasses.\n    }\n\n    /**\n     * Called when the default implementation of `dispose()` needs\n     * to free the geometry of a `Tile` object.\n     *\n     * @param object The object that references the geometry.\n     * @returns `true` if the geometry can be disposed.\n     */\n    // tslint:disable-next-line:no-unused-variable\n    shouldDisposeObjectGeometry(object: TileObject): boolean {\n        return true;\n    }\n\n    /**\n     * Called when the default implementation of `dispose()` needs\n     * to free a `Tile` object's material.\n     *\n     * @param object The object referencing the geometry.\n     * @returns `true` if the material can be disposed.\n     */\n    // tslint:disable-next-line:no-unused-variable\n    shouldDisposeObjectMaterial(object: TileObject): boolean {\n        return true;\n    }\n\n    /**\n     * Called when the default implementation of `dispose()` needs\n     * to free a Texture that is part of a `Tile` object's material.\n     *\n     * @param texture The texture about to be disposed.\n     * @returns `true` if the texture can be disposed.\n     */\n    shouldDisposeTexture(texture: THREE.Texture): boolean {\n        return this.m_ownedTextures.has(texture);\n    }\n\n    /**\n     * Returns `true` if this `Tile` has been disposed.\n     */\n    get disposed(): boolean {\n        return this.m_disposed;\n    }\n\n    /**\n     * Gets the [[TileGeometryLoader]] that manages this tile.\n     */\n    get tileGeometryLoader(): TileGeometryLoader | undefined {\n        return this.m_tileGeometryLoader;\n    }\n\n    /**\n     * Sets the [[TileGeometryLoader]] to manage this tile.\n     *\n     * @param tileGeometryLoader A [[TileGeometryLoader]] instance to manage the geometry creation\n     *      for this tile.\n     */\n    set tileGeometryLoader(tileGeometryLoader: TileGeometryLoader | undefined) {\n        this.m_tileGeometryLoader = tileGeometryLoader;\n    }\n\n    /**\n     * `True` if the basic geometry has been loaded, and the `Tile` is ready  for display.\n     */\n    get basicGeometryLoaded(): boolean {\n        return this.m_tileGeometryLoader === undefined\n            ? this.hasGeometry\n            : this.m_tileGeometryLoader.basicGeometryLoaded || this.m_tileGeometryLoader.isFinished;\n    }\n\n    /**\n     * `True` if all geometry of the `Tile` has been loaded.\n     */\n    get allGeometryLoaded(): boolean {\n        return this.m_tileGeometryLoader === undefined\n            ? this.hasGeometry\n            : this.m_tileGeometryLoader.allGeometryLoaded || this.m_tileGeometryLoader.isFinished;\n    }\n\n    /**\n     * MapView checks if this `Tile` is ready to be rendered while culling.\n     *\n     * By default, MapView checks if the [[objects]] list is not empty. However, you can override\n     * this check by manually setting this property.\n     */\n    get hasGeometry(): boolean {\n        if (this.m_forceHasGeometry === undefined) {\n            return this.objects.length !== 0;\n        } else {\n            return this.m_forceHasGeometry;\n        }\n    }\n\n    /**\n     * Overrides the default value for [[hasGeometry]] if value is not `undefined`.\n     *\n     * @param value A new value for the [[hasGeometry]] flag.\n     */\n    forceHasGeometry(value: boolean | undefined) {\n        this.m_forceHasGeometry = value;\n    }\n\n    /**\n     * Reset the visibility counter. This will force the visibility check to be rerun on all objects\n     * in this `Tile`.\n     */\n    resetVisibilityCounter(): void {\n        this.visibilityCounter = -1;\n    }\n\n    /**\n     * Gets the [[ITileLoader]] that manages this tile.\n     */\n    get tileLoader(): ITileLoader | undefined {\n        return this.m_tileLoader;\n    }\n\n    /**\n     * Sets the [[ITileLoader]] to manage this tile.\n     *\n     * @param tileLoader A [[ITileLoader]] instance to manage the loading process for this tile.\n     */\n    set tileLoader(tileLoader: ITileLoader | undefined) {\n        this.m_tileLoader = tileLoader;\n    }\n\n    /**\n     * Loads this `Tile` geometry.\n     */\n    load() {\n        const tileLoader = this.tileLoader;\n        if (tileLoader === undefined) {\n            return;\n        }\n\n        tileLoader\n            .loadAndDecode()\n            .then(tileLoaderState => {\n                assert(tileLoaderState === TileLoaderState.Ready);\n                const decodedTile = tileLoader.decodedTile;\n                this.decodedTile = decodedTile;\n            })\n            .catch(tileLoaderState => {\n                if (\n                    tileLoaderState !== TileLoaderState.Canceled &&\n                    tileLoaderState !== TileLoaderState.Failed\n                ) {\n                    logger.error(\"Unknown error\" + tileLoaderState);\n                }\n            });\n    }\n\n    /**\n     * Handler for animation of `Tile` geometries.\n     */\n    get animatedExtrusionTileHandler(): AnimatedExtrusionTileHandler | undefined {\n        return this.m_animatedExtrusionTileHandler;\n    }\n\n    set animatedExtrusionTileHandler(handler: AnimatedExtrusionTileHandler | undefined) {\n        this.m_animatedExtrusionTileHandler = handler;\n    }\n\n    /**\n     * Text style cache for this tile.\n     * @hidden\n     */\n    get textStyleCache(): TileTextStyleCache {\n        return this.m_textStyleCache;\n    }\n\n    /**\n     * Frees the rendering resources allocated by this `Tile`.\n     *\n     * The default implementation of this method frees the geometries and the materials for all the\n     * reachable objects.\n     * Textures are freed if they are owned by this `Tile` (i.e. if they where created by this\n     * `Tile`or if the ownership was explicitely set to this `Tile` by [[addOwnedTexture]]).\n     */\n    clear() {\n        const disposeMaterial = (material: THREE.Material) => {\n            Object.getOwnPropertyNames(material).forEach((property: string) => {\n                const materialProperty = (material as any)[property];\n                if (materialProperty !== undefined && materialProperty instanceof THREE.Texture) {\n                    const texture = materialProperty;\n                    if (this.shouldDisposeTexture(texture)) {\n                        texture.dispose();\n                    }\n                }\n            });\n            material.dispose();\n        };\n\n        const disposeObject = (object: TileObject & DisposableObject) => {\n            if (this.shouldDisposeObjectGeometry(object)) {\n                if (object.geometry !== undefined) {\n                    object.geometry.dispose();\n                }\n\n                if (object.geometries !== undefined) {\n                    for (const geometry of object.geometries) {\n                        geometry.dispose();\n                    }\n                }\n            }\n\n            if (object.material !== undefined && this.shouldDisposeObjectMaterial(object)) {\n                if (object.material instanceof Array) {\n                    object.material.forEach((material: THREE.Material | undefined) => {\n                        if (material !== undefined) {\n                            disposeMaterial(material);\n                        }\n                    });\n                } else {\n                    disposeMaterial(object.material);\n                }\n            }\n        };\n\n        this.objects.forEach((rootObject: TileObject & DisposableObject) => {\n            rootObject.traverse((object: TileObject & DisposableObject) => {\n                disposeObject(object);\n            });\n\n            disposeObject(rootObject);\n        });\n        this.objects.length = 0;\n\n        if (this.preparedTextPaths) {\n            this.preparedTextPaths = [];\n        }\n\n        if (this.m_animatedExtrusionTileHandler !== undefined) {\n            this.m_animatedExtrusionTileHandler.dispose();\n        }\n\n        this.m_textStyleCache.clear();\n        this.clearTextElements();\n        this.invalidateResourceInfo();\n    }\n\n    /**\n     * Removes all [[TextElement]] from the tile.\n     */\n    clearTextElements() {\n        if (!this.hasTextElements()) {\n            return;\n        }\n        this.textElementsChanged = true;\n        this.m_pathBlockingElements.splice(0);\n        this.textElementGroups.clear();\n    }\n\n    /**\n     * Disposes this `Tile`, freeing all geometries and materials for the reachable objects.\n     */\n    dispose() {\n        if (this.m_disposed) {\n            return;\n        }\n        if (this.m_tileLoader) {\n            this.m_tileLoader.cancel();\n            this.m_tileLoader = undefined;\n        }\n        if (this.m_tileGeometryLoader !== undefined) {\n            this.m_tileGeometryLoader.dispose();\n            this.m_tileGeometryLoader = undefined;\n        }\n        this.clear();\n        this.m_disposed = true;\n        // Ensure that tile is removable from tile cache.\n        this.frameNumLastRequested = 0;\n    }\n\n    /**\n     * Computes the offset in the x world coordinates corresponding to this tile, based on\n     * its [[offset]].\n     * @returns The x offset.\n     */\n    computeWorldOffsetX(): number {\n        return this.projection.worldExtent(0, 0).max.x * this.offset;\n    }\n\n    /**\n     * Update tile for current map view zoom level\n     * @param zoomLevel Zoom level of the map view\n     */\n    update(zoomLevel: number): void {\n        for (const object of this.objects) {\n            if (object instanceof LodMesh) {\n                object.setLevelOfDetail(zoomLevel - this.tileKey.level);\n            }\n        }\n    }\n\n    /**\n     * Gets the tile's bounding box.\n     */\n    get boundingBox(): OrientedBox3 {\n        return this.m_boundingBox;\n    }\n\n    /**\n     * Updates the tile's world bounding box.\n     * @param [newBoundingBox] The new bounding box to set. If undefined, the bounding box will be\n     * computed by projecting the tile's geoBox.\n     */\n    private updateBoundingBox(newBoundingBox?: OrientedBox3) {\n        if (newBoundingBox) {\n            this.m_boundingBox.copy(newBoundingBox);\n            this.m_worldCenter.copy(this.boundingBox.position);\n        } else {\n            this.projection.projectBox(this.geoBox, this.boundingBox);\n        }\n    }\n\n    /**\n     * Elevates the tile's geo box using the elevation range and maximum geometry height.\n     */\n    private elevateGeoBox() {\n        this.geoBox.southWest.altitude = this.m_elevationRange.minElevation;\n        this.geoBox.northEast.altitude =\n            this.m_elevationRange.maxElevation + (this.m_maxGeometryHeight ?? 0);\n    }\n\n    private computeResourceInfo(): void {\n        let heapSize = 0;\n        let num3dObjects = 0;\n        let numTextElements = 0;\n\n        const aggregatedObjSize = {\n            heapSize: 0,\n            gpuSize: 0\n        };\n\n        // Keep a map of the uuids of the larger objects, like Geometries, Materials and Attributes.\n        // They should be counted only once even if they are shared.\n        const visitedObjects: Map<string, boolean> = new Map();\n\n        for (const object of this.objects) {\n            if (object.visible) {\n                num3dObjects++;\n            }\n            MapViewUtils.estimateObject3dSize(object, aggregatedObjSize, visitedObjects);\n        }\n\n        for (const group of this.textElementGroups.groups) {\n            numTextElements += group[1].elements.length;\n        }\n        // 216 was the shallow size of a single TextElement last time it has been checked, 312 bytes\n        // was the minimum retained size of a TextElement that was not being rendered. If a\n        // TextElement is actually rendered, the size may be _much_ bigger.\n        heapSize += numTextElements * 312;\n\n        if (this.m_decodedTile !== undefined && this.m_decodedTile.tileInfo !== undefined) {\n            aggregatedObjSize.heapSize += this.m_decodedTile.tileInfo.numBytes;\n        }\n\n        this.m_resourceInfo = {\n            heapSize: aggregatedObjSize.heapSize + heapSize,\n            gpuSize: aggregatedObjSize.gpuSize,\n            num3dObjects,\n            numTextElements,\n            numUserTextElements: 0\n        };\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { LoggerManager, PerformanceTimer } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\n\nconst logger = LoggerManager.instance.create(\"Statistics\");\n\n/**\n * A simple ring buffer to store the last `n` values of the timer. The buffer works on\n * a First-In-First-Out (FIFO) basis.\n */\nexport class RingBuffer<T> {\n    buffer: T[];\n    size: number;\n    head: number;\n    tail: number;\n\n    /**\n     * Sets up the ring buffer.\n     *\n     * @param capacity The buffer's capacity.\n     */\n    constructor(readonly capacity: number) {\n        this.buffer = new Array(capacity);\n        this.capacity = capacity;\n        this.head = this.tail = this.size = 0;\n    }\n\n    /**\n     * Clears the contents, removes all elements.\n     */\n    clear(): void {\n        this.head = this.tail = this.size = 0;\n    }\n\n    /**\n     * Adds a single element to the ring buffer.\n     *\n     * @param data Data element.\n     */\n    enqOne(data: T): void {\n        let next = this.head + 1;\n        if (next >= this.capacity) {\n            next = 0;\n        }\n        if (this.size < this.capacity) {\n            this.size++;\n        }\n\n        this.buffer[this.head] = data;\n        this.head = next;\n\n        if (this.size === this.capacity) {\n            this.tail = this.head;\n        }\n    }\n\n    /**\n     * Adds one or more elements.\n     *\n     * @param data The elements to add.\n     */\n    enq(...data: T[]): void {\n        for (const v of data) {\n            this.enqOne(v);\n        }\n    }\n\n    /**\n     * Obtains the oldest element (FIFO). May throw an exception if a buffer underrun occurs.\n     * Before calling this method, make sure that `size > 0`.\n     */\n    deq(): T {\n        if (this.size === 0) {\n            throw new Error(\"Ringbuffer underrun\");\n        }\n\n        const data = this.buffer[this.tail];\n        let next = this.tail + 1;\n        if (next >= this.capacity) {\n            next = 0;\n        }\n        if (this.size > 0) {\n            this.size--;\n        }\n\n        this.tail = next;\n        return data;\n    }\n\n    /**\n     * Obtains the oldest element (FIFO) without removing it. Throws an exception if a buffer is\n     * empty. Before calling this method, make sure that `size > 0`.\n     */\n    get top(): T {\n        if (this.size === 0) {\n            throw new Error(\"Ringbuffer underrun\");\n        }\n\n        return this.buffer[this.tail];\n    }\n\n    /**\n     * Obtains the latest element (LIFO) without removing it. Throws an exception if a buffer is\n     * empty. Before calling this method, make sure that `size > 0`.\n     */\n    get bottom(): T {\n        if (this.size === 0) {\n            throw new Error(\"Ringbuffer underrun\");\n        }\n\n        let previous = this.head - 1;\n        if (previous < 0) {\n            previous = this.capacity - 1;\n        }\n        return this.buffer[previous];\n    }\n\n    /**\n     * Creates an iterator for the buffer.\n     */\n    iterator(): RingBuffer.Iterator<T> {\n        return new RingBuffer.Iterator<T>(this);\n    }\n\n    /**\n     * Returns a copy of the buffer, where the elements are properly sorted from oldest to newest.\n     */\n    asArray(): T[] {\n        const array = new Array<T>();\n        for (let i = 0; i < this.size; i++) {\n            array.push(this.buffer[(this.tail + i) % this.capacity]);\n        }\n        return array;\n    }\n}\n\nexport namespace RingBuffer {\n    /**\n     * A local class for RingBuffer<T>\n     */\n    export class Iterator<T> {\n        /**\n         * Creates an iterator for the ring buffer.\n         *\n         * @param m_buffer `Ringbuffer` to iterate over.\n         * @param m_index Start index.\n         */\n        constructor(private m_buffer: RingBuffer<T>, private m_index: number = 0) {}\n\n        /**\n         * Gets the iterator's current value. This function does not fail even if an overrun occurs.\n         * To detect an overrun, watch the result for [[next]].\n         */\n        get value(): T {\n            return this.m_buffer.buffer[\n                (this.m_buffer.tail + this.m_index) % this.m_buffer.capacity\n            ];\n        }\n\n        /**\n         * Advances the iterator to the next element.\n         *\n         * @returns `true` if the iterator is still valid; `false` if an overrun occurs.\n         */\n        next(): boolean {\n            this.m_index++;\n            return this.m_index < this.m_buffer.size;\n        }\n    }\n}\n\n/**\n * An interface for a Timer class, that abstracts the basic functions of a Timer. Implemented\n * by SimpleTimer, SampledTimer, and MultiStageTimer.\n */\nexport interface Timer {\n    readonly name: string;\n    readonly value?: number;\n\n    /**\n     * Resets value to be able to start again.\n     */\n    reset(): void;\n\n    /**\n     * Starts the timer. Returns the current time, based on `Performance.now()`.\n     */\n    start(): number;\n\n    /**\n     * Stops the timer. Requires that the timer has started.\n     */\n    stop(): number;\n\n    /**\n     * Samples the timer. Requires that the timer has started. This function does not modify\n     * the timer's internal state.\n     *\n     * @returns Current timer value. `-1` if statistics are disabled.\n     */\n    now(): number;\n\n    /**\n     * Sets the measurement value for the amount of time that has elapsed from start() to stop().\n     * Use this function to override the timer's duration.\n     *\n     * @param val The timer's duration.\n     */\n    setValue(val: number | undefined): void;\n}\n\n/**\n * A simple timer that stores only the latest measurement.\n */\nexport class SimpleTimer implements Timer {\n    /** `true` if timer has been started. */\n    running = false;\n\n    private m_currentValue?: number;\n\n    constructor(public statistics: Statistics, readonly name: string) {}\n\n    /**\n     * Gets the latest measurement. This function may return `undefined` if no measurement\n     * was done.\n     */\n    get value(): number | undefined {\n        return this.m_currentValue;\n    }\n\n    /**\n     * Sets the measurement value for the amount of time that has elapsed from start() to stop().\n     * Use this function to override the timer's duration.\n     *\n     * @param val The timer's duration.\n     */\n    setValue(val: number | undefined) {\n        this.m_currentValue = val;\n    }\n\n    /**\n     * Resets the value to be able to start again.\n     */\n    reset() {\n        this.m_currentValue = undefined;\n    }\n\n    /**\n     * Starts the timer. Returns the current time, based on `Performance.now()`.\n     */\n    start(): number {\n        if (!this.statistics.enabled) {\n            return -1;\n        }\n        if (this.running) {\n            throw new Error(\"Timer '\" + this.name + \"' is already running\");\n        }\n        this.running = true;\n        return (this.m_currentValue = PerformanceTimer.now());\n    }\n\n    /**\n     * Stops the timer. Requires that the timer has started.\n     */\n    stop(): number {\n        if (!this.statistics.enabled) {\n            return -1;\n        }\n        if (!this.running) {\n            throw new Error(\"Timer '\" + this.name + \"' has not been started\");\n        } else {\n            // this.currentValue is a number now!\n            const t = PerformanceTimer.now() - (this.m_currentValue || 0);\n            this.m_currentValue = t;\n            this.setValue(t);\n            this.running = false;\n            return t;\n        }\n    }\n\n    /**\n     * Samples the timer. Requires that the timer has started.\n     *\n     * @returns the current timer value; `-1` if statistics are disabled.\n     */\n    now(): number {\n        if (!this.statistics.enabled) {\n            return -1;\n        }\n        if (!this.running) {\n            throw new Error(\"Timer '\" + this.name + \"' has not been started\");\n        } else {\n            const t = PerformanceTimer.now() - (this.m_currentValue || 0);\n            return t;\n        }\n    }\n}\n\n/**\n * Simple statistics about the values in an array.\n */\nexport interface Stats {\n    /**\n     * The lowest value in the array.\n     */\n    min: number;\n\n    /**\n     * The highest value in the array.\n     */\n    max: number;\n\n    /**\n     * The average duration of all values in the array.\n     */\n    avg: number;\n\n    /**\n     * The median duration of all values in the array.\n     */\n    median: number;\n\n    /**\n     * The 75th percentile median of all values in the array.\n     */\n    median75: number;\n\n    /**\n     * The 90th percentile median of all values in the array.\n     */\n    median90: number;\n\n    /**\n     * The 95th percentile median of all values in the array.\n     */\n    median95: number;\n\n    /**\n     * The 97th percentile median of all values in the array.\n     */\n    median97: number;\n\n    /**\n     * The 99th percentile median of all values in the array.\n     */\n    median99: number;\n\n    /**\n     * The 99.9th percentile median of all values in the array.\n     */\n    median999: number;\n\n    /**\n     * The number of values in the array.\n     */\n    numSamples: number;\n}\n\n/**\n * A timer that stores the last `n` samples in a ring buffer.\n */\nexport class SampledTimer extends SimpleTimer {\n    /**\n     * The number of times the timer has reset.\n     */\n    numResets = 0;\n\n    /**\n     * Maximum samples until the statistics are reset and updated, which may destroy a median\n     * computation.\n     */\n    maxNumSamples = 1000;\n\n    /**\n     * The array of sampled values, its length cannot exceed `maxNumSamples`.\n     */\n    samples = new RingBuffer<number>(this.maxNumSamples);\n\n    /**\n     * Creates a `SampledTimer` instance. Must still be added to statistics if it should be logged!\n     *\n     * @param statistics Statistics to use for management.\n     * @param name Name of the timer. Use colons to build a hierarchy.\n     */\n    constructor(public statistics: Statistics, readonly name: string) {\n        super(statistics, name);\n    }\n\n    /**\n     * Resets the timer and clears all of its historical values.\n     * @override\n     */\n    reset() {\n        super.reset();\n        this.getStats();\n        this.samples.clear();\n        this.numResets++;\n    }\n\n    /**\n     * Add a single measurement to the sample.\n     *\n     * @param val A measurement to add.\n     * @override\n     */\n    setValue(val: number | undefined) {\n        super.setValue(val);\n\n        if (val !== undefined) {\n            this.samples.enqOne(val);\n        }\n    }\n\n    /**\n     * Updates the `min`, `max`, `avg`, and `median` values. Currently, this function is expensive,\n     * as it requires a copy of the sampled values.\n     */\n    getStats(): Stats | undefined {\n        return computeArrayStats(this.samples.asArray());\n    }\n}\n\n/**\n * Only exported for testing\n * @ignore\n *\n * Compute the [[ArrayStats]] for the passed in array of numbers.\n *\n * @param {number[]} samples Array containing sampled values. Will be modified (!) by sorting the\n *      entries.\n * @returns {(Stats | undefined)}\n */\nexport function computeArrayStats(samples: number[]): Stats | undefined {\n    if (samples.length === 0) {\n        return undefined;\n    }\n\n    samples.sort((a: number, b: number) => {\n        return a - b;\n    });\n\n    const min: number = samples[0];\n    const max: number = samples[samples.length - 1];\n    let median: number;\n    let median75: number;\n    let median90: number;\n    let median95: number;\n    let median97: number;\n    let median99: number;\n    let median999: number;\n\n    if (samples.length === 1) {\n        median75 = median90 = median95 = median97 = median99 = median999 = median = samples[0];\n    } else if (samples.length === 2) {\n        median = samples[0] * 0.5 + samples[1] * 0.5;\n        median75 = median90 = median95 = median97 = median99 = median999 = samples[1];\n    } else {\n        const mid = Math.floor(samples.length / 2);\n        median =\n            samples.length % 2 === 0 ? samples[mid - 1] * 0.5 + samples[mid] * 0.5 : samples[mid];\n\n        const mid75 = Math.round(samples.length * 0.75) - 1;\n        median75 = samples[mid75];\n        const mid90 = Math.round(samples.length * 0.9) - 1;\n        median90 = samples[mid90];\n        const mid95 = Math.round(samples.length * 0.95) - 1;\n        median95 = samples[mid95];\n        const mid97 = Math.round(samples.length * 0.97) - 1;\n        median97 = samples[mid97];\n        const mid99 = Math.round(samples.length * 0.99) - 1;\n        median99 = samples[mid99];\n        const mid999 = Math.round(samples.length * 0.999) - 1;\n        median999 = samples[mid999];\n    }\n\n    let sum = 0;\n\n    for (let i = 0, l = samples.length; i < l; i++) {\n        sum += samples[i];\n    }\n\n    const avg = sum / samples.length;\n\n    return {\n        min,\n        max,\n        avg,\n        median,\n        median75,\n        median90,\n        median95,\n        median97,\n        median99,\n        median999,\n        numSamples: samples.length\n    };\n}\n\n/**\n * Only exported for testing\n * @ignore\n *\n * Compute the averages for the passed in array of numbers.\n *\n * @param {number[]} samples Array containing sampled values.\n * @returns {(Stats | undefined)}\n */\nexport function computeArrayAverage(samples: number[]): number | undefined {\n    if (samples.length === 0) {\n        return undefined;\n    }\n\n    let sum = 0;\n\n    for (let i = 0, l = samples.length; i < l; i++) {\n        sum += samples[i];\n    }\n\n    const avg = sum / samples.length;\n\n    return avg;\n}\n\n/**\n * Measures a sequence of connected events, such as multiple processing stages in a function.\n * Each stage is identified with a timer name, that must be a valid timer in the statistics\n * object. Additionally, all timers within a `MultiStageTimer` must be unique.\n *\n * Internally, the `MultiStageTimer` manages a list of timers where at the end of each stage,\n * one timer stops and the next timer starts.\n */\nexport class MultiStageTimer {\n    private currentStage: string | undefined;\n\n    /**\n     * Defines the `MultiStageTimer` with a list of timer names that represent its stages.\n     *\n     * @param statistics The statistics object that manages the timers.\n     * @param name Name of this `MultiStageTimer`.\n     * @param stages List of timer names.\n     */\n    constructor(private statistics: Statistics, readonly name: string, public stages: string[]) {\n        if (stages.length < 1) {\n            throw new Error(\"MultiStageTimer needs stages\");\n        }\n\n        stages.forEach(stage => {\n            if (!statistics.hasTimer(stage)) {\n                throw new Error(\"Unknown timer: \" + stage);\n            }\n        });\n    }\n\n    /**\n     * Gets the timer value for the last stage. If the `MultiStageTimer` did not finish its\n     * last stage, the value is `undefined`.\n     */\n    get value(): number | undefined {\n        return this.statistics.getTimer(this.stages[this.stages.length - 1]).value;\n    }\n\n    /**\n     * Resets the timers across all stages.\n     */\n    reset(): void {\n        if (!this.statistics.enabled) {\n            return;\n        }\n        this.stages.forEach(stage => {\n            this.statistics.getTimer(stage).reset();\n        });\n    }\n\n    /**\n     * Starts the `MultiStageTimer` at its first stage.\n     */\n    start(): number {\n        this.stage = this.stages[0];\n\n        return this.statistics.getTimer(this.stages[0]).value || -1;\n    }\n\n    /**\n     * Stops the `MultiStageTimer`. Returns the measurement of the last stage, which may be\n     * `undefined` if not all stages started.\n     */\n    stop(): number {\n        this.stage = undefined;\n        return this.value !== undefined ? this.value : -1;\n    }\n\n    /**\n     * Gets the current stage.\n     */\n    get stage(): string | undefined {\n        return this.currentStage;\n    }\n\n    /**\n     * Sets the current stage. If a new stage is provided, the current timer (if available) is\n     * stopped, and the next timer is started. If the timer in the next stage is `undefined`,\n     * this is equivalent to calling `stop` on the `MultiStageTimer`.\n     *\n     * @param stage The next stage to start.\n     */\n    set stage(stage: string | undefined) {\n        if (this.currentStage === stage) {\n            return;\n        }\n\n        if (this.statistics.enabled && this.currentStage !== undefined) {\n            this.statistics.getTimer(this.currentStage).stop();\n        }\n\n        this.currentStage = stage;\n\n        if (this.statistics.enabled && this.currentStage !== undefined) {\n            this.statistics.getTimer(this.currentStage).start();\n        }\n    }\n}\n\n/**\n * Manages a set of timers. The main objective of `Statistics` is to log these timers. You can\n * disable statistics to minimize their impact on performance.\n */\nexport class Statistics {\n    private timers: Map<string, Timer>;\n\n    private nullTimer: Timer;\n\n    /**\n     * Sets up a group of timers.\n     *\n     * @param name The statistics name, for logging purposes.\n     * @param enabled If `false`, the timers do not measure the performance.\n     */\n    constructor(public name?: string, public enabled = false) {\n        this.timers = new Map<string, Timer>();\n        this.nullTimer = new SimpleTimer(this, \"<null>\");\n    }\n\n    /**\n     * Adds a timer, based on the name specified.\n     *\n     * @param name The timer's name; must be unique.\n     */\n    createTimer(name: string, keepSamples = true): Timer {\n        const timer = keepSamples ? new SampledTimer(this, name) : new SimpleTimer(this, name);\n\n        return this.addTimer(timer);\n    }\n\n    /**\n     * Adds the timer specified.\n     *\n     * @param timer The timer's name, which must be unique within this statistics object.\n     */\n    addTimer(timer: Timer): Timer {\n        if (this.timers.get(timer.name) !== undefined) {\n            throw new Error(\"Duplicate timer name: '\" + timer.name + \"'\");\n        }\n\n        this.timers.set(timer.name, timer);\n\n        return timer;\n    }\n\n    /**\n     * Gets a timer by name.\n     *\n     * @param name The timer's name.\n     */\n    getTimer(name: string): Timer {\n        if (!this.enabled) {\n            return this.nullTimer;\n        }\n\n        const t = this.timers.get(name);\n        return t === undefined ? this.nullTimer : t;\n    }\n\n    /**\n     * Checks if a timer with the specified name already exists.\n     *\n     * @param name The timer's name.\n     * @returns `true` if a timer with `name` already exists; `false` otherwise.\n     */\n    hasTimer(name: string): boolean {\n        const t = this.timers.get(name);\n        return t !== undefined;\n    }\n\n    /**\n     * Resets all timers.\n     */\n    reset() {\n        this.timers.forEach((timer: Timer) => {\n            timer.reset();\n        });\n    }\n\n    /**\n     * Prints all values to the console.\n     *\n     * @param header Optional header line.\n     * @param footer Optional footer line.\n     */\n    log(header?: string, footer?: string) {\n        if (header !== undefined || this.name !== undefined) {\n            logger.log(header !== undefined ? header : this.name);\n        }\n\n        let maxNameLength = 0;\n\n        this.timers.forEach((timer: Timer) => {\n            maxNameLength = Math.max(maxNameLength, timer.name.length);\n        });\n\n        // simple printing function for number limits the number of decimal points.\n        const print = (v: number | undefined) => {\n            return v !== undefined ? v.toFixed(5) : \"?\";\n        };\n\n        this.timers.forEach((timer: Timer) => {\n            let s = timer.name + \": \" + \" \".repeat(maxNameLength - timer.name.length);\n            s += print(timer.value);\n\n            // sampled timers also update their stats and log them\n            if (timer instanceof SampledTimer) {\n                const simpleStats = timer.getStats();\n                if (simpleStats !== undefined) {\n                    s +=\n                        `  [ min=${print(simpleStats.min)}, max=${print(simpleStats.max)}, ` +\n                        `avg=${print(simpleStats.avg)}, med=${print(simpleStats.median)}, ` +\n                        `med95=${print(simpleStats.median95)}, med99=${print(\n                            simpleStats.median99\n                        )}, ` +\n                        `N=${print(simpleStats.numSamples)} ]`;\n                }\n            }\n            logger.log(s);\n        });\n\n        if (footer !== undefined) {\n            logger.log(footer);\n        }\n    }\n}\n\n/**\n * Class containing all counters, timers and events of the current frame.\n */\nexport class FrameStats {\n    readonly entries: Map<string, number> = new Map();\n    messages?: string[] = undefined;\n\n    /**\n     * Retrieve the value of the performance number.\n     *\n     * @param name Name of the performance number.\n     * @returns The value of the performance number or `undefined` if it has not been declared by\n     *      `setValue` before.\n     */\n    getValue(name: string): number | undefined {\n        return this.entries.get(name);\n    }\n\n    /**\n     * Set the value of the performance number.\n     *\n     * @param name Name of the performance number.\n     * @param name New value of the performance number.\n     */\n    setValue(name: string, value: number) {\n        this.entries.set(name, value);\n    }\n\n    /**\n     * Add a value to the current value of the performance number. If the performance is not known,\n     * it will be initialized with `value`.\n     *\n     * @param name Name of the performance number.\n     * @param name Value to be added to the performance number.\n     */\n    addValue(name: string, value: number) {\n        const oldValue = this.entries.get(name);\n        this.entries.set(name, value + (oldValue === undefined ? 0 : oldValue));\n    }\n\n    /**\n     * Add a text message to the frame, like \"Font XYZ has been loaded\"\n     *\n     * @param message The message to add.\n     */\n    addMessage(message: string) {\n        if (this.messages === undefined) {\n            this.messages = [];\n        }\n        this.messages.push(message);\n    }\n\n    /**\n     * Reset all known performance values to `0` and the messages to `undefined`.\n     */\n    reset() {\n        this.entries.forEach((value: number, name: string) => {\n            this.entries.set(name, 0);\n        });\n\n        this.messages = undefined;\n    }\n}\n\n/**\n * @ignore\n * Only exported for testing.\n *\n * Instead of passing around an array of objects, we store the frame statistics as an object of\n * arrays. This allows convenient computations from [[RingBuffer]],\n */\nexport class FrameStatsArray {\n    readonly frameEntries: Map<string, RingBuffer<number>> = new Map();\n    readonly messages: RingBuffer<string[] | undefined>;\n\n    constructor(readonly capacity: number = 0) {\n        this.messages = new RingBuffer<string[] | undefined>(capacity);\n    }\n\n    get length(): number {\n        return this.messages.size;\n    }\n\n    reset() {\n        this.frameEntries.forEach((buffer: RingBuffer<number>, name: string) => {\n            buffer.clear();\n        });\n        this.messages.clear();\n    }\n\n    addFrame(frameStats: FrameStats) {\n        const currentSize = this.length;\n        const frameEntries = this.frameEntries;\n\n        frameStats.entries.forEach((value: number, name: string) => {\n            let buffer = frameEntries.get(name);\n\n            if (buffer === undefined) {\n                // If there is a buffer that has not been known before, add it to the known buffers,\n                // fill it up with with 0 to the size of all the other buffers to make them of equal\n                // size to make PerfViz happy.\n                buffer = new RingBuffer<number>(this.capacity);\n                for (let i = 0; i < currentSize; i++) {\n                    buffer.enqOne(0);\n                }\n                this.frameEntries.set(name, buffer);\n            }\n            buffer.enqOne(value);\n        });\n\n        this.messages.enq(frameStats.messages);\n    }\n\n    /**\n     * Prints all values to the console.\n     */\n    log() {\n        let maxNameLength = 0;\n        this.frameEntries.forEach((buffer: RingBuffer<number>, name: string) => {\n            maxNameLength = Math.max(maxNameLength, name.length);\n        });\n\n        // simple printing function for number limits the number of decimal points.\n        const print = (v: number | undefined) => {\n            return v !== undefined ? v.toFixed(5) : \"?\";\n        };\n\n        this.frameEntries.forEach((buffer: RingBuffer<number>, name: string) => {\n            let s = name + \": \" + \" \".repeat(maxNameLength - name.length);\n\n            const simpleStats = computeArrayStats(buffer.asArray());\n            if (simpleStats !== undefined) {\n                s +=\n                    `  [ min=${print(simpleStats.min)}, max=${print(simpleStats.max)}, ` +\n                    `avg=${print(simpleStats.avg)}, med=${print(simpleStats.median)}, ` +\n                    `med95=${print(simpleStats.median95)}, med99=${print(simpleStats.median99)}, ` +\n                    `N=${print(simpleStats.numSamples)} ]`;\n            }\n            logger.log(s);\n        });\n    }\n}\n\n/**\n * Chrome's MemoryInfo interface.\n */\ninterface ChromeMemoryInfo {\n    totalJSHeapSize: number;\n    usedJSHeapSize: number;\n    jsHeapSizeLimit: number;\n}\n\nexport interface SimpleFrameStatistics {\n    configs: Map<string, string>;\n    appResults: Map<string, number>;\n    frames: Map<string, number | number[]>;\n    messages: Array<string[] | undefined>;\n    frameStats?: Map<string, Stats | undefined>;\n    zoomLevelLabels?: string[];\n    zoomLevelData?: Map<string, number | number[]>;\n}\n\n/**\n * Performance measurement central. Maintains the current [[FrameStats]], which holds all individual\n * performance numbers.\n *\n * Implemented as an instance for easy access.\n */\nexport class PerformanceStatistics {\n    /**\n     * Returns `true` when the maximum number of storable frames is reached.\n     *\n     * @readonly\n     * @type {boolean}\n     * @memberof PerformanceStatistics\n     */\n    get isFull(): boolean {\n        return this.m_frameEvents.length >= this.maxNumFrames;\n    }\n    /**\n     * Global instance to the instance. The current instance can be overridden by creating a new\n     * `PerformanceStatistics`.\n     */\n    static get instance(): PerformanceStatistics {\n        if (PerformanceStatistics.m_instance === undefined) {\n            PerformanceStatistics.m_instance = new PerformanceStatistics(false, 0);\n        }\n        return PerformanceStatistics.m_instance;\n    }\n\n    private static m_instance?: PerformanceStatistics = undefined;\n\n    /**\n     * Current frame statistics. Contains all values for the current frame. Will be cleared when\n     * [[PerformanceStatistics#storeFrameInfo]] is called.\n     *\n     * @type {FrameStats}\n     * @memberof PerformanceStatistics\n     */\n    readonly currentFrame: FrameStats = new FrameStats();\n\n    /**\n     * @ignore\n     * Only exported for testing.\n     *\n     * Return the array of frame events.\n     */\n    get frameEvents(): FrameStatsArray {\n        return this.m_frameEvents;\n    }\n\n    /**\n     * Additional results stored for the current application run, not per frame. Only the last value\n     * is stored.\n     *\n     * @type {(Map<string, number>)}\n     */\n    readonly appResults: Map<string, number> = new Map();\n\n    /**\n     * Additional configuration values stored for the current application run, not per frame. Only\n     * the last value is stored.\n     *\n     * @type {(Map<string, string>)}\n     * @memberof PerformanceStatistics\n     */\n    readonly configs: Map<string, string> = new Map();\n\n    // Current array of frame events.\n    private m_frameEvents: FrameStatsArray;\n\n    /**\n     * Creates an instance of PerformanceStatistics. Overrides the current `instance`.\n     *\n     * @param {boolean} [enabled=true] If `false` the performance values will not be stored.\n     * @param {number} [maxNumFrames=1000] The maximum number of frames that are to be stored.\n     * @memberof PerformanceStatistics\n     */\n    constructor(public enabled = true, public maxNumFrames = 1000) {\n        PerformanceStatistics.m_instance = this;\n        this.m_frameEvents = new FrameStatsArray(maxNumFrames);\n    }\n\n    /**\n     * Clears all settings, all stored frame events as well as the current frame values.\n     *\n     * @memberof PerformanceStatistics\n     */\n    clear() {\n        this.clearFrames();\n        this.configs.clear();\n        this.appResults.clear();\n    }\n\n    /**\n     * Clears only all stored frame events as well as the current frame values.\n     *\n     * @memberof PerformanceStatistics\n     */\n    clearFrames() {\n        this.m_frameEvents.reset();\n        this.currentFrame.reset();\n    }\n\n    /**\n     * Add the render state information from [[THREE.WebGLInfo]] to the current frame.\n     * @param {THREE.WebGLInfo} webGlInfo\n     */\n    addWebGLInfo(webGlInfo: THREE.WebGLInfo) {\n        if (webGlInfo.render !== undefined) {\n            this.currentFrame.setValue(\n                \"gl.numCalls\",\n                webGlInfo.render.calls === null ? 0 : webGlInfo.render.calls\n            );\n            this.currentFrame.setValue(\n                \"gl.numPoints\",\n                webGlInfo.render.points === null ? 0 : webGlInfo.render.points\n            );\n            this.currentFrame.setValue(\n                \"gl.numLines\",\n                webGlInfo.render.lines === null ? 0 : webGlInfo.render.lines\n            );\n            this.currentFrame.setValue(\n                \"gl.numTriangles\",\n                webGlInfo.render.triangles === null ? 0 : webGlInfo.render.triangles\n            );\n        }\n        if (webGlInfo.memory !== undefined) {\n            this.currentFrame.setValue(\n                \"gl.numGeometries\",\n                webGlInfo.memory.geometries === null ? 0 : webGlInfo.memory.geometries\n            );\n            this.currentFrame.setValue(\n                \"gl.numTextures\",\n                webGlInfo.memory.textures === null ? 0 : webGlInfo.memory.textures\n            );\n        }\n        if (webGlInfo.programs !== undefined) {\n            this.currentFrame.setValue(\n                \"gl.numPrograms\",\n                webGlInfo.programs === null ? 0 : webGlInfo.programs.length\n            );\n        }\n    }\n\n    /**\n     * Add memory statistics to the current frame if available.\n     * @note Currently only supported on Chrome\n     */\n    addMemoryInfo() {\n        if (window !== undefined && window.performance !== undefined) {\n            const memory = (window.performance as any).memory as ChromeMemoryInfo;\n            if (memory !== undefined) {\n                this.currentFrame.setValue(\"memory.totalJSHeapSize\", memory.totalJSHeapSize);\n                this.currentFrame.setValue(\"memory.usedJSHeapSize\", memory.usedJSHeapSize);\n                this.currentFrame.setValue(\"memory.jsHeapSizeLimit\", memory.jsHeapSizeLimit);\n            }\n        }\n    }\n\n    /**\n     * Stores the current frame events into the array of events and clears all values.\n     *\n     * @returns {boolean} Returns `false` if the maximum number of storable frames has been reached.\n     * @memberof PerformanceStatistics\n     */\n    storeAndClearFrameInfo(): boolean {\n        if (this.m_frameEvents.length >= this.maxNumFrames) {\n            return false;\n        }\n\n        this.m_frameEvents.addFrame(this.currentFrame);\n\n        this.currentFrame.reset();\n        return true;\n    }\n\n    /**\n     * Logs all values to the logger.\n     *\n     * @param header Optional header line.\n     * @param footer Optional footer line.\n     */\n    log(header?: string, footer?: string) {\n        logger.log(header !== undefined ? header : \"PerformanceStatistics\");\n\n        const appResults = this.appResults;\n        appResults.forEach((value: number, name: string) => {\n            logger.log(name, value);\n        });\n        const configs = this.configs;\n        configs.forEach((value: string, name: string) => {\n            logger.log(name, value);\n        });\n        this.m_frameEvents.log();\n\n        if (footer !== undefined) {\n            logger.log(footer);\n        }\n    }\n\n    /**\n     * Convert to a plain object that can be serialized. Required to copy the test results over to\n     * nightwatch.\n     */\n    getAsPlainObject(onlyLastFrame: boolean = false): any {\n        const appResults: any = {};\n        const configs: any = {};\n        const frames: any = {};\n        const plainObject: any = {\n            configs,\n            appResults,\n            frames\n        };\n\n        const appResultValues = this.appResults;\n        appResultValues.forEach((value: number, name: string) => {\n            appResults[name] = value;\n        });\n\n        const configValues = this.configs;\n        configValues.forEach((value: string, name: string) => {\n            configs[name] = value;\n        });\n\n        if (onlyLastFrame) {\n            for (const [name, buffer] of this.m_frameEvents.frameEntries) {\n                frames[name] = buffer.bottom;\n            }\n        } else {\n            for (const [name, buffer] of this.m_frameEvents.frameEntries) {\n                frames[name] = buffer.asArray();\n            }\n        }\n        plainObject.messages = this.m_frameEvents.messages.asArray();\n        return plainObject;\n    }\n\n    /**\n     * Convert the last frame values to a plain object that can be serialized. Required to copy the\n     * test results over to nightwatch.\n     */\n    getLastFrameStatistics(): any {\n        return this.getAsPlainObject(true);\n    }\n\n    /**\n     * Convert to a plain object that can be serialized. Required to copy the test results over to\n     * nightwatch.\n     */\n    getAsSimpleFrameStatistics(onlyLastFrame: boolean = false): SimpleFrameStatistics {\n        const configs: Map<string, string> = new Map();\n        const appResults: Map<string, number> = new Map();\n        const frames: Map<string, number | number[]> = new Map();\n\n        const simpleStatistics: SimpleFrameStatistics = {\n            configs,\n            appResults,\n            frames,\n            messages: this.m_frameEvents.messages.asArray()\n        };\n\n        const appResultValues = this.appResults;\n        appResultValues.forEach((value: number, name: string) => {\n            appResults.set(name, value);\n        });\n\n        const configValues = this.configs;\n        configValues.forEach((value: string, name: string) => {\n            configs.set(name, value);\n        });\n\n        if (onlyLastFrame) {\n            for (const [name, buffer] of this.m_frameEvents.frameEntries) {\n                frames.set(name, buffer.bottom);\n            }\n        } else {\n            for (const [name, buffer] of this.m_frameEvents.frameEntries) {\n                frames.set(name, buffer.asArray());\n            }\n        }\n        return simpleStatistics;\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { TileKey } from \"@here/harp-geoutils\";\nimport { ExtrusionFeature, ExtrusionFeatureDefs } from \"@here/harp-materials\";\nimport { MathUtils } from \"@here/harp-utils\";\nimport { MapView, MapViewEventNames, RenderEvent } from \"./MapView\";\nimport { Tile } from \"./Tile\";\n\nimport * as THREE from \"three\";\n\n/**\n * Animation states for extrusion effect\n */\nexport enum AnimatedExtrusionState {\n    None,\n    Started,\n    Playing,\n    Finished\n}\n\n/**\n * Handles animated extrusion effect of the buildings in [[MapView]].\n */\nexport class AnimatedExtrusionHandler {\n    /**\n     * Animate the extrusion of the buildings if set to `true`.\n     */\n    enabled: boolean = true;\n    /**\n     * Duration of the building's extrusion in milliseconds\n     */\n    duration: number = 750;\n    /**\n     * If `forceEnabled` is set to `true` then `animateExtrusion` and `animateExtrusionDuration`\n     * values from [[extrudedPolygonTechnique]] will be ignored in [[Tile]] and\n     * `AnimatedExtrusionHandler.enabled` with `AnimatedExtrusionHandler.duration` will be used\n     */\n    forceEnabled: boolean = false;\n\n    private m_zoomLevelPrevious: number;\n    private m_tileHandlerMap: Map<Tile, AnimatedExtrusionTileHandler> = new Map();\n    private m_zoomDirection: number = 0;\n    private m_forceAnimatedExtrusion: boolean | undefined;\n    private m_forceAnimatedExtrusionDuration: number | undefined;\n\n    /**\n     * Creates an [[AnimatedExtrusionHandler]] in [[MapView]].\n     *\n     * @param m_mapView Instance of [[MapView]] that passes `zoomLevel`\n     * through the `zoom` property update\n     */\n    constructor(private m_mapView: MapView) {\n        this.m_zoomLevelPrevious = this.m_mapView.zoomLevel;\n    }\n\n    /**\n     * Returns direction of the last zoom event.\n     * Zoom in - positive value, zoom out - negative value\n     */\n    get zoomDirection(): number {\n        return this.m_zoomDirection;\n    }\n\n    /**\n     * [[MapView]] updates zoom level. Then [[AnimatedExtrusionTileHandler]] calculates actual\n     * extrusion ratio and trigger animation\n     */\n    set zoom(zoomLevel: number) {\n        // if zoomLevel has been changed since last render\n        if (this.m_zoomLevelPrevious !== zoomLevel) {\n            this.m_tileHandlerMap.forEach(tileHandler => {\n                if (\n                    this.m_mapView.getDataSourceByName(tileHandler.tile.dataSource.name) !==\n                    undefined\n                ) {\n                    this.m_zoomDirection = zoomLevel > this.m_zoomLevelPrevious ? 1 : -1;\n                    tileHandler.zoomLevelChanged(this.m_zoomDirection);\n                }\n            });\n            this.m_zoomLevelPrevious = zoomLevel;\n        }\n    }\n\n    /**\n     * Checks whether animated extrusion effect was forcibly turned off/on in [[MapView]]\n     */\n    get forceAnimatedExtrusion(): boolean | undefined {\n        return this.m_forceAnimatedExtrusion;\n    }\n\n    /**\n     * If set to `true` it will force the animation extrusion effect to run.\n     * In case it was set to `false` animation extrusion effect will be switched off.\n     */\n    set forceAnimatedExtrusion(animatedExtrusion: boolean | undefined) {\n        this.m_forceAnimatedExtrusion = animatedExtrusion;\n    }\n\n    /**\n     * Returns `animatedExtrusionDuration` value that was set in [[MapView]].\n     */\n    get forceAnimatedExtrusionDuration(): number | undefined {\n        return this.m_forceAnimatedExtrusionDuration;\n    }\n\n    /**\n     * If value is set, it will overlap in [[Tile]] with\n     * `animatedExtrusionDuration` property from [[ExtrudedPolygonTechnique]]\n     * and `DEFAULT_DURATION` from [[AnimatedExtrusionTileHandler]].\n     */\n    set forceAnimatedExtrusionDuration(extrusionDuration: number | undefined) {\n        this.m_forceAnimatedExtrusionDuration = extrusionDuration;\n    }\n\n    /**\n     * Adds an [[AnimatedExtrusionTileHandler]] to [[AnimatedExtrusionHandler]]\n     */\n    add(tileHandler: AnimatedExtrusionTileHandler): void {\n        this.m_tileHandlerMap.set(tileHandler.tile, tileHandler);\n    }\n\n    /**\n     * Removes tile from the list subscribed for extrusion ratio updates\n     */\n    removeTile(tile: Tile): void {\n        this.m_tileHandlerMap.delete(tile);\n    }\n\n    /**\n     * Returns first [[AnimatedExtrusionTileHandler]] existed from the list of [[Tile]]s\n     */\n    find(tileKeys: Array<TileKey | undefined>): AnimatedExtrusionTileHandler | undefined {\n        for (const tileHandler of this.m_tileHandlerMap) {\n            for (const tileKey of tileKeys) {\n                if (\n                    tileKey !== undefined &&\n                    tileHandler[0].tileKey.mortonCode() === tileKey.mortonCode()\n                ) {\n                    return tileHandler[1];\n                }\n            }\n        }\n        return undefined;\n    }\n\n    /**\n     * Is `true` if any extrusion handlers are currently animating.\n     */\n    get isAnimating(): boolean {\n        for (const tileHandler of this.m_tileHandlerMap) {\n            if (tileHandler[1].isAnimating) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n\n/**\n * Implements animated extrusion effect for the extruded objects in the [[Tile]]\n */\nexport class AnimatedExtrusionTileHandler {\n    private m_extrudedObjects: THREE.Object3D[] = [];\n    private m_animatedExtrusionState: AnimatedExtrusionState = AnimatedExtrusionState.None;\n    private m_animatedExtrusionStartTime: number | undefined = undefined;\n    private m_mapView: MapView;\n    private m_animatedExtrusionHandler: AnimatedExtrusionHandler;\n\n    constructor(\n        private m_tile: Tile,\n        extrudedObjects: Array<{ object: THREE.Object3D; materialFeature: boolean }>,\n        private m_animatedExtrusionDuration: number\n    ) {\n        this.m_mapView = m_tile.mapView;\n        this.m_animatedExtrusionHandler = this.m_mapView.animatedExtrusionHandler;\n\n        extrudedObjects.forEach(extrudedObject => {\n            this.m_extrudedObjects.push(extrudedObject.object);\n        });\n\n        this.startExtrusionAnimationIfNeeded(this.m_animatedExtrusionHandler.zoomDirection);\n    }\n\n    /**\n     * Set an extrusion ratio value for the materials [[MapMeshBasicMaterial]]\n     * and [[EdgeMaterial]]. Controlled by [[AnimatedExtrusionHandler]]\n     * for extrusion animation effect.\n     */\n    set extrusionRatio(value: number) {\n        this.m_extrudedObjects.forEach(object => {\n            if (object instanceof THREE.Mesh || object instanceof THREE.LineSegments) {\n                if (Array.isArray(object.material)) {\n                    object.material.forEach((material: ExtrusionFeature) => {\n                        material.extrusionRatio = value;\n                    });\n                } else if (object.material) {\n                    (object.material as ExtrusionFeature).extrusionRatio = value;\n                    if (object.customDepthMaterial !== undefined) {\n                        (object.customDepthMaterial as ExtrusionFeature).extrusionRatio = value;\n                    }\n                }\n            }\n        });\n    }\n\n    /**\n     * Returns the [[Tile]] related to [[AnimatedExtrusionTileHandler]]\n     */\n    get tile(): Tile {\n        return this.m_tile;\n    }\n\n    /**\n     * Return the current state of animated extrusion effect\n     */\n    get animationState(): AnimatedExtrusionState {\n        return this.m_animatedExtrusionState;\n    }\n\n    /**\n     * Is `true` if this handler is currently animating.\n     */\n    get isAnimating(): boolean {\n        return this.m_animatedExtrusionState !== AnimatedExtrusionState.Finished;\n    }\n\n    /**\n     * Cancel animation and remove from [[AnimatedExtrusionHandler]]\n     */\n    dispose() {\n        this.stopExtrusionAnimation();\n        this.m_animatedExtrusionHandler.removeTile(this.m_tile);\n    }\n\n    /**\n     * Start / Stop extrusion animation if zoom level was changed\n     */\n    zoomLevelChanged(zoomDirection: number) {\n        if (\n            this.m_tile.isVisible === false &&\n            this.m_animatedExtrusionState !== AnimatedExtrusionState.None\n        ) {\n            this.m_animatedExtrusionState = AnimatedExtrusionState.None;\n            this.stopExtrusionAnimation();\n        }\n\n        if (\n            this.m_tile.isVisible === true &&\n            this.m_animatedExtrusionState === AnimatedExtrusionState.None\n        ) {\n            this.startExtrusionAnimationIfNeeded(zoomDirection);\n        }\n    }\n\n    private getChildTiles(tileKeys: TileKey[]) {\n        const result: TileKey[] = [];\n\n        tileKeys.forEach(tileKey => {\n            const childTileKeys = this.tile.dataSource.getTilingScheme().getSubTileKeys(tileKey);\n\n            for (const childTileKey of childTileKeys) {\n                result.push(childTileKey);\n            }\n        });\n        return result;\n    }\n\n    // search for the [[Tile]] with extrusion animation started\n    private startExtrusionAnimationIfNeeded(zoomDirection?: number) {\n        const {\n            quadTreeSearchDistanceUp,\n            quadTreeSearchDistanceDown\n        } = this.tile.mapView.visibleTileSet.options;\n        const tile = this.m_tile;\n        let extrusionStartTime: number | undefined;\n\n        if (zoomDirection !== undefined) {\n            let tileHandler;\n\n            // if zoom out, go down and look for a child tile\n            if (zoomDirection < 0) {\n                let nextLevelDiff = 0;\n                let tileKeys = [tile.tileKey];\n                while (\n                    quadTreeSearchDistanceDown > nextLevelDiff &&\n                    extrusionStartTime === undefined\n                ) {\n                    const childTileKeys = this.getChildTiles(tileKeys);\n                    if (childTileKeys !== undefined) {\n                        tileHandler = this.m_animatedExtrusionHandler.find(childTileKeys);\n                        if (tileHandler !== undefined) {\n                            extrusionStartTime = tileHandler.m_animatedExtrusionStartTime;\n                            break;\n                        }\n                        tileKeys = childTileKeys;\n                    }\n                    nextLevelDiff++;\n                }\n            }\n            // if zoom in, go up and get the parent tile\n            if (zoomDirection > 0) {\n                let nextLevelDiff = 0;\n                let tileKey = tile.tileKey;\n                while (\n                    quadTreeSearchDistanceUp > nextLevelDiff &&\n                    extrusionStartTime === undefined &&\n                    tileKey.level !== 0\n                ) {\n                    const parentTileKey = tileKey.parent();\n                    tileHandler = this.m_animatedExtrusionHandler.find([parentTileKey]);\n                    if (tileHandler !== undefined) {\n                        extrusionStartTime = tileHandler.m_animatedExtrusionStartTime;\n                        break;\n                    }\n                    tileKey = parentTileKey;\n                    nextLevelDiff++;\n                }\n            }\n        }\n        this.startExtrusionAnimation(extrusionStartTime);\n    }\n\n    private startExtrusionAnimation(startTime?: number): void {\n        this.m_animatedExtrusionState = AnimatedExtrusionState.Started;\n        this.m_animatedExtrusionStartTime = startTime;\n        this.animateExtrusion();\n        this.m_mapView.addEventListener(MapViewEventNames.AfterRender, this.animateExtrusion);\n    }\n\n    private stopExtrusionAnimation(): void {\n        this.m_mapView.removeEventListener(MapViewEventNames.AfterRender, this.animateExtrusion);\n    }\n\n    private animateExtrusion = (event?: RenderEvent) => {\n        if (this.m_animatedExtrusionState !== AnimatedExtrusionState.Playing) {\n            if (this.m_animatedExtrusionState === AnimatedExtrusionState.Started) {\n                this.m_animatedExtrusionState = AnimatedExtrusionState.Playing;\n            } else {\n                return;\n            }\n        }\n\n        const currentTime = Date.now();\n        if (\n            this.m_animatedExtrusionStartTime === undefined ||\n            this.m_animatedExtrusionStartTime <= 0\n        ) {\n            this.m_animatedExtrusionStartTime = currentTime;\n        }\n\n        const timeProgress = Math.min(\n            currentTime - this.m_animatedExtrusionStartTime,\n            this.m_animatedExtrusionDuration\n        );\n\n        this.extrusionRatio = MathUtils.easeInOutCubic(\n            ExtrusionFeatureDefs.DEFAULT_RATIO_MIN,\n            ExtrusionFeatureDefs.DEFAULT_RATIO_MAX,\n            timeProgress / this.m_animatedExtrusionDuration\n        );\n\n        if (timeProgress >= this.m_animatedExtrusionDuration) {\n            this.m_animatedExtrusionState = AnimatedExtrusionState.Finished;\n            this.stopExtrusionAnimation();\n        }\n\n        this.m_tile.dataSource.requestUpdate();\n    };\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { IChannel } from \"./IChannel\";\n\n/**\n * Enum log levels\n */\nexport enum LogLevel {\n    Trace,\n    Debug,\n    Log,\n    Info,\n    Warn,\n    Error\n}\n\n/**\n * Logger options to configure logger\n */\nexport class LoggerOptions {\n    enabled?: boolean;\n    level?: LogLevel;\n}\n\n/**\n * Public interface for Logger class.\n */\nexport interface ILogger extends IChannel {\n    readonly name: string;\n\n    enabled: boolean;\n\n    level: LogLevel;\n\n    /**\n     * Update logger options\n     *\n     * @param  {LoggerOptions} options Set logger options and configure internal logger.\n     */\n    update(options: LoggerOptions): void;\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Resolve URI of referenced object w.r.t parent URI.\n *\n * Resolves `childUri` as it would be loaded from location specified by `parentUri`.\n *\n * If `childUri` is absolute, then it is returned unchanged.\n * If `childUri` is origin-absolute path, then only origin path is taken from `parentUri`.\n *\n * See [[baseUri]] for reference how base URL of `parentUri` is determined.\n *\n * Supports `http:`, `https:`, `file:`, `data:` schemes.\n *\n * Examples:\n *\n *     // normal case, child is sibling\n *     https://foo.com/themes/day.json + images/foo.png -> https://foo.com/themes/images/foo.png\n *\n *     // parent is \"folder\", so child is just located in this folder\n *     https://foo.com/themes/ + images/foo.png -> https://foo.com/themes/images/foo.png\n *\n *     // parent looks like leaf, so last component is stripped\n *     https://foo.com/themes + images/foo.png -> https://foo.com/images/foo.png\n *\n *     // origin-absolute URL, takes only origin from parent\n *     https://foo.com/themes/day.json + /fonts/foo.json -> https://foo.com/fonts/foo.json\n *\n * @param parentUri URI of parent resource\n * @param childUri URI of child as referenced from parent resource\n * @return `childUrl` as if anchored in location of `parentUrl`\n */\nexport function resolveReferenceUri(parentUri: string | undefined, childUri: string): string {\n    if (absoluteUrlWithOriginRe.test(childUri)) {\n        return childUri;\n    } else if (childUri.startsWith(\"/\")) {\n        const origin = getUrlOrigin(parentUri);\n        return origin + childUri;\n    } else {\n        if (childUri.startsWith(\"./\")) {\n            childUri = childUri.substr(2);\n        }\n        const parentBaseUrl = baseUrl(parentUri);\n        return parentBaseUrl + childUri;\n    }\n}\n\nconst absoluteUrlWithOriginRe = new RegExp(\"^(((?:[a-z]+:)?//)|(file:/)|(data:))\", \"i\");\n\n/**\n * Returns base URL of given resource URL.\n *\n * `Url` with trailing slash are considered genuine 'locations', they are returned as is, however if\n * `url` ends with name component it is treated as \"leaf\", so last path component is removed.\n *\n * Standalone files (without any folder structure) are considered relative to `./`.\n *\n * Examples:\n * ```\n *     https://foo.com/themes/a.json -> https://foo.com/themes/\n *     https://foo.com/themes/ -> https://foo.com/themes/\n *     https://foo.com/themes -> https://foo.com/ // note, themes is treated as leaf\n *     themes/day.json -> themes/\n *     themes -> ./\n * ```\n */\nexport function baseUrl(url: string | undefined) {\n    if (url === undefined) {\n        return \"./\";\n    }\n    let idx = url.indexOf(\"#\");\n    if (idx !== -1) {\n        url = url.slice(0, idx);\n    }\n    idx = url.indexOf(\"?\");\n    if (idx !== -1) {\n        url = url.slice(0, idx);\n    }\n    idx = url.lastIndexOf(\"/\");\n    if (idx === -1) {\n        return \"./\";\n    } else {\n        return url.substring(0, idx + 1);\n    }\n}\n\n/**\n * Get `origin` part of URL.\n *\n * @example\n *    https://example.com/foo -> https://example.com\n *    //example.com:8080/ -> //example.com:8080\n *    file:///etc/hosts ->\n *\n * @param url input URL\n * @return origin of given URL\n */\nexport function getUrlOrigin(url: string | undefined): string {\n    if (url === undefined) {\n        return \"\";\n    }\n    const parsed = getUrlHostAndProtocol(url);\n    if (parsed.protocol === \"file:\") {\n        return \"file://\";\n    } else if (parsed.host && parsed.protocol) {\n        return parsed.protocol + \"//\" + parsed.host;\n    } else if (parsed.host) {\n        return \"//\" + parsed.host;\n    } else if (parsed.protocol) {\n        return parsed.protocol + \"//\";\n    } else {\n        return \"\";\n    }\n}\n\n/**\n * Parse `host` and `protocol` part from URL.\n */\nexport function getUrlHostAndProtocol(\n    url: string\n): {\n    protocol: string;\n    host: string;\n} {\n    const urlOriginRe = new RegExp(/^(?:([a-z]+:))?\\/\\/([^\\/]*)/, \"i\");\n\n    const match = url.match(urlOriginRe);\n    if (!match) {\n        throw new Error(`getUrlHostAndProtocol: unable to parse URL '${url}'`);\n    }\n    return {\n        protocol: match[1],\n        host: match[2]\n    };\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { ViewRanges } from \"@here/harp-datasource-protocol/lib/ViewRanges\";\nimport { applyMixinsWithoutProperties, assert, chainCallbacks } from \"@here/harp-utils\";\nimport { disableBlending, enableBlending, insertShaderInclude, setShaderDefine } from \"./Utils\";\n\nimport * as THREE from \"three\";\n\nimport { DisplacementFeature, DisplacementFeatureParameters } from \"./DisplacementFeature\";\nimport { ExtrusionFeatureDefs } from \"./MapMeshMaterialsDefs\";\nimport extrusionShaderChunk from \"./ShaderChunks/ExtrusionChunks\";\nimport fadingShaderChunk from \"./ShaderChunks/FadingChunks\";\nimport { simpleLightingShadowChunk } from \"./ShaderChunks/ShadowChunks\";\n\nconst emptyTexture = new THREE.Texture();\n\n/**\n * The MapMeshMaterials [[MapMeshBasicMaterial]] and [[MapMeshStandardMaterial]] are the standard\n * [[THREE.MeshBasicMaterial]] and [[THREE.MeshStandardMaterial]], with the addition functionality\n * of fading out the geometry between a fadeNear and fadeFar value.\n *\n * The implementation is designed around a mixin class [[FadingFeatureMixin]], which requires\n * a bit of care when adding the FadingFeature to the existing mesh classes, but it is safe to use\n * and also reduces code duplication.\n */\n\n/**\n * Parameters used when constructing a new implementor of [[FadingFeature]].\n */\nexport interface FadingFeatureParameters {\n    /**\n     * Distance to the camera (range: `[0.0, 1.0]`) from which the objects start fading out.\n     */\n    fadeNear?: number;\n\n    /**\n     * Distance to the camera (range: `[0.0, 1.0]`) from which the objects are transparent.\n     */\n    fadeFar?: number;\n}\n\n/**\n * Parameter used to control patching the standard material shader to ensure that the materials\n * color isn't affected by the light direction, only valid for techniques that are \"fill\"\n */\nexport interface ShadowFeatureParameters {\n    /**\n     * Whether the diffuse light component is removed (i.e. the materials color is therefore just\n     * the ambient + shadow).\n     */\n    removeDiffuseLight?: boolean;\n}\n\n/**\n * Parameters used when constructing a new implementor of [[ExtrusionFeature]].\n */\nexport interface ExtrusionFeatureParameters {\n    /**\n     * Ratio of the extruded objects, where `1.0` is the default value\n     */\n    extrusionRatio?: number;\n\n    /**\n     * Enable z-fighting workaround that doesn't animate buildings with `height <\n     * [[ExtrusionFeatureDefs.MIN_BUILDING_HEIGHT]]`.\n     *\n     * Should be applied to `polygon` materials using this feature.\n     */\n    zFightingWorkaround?: boolean;\n}\n\n/**\n * Used internally.\n *\n * @hidden\n */\ninterface UniformsType {\n    [index: string]: THREE.IUniform;\n}\n\n/**\n * Type of callback used internally by THREE.js for shader creation.\n *\n * @hidden\n */\ntype CompileCallback = (shader: THREE.Shader, renderer: any) => void;\n\n/**\n * Material properties used from THREE, which may not be defined in the type.\n */\nexport interface HiddenThreeJSMaterialProperties {\n    /**\n     * Informs THREE.js to re-compile material shader (due to change in code or defines).\n     */\n    needsUpdate?: boolean;\n\n    /**\n     * Hidden ThreeJS value that is made public here. Required to add new uniforms to subclasses of\n     * [[THREE.MeshBasicMaterial]]/[[THREE.MeshStandardMaterial]], basically all materials that are\n     * not THREE.ShaderMaterial.\n     * @deprecated\n     */\n    uniformsNeedUpdate?: boolean;\n\n    /**\n     * Available in all materials in ThreeJS.\n     */\n    transparent?: boolean;\n\n    /**\n     * Used internally for material shader defines.\n     */\n    defines?: any;\n\n    /**\n     * Defines callback available in THREE.js materials.\n     *\n     * Called before shader program compilation to generate vertex & fragment shader output code.\n     */\n    onBeforeCompile?: CompileCallback;\n}\n\ninterface MixinShaderProperties {\n    /**\n     * Used internally for material shader defines.\n     */\n    shaderDefines?: any;\n\n    /**\n     * Used internally for shader uniforms, holds references to material internal shader.uniforms.\n     *\n     * Holds a reference to material's internal shader uniforms map. New custom feature based\n     * uniforms are injected using this reference, but also internal THREE.js shader uniforms\n     * will be available via this map after [[Material#onBeforeCompile]] callback is run with\n     * feature enabled.\n     * @see needsUpdate\n     */\n    shaderUniforms?: UniformsType;\n}\n\n/**\n * Translates a linear distance value [0..1], where 1 is the distance to the far plane, into\n * [0..maxVisibilityRange].\n *\n * Copy from MapViewUtils, since it cannot be accessed here because of circular dependencies.\n *\n * @param distance Distance from the camera (range: [0, 1]).\n * @param visibilityRange object describing maximum and minimum visibility range - distances\n * from camera at which objects won't be rendered anymore.\n */\nfunction cameraToWorldDistance(distance: number, visibilityRange: ViewRanges): number {\n    return distance * visibilityRange.maximum;\n}\n\n/**\n * Provides common interface from mixin to internal material defines and shader uniforms.\n *\n * Call this function just after [THREE.Material] is constructed, so in derived classes after\n * super c-tor call.\n * @param mixin The mixin that will add features to [[THREE.Material]].\n * @param material The material that mixin feature is being applied.\n */\nfunction linkMixinWithMaterial(\n    mixin: MixinShaderProperties,\n    material: HiddenThreeJSMaterialProperties\n) {\n    // Some materials (MeshBasicMaterial) have no defines property created in c-tor.\n    // In such case create it manually, such defines will be also injected to the shader\n    // via generic THREE.js code - see THREE/WebGLProgram.js.\n    if (material.defines === undefined) {\n        material.defines = {};\n    }\n    // Link internal THREE.js material defines with mixin reference.\n    // Those defines are usually created in Material c-tor, if not we have fallback above.\n    mixin.shaderDefines = material.defines;\n\n    // Prepare map for holding uniforms references from the actual shader, but check if\n    // it was not already created with other mixin feature.\n    if (mixin.shaderUniforms === undefined) {\n        mixin.shaderUniforms = {};\n    }\n    // Shader uniforms may not be linked at this stage, they are injected available via Shader\n    // object in onBeforeCompile callback, see: linkMixinWithShader().\n}\n\n/**\n * Links mixin [[MixinShaderProperties.shaderUniforms]] with actual material shader uniforms.\n *\n * Function injects features (mixin) specific shader uniforms to material's shader, it also\n * updates uniforms references so [[MixinShaderProperties.shaderUniforms]] will contain full\n * uniforms map (both feature specific and internal ones).\n * This function should be called before material's shader is pre-compiled, so the new uniforms\n * from the mixin feature are known to shader processor. The best place to use is\n * [[Material.onBeforeCompile]].\n * @param mixin The mixin feature being applied to the material.\n * @param shader The actual shader linked to the [[THREE.Material]].\n */\nfunction linkMixinWithShader(mixin: MixinShaderProperties, shader: THREE.Shader) {\n    Object.assign(shader.uniforms, mixin.shaderUniforms);\n    mixin.shaderUniforms = shader.uniforms;\n}\n\n/**\n * Base interface for all objects that should fade in the distance. The implementation of the actual\n * FadingFeature is done with the help of the mixin class [[FadingFeatureMixin]] and a set of\n * supporting functions in the namespace of the same name.\n */\nexport interface FadingFeature extends HiddenThreeJSMaterialProperties, MixinShaderProperties {\n    /**\n     * Distance to the camera (range: `[0.0, 1.0]`) from which the objects start fading out.\n     */\n    fadeNear?: number;\n\n    /**\n     * Distance to the camera (range: `[0.0, 1.0]`) from which the objects are transparent. A value\n     * of <= 0.0 disables fading.\n     */\n    fadeFar?: number;\n}\n\n/**\n * Base interface for all objects that should have animated extrusion effect. The implementation of\n * the actual ExtrusionFeature is done with the help of the mixin class [[ExtrusionFeatureMixin]]\n * and a set of supporting functions in the namespace of the same name.\n */\nexport interface ExtrusionFeature extends HiddenThreeJSMaterialProperties, MixinShaderProperties {\n    /**\n     * Ratio of the extruded objects, where `1.0` is the default value. Minimum suggested value\n     * is `0.01`\n     */\n    extrusionRatio?: number;\n}\n\nnamespace DisplacementFeature {\n    /**\n     * Checks if feature is enabled (displacement map defined).\n     *\n     * @param displacementMaterial\n     */\n    export function isEnabled(displacementMaterial: DisplacementFeature) {\n        return displacementMaterial.displacementMap !== null;\n    }\n\n    /**\n     * Update the internals of the `DisplacementFeature` depending on the value of\n     * [[displacementMap]].\n     *\n     * @param displacementMaterial DisplacementFeature\n     */\n    export function updateDisplacementFeature(\n        displacementMaterial: DisplacementFeature & MixinShaderProperties\n    ): void {\n        assert(displacementMaterial.shaderDefines !== undefined);\n        assert(displacementMaterial.shaderUniforms !== undefined);\n\n        const useDisplacementMap = isEnabled(displacementMaterial);\n        // Whenever displacement feature state changes (between enabled/disabled) material will be\n        // re-compiled, forcing new shader chunks to be added (or removed).\n        const needsUpdate = setShaderDefine(\n            displacementMaterial.shaderDefines,\n            \"USE_DISPLACEMENTMAP\",\n            useDisplacementMap\n        );\n        displacementMaterial.needsUpdate = needsUpdate;\n\n        // Update texture after change.\n        if (useDisplacementMap) {\n            const texture = displacementMaterial.displacementMap!;\n            texture.needsUpdate = true;\n            displacementMaterial.shaderUniforms!.displacementMap.value = texture;\n        } else if (needsUpdate) {\n            displacementMaterial.shaderUniforms!.displacementMap.value = emptyTexture;\n        }\n    }\n\n    /**\n     * This function should be called on implementors of DisplacementFeature in the\n     * `onBeforeCompile` callback of that material. It adds the required code to the shaders to\n     * apply displacement maps.\n     *\n     * @param displacementMaterial Material to add uniforms to.\n     * @param shader [[THREE.WebGLShader]] containing the vertex and fragment shaders to add the\n     *                  special includes to.\n     */\n    export function onBeforeCompile(\n        displacementMaterial: DisplacementFeature & MixinShaderProperties,\n        shader: THREE.Shader\n    ) {\n        if (!isEnabled(displacementMaterial)) {\n            return;\n        }\n        assert(displacementMaterial.shaderUniforms !== undefined);\n\n        // The vertex and fragment shaders have been constructed dynamically. The uniforms and\n        // the shader includes are now appended to them.\n        //\n        // The object \"defines\" are required for this material, we use one define working as a flag,\n        // which enables/disables some chunks of shader code.\n        linkMixinWithShader(displacementMaterial, shader);\n\n        // Append the displacement map chunk to the vertex shader.\n        shader.vertexShader = shader.vertexShader.replace(\n            \"#include <skinbase_vertex>\",\n            `#include <skinbase_vertex>\n#ifndef USE_ENVMAP\n    vec3 objectNormal = vec3( normal );\n#endif`\n        );\n        shader.vertexShader = insertShaderInclude(\n            shader.vertexShader,\n            \"uv2_pars_vertex\",\n            \"displacementmap_pars_vertex\"\n        );\n\n        shader.vertexShader = insertShaderInclude(\n            shader.vertexShader,\n            \"skinning_vertex\",\n            \"displacementmap_vertex\",\n            true\n        );\n    }\n}\n\nexport class DisplacementFeatureMixin implements DisplacementFeature, MixinShaderProperties {\n    needsUpdate?: boolean;\n    uniformsNeedUpdate?: boolean;\n    defines?: any;\n    shaderDefines?: any;\n    shaderUniforms?: UniformsType;\n    onBeforeCompile?: CompileCallback;\n    private m_displacementMap: THREE.Texture | null = null;\n\n    // This is here to keep tslint from reporting a missing property, the getter that's actually\n    // used by materials is added in [[addDisplacementProperties]].\n    get displacementMap(): THREE.Texture | null {\n        return this.m_displacementMap;\n    }\n\n    // This is here to keep tslint from reporting a missing property, the setter that's actually\n    // used by materials is added in [[addDisplacementProperties]].\n    set displacementMap(map: THREE.Texture | null) {\n        this.setDisplacementMap(map);\n    }\n\n    protected getDisplacementMap(): THREE.Texture | null {\n        return this.m_displacementMap;\n    }\n\n    protected setDisplacementMap(map: THREE.Texture | null): void {\n        if (map !== this.m_displacementMap) {\n            this.m_displacementMap = map;\n            DisplacementFeature.updateDisplacementFeature(this);\n        }\n    }\n    /**\n     * The mixin class should call this method to register the property [[displacementMap]]\n     */\n    protected addDisplacementProperties(): void {\n        Object.defineProperty(this, \"displacementMap\", {\n            get: () => {\n                return this.getDisplacementMap();\n            },\n            set: val => {\n                this.setDisplacementMap(val);\n            }\n        });\n    }\n\n    /**\n     * Apply the displacementMap value from the parameters to the respective properties.\n     */\n    protected applyDisplacementParameters(params?: DisplacementFeatureParameters) {\n        linkMixinWithMaterial(this, this);\n\n        assert(this.shaderDefines !== undefined);\n        assert(this.shaderUniforms !== undefined);\n\n        // Create uniforms with default values, this ensures they are always set created,\n        // so no need for checks in setters.\n        const uniforms = this.shaderUniforms!;\n        uniforms.displacementMap = new THREE.Uniform(emptyTexture);\n        uniforms.displacementScale = new THREE.Uniform(1);\n        uniforms.displacementBias = new THREE.Uniform(0);\n\n        // Apply initial parameter values.\n        if (params !== undefined) {\n            if (params.displacementMap !== undefined) {\n                this.setDisplacementMap(params.displacementMap);\n            }\n        }\n\n        this.onBeforeCompile = chainCallbacks(this.onBeforeCompile, (shader: THREE.Shader) => {\n            DisplacementFeature.onBeforeCompile(this, shader);\n        });\n\n        // Require material update at least once, because of new shader chunks added.\n        this.needsUpdate = DisplacementFeature.isEnabled(this);\n    }\n\n    /**\n     * Copy displacementMap from other DisplacementFeature.\n     *\n     * @param source The material to copy property values from.\n     */\n    protected copyDisplacementParameters(source: DisplacementFeature) {\n        this.setDisplacementMap(source.displacementMap);\n        return this;\n    }\n}\n\n/**\n * Namespace with support functions for implementors of `FadingFeature`.\n */\nexport namespace FadingFeature {\n    export const DEFAULT_FADE_NEAR: number = -1.0;\n    export const DEFAULT_FADE_FAR: number = -1.0;\n\n    /**\n     * Checks if feature is enabled based on feature params.\n     *\n     * Fading feature will be disabled if fadeFar is undefined or fadeFar <= 0.0.\n     * This function is crucial for shader switching (chunks injection), whenever feature state\n     * changes between enabled/disabled. Current approach is to keep feature on (once enabled)\n     * whenever fading params are reasonable, even if it causes full fade in, no transparency.\n     *\n     * @param fadingMaterial FadingFeature.\n     */\n    export function isEnabled(fadingMaterial: FadingFeature) {\n        // NOTE: We could also check if full fade is not achieved, then feature could be\n        // disabled, but causing material re-compile.\n        return (\n            fadingMaterial.fadeNear !== undefined &&\n            fadingMaterial.fadeFar !== undefined &&\n            fadingMaterial.fadeFar > 0\n        );\n    }\n\n    /**\n     * Patch the THREE.ShaderChunk on first call with some extra shader chunks.\n     */\n    export function patchGlobalShaderChunks() {\n        if (THREE.ShaderChunk.fading_pars_vertex === undefined) {\n            Object.assign(THREE.ShaderChunk, fadingShaderChunk);\n        }\n    }\n\n    /**\n     * Update the internals of the `FadingFeature` depending on the value of [[fadeNear]]. The\n     * fading feature will be disabled if fadeFar <= 0.0.\n     *\n     * @param fadingMaterial FadingFeature\n     */\n    export function updateFadingFeature(fadingMaterial: FadingFeature): void {\n        assert(fadingMaterial.shaderDefines !== undefined);\n        assert(fadingMaterial.shaderUniforms !== undefined);\n\n        // Update entire material to add/remove shader fading chunks, this happens when we\n        // enable/disable fading after material creation. Feature is marked via dummy define, which\n        // informs about fading feature state, even if such define is not required to control\n        // feature state, it makes it easy to check for shader changes.\n        const useFading = isEnabled(fadingMaterial);\n        const needsUpdate = setShaderDefine(\n            fadingMaterial.shaderDefines,\n            \"FADING_MATERIAL\",\n            useFading\n        );\n        // Enable/disable entire feature with material re-compile, this will also cause\n        // new uniforms injection.\n        fadingMaterial.needsUpdate = needsUpdate;\n\n        // Check if shader uniforms references are already set in onBeforeCompile callback.\n        assert(\n            fadingMaterial.shaderUniforms!.fadeNear !== undefined &&\n                fadingMaterial.shaderUniforms!.fadeFar !== undefined\n        );\n\n        // Update shader internal uniforms only if fading is enabled.\n        if (useFading) {\n            fadingMaterial.shaderUniforms!.fadeNear.value = fadingMaterial.fadeNear;\n            fadingMaterial.shaderUniforms!.fadeFar.value = fadingMaterial.fadeFar;\n            if (needsUpdate) {\n                enableBlending(fadingMaterial as THREE.Material);\n            }\n        }\n        // Perform one time update of uniforms to defaults when feature disabled (for clarity).\n        else if (needsUpdate) {\n            fadingMaterial.shaderUniforms!.fadeNear.value = FadingFeature.DEFAULT_FADE_NEAR;\n            fadingMaterial.shaderUniforms!.fadeFar.value = FadingFeature.DEFAULT_FADE_FAR;\n            disableBlending(fadingMaterial as THREE.Material);\n        }\n    }\n\n    /**\n     * This function should be called on implementors of FadingFeature in the `onBeforeCompile`\n     * callback of that material. It adds the required code to the shaders and declares the new\n     * uniforms that control fading based on view distance.\n     *\n     * @param fadingMaterial Material to add uniforms to.\n     * @param shader [[THREE.WebGLShader]] containing the vertex and fragment shaders to add the\n     *                  special includes to.\n     */\n    export function onBeforeCompile(fadingMaterial: FadingFeature, shader: THREE.Shader) {\n        if (!isEnabled(fadingMaterial)) {\n            return;\n        }\n        assert(fadingMaterial.shaderUniforms !== undefined);\n\n        // The vertex and fragment shaders have been constructed dynamically. The uniforms and\n        // the shader includes are now appended to them.\n        //\n        // The object \"defines\" are not required for this material, so the fading shader chunks\n        // have no #ifdef preprocessed chunks. Feature utilized one define just to denote feature\n        // attached and easy control its state, but this define may be stripped out if needed.\n        linkMixinWithShader(fadingMaterial, shader);\n\n        // Append the new fading shader cod directly after the fog code. This is done by adding an\n        // include directive for the fading code.\n        shader.vertexShader = insertShaderInclude(\n            shader.vertexShader,\n            \"fog_pars_vertex\",\n            \"fading_pars_vertex\"\n        );\n\n        shader.vertexShader = insertShaderInclude(\n            shader.vertexShader,\n            \"fog_vertex\",\n            \"fading_vertex\",\n            true\n        );\n\n        shader.fragmentShader = insertShaderInclude(\n            shader.fragmentShader,\n            \"fog_pars_fragment\",\n            \"fading_pars_fragment\"\n        );\n\n        shader.fragmentShader = insertShaderInclude(\n            shader.fragmentShader,\n            \"fog_fragment\",\n            \"fading_fragment\",\n            true\n        );\n    }\n\n    /**\n     * As three.js is rendering the transparent objects last (internally), regardless of their\n     * renderOrder value, we set the transparent value to false in the [[onAfterRenderCall]]. In\n     * [[onBeforeRender]], the function [[calculateDepthFromCameraDistance]] sets it to true if the\n     * fade distance value is less than 1.\n     *\n     * @param object [[THREE.Object3D]] to prepare for rendering.\n     * @param viewRanges The visibility ranges (clip planes and maximum visible distance) for\n     * actual camera setup.\n     * @param fadeNear The fadeNear value to set in the material.\n     * @param fadeFar The fadeFar value to set in the material.\n     * @param updateUniforms If `true`, the fading uniforms are set. Not required if material is\n     *          handling the uniforms already, like in a [[THREE.ShaderMaterial]].\n     * @param additionalCallback If defined, this function will be called before the function will\n     *          return.\n     */\n    export function addRenderHelper(\n        object: THREE.Object3D,\n        viewRanges: ViewRanges,\n        fadeNear: number | undefined,\n        fadeFar: number | undefined,\n        updateUniforms: boolean,\n        additionalCallback?: (\n            renderer: THREE.WebGLRenderer,\n            material: THREE.Material & FadingFeature\n        ) => void\n    ) {\n        // tslint:disable-next-line:no-unused-variable\n        object.onBeforeRender = chainCallbacks(\n            object.onBeforeRender,\n            (\n                renderer: THREE.WebGLRenderer,\n                scene: THREE.Scene,\n                camera: THREE.Camera,\n                geometry: THREE.Geometry | THREE.BufferGeometry,\n                material: THREE.Material & FadingFeature,\n                group: THREE.Group\n            ) => {\n                const fadingMaterial = material as FadingFeature;\n\n                fadingMaterial.fadeNear =\n                    fadeNear === undefined || fadeNear === FadingFeature.DEFAULT_FADE_NEAR\n                        ? FadingFeature.DEFAULT_FADE_NEAR\n                        : cameraToWorldDistance(fadeNear, viewRanges);\n\n                fadingMaterial.fadeFar =\n                    fadeFar === undefined || fadeFar === FadingFeature.DEFAULT_FADE_FAR\n                        ? FadingFeature.DEFAULT_FADE_FAR\n                        : cameraToWorldDistance(fadeFar, viewRanges);\n\n                if (additionalCallback !== undefined) {\n                    additionalCallback(renderer, material);\n                }\n            }\n        );\n    }\n}\n\n/**\n * Mixin class for extended THREE materials. Adds new properties required for `fadeNear` and\n * `fadeFar`. There is some special handling for the fadeNear/fadeFar properties, which get some\n * setters and getters in a way that works well with the mixin.\n *\n * @see [[Tile#addRenderHelper]]\n */\nexport class FadingFeatureMixin implements FadingFeature {\n    needsUpdate?: boolean;\n    uniformsNeedUpdate?: boolean;\n    defines?: any;\n    shaderDefines?: any;\n    shaderUniforms?: UniformsType;\n    onBeforeCompile?: CompileCallback;\n    private m_fadeNear: number = FadingFeature.DEFAULT_FADE_NEAR;\n    private m_fadeFar: number = FadingFeature.DEFAULT_FADE_FAR;\n\n    /**\n     * @see [[FadingFeature#fadeNear]]\n     */\n    protected getFadeNear(): number {\n        return this.m_fadeNear;\n    }\n    /**\n     * @see [[FadingFeature#fadeNear]]\n     */\n    protected setFadeNear(value: number) {\n        const needsUpdate = value !== this.m_fadeNear;\n        if (needsUpdate) {\n            this.m_fadeNear = value;\n            FadingFeature.updateFadingFeature(this);\n        }\n    }\n\n    /**\n     * @see [[FadingFeature#fadeFar]]\n     */\n    protected getFadeFar(): number {\n        return this.m_fadeFar;\n    }\n    /**\n     * @see [[FadingFeature#fadeFar]]\n     */\n    protected setFadeFar(value: number) {\n        const needsUpdate = value !== this.m_fadeFar;\n        if (needsUpdate) {\n            this.m_fadeFar = value;\n            FadingFeature.updateFadingFeature(this);\n        }\n    }\n\n    /**\n     * The mixin classes should call this method to register the properties [[fadeNear]] and\n     * [[fadeFar]].\n     */\n    protected addFadingProperties(): void {\n        Object.defineProperty(this, \"fadeNear\", {\n            get: () => {\n                return this.getFadeNear();\n            },\n            set: val => {\n                this.setFadeNear(val);\n            }\n        });\n        Object.defineProperty(this, \"fadeFar\", {\n            get: () => {\n                return this.getFadeFar();\n            },\n            set: val => {\n                this.setFadeFar(val);\n            }\n        });\n    }\n\n    /**\n     * Apply the fadeNear/fadeFar values from the parameters to the respective properties.\n     *\n     * @param params `FadingMeshBasicMaterial` parameters.\n     */\n    protected applyFadingParameters(params?: FadingFeatureParameters) {\n        // Prepare maps for holding uniforms and defines references from the actual material.\n        linkMixinWithMaterial(this, this);\n\n        assert(this.shaderDefines !== undefined);\n        assert(this.shaderUniforms !== undefined);\n\n        // Create uniforms with default values, this ensures they are always set created,\n        // so no need for checks in setters.\n        this.shaderUniforms!.fadeNear = new THREE.Uniform(FadingFeature.DEFAULT_FADE_NEAR);\n        this.shaderUniforms!.fadeFar = new THREE.Uniform(FadingFeature.DEFAULT_FADE_FAR);\n\n        // Apply initial parameter values.\n        if (params !== undefined) {\n            if (params.fadeNear !== undefined) {\n                this.setFadeNear(params.fadeNear);\n            }\n            if (params.fadeFar !== undefined) {\n                this.setFadeFar(params.fadeFar);\n            }\n        }\n\n        this.onBeforeCompile = chainCallbacks(this.onBeforeCompile, (shader: THREE.Shader) => {\n            FadingFeature.onBeforeCompile(this, shader);\n        });\n        // Update (re-compile) shader code to include new shader chunks only if feature is enabled.\n        this.needsUpdate = FadingFeature.isEnabled(this);\n    }\n\n    /**\n     * Copy fadeNear/fadeFar values from other FadingFeature.\n     *\n     * @param source The material to copy property values from.\n     */\n    protected copyFadingParameters(source: FadingFeature) {\n        this.setFadeNear(\n            source.fadeNear === undefined ? FadingFeature.DEFAULT_FADE_NEAR : source.fadeNear\n        );\n        this.setFadeFar(\n            source.fadeFar === undefined ? FadingFeature.DEFAULT_FADE_FAR : source.fadeFar\n        );\n        return this;\n    }\n}\n\nexport namespace ExtrusionFeature {\n    /**\n     * Checks if feature is enabled based on [[ExtrusionFeature]] properties.\n     *\n     * @param extrusionMaterial\n     */\n    export function isEnabled(extrusionMaterial: ExtrusionFeature) {\n        return (\n            extrusionMaterial.extrusionRatio !== undefined &&\n            extrusionMaterial.extrusionRatio >= ExtrusionFeatureDefs.DEFAULT_RATIO_MIN\n        );\n    }\n\n    /**\n     * Patch the THREE.ShaderChunk on first call with some extra shader chunks.\n     */\n    export function patchGlobalShaderChunks() {\n        if (THREE.ShaderChunk.extrusion_pars_vertex === undefined) {\n            Object.assign(THREE.ShaderChunk, extrusionShaderChunk);\n        }\n    }\n\n    /**\n     * Update the internals of the `ExtrusionFeature` depending on the value of [[extrusionRatio]].\n     *\n     * @param ExtrusionMaterial ExtrusionFeature\n     */\n    export function updateExtrusionFeature(extrusionMaterial: ExtrusionFeature): void {\n        assert(extrusionMaterial.shaderDefines !== undefined);\n        assert(extrusionMaterial.shaderUniforms !== undefined);\n\n        // Setup shader define that when changed will force material re-compile.\n        const useExtrusion = isEnabled(extrusionMaterial);\n        // Use shader define as marker if feature is enabled/disabled, this is not necessary\n        // required, but material requires update (re-compile) anyway to add/remove shader chunks.\n        const needsUpdate = setShaderDefine(\n            extrusionMaterial.shaderDefines,\n            \"EXTRUSION_MATERIAL\",\n            useExtrusion\n        );\n        // Enable/disable entire feature with material re-compile.\n        extrusionMaterial.needsUpdate = needsUpdate;\n\n        // Update uniform with new value\n        if (useExtrusion) {\n            extrusionMaterial.shaderUniforms!.extrusionRatio.value =\n                extrusionMaterial.extrusionRatio;\n        }\n        // Reset uniform to default, one time only, when feature is disabled (just for clarity).\n        else if (needsUpdate) {\n            extrusionMaterial.shaderUniforms!.extrusionRatio.value =\n                ExtrusionFeatureDefs.DEFAULT_RATIO_MAX;\n        }\n    }\n\n    /**\n     * This function should be called on implementors of ExtrusionFeature in the `onBeforeCompile`\n     * callback of that material. It adds the required code to the shaders and declares the new\n     * uniforms that control extrusion.\n     *\n     * @param extrusionMaterial Material to add uniforms to.\n     * @param shader [[THREE.WebGLShader]] containing the vertex and fragment shaders to add the\n     *                  special includes to.\n     */\n    export function onBeforeCompile(extrusionMaterial: ExtrusionFeature, shader: THREE.Shader) {\n        if (!isEnabled(extrusionMaterial)) {\n            return;\n        }\n        assert(extrusionMaterial.shaderUniforms !== undefined);\n\n        // The vertex and fragment shaders have been constructed dynamically. The uniforms and\n        // the shader includes are now appended to them. No defines are required to preprocess\n        // shader chunks, but we utilize one just to note the feature is enabled/disabled\n        // (easier debugging), this define may be easily stripped out or replaced with simple\n        // boolean flag.\n        linkMixinWithShader(extrusionMaterial, shader);\n\n        shader.vertexShader = insertShaderInclude(\n            shader.vertexShader,\n            \"common\",\n            \"extrusion_pars_vertex\"\n        );\n\n        shader.vertexShader = insertShaderInclude(\n            shader.vertexShader,\n            \"begin_vertex\",\n            \"extrusion_vertex\",\n            true\n        );\n\n        shader.fragmentShader = insertShaderInclude(\n            shader.fragmentShader,\n            \"fog_pars_fragment\",\n            \"extrusion_pars_fragment\"\n        );\n\n        shader.fragmentShader = shader.fragmentShader.replace(\n            \"#include <normal_fragment_begin>\",\n            \"#include <extrusion_normal_fragment_begin>\"\n        );\n\n        shader.fragmentShader = insertShaderInclude(\n            shader.fragmentShader,\n            \"fog_fragment\",\n            \"extrusion_fragment\",\n            true\n        );\n    }\n}\n\n/**\n * Mixin class for extended THREE materials. Adds new properties required for `extrusionRatio`.\n *\n * There is some special handling for the extrusionRatio property, which is animated via\n * [[AnimatedExtrusionHandler]] that is using [[extrusionRatio]] setter and getter to update\n * extrusion in a way that works well with the mixin and EdgeMaterial.\n */\nexport class ExtrusionFeatureMixin implements ExtrusionFeature {\n    needsUpdate?: boolean;\n    uniformsNeedUpdate?: boolean;\n    defines?: any;\n    shaderDefines?: any;\n    shaderUniforms?: UniformsType;\n    onBeforeCompile?: CompileCallback;\n    private m_extrusion: number = ExtrusionFeatureDefs.DEFAULT_RATIO_MAX;\n\n    /**\n     * @see [[ExtrusionFeature#extrusion]]\n     */\n    protected getExtrusionRatio(): number {\n        return this.m_extrusion;\n    }\n    /**\n     * @see [[ExtrusionFeature#extrusion]]\n     */\n    protected setExtrusionRatio(value: number) {\n        const needsUpdate = value !== this.m_extrusion;\n        if (needsUpdate) {\n            this.m_extrusion = value;\n            ExtrusionFeature.updateExtrusionFeature(this);\n        }\n    }\n\n    /**\n     * The mixin class should call this method to register the property [[extrusionRatio]]\n     */\n    protected addExtrusionProperties(): void {\n        Object.defineProperty(this, \"extrusionRatio\", {\n            get: () => {\n                return this.getExtrusionRatio();\n            },\n            set: val => {\n                this.setExtrusionRatio(val);\n            }\n        });\n    }\n\n    /**\n     * Apply the extrusionRatio value from the parameters to the respective properties.\n     */\n    protected applyExtrusionParameters(params?: ExtrusionFeatureParameters) {\n        // Prepare maps for holding uniforms and defines references from the actual material.\n        linkMixinWithMaterial(this, this);\n\n        assert(this.shaderDefines !== undefined);\n        assert(this.shaderUniforms !== undefined);\n\n        if (params && params.zFightingWorkaround === true) {\n            this.shaderDefines.ZFIGHTING_WORKAROUND = \"\";\n        }\n\n        // Create uniform with default value, this ensures that it is always created,\n        // so no need for checks in setters.\n        this.shaderUniforms!.extrusionRatio = new THREE.Uniform(\n            ExtrusionFeatureDefs.DEFAULT_RATIO_MAX\n        );\n\n        // Apply initial parameter values.\n        if (params !== undefined) {\n            if (params.extrusionRatio !== undefined) {\n                this.setExtrusionRatio(params.extrusionRatio);\n            }\n        }\n\n        this.onBeforeCompile = chainCallbacks(this.onBeforeCompile, (shader: THREE.Shader) => {\n            ExtrusionFeature.onBeforeCompile(this, shader);\n        });\n\n        this.needsUpdate = ExtrusionFeature.isEnabled(this);\n    }\n\n    /**\n     * Copy extrusionRatio values from other ExtrusionFeature.\n     *\n     * @param source The material to copy property values from.\n     */\n    protected copyExtrusionParameters(source: ExtrusionFeature) {\n        if (source.extrusionRatio !== undefined) {\n            this.setExtrusionRatio(source.extrusionRatio);\n        }\n        return this;\n    }\n}\n\n/**\n * Subclass of [[THREE.MeshBasicMaterial]]. Adds new properties required for [[fadeNear]] and\n * [[fadeFar]]. In addition to the new properties (which update their respective uniforms), it is\n * also required to update the material in their objects [[onBeforeRender]] and [[OnAfterRender]]\n * calls, where their flag [[transparent]] is set and the internal fadeNear/fadeFar values are\n * updated to world space distances.\n *\n * @see [[Tile#addRenderHelper]]\n */\nexport class MapMeshBasicMaterial extends THREE.MeshBasicMaterial\n    implements FadingFeature, ExtrusionFeature, DisplacementFeature {\n    /**\n     * Constructs a new `FadingMeshBasicMaterial`.\n     *\n     * @param params `FadingMeshBasicMaterial` parameters.\n     */\n    constructor(\n        params?: THREE.MeshBasicMaterialParameters &\n            FadingFeatureParameters &\n            ExtrusionFeatureParameters &\n            DisplacementFeatureParameters\n    ) {\n        super(params);\n\n        FadingFeature.patchGlobalShaderChunks();\n\n        this.addFadingProperties();\n        this.applyFadingParameters(params);\n\n        ExtrusionFeature.patchGlobalShaderChunks();\n\n        this.addExtrusionProperties();\n        this.applyExtrusionParameters({ ...params, zFightingWorkaround: true });\n\n        this.addDisplacementProperties();\n        this.applyDisplacementParameters(params);\n    }\n\n    clone(): this {\n        return new MapMeshBasicMaterial().copy(this);\n    }\n\n    copy(source: this): any {\n        super.copy(source);\n        this.copyFadingParameters(source);\n        this.copyExtrusionParameters(source);\n        this.copyDisplacementParameters(source);\n        return this;\n    }\n\n    // Only here to make the compiler happy, these methods will be overriden: The actual\n    // implementations are those in [[FadingFeatureMixin]] and [[ExtrusionFeatureMixin]], see below:\n    //\n    // applyMixinsWithoutProperties(FadingMeshBasicMaterial, [FadingFeatureMixin]);\n    // applyMixinsWithoutProperties(ExtrudionMeshBasicMaterial, [ExtrusionFeatureMixin]);\n    //\n    // Mixin declarations start ---------------------------------------------------------\n\n    get fadeNear(): number {\n        return FadingFeature.DEFAULT_FADE_NEAR;\n    }\n    // tslint:disable-next-line:no-unused-variable\n    set fadeNear(value: number) {\n        // to be overridden\n    }\n\n    get fadeFar(): number {\n        return FadingFeature.DEFAULT_FADE_FAR;\n    }\n    // tslint:disable-next-line:no-unused-variable\n    set fadeFar(value: number) {\n        // to be overridden\n    }\n\n    get extrusionRatio(): number {\n        return ExtrusionFeatureDefs.DEFAULT_RATIO_MAX;\n    }\n    // tslint:disable-next-line:no-unused-variable\n    set extrusionRatio(value: number) {\n        // to be overridden\n    }\n\n    get displacementMap(): THREE.Texture | null {\n        return null;\n    }\n\n    // tslint:disable-next-line:no-unused-variable\n    set displacementMap(value: THREE.Texture | null) {\n        // to be overridden\n    }\n\n    // tslint:disable-next-line:no-unused-variable\n    setDisplacementMap(value: THREE.Texture | null) {\n        // to be overridden\n    }\n\n    protected addFadingProperties(): void {\n        // to be overridden\n    }\n\n    // tslint:disable-next-line:no-unused-variable\n    protected applyFadingParameters(params?: FadingFeatureParameters) {\n        // to be overridden\n    }\n\n    // tslint:disable-next-line:no-unused-variable\n    protected copyFadingParameters(source: FadingFeature) {\n        // to be overridden\n    }\n\n    protected addExtrusionProperties(): void {\n        // to be overridden\n    }\n\n    // tslint:disable-next-line:no-unused-variable\n    protected applyExtrusionParameters(params?: ExtrusionFeatureParameters) {\n        // to be overridden\n    }\n\n    // tslint:disable-next-line:no-unused-variable\n    protected copyExtrusionParameters(source: FadingFeature) {\n        // to be overridden\n    }\n\n    protected addDisplacementProperties(): void {\n        // to be overridden\n    }\n\n    // tslint:disable-next-line:no-unused-variable\n    protected applyDisplacementParameters(params?: DisplacementFeatureParameters) {\n        // to be overridden\n    }\n\n    // tslint:disable-next-line:no-unused-variable\n    protected copyDisplacementParameters(source: DisplacementFeature) {\n        // to be overridden\n    }\n    // Mixin declarations end -----------------------------------------------------------\n}\n\nexport class MapMeshDepthMaterial extends THREE.MeshDepthMaterial implements ExtrusionFeature {\n    constructor(params?: THREE.MeshDepthMaterialParameters & ExtrusionFeatureParameters) {\n        super(params);\n\n        ExtrusionFeature.patchGlobalShaderChunks();\n\n        this.addExtrusionProperties();\n\n        // We need to set these to false, because otherwise three.js complains that there are\n        // outputs of the vertex shader not used in the pixel shader, the properties in question\n        // are `vExtrusionRatio` and `vExtrusionAxis`.\n        this.applyExtrusionParameters({ ...params, zFightingWorkaround: false });\n        this.flatShading = false;\n    }\n\n    // Only here to make the compiler happy, these methods will be overriden: The actual\n    // implementations are those in[[ExtrusionFeatureMixin]], see below:\n    //\n    // applyMixinsWithoutProperties(...);\n    //\n\n    // Mixin declarations start ---------------------------------------------------------\n    get extrusionRatio(): number {\n        return ExtrusionFeatureDefs.DEFAULT_RATIO_MAX;\n    }\n    // tslint:disable-next-line:no-unused-variable\n    set extrusionRatio(value: number) {\n        // to be overridden\n    }\n\n    protected addExtrusionProperties(): void {\n        // to be overridden\n    }\n\n    // tslint:disable-next-line:no-unused-variable\n    protected applyExtrusionParameters(params?: ExtrusionFeatureParameters) {\n        // to be overridden\n    }\n\n    // tslint:disable-next-line:no-unused-variable\n    protected copyExtrusionParameters(source: FadingFeature) {\n        // to be overridden\n    }\n    // Mixin declarations end -----------------------------------------------------------\n}\n\n/**\n * Subclass of THREE.MeshStandardMaterial. Adds new properties required for `fadeNear` and\n * `fadeFar`. In addition to the new properties (which fill respective uniforms), it is also\n * required to update the material in their objects `onBeforeRender` and `OnAfterRender` calls,\n * where their flag `transparent` is set and the internal fadeNear/fadeFar values are updated to\n * world space distances.\n *\n * @see [[Tile#addRenderHelper]]\n */\nexport class MapMeshStandardMaterial extends THREE.MeshStandardMaterial\n    implements FadingFeature, ExtrusionFeature, DisplacementFeature {\n    uniformsNeedUpdate?: boolean;\n\n    /**\n     * Constructs a new `FadingMeshStandardMaterial`.\n     *\n     * @param params `FadingMeshStandardMaterial` parameters.\n     */\n    constructor(\n        params?: THREE.MeshStandardMaterialParameters &\n            FadingFeatureParameters &\n            ExtrusionFeatureParameters &\n            ShadowFeatureParameters\n    ) {\n        super(params);\n\n        FadingFeature.patchGlobalShaderChunks();\n\n        this.addFadingProperties();\n        this.applyFadingParameters(params);\n\n        ExtrusionFeature.patchGlobalShaderChunks();\n\n        this.addExtrusionProperties();\n        this.applyExtrusionParameters({ ...params, zFightingWorkaround: true });\n\n        if (params?.removeDiffuseLight === true) {\n            this.onBeforeCompile = chainCallbacks(this.onBeforeCompile, shader => {\n                shader.fragmentShader = THREE.ShaderChunk.meshphysical_frag.replace(\n                    \"#include <lights_physical_pars_fragment>\",\n                    simpleLightingShadowChunk\n                );\n            });\n        }\n    }\n\n    clone(): this {\n        return new MapMeshStandardMaterial().copy(this);\n    }\n\n    copy(source: this): any {\n        super.copy(source);\n        this.copyFadingParameters(source);\n        this.copyExtrusionParameters(source);\n        return this;\n    }\n\n    /** @override */\n    get displacementMap(): THREE.Texture | null {\n        return super.displacementMap === undefined ? null : super.displacementMap;\n    }\n\n    /** @override */\n    set displacementMap(map: THREE.Texture | null) {\n        if (map === this.displacementMap) {\n            return;\n        }\n\n        if (!map || !this.displacementMap) {\n            this.needsUpdate = true;\n        }\n\n        if (map) {\n            map.needsUpdate = true;\n        }\n        super.displacementMap = map;\n    }\n\n    // Only here to make the compiler happy, these methods will be overriden: The actual\n    // implementations are those in [[FadingFeatureMixin]] and [[ExtrusionFeatureMixin]], see below:\n    //\n    // applyMixinsWithoutProperties(FadingMeshBasicMaterial, [FadingFeatureMixin]);\n    // applyMixinsWithoutProperties(ExtrudionMeshBasicMaterial, [ExtrusionFeatureMixin]);\n    //\n    // Mixin declarations start ---------------------------------------------------------\n\n    get fadeNear(): number {\n        return FadingFeature.DEFAULT_FADE_NEAR;\n    }\n    // tslint:disable-next-line:no-unused-variable\n    set fadeNear(value: number) {\n        // to be overridden\n    }\n\n    get fadeFar(): number {\n        return FadingFeature.DEFAULT_FADE_FAR;\n    }\n    // tslint:disable-next-line:no-unused-variable\n    set fadeFar(value: number) {\n        // to be overridden\n    }\n\n    get extrusionRatio(): number {\n        return ExtrusionFeatureDefs.DEFAULT_RATIO_MAX;\n    }\n    // tslint:disable-next-line:no-unused-variable\n    set extrusionRatio(value: number) {\n        // to be overridden\n    }\n\n    /**\n     * This is needed to simplify the lighting calculation, currently there is no support for\n     * switching this at runtime. It is required here to be a property because the parameters\n     * are applied to this material, and if this isn't here, three.js will complain that the\n     * property is missing.\n     * @internal\n     */\n    get removeDiffuseLight(): boolean {\n        return false;\n    }\n    /** @internal */\n    set removeDiffuseLight(val: boolean) {\n        // Stays empty.\n    }\n\n    protected addFadingProperties(): void {\n        // to be overridden\n    }\n\n    // tslint:disable-next-line:no-unused-variable\n    protected applyFadingParameters(params?: FadingFeatureParameters) {\n        // to be overridden\n    }\n\n    // tslint:disable-next-line:no-unused-variable\n    protected copyFadingParameters(source: FadingFeature) {\n        // to be overridden\n    }\n\n    protected addExtrusionProperties(): void {\n        // to be overridden\n    }\n\n    // tslint:disable-next-line:no-unused-variable\n    protected applyExtrusionParameters(params?: ExtrusionFeatureParameters) {\n        // to be overridden\n    }\n\n    // tslint:disable-next-line:no-unused-variable\n    protected copyExtrusionParameters(source: FadingFeature) {\n        // to be overridden\n    }\n    // Mixin declarations end -----------------------------------------------------------\n}\n\n/**\n * Finish the classes MapMeshBasicMaterial and MapMeshStandardMaterial by assigning them the actual\n * implementations of the mixed in functions.\n */\napplyMixinsWithoutProperties(MapMeshBasicMaterial, [FadingFeatureMixin]);\napplyMixinsWithoutProperties(MapMeshStandardMaterial, [FadingFeatureMixin]);\napplyMixinsWithoutProperties(MapMeshBasicMaterial, [ExtrusionFeatureMixin]);\napplyMixinsWithoutProperties(MapMeshStandardMaterial, [ExtrusionFeatureMixin]);\napplyMixinsWithoutProperties(MapMeshDepthMaterial, [ExtrusionFeatureMixin]);\napplyMixinsWithoutProperties(MapMeshBasicMaterial, [DisplacementFeatureMixin]);\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Lists supported line caps types/modes.\n */\nexport enum LineCapsModes {\n    CAPS_NONE = 0,\n    CAPS_SQUARE,\n    CAPS_ROUND,\n    CAPS_TRIANGLE_IN,\n    CAPS_TRIANGLE_OUT\n}\n\nexport default {\n    extrude_line_vert_func: `\nvec3 extrudeLine(\n        in vec3 vertexPosition,\n        in float linePosition,\n        in float extrusionWidth,\n        in vec4 bitangent,\n        in vec3 tangent,\n        in float tanHalfAngle,\n        inout vec2 uv\n    ) {\n    vec3 result = vertexPosition;\n    // Retrieve the angle between this segment and the previous one (stored in the bitangent w\n    // component).\n    float angle = bitangent.w;\n    // Extrude according to the angle between segments to properly render narrow joints...\n    if (angle != 0.0) {\n        result += uv.y * extrusionWidth * bitangent.xyz / cos(angle / 2.0);\n        uv.x = linePosition + uv.x * extrusionWidth * uv.y * tanHalfAngle;\n    }\n    // ... or extrude in a simple manner for segments that keep the same direction.\n    else {\n        result += uv.y * extrusionWidth * bitangent.xyz + uv.x * extrusionWidth * tangent;\n        uv.x = linePosition + uv.x * extrusionWidth;\n    }\n    uv.y *= extrusionWidth;\n    return result;\n}\n`,\n    round_edges_and_add_caps: `\n#define CAPS_NONE ${LineCapsModes.CAPS_NONE}\n#define CAPS_SQUARE ${LineCapsModes.CAPS_SQUARE}\n#define CAPS_ROUND ${LineCapsModes.CAPS_ROUND}\n#define CAPS_TRIANGLE_IN ${LineCapsModes.CAPS_TRIANGLE_IN}\n#define CAPS_TRIANGLE_OUT ${LineCapsModes.CAPS_TRIANGLE_OUT}\n\nfloat roundEdgesAndAddCaps(in vec4 coords, in vec3 range) {\n    // Compute the line's width to length ratio.\n    float widthRatio = range.y / range.x;\n\n    // Compute the inner segment distance (same for all cap mode).\n    float dist = abs(coords.y);\n    float segmentBeginMask = clamp(ceil(coords.z - coords.x), 0.0, 1.0);\n    float segmentEndMask = clamp(ceil(coords.x - coords.w), 0.0, 1.0);\n    dist = max(dist, segmentBeginMask * length(vec2((coords.x - coords.z) / widthRatio, coords.y)));\n    dist = max(dist, segmentEndMask * length(vec2((coords.x - coords.w) / widthRatio, coords.y)));\n\n    #if CAPS_MODE != CAPS_ROUND\n    // Compute the caps mask.\n    float capRangeMask = clamp(1.0 - ceil(range.z - drawRange.y), 0.0, 1.0);\n    float beginCapMask = clamp(ceil(drawRange.x - coords.x), 0.0, 1.0);\n    float endCapMask = clamp(ceil(coords.x - drawRange.y), 0.0, 1.0);\n    float capMask = capRangeMask * max(beginCapMask, endCapMask);\n\n    // Compute the outer segment distance (specific for each cap mode).\n    float capDist = max(coords.x - drawRange.y, drawRange.x - coords.x) / widthRatio;\n    #if CAPS_MODE == CAPS_NONE\n    dist = mix(dist, max(abs(coords.y), (capDist + 0.1) / 0.1), capMask);\n    #elif CAPS_MODE == CAPS_SQUARE\n    dist = mix(dist, max(abs(coords.y), capDist), capMask);\n    #elif CAPS_MODE == CAPS_TRIANGLE_OUT\n    dist = mix(dist, abs(coords.y) + capDist, capMask);\n    #elif CAPS_MODE == CAPS_TRIANGLE_IN\n    dist = mix(dist, max(abs(coords.y), (capDist - abs(coords.y)) + capDist), capMask);\n    #endif\n    #endif // CAPS_MODE != CAPS_ROUND\n\n    return dist;\n}\n`,\n    tile_clip_func: `\nvoid tileClip(vec2 tilePos, vec2 tileSize) {\n    if (tileSize.x > 0.0 && (tilePos.x < -tileSize.x / 2.0 || tilePos.x > tileSize.x / 2.0))\n        discard;\n    if (tileSize.y > 0.0 && (tilePos.y < -tileSize.y / 2.0 || tilePos.y > tileSize.y / 2.0))\n        discard;\n}\n`,\n    high_precision_vert_func: `\nvec3 subtractDblEyePos( const in vec3 pos ) {\n    vec3 t1 = positionLow - u_eyepos_lowpart;\n    vec3 e = t1 - positionLow;\n    vec3 t2 = ((-u_eyepos_lowpart - e) + (positionLow - (t1 - e))) + pos - u_eyepos;\n    vec3 high_delta = t1 + t2;\n    vec3 low_delta = t2 - (high_delta - t1);\n    return (high_delta + low_delta);\n}\n`\n};\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nconst RX = /^((?=\\.\\d|\\d)(?:\\d+)?(?:\\.?\\d*))px$/;\n\n/**\n * A class representing Pixels.\n *\n * @hidden\n * @internal\n */\nexport class Pixels {\n    /**\n     * Parses a pixel string literal.\n     *\n     * @param text The string color literal\n     */\n    static parse(text: string): Pixels | undefined {\n        const match = RX.exec(text);\n        if (match === null) {\n            return undefined;\n        }\n        return new Pixels(Number(match[1]));\n    }\n\n    /**\n     * Constructs a [[Pixels]] literal\n     *\n     * @param value The number of pixels.\n     */\n    constructor(readonly value: number) {}\n\n    toJSON() {\n        return `${this.value}px`;\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    BaseTechniqueParams,\n    BasicExtrudedLineTechniqueParams,\n    ExtrudedPolygonTechniqueParams,\n    FillTechniqueParams,\n    isTextureBuffer,\n    LineTechniqueParams,\n    MarkerTechniqueParams,\n    PointTechniqueParams,\n    PolygonalTechniqueParams,\n    SegmentsTechniqueParams,\n    ShaderTechniqueParams,\n    SolidLineTechniqueParams,\n    StandardExtrudedLineTechniqueParams,\n    StandardTechniqueParams,\n    TerrainTechniqueParams,\n    TextTechniqueParams,\n    TextureCoordinateType\n} from \"./TechniqueParams\";\n\nimport { Expr, JsonExpr } from \"./Expr\";\nimport { InterpolatedPropertyDefinition } from \"./InterpolatedPropertyDefs\";\nimport {\n    AttrScope,\n    mergeTechniqueDescriptor,\n    TechniqueDescriptor,\n    TechniqueDescriptorRegistry\n} from \"./TechniqueDescriptor\";\n/**\n * Names of the supported texture properties.\n */\nexport const TEXTURE_PROPERTY_KEYS = [\n    \"map\",\n    \"normalMap\",\n    \"displacementMap\",\n    \"roughnessMap\",\n    \"emissiveMap\",\n    \"alphaMap\",\n    \"metalnessMap\",\n    \"bumpMap\"\n];\n\n/**\n * Names of the properties controlling transparency.\n */\nexport const TRANSPARENCY_PROPERTY_KEYS = [\"opacity\", \"transparent\"];\n\n// TODO: Can be removed, when all when interpolators are implemented as [[Expr]]s\nexport type RemoveInterpolatedPropDef<T> = T | InterpolatedPropertyDefinition<any> extends T\n    ? Exclude<T, InterpolatedPropertyDefinition<any>>\n    : T;\nexport type RemoveJsonExpr<T> = T | JsonExpr extends T ? Exclude<T, JsonExpr> : T;\n\n/**\n * Make runtime representation of technique attributes from JSON-compatible typings.\n *\n * Translates\n *  - InterpolatedPropertyDefinition -> InterpolatedProperty\n *  - JsonExpr -> Expr\n */\nexport type MakeTechniqueAttrs<T> = {\n    [P in keyof T]: T[P] | JsonExpr extends T[P]\n        ? RemoveInterpolatedPropDef<RemoveJsonExpr<T[P]>> | Expr\n        : T[P];\n};\n\nexport const techniqueDescriptors: TechniqueDescriptorRegistry = {};\n\nexport const baseTechniqueParamsDescriptor: TechniqueDescriptor<BaseTechniqueParams> = {\n    // TODO: Choose which techniques should support color with transparency.\n    // For now we chosen all, but it maybe not suitable for text or line marker techniques.\n    attrTransparencyColor: \"color\",\n    attrScopes: {\n        renderOrder: AttrScope.TechniqueGeometry,\n        enabled: AttrScope.FeatureGeometry,\n        kind: AttrScope.TechniqueGeometry,\n        transient: AttrScope.TechniqueGeometry,\n        fadeFar: AttrScope.TechniqueRendering,\n        fadeNear: AttrScope.TechniqueRendering\n    }\n};\n\nexport const pointTechniquePropTypes = mergeTechniqueDescriptor<PointTechniqueParams>(\n    baseTechniqueParamsDescriptor,\n    {\n        attrScopes: {\n            texture: AttrScope.TechniqueGeometry,\n            enablePicking: AttrScope.TechniqueGeometry,\n            color: AttrScope.TechniqueRendering,\n            transparent: AttrScope.TechniqueRendering,\n            opacity: AttrScope.TechniqueGeometry\n        }\n    }\n);\n\n/**\n * Runtime representation of [[SquaresStyle]] as parsed by [[StyleSetEvaluator]].\n * For technique parameters see [[PointTechniqueParams]].\n */\nexport interface SquaresTechnique extends MakeTechniqueAttrs<PointTechniqueParams> {\n    name: \"squares\";\n}\n\nexport const squaresTechniquePropTypes = mergeTechniqueDescriptor<SquaresTechnique>(\n    baseTechniqueParamsDescriptor,\n    pointTechniquePropTypes\n);\ntechniqueDescriptors.squares = squaresTechniquePropTypes;\n\n/**\n * Runtime representation of [[CirclesStyle]] as parsed by [[StyleSetEvaluator]].\n * For technique parameters see [[PointTechniqueParams]].\n */\nexport interface CirclesTechnique extends MakeTechniqueAttrs<PointTechniqueParams> {\n    name: \"circles\";\n}\n\nexport const circlesTechniquePropTypes = mergeTechniqueDescriptor<CirclesTechnique>(\n    baseTechniqueParamsDescriptor,\n    pointTechniquePropTypes\n);\ntechniqueDescriptors.circles = circlesTechniquePropTypes;\n\n/**\n * Runtime representation of [[PoiStyle]] as parsed by [[StyleSetEvaluator]].\n * For technique parameters see [[MarkerTechniqueParams]].\n */\nexport interface PoiTechnique extends MakeTechniqueAttrs<MarkerTechniqueParams> {\n    name: \"labeled-icon\";\n}\n\n/**\n * Runtime representation of [[LineMarkerStyle]] as parsed by [[StyleSetEvaluator]].\n * For technique parameters see [[MarkerTechniqueParams]].\n */\nexport interface LineMarkerTechnique extends MakeTechniqueAttrs<MarkerTechniqueParams> {\n    name: \"line-marker\";\n}\n\nconst lineMarkerTechniquePropTypes = mergeTechniqueDescriptor<LineMarkerTechnique>(\n    baseTechniqueParamsDescriptor,\n    {\n        attrScopes: {\n            text: AttrScope.FeatureGeometry,\n            label: AttrScope.FeatureGeometry,\n            useAbbreviation: AttrScope.FeatureGeometry,\n            useIsoCode: AttrScope.FeatureGeometry,\n            priority: AttrScope.TechniqueGeometry,\n            textMinZoomLevel: AttrScope.TechniqueGeometry,\n            textMaxZoomLevel: AttrScope.TechniqueGeometry,\n            iconMinZoomLevel: AttrScope.TechniqueGeometry,\n            iconMaxZoomLevel: AttrScope.TechniqueGeometry,\n            distanceScale: AttrScope.TechniqueGeometry,\n            textMayOverlap: AttrScope.TechniqueGeometry,\n            iconMayOverlap: AttrScope.TechniqueGeometry,\n            textReserveSpace: AttrScope.TechniqueGeometry,\n            iconReserveSpace: AttrScope.TechniqueGeometry,\n            renderTextDuringMovements: AttrScope.TechniqueGeometry,\n            alwaysOnTop: AttrScope.TechniqueGeometry,\n            textIsOptional: AttrScope.TechniqueGeometry,\n            showOnMap: AttrScope.TechniqueGeometry,\n            stackMode: AttrScope.TechniqueGeometry,\n            minDistance: AttrScope.TechniqueGeometry,\n            iconIsOptional: AttrScope.TechniqueGeometry,\n            iconFadeTime: AttrScope.TechniqueGeometry,\n            textFadeTime: AttrScope.TechniqueGeometry,\n            xOffset: AttrScope.TechniqueGeometry,\n            yOffset: AttrScope.TechniqueGeometry,\n            iconXOffset: AttrScope.TechniqueGeometry,\n            iconYOffset: AttrScope.TechniqueGeometry,\n            iconScale: AttrScope.TechniqueGeometry,\n            screenHeight: AttrScope.TechniqueGeometry,\n            screenWidth: AttrScope.TechniqueGeometry,\n            poiTable: AttrScope.TechniqueGeometry,\n            poiName: AttrScope.FeatureGeometry,\n            poiNameField: AttrScope.TechniqueGeometry,\n            imageTexture: AttrScope.FeatureGeometry,\n            imageTextureField: AttrScope.TechniqueGeometry,\n            imageTexturePrefix: AttrScope.TechniqueGeometry,\n            imageTexturePostfix: AttrScope.TechniqueGeometry,\n            iconColor: AttrScope.TechniqueRendering,\n            iconBrightness: AttrScope.TechniqueRendering,\n            style: AttrScope.TechniqueGeometry,\n            fontName: AttrScope.TechniqueGeometry,\n            fontStyle: AttrScope.TechniqueGeometry,\n            fontVariant: AttrScope.TechniqueGeometry,\n            rotation: AttrScope.TechniqueGeometry,\n            tracking: AttrScope.TechniqueGeometry,\n            leading: AttrScope.TechniqueGeometry,\n            maxLines: AttrScope.TechniqueGeometry,\n            lineWidth: AttrScope.TechniqueGeometry,\n            canvasRotation: AttrScope.TechniqueGeometry,\n            lineRotation: AttrScope.TechniqueGeometry,\n            wrappingMode: AttrScope.TechniqueGeometry,\n            hAlignment: AttrScope.TechniqueGeometry,\n            vAlignment: AttrScope.TechniqueGeometry,\n            placements: AttrScope.TechniqueGeometry,\n            backgroundColor: AttrScope.TechniqueRendering,\n            backgroundSize: AttrScope.TechniqueRendering,\n            backgroundOpacity: AttrScope.TechniqueRendering,\n            color: AttrScope.TechniqueRendering,\n            opacity: AttrScope.TechniqueRendering,\n            size: AttrScope.TechniqueRendering\n        }\n    }\n);\ntechniqueDescriptors[\"line-marker\"] = lineMarkerTechniquePropTypes;\ntechniqueDescriptors[\"labeled-icon\"] = lineMarkerTechniquePropTypes;\n\n/**\n * Runtime representation of [[SegmentsStyle]] as parsed by [[StyleSetEvaluator]].\n * For technique parameters see [[SegmentsTechniqueParams]].\n */\nexport interface SegmentsTechnique extends MakeTechniqueAttrs<SegmentsTechniqueParams> {\n    name: \"segments\";\n}\n\nconst polygonalTechniqueDescriptor: TechniqueDescriptor<PolygonalTechniqueParams> = {\n    attrScopes: {\n        polygonOffset: AttrScope.TechniqueRendering,\n        polygonOffsetFactor: AttrScope.TechniqueRendering,\n        polygonOffsetUnits: AttrScope.TechniqueRendering,\n        lineColor: AttrScope.TechniqueRendering,\n        lineFadeFar: AttrScope.TechniqueRendering,\n        lineFadeNear: AttrScope.TechniqueRendering\n    }\n};\n/**\n * Runtime representation of [[BasicExtrudedLineStyle]] as parsed by [[StyleSetEvaluator]].\n * For technique parameters see [[BasicExtrudedLineTechniqueParams]].\n */\nexport interface BasicExtrudedLineTechnique\n    extends MakeTechniqueAttrs<BasicExtrudedLineTechniqueParams> {\n    name: \"extruded-line\";\n}\n\n/**\n * Runtime representation of [[StandardExtrudedLineStyle]] as parsed by [[StyleSetEvaluator]].\n * For technique parameters see [[StandardExtrudedLineTechniqueParams]].\n */\nexport interface StandardExtrudedLineTechnique\n    extends MakeTechniqueAttrs<StandardExtrudedLineTechniqueParams> {\n    name: \"extruded-line\";\n}\n\n/**\n * Runtime representation of [[SolidLineStyle]] as parsed by [[StyleSetEvaluator]].\n * For technique parameters see [[SolidLineTechniqueParams]].\n */\nexport interface SolidLineTechnique extends MakeTechniqueAttrs<SolidLineTechniqueParams> {\n    name: \"solid-line\" | \"dashed-line\";\n}\n\nexport const solidLineTechniqueDescriptor = mergeTechniqueDescriptor<SolidLineTechnique>(\n    baseTechniqueParamsDescriptor,\n    polygonalTechniqueDescriptor,\n    {\n        attrScopes: {\n            clipping: AttrScope.TechniqueGeometry,\n            secondaryRenderOrder: AttrScope.TechniqueGeometry,\n            color: AttrScope.TechniqueRendering,\n            opacity: AttrScope.TechniqueRendering,\n            transparent: AttrScope.TechniqueRendering,\n            lineWidth: AttrScope.TechniqueRendering,\n            secondaryWidth: AttrScope.TechniqueRendering,\n            secondaryColor: AttrScope.TechniqueRendering,\n            dashSize: AttrScope.TechniqueRendering,\n            gapSize: AttrScope.TechniqueRendering\n        }\n    }\n);\ntechniqueDescriptors[\"solid-line\"] = solidLineTechniqueDescriptor;\n// TODO: Remove deprecated \"dashed-line\" support in future releases.\ntechniqueDescriptors[\"dashed-line\"] = solidLineTechniqueDescriptor;\n\n/**\n * Runtime representation of [[LineStyle]] as parsed by [[StyleSetEvaluator]].\n * For technique parameters see [[LineTechniqueParams]].\n */\nexport interface LineTechnique extends MakeTechniqueAttrs<LineTechniqueParams> {\n    name: \"line\";\n}\n\nexport const lineTechniqueDescriptor = mergeTechniqueDescriptor<LineTechnique>(\n    baseTechniqueParamsDescriptor,\n    {\n        attrScopes: {\n            // TODO, check, which are really dynamic !\n            color: AttrScope.TechniqueRendering,\n            opacity: AttrScope.TechniqueRendering,\n            transparent: AttrScope.TechniqueRendering,\n            lineWidth: AttrScope.FeatureGeometry\n        }\n    }\n);\n\ntechniqueDescriptors.line = lineTechniqueDescriptor;\n\n/**\n * Runtime representation of [[FillStyle]] as parsed by [[StyleSetEvaluator]].\n * For technique parameters see [[FillTechniqueParams]].\n */\nexport interface FillTechnique extends MakeTechniqueAttrs<FillTechniqueParams> {\n    name: \"fill\";\n}\n\nconst fillTechniqueDescriptor = mergeTechniqueDescriptor<FillTechnique>(\n    baseTechniqueParamsDescriptor,\n    polygonalTechniqueDescriptor,\n    {\n        attrScopes: {\n            color: AttrScope.TechniqueRendering,\n            opacity: AttrScope.TechniqueRendering,\n            transparent: AttrScope.TechniqueRendering,\n            lineWidth: AttrScope.TechniqueRendering\n        }\n    }\n);\ntechniqueDescriptors.fill = fillTechniqueDescriptor;\n\n/**\n * Technique used to render a mesh geometry.\n * For technique parameters see [[StandardTechniqueParams]].\n */\nexport interface StandardTechnique extends MakeTechniqueAttrs<StandardTechniqueParams> {\n    name: \"standard\";\n}\nconst standardTechniqueDescriptor = mergeTechniqueDescriptor<StandardTechnique>(\n    baseTechniqueParamsDescriptor,\n    {\n        attrScopes: {\n            color: AttrScope.FeatureGeometry,\n            vertexColors: AttrScope.FeatureGeometry,\n            wireframe: AttrScope.TechniqueRendering,\n            roughness: AttrScope.TechniqueRendering,\n            metalness: AttrScope.TechniqueRendering,\n            alphaTest: AttrScope.TechniqueRendering,\n            depthTest: AttrScope.TechniqueRendering,\n            transparent: AttrScope.TechniqueRendering,\n            opacity: AttrScope.TechniqueRendering,\n            emissive: AttrScope.TechniqueRendering,\n            emissiveIntensity: AttrScope.TechniqueRendering,\n            refractionRatio: AttrScope.TechniqueRendering,\n            map: AttrScope.TechniqueGeometry,\n            mapProperties: AttrScope.TechniqueGeometry,\n            normalMap: AttrScope.TechniqueGeometry,\n            normalMapProperties: AttrScope.TechniqueGeometry,\n            displacementMap: AttrScope.TechniqueGeometry,\n            displacementMapProperties: AttrScope.TechniqueGeometry,\n            roughnessMap: AttrScope.TechniqueGeometry,\n            roughnessMapProperties: AttrScope.TechniqueGeometry,\n            emissiveMap: AttrScope.TechniqueGeometry,\n            emissiveMapProperties: AttrScope.TechniqueGeometry,\n            bumpMap: AttrScope.TechniqueGeometry,\n            bumpMapProperties: AttrScope.TechniqueGeometry,\n            metalnessMap: AttrScope.TechniqueGeometry,\n            metalnessMapProperties: AttrScope.TechniqueGeometry,\n            alphaMap: AttrScope.TechniqueGeometry,\n            alphaMapProperties: AttrScope.TechniqueGeometry\n        }\n    }\n);\ntechniqueDescriptors.standard = standardTechniqueDescriptor;\n\n/**\n * Runtime representation of [[ExtrudedPolygonStyle]] as parsed by [[StyleSetEvaluator]].\n * For technique parameters see [[ExtrudedPolygonTechniqueParams]].\n */\nexport interface ExtrudedPolygonTechnique\n    extends MakeTechniqueAttrs<ExtrudedPolygonTechniqueParams> {\n    name: \"extruded-polygon\";\n}\n\nconst extrudedPolygonTechniqueDescriptor = mergeTechniqueDescriptor<ExtrudedPolygonTechnique>(\n    baseTechniqueParamsDescriptor,\n    standardTechniqueDescriptor,\n    {\n        attrScopes: {\n            height: AttrScope.FeatureGeometry,\n            floorHeight: AttrScope.FeatureGeometry,\n            color: AttrScope.FeatureGeometry,\n            defaultColor: AttrScope.FeatureGeometry,\n            defaultHeight: AttrScope.FeatureGeometry,\n            constantHeight: AttrScope.FeatureGeometry,\n            boundaryWalls: AttrScope.FeatureGeometry,\n            footprint: AttrScope.FeatureGeometry,\n            maxSlope: AttrScope.FeatureGeometry,\n            enableDepthPrePass: AttrScope.TechniqueGeometry,\n            animateExtrusionDuration: AttrScope.TechniqueGeometry,\n            animateExtrusion: AttrScope.TechniqueRendering,\n            opacity: AttrScope.TechniqueRendering,\n            transparent: AttrScope.TechniqueRendering,\n            lineWidth: AttrScope.TechniqueRendering,\n            lineFadeNear: AttrScope.TechniqueRendering,\n            lineFadeFar: AttrScope.TechniqueRendering,\n            lineColorMix: AttrScope.TechniqueGeometry,\n            lineColor: AttrScope.TechniqueRendering\n        }\n    }\n);\ntechniqueDescriptors[\"extruded-polygon\"] = extrudedPolygonTechniqueDescriptor;\n/**\n * Runtime representation of [[TextStyle]] as parsed by [[StyleSetEvaluator]].\n * For technique parameters see [[TextTechniqueParams]].\n */\nexport interface TextTechnique extends MakeTechniqueAttrs<TextTechniqueParams> {\n    name: \"text\";\n}\n\nconst textTechniqueDescriptor = mergeTechniqueDescriptor<TextTechnique>(\n    baseTechniqueParamsDescriptor,\n    {\n        attrScopes: {\n            text: AttrScope.FeatureGeometry,\n            label: AttrScope.FeatureGeometry,\n            useAbbreviation: AttrScope.FeatureGeometry,\n            useIsoCode: AttrScope.FeatureGeometry,\n\n            minZoomLevel: AttrScope.TechniqueGeometry,\n            maxZoomLevel: AttrScope.TechniqueGeometry,\n            distanceScale: AttrScope.TechniqueGeometry,\n            mayOverlap: AttrScope.TechniqueGeometry,\n            reserveSpace: AttrScope.TechniqueGeometry,\n            textFadeTime: AttrScope.TechniqueGeometry,\n            xOffset: AttrScope.TechniqueGeometry,\n            yOffset: AttrScope.TechniqueGeometry,\n            style: AttrScope.TechniqueGeometry,\n            fontName: AttrScope.TechniqueGeometry,\n            fontStyle: AttrScope.TechniqueGeometry,\n            fontVariant: AttrScope.TechniqueGeometry,\n            rotation: AttrScope.TechniqueGeometry,\n            tracking: AttrScope.TechniqueGeometry,\n            leading: AttrScope.TechniqueGeometry,\n            maxLines: AttrScope.TechniqueGeometry,\n            lineWidth: AttrScope.TechniqueGeometry,\n            canvasRotation: AttrScope.TechniqueGeometry,\n            lineRotation: AttrScope.TechniqueGeometry,\n            wrappingMode: AttrScope.TechniqueGeometry,\n            hAlignment: AttrScope.TechniqueGeometry,\n            vAlignment: AttrScope.TechniqueGeometry,\n            backgroundColor: AttrScope.TechniqueRendering,\n            backgroundSize: AttrScope.TechniqueRendering,\n            backgroundOpacity: AttrScope.TechniqueRendering,\n            color: AttrScope.TechniqueRendering,\n            opacity: AttrScope.TechniqueRendering,\n            priority: AttrScope.TechniqueRendering,\n            size: AttrScope.TechniqueRendering\n        }\n    }\n);\ntechniqueDescriptors.text = textTechniqueDescriptor;\n\n/**\n * Special technique for user-defined shaders.\n * For technique parameters see [[ShaderTechniqueParams]].\n */\nexport interface ShaderTechnique extends MakeTechniqueAttrs<ShaderTechniqueParams> {\n    name: \"shader\";\n}\n\nconst shaderTechniqueDescriptor = mergeTechniqueDescriptor<ShaderTechnique>(\n    baseTechniqueParamsDescriptor,\n    {\n        attrScopes: {\n            primitive: AttrScope.TechniqueGeometry,\n            params: AttrScope.TechniqueRendering\n        }\n    }\n);\n\ntechniqueDescriptors.shader = shaderTechniqueDescriptor;\n\n/**\n * Technique used to render a terrain geometry with textures.\n * For technique parameters see [[TerrainTechniqueParams]].\n */\nexport interface TerrainTechnique extends MakeTechniqueAttrs<TerrainTechniqueParams> {\n    name: \"terrain\";\n}\n\n/**\n * Technique to avoid label rendering on top of certain line geometries.\n * For technique parameters see [[BaseTechniqueParams]].\n */\nexport interface LabelRejectionLineTechnique extends MakeTechniqueAttrs<BaseTechniqueParams> {\n    name: \"label-rejection-line\";\n}\n\n/**\n * Possible techniques that can be used to draw a geometry on the map.\n */\nexport type Technique =\n    | SquaresTechnique\n    | CirclesTechnique\n    | PoiTechnique\n    | LineMarkerTechnique\n    | LineTechnique\n    | SegmentsTechnique\n    | SolidLineTechnique\n    | FillTechnique\n    | StandardTechnique\n    | TerrainTechnique\n    | BasicExtrudedLineTechnique\n    | StandardExtrudedLineTechnique\n    | ExtrudedPolygonTechnique\n    | ShaderTechnique\n    | TextTechnique\n    | LabelRejectionLineTechnique;\n\n/**\n * Additional params used for optimized usage of `Techniques`.\n */\nexport interface IndexedTechniqueParams {\n    /**\n     * Optimization: Index into table in [[StyleSetEvaluator]] or in [[DecodedTile]].\n     * @hidden\n     */\n    _index: number;\n\n    /**\n     * Optimization: Unique [[Technique]] index of [[Style]] from which technique was derived.\n     * @hidden\n     */\n    _styleSetIndex: number;\n\n    /**\n     * The styleSet associated to this [[Technique]].\n     * @hidden\n     */\n    _styleSet?: string;\n\n    /**\n     * The category used to assign render orders to objects created using this [[Technique]].\n     * @hidden\n     */\n    _category?: string;\n\n    /**\n     * The category used to assign render orders to secondary objects\n     * created using this [[Technique]].\n     * @hidden\n     */\n    _secondaryCategory?: string;\n\n    /**\n     * `true` if any of the properties of this technique needs to access\n     * the feature's state.\n     *\n     * @hidden\n     */\n    _usesFeatureState?: boolean;\n\n    /**\n     * Last computed state derived from [[Technique.kind]].\n     */\n    _kindState?: boolean;\n}\n\n/**\n * For efficiency, [[StyleSetEvaluator]] returns [[Techniques]] additional params as defined in\n * [[IndexedTechniqueParams]].\n */\nexport type IndexedTechnique = Technique & IndexedTechniqueParams;\n\n/**\n * Type guard to check if an object is an instance of [[CirclesTechnique]].\n */\nexport function isCirclesTechnique(technique: Technique): technique is CirclesTechnique {\n    return technique.name === \"circles\";\n}\n\n/**\n * Type guard to check if an object is an instance of [[SquaresTechnique]].\n */\nexport function isSquaresTechnique(technique: Technique): technique is SquaresTechnique {\n    return technique.name === \"squares\";\n}\n\n/**\n * Type guard to check if an object is an instance of [[PoiTechnique]].\n */\nexport function isPoiTechnique(technique: Technique): technique is PoiTechnique {\n    return technique.name === \"labeled-icon\";\n}\n\n/**\n * Type guard to check if an object is an instance of [[LineMarkerTechnique]].\n */\nexport function isLineMarkerTechnique(technique: Technique): technique is LineMarkerTechnique {\n    return technique.name === \"line-marker\";\n}\n\n/**\n * Type guard to check if an object is an instance of [[LineTechnique]].\n */\nexport function isLineTechnique(technique: Technique): technique is LineTechnique {\n    return technique.name === \"line\";\n}\n\n/**\n * Type guard to check if an object is an instance of [[SolidLineTechnique]].\n */\nexport function isSolidLineTechnique(technique: Technique): technique is SolidLineTechnique {\n    return technique.name === \"solid-line\" || technique.name === \"dashed-line\";\n}\n\n/**\n * Type guard to check if an object is an instance of [[SolidLineTechnique]] and is a kind that\n * has special dashes.\n * @note Lines with special dashes need line caps to render properly.\n */\nexport function isSpecialDashesLineTechnique(\n    technique: Technique\n): technique is SolidLineTechnique {\n    return (\n        (technique.name === \"solid-line\" || technique.name === \"dashed-line\") &&\n        technique.dashes !== undefined &&\n        technique.dashes !== \"Square\"\n    );\n}\n\n/**\n * Type guard to check if an object is an instance of [[SegmentsTechnique]].\n */\nexport function isSegmentsTechnique(technique: Technique): technique is SegmentsTechnique {\n    return technique.name === \"segments\";\n}\n\n/**\n * Type guard to check if an object is an instance of [[BasicExtrudedLineTechnique]]\n * or [[StandardExtrudedLineTechnique]].\n */\nexport function isExtrudedLineTechnique(\n    technique: Technique\n): technique is BasicExtrudedLineTechnique | StandardExtrudedLineTechnique {\n    return technique.name === \"extruded-line\";\n}\n\n/**\n * Type guard to check if an object is an instance of [[BasicExtrudedLineTechnique]].\n */\nexport function isBasicExtrudedLineTechnique(\n    technique: Technique\n): technique is BasicExtrudedLineTechnique {\n    return isExtrudedLineTechnique(technique) && technique.shading === \"basic\";\n}\n\n/**\n * Type guard to check if an object is an instance of [[StandardExtrudedLineTechnique]].\n */\nexport function isStandardExtrudedLineTechnique(\n    technique: Technique\n): technique is StandardExtrudedLineTechnique {\n    return isExtrudedLineTechnique(technique) && technique.shading === \"standard\";\n}\n\n/**\n * Type guard to check if an object is an instance of [[FillTechnique]].\n */\nexport function isFillTechnique(technique: Technique): technique is FillTechnique {\n    return technique.name === \"fill\";\n}\n\n/**\n * Type guard to check if an object is an instance of [[ExtrudedPolygonTechnique]].\n */\nexport function isExtrudedPolygonTechnique(\n    technique: Technique\n): technique is ExtrudedPolygonTechnique {\n    return technique.name === \"extruded-polygon\";\n}\n\n/**\n * Type guard to check if an object is an instance of [[StandardTechnique]].\n */\nexport function isStandardTechnique(technique: Technique): technique is StandardTechnique {\n    return technique.name === \"standard\";\n}\n\n/**\n * Type guard to check if an object is an instance of [[TerrainTechnique]].\n */\nexport function isTerrainTechnique(technique: Technique): technique is TerrainTechnique {\n    return technique.name === \"terrain\";\n}\n\n/**\n * Type guard to check if an object is an instance of [[TextTechnique]].\n */\nexport function isTextTechnique(technique: Technique): technique is TextTechnique {\n    return technique.name === \"text\";\n}\n\n/**\n * Type guard to check if an object is an instance of [[ShaderTechnique]].\n */\nexport function isShaderTechnique(technique: Technique): technique is ShaderTechnique {\n    return technique.name === \"shader\";\n}\n\nexport function isLabelRejectionLineTechnique(\n    technique: Technique\n): technique is LabelRejectionLineTechnique {\n    return technique.name === \"label-rejection-line\";\n}\n\n/**\n * Check if vertex normals should be generated for this technique (if no normals are in the data).\n * @param technique Technique to check.\n */\nexport function needsVertexNormals(technique: Technique): boolean {\n    return (\n        isFillTechnique(technique) ||\n        isStandardTechnique(technique) ||\n        isTerrainTechnique(technique) ||\n        isStandardExtrudedLineTechnique(technique)\n    );\n}\n\n/**\n * Get the texture coordinate type if the technique supports it.\n */\nexport function textureCoordinateType(technique: Technique): TextureCoordinateType | undefined {\n    if (isStandardTechnique(technique)) {\n        return technique.textureCoordinateType;\n    } else if (isExtrudedPolygonTechnique(technique)) {\n        return technique.textureCoordinateType;\n    } else if (isTerrainTechnique(technique)) {\n        return technique.textureCoordinateType;\n    } else if (isShaderTechnique(technique)) {\n        return technique.textureCoordinateType;\n    } else {\n        return undefined;\n    }\n}\n\n/**\n * Add all the buffers of the technique to the transfer list.\n */\nexport function addBuffersToTransferList(technique: Technique, transferList: ArrayBuffer[]) {\n    if (\n        isStandardTechnique(technique) ||\n        isExtrudedPolygonTechnique(technique) ||\n        isTerrainTechnique(technique)\n    ) {\n        for (const texturePropertyKey of TEXTURE_PROPERTY_KEYS) {\n            const textureProperty = (technique as any)[texturePropertyKey];\n            if (isTextureBuffer(textureProperty)) {\n                if (textureProperty.buffer instanceof ArrayBuffer) {\n                    transferList.push(textureProperty.buffer);\n                }\n            }\n        }\n    }\n}\n\n/**\n * Compose full texture name for given image name with technique specified.\n * Some techniques allows to add prefix/postfix to icons names specified, this\n * function uses technique information to create fully qualified texture name.\n * @param imageName base name of the marker icon.\n * @param technique the technique describing POI or line marker.\n * @returns fully qualified texture name for loading from atlas (without extension).\n */\nexport function composeTechniqueTextureName(\n    imageName: string,\n    technique: PoiTechnique | LineMarkerTechnique\n): string {\n    let textureName = imageName;\n    if (typeof technique.imageTexturePrefix === \"string\") {\n        textureName = technique.imageTexturePrefix + textureName;\n    }\n    if (typeof technique.imageTexturePostfix === \"string\") {\n        textureName = textureName + technique.imageTexturePostfix;\n    }\n    return textureName;\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { Definitions, StyleSet, Theme, ValueMap } from \"@here/harp-datasource-protocol\";\nimport { ExprPool } from \"@here/harp-datasource-protocol/lib/ExprPool\";\nimport { Projection, TileKey, TilingScheme } from \"@here/harp-geoutils\";\nimport { assert, LoggerManager } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\nimport { MapView } from \"./MapView\";\nimport { Tile } from \"./Tile\";\n\nconst logger = LoggerManager.instance.create(\"DataSource\");\nconst UPDATE_EVENT = { type: \"update\" };\n\n/**\n * Options for a [[DataSource]].\n */\nexport interface DataSourceOptions {\n    /**\n     * The unique name of a [[DataSource]] instance.\n     */\n    name?: string;\n    /**\n     * The name of the [[StyleSet]] to evaluate for the decoding.\n     */\n    styleSetName?: string;\n    /**\n     * The minimum zoom level at which data is available or displayed at\n     * (depending on [[DataSource]] subclass).\n     * @deprecated Use [[minDataLevel]] and [[minDisplayLevel]] instead.\n     */\n    minZoomLevel?: number;\n    /**\n     * The maximum zoom level at which data is available or displayed at\n     * (depending on [[DataSource]] subclass).\n     * @deprecated Use [[maxDataLevel]] and [[maxDisplayLevel]] instead.\n     */\n    maxZoomLevel?: number;\n    /**\n     * The minimum zoom level at which data is available.\n     */\n    minDataLevel?: number;\n    /**\n     * The maximum zoom level at which data is available.\n     */\n    maxDataLevel?: number;\n    /**\n     * The minimum zoom level at which [[DataSource]] is displayed.\n     */\n    minDisplayLevel?: number;\n    /**\n     * The maximum zoom level at which [[DataSource]] is displayed.\n     */\n    maxDisplayLevel?: number;\n    /**\n     * Storage level offset applied to this `DataSource`.\n     */\n    storageLevelOffset?: number;\n    /**\n     * Whether the datasource can overlap tiles. Such overlapping is necessary when zooming out and\n     * waiting for the tiles to load, in this case, we use cached tiles to fill the missing gaps if\n     * available (and in some cases, the tiles can overlap, i.e. for example when a child is next\n     * to a parent, the parent is rendered beneath the child), however for some datasources (those\n     * that produce transparent tiles for example), this gives bad results, and as such, it should\n     * be disabled to reduce flickening. Another way to put it is that loading tiles are replaced\n     * with cached tiles and we then fall (back/forward) to the next appropriate zoom level.\n     * @default true\n     */\n    allowOverlappingTiles?: boolean;\n}\n\n/**\n * Derive a class from `DataSource` to contribute data and geometries to the [[MapView]].\n */\nexport abstract class DataSource extends THREE.EventDispatcher {\n    /**\n     * A counter to generate unique names for each `DataSource`, if no name is provided in the\n     * constructor.\n     */\n    private static uniqueNameCounter: number = 0;\n\n    /**\n     * Set to `true` if this `DataSource` is enabled; `false` otherwise.\n     */\n    enabled: boolean = true;\n\n    /**\n     * Set to `true` if the [[MapView]] can cache tiles produced by this `DataSource`.\n     */\n    cacheable: boolean = false;\n\n    /**\n     * Set to `true` if the loader should be used to get the tile contents.\n     */\n    useGeometryLoader: boolean = false;\n\n    /**\n     * The unique name of a `DataSource` instance.\n     */\n    name: string;\n\n    /**\n     * Whether the datasource should have a ground plane (this plane covers the tile entirely and\n     * has the minimum possible renderOrder), this can be required in some cases when fallback\n     * parent tiles need to be covered by the children, otherwise the content will overlap.\n     * Default is false\n     */\n    addGroundPlane: boolean = false;\n\n    /**\n     * The minimum zoom level at which data is available.\n     */\n    minDataLevel: number = 1;\n\n    /**\n     * The maximum zoom level at which data is available.\n     */\n    maxDataLevel: number = 20;\n\n    /**\n     * The minimum zoom level at which [[DataSource]] is displayed.\n     */\n    minDisplayLevel: number = 1;\n\n    /**\n     * The maximum zoom level at which [[DataSource]] is displayed.\n     */\n    maxDisplayLevel: number = 20;\n\n    allowOverlappingTiles: boolean = true;\n    /**\n     * @internal\n     * @hidden\n     */\n    readonly exprPool = new ExprPool();\n\n    /**\n     * The [[MapView]] instance holding a reference to this `DataSource`.\n     */\n    private m_mapView?: MapView;\n\n    /**\n     * The name of the [[StyleSet]] to evaluate for the decoding.\n     */\n    private m_styleSetName?: string;\n\n    /**\n     * Current value of [[maxGeometryHeight]] property.\n     */\n    private m_maxGeometryHeight = 0;\n\n    /**\n     * Storage level offset applied to this `DataSource`.\n     */\n    private m_storageLevelOffset: number = 0;\n\n    private readonly m_featureStateMap = new Map<number, ValueMap>();\n\n    /**\n     * Constructs a new `DataSource`.\n     *\n     * @param options The options to create the data source.\n     */\n    constructor(options: DataSourceOptions = {}) {\n        super();\n        let { name } = options;\n        const {\n            styleSetName,\n            // tslint:disable-next-line: deprecation\n            minZoomLevel,\n            // tslint:disable-next-line: deprecation\n            maxZoomLevel,\n            minDataLevel,\n            maxDataLevel,\n            minDisplayLevel,\n            maxDisplayLevel,\n            storageLevelOffset,\n            allowOverlappingTiles\n        } = options;\n        if (name === undefined || name.length === 0) {\n            name = `anonymous-datasource#${++DataSource.uniqueNameCounter}`;\n        }\n        this.name = name;\n\n        this.styleSetName = styleSetName;\n\n        if (minDataLevel !== undefined) {\n            this.minDataLevel = minDataLevel;\n        }\n        if (maxDataLevel !== undefined) {\n            this.maxDataLevel = maxDataLevel;\n        }\n        if (minZoomLevel !== undefined) {\n            // tslint:disable-next-line: deprecation\n            this.minZoomLevel = minZoomLevel;\n        }\n        if (maxZoomLevel !== undefined) {\n            // tslint:disable-next-line: deprecation\n            this.maxZoomLevel = maxZoomLevel;\n        }\n        if (minDisplayLevel !== undefined) {\n            this.minDisplayLevel = minDisplayLevel;\n        }\n        if (maxDisplayLevel !== undefined) {\n            this.maxDisplayLevel = maxDisplayLevel;\n        }\n        if (storageLevelOffset !== undefined) {\n            this.m_storageLevelOffset = storageLevelOffset;\n        }\n        if (allowOverlappingTiles !== undefined) {\n            this.allowOverlappingTiles = allowOverlappingTiles;\n        }\n    }\n\n    /**\n     * Gets the state of the given feature id.\n     *\n     * @param featureId The id of the feature.\n     */\n    getFeatureState(featureId: number): ValueMap | undefined {\n        return this.m_featureStateMap.get(featureId);\n    }\n\n    /**\n     * Clears the state of all the features of this [[DataSource]].\n     */\n    clearFeatureState() {\n        this.m_featureStateMap.clear();\n    }\n\n    /**\n     * Sets the state of the given feature id.\n     *\n     * ```typescript\n     * dataSource.setFeatureState(featureId, { enabled: true });\n     * ```\n     *\n     * @param featureId The id of the feature.\n     * @param state The new state of the feature.\n     */\n    setFeatureState(featureId: number, state: ValueMap) {\n        this.m_featureStateMap.set(featureId, state);\n    }\n\n    /**\n     * Removes the state associated to the given feature.\n     *\n     * @param featureId The id of the feature.\n     */\n    removeFeatureState(featureId: number) {\n        this.m_featureStateMap.delete(featureId);\n    }\n\n    /**\n     * Returns the name of the [[StyleSet]] to use for the decoding.\n     */\n    get styleSetName(): string | undefined {\n        return this.m_styleSetName;\n    }\n\n    /**\n     * Sets the name of the [[StyleSet]] to use for the decoding. If this [[DataSource]] is already\n     * attached to a [[MapView]], this setter then reapplies [[StyleSet]] with this name found in\n     * [[MapView]]s theme.\n     */\n    set styleSetName(styleSetName: string | undefined) {\n        this.m_styleSetName = styleSetName;\n        if (this.m_mapView !== undefined && styleSetName !== undefined) {\n            this.setTheme(this.m_mapView.theme);\n        }\n    }\n\n    /**\n     * Destroys this `DataSource`.\n     */\n    dispose() {\n        // to be overloaded by subclasses\n    }\n\n    /**\n     * Purges all the caching done by this `DataSource`\n     */\n    clearCache() {\n        // to be overloaded by subclasses\n    }\n\n    /**\n     * Boolean which says whether a [[DataSource]] produces tiles that fully cover the tile, i.e.\n     * tiles underneath are completely hidden. Must be overriden for [[DataSource]]'s that don't\n     * have a ground plane, but which still fully cover the tile, e.g. web tiles.\n     */\n    isFullyCovering(): boolean {\n        return this.addGroundPlane;\n    }\n\n    /**\n     * Returns `true` if this `DataSource` is ready and the [[MapView]] can invoke `getTile()` to\n     * start requesting data.\n     */\n    ready(): boolean {\n        return true;\n    }\n\n    /**\n     * The [[MapView]] that is holding this `DataSource`.\n     */\n    get mapView(): MapView {\n        if (this.m_mapView === undefined) {\n            throw new Error(\"This DataSource was not added to MapView\");\n        }\n\n        return this.m_mapView;\n    }\n\n    /**\n     * The [[Projection]] used by the [[MapView]] that is holding this `DataSource`.\n     *\n     * An `Error` is thrown if you call this method before this `DataSource` has been added\n     * to a [[MapView]].\n     */\n    get projection(): Projection {\n        return this.mapView.projection;\n    }\n\n    /**\n     * This method is called when the `DataSource` is added to a [[MapView]]. Reimplement this\n     * method to provide any custom initialization, such as, to establish a network connection,\n     * or to initialize complex data structures.\n     */\n    async connect(): Promise<void> {\n        // to be overloaded by subclasses\n    }\n\n    /**\n     * Returns the [[TilingScheme]] used by this `DataSource`.\n     */\n    abstract getTilingScheme(): TilingScheme;\n\n    /**\n     * This method is called when this `DataSource` is added to a [[MapView]].\n     *\n     * Reimplementations of this method must invoke the definition of the super class.\n     *\n     * @param mapView The instance of the [[MapView]].\n     */\n    attach(mapView: MapView): void {\n        this.m_mapView = mapView;\n    }\n\n    /**\n     * This method is called when this `DataSource` is removed from a [[MapView]].\n     *\n     * Reimplementations of this method must invoke the definition of the super class.\n     *\n     * @param mapView The instance of the [[MapView]].\n     */\n    detach(mapView: MapView) {\n        assert(this.m_mapView === mapView);\n        this.m_mapView = undefined;\n    }\n\n    /**\n     * Invoked by [[MapView]] to notify when the [[Theme]] has been changed.\n     *\n     * If `DataSource` depends on a `styleSet` or `languages`, it must update its tiles' geometry.\n     *\n     * @deprecated, Use [[setTheme]].\n     *\n     * @param styleSet The new theme that [[MapView]] uses.\n     * @param languages An optional list of languages for the `DataSource`.\n     */\n    // tslint:disable-next-line:no-unused-variable\n    setStyleSet(styleSet?: StyleSet, definitions?: Definitions, languages?: string[]): void {\n        // to be overwritten by subclasses\n    }\n\n    /**\n     * Apply the [[Theme]] to this data source.\n     *\n     * If `DataSource` depends on a `styleSet` defined by this theme or `languages`, it must update\n     * its tiles' geometry.\n     *\n     * @param languages\n     */\n    setTheme(theme: Theme, languages?: string[]): void {\n        // to be overwritten by subclasses\n    }\n\n    /**\n     * Used to configure the languages used by the `DataSource` according to priority;\n     * the first language in the array has the highest priority.\n     *\n     * @param languages An array of ISO 639-1 language codes.\n     */\n    setLanguages(languages?: string[]): void {\n        // to be overloaded by subclasses\n    }\n\n    /**\n     * Used to express different country point of view (political view).\n     *\n     * @note Set to `undefined` (or empty string) if you want to reset to default point of view.\n     * @param pov The country code which point of view should be presented in lower-case\n     * ISO 3166-1 alpha-2 format.\n     */\n    setPoliticalView(pov?: string): void {\n        // to be overloaded by subclasses\n    }\n\n    /**\n     * This method is called when [[MapView]] needs to visualize or preload the content of a\n     * [[TileKey]].\n     *\n     * @param tileKey The unique identifier for a map tile.\n     */\n    abstract getTile(tileKey: TileKey): Tile | undefined;\n\n    /**\n     * This method is called by [[MapView]] before the tile needs to be updated, for example after\n     * a theme change.\n     *\n     * @param tile The [[Tile]] to update.\n     */\n    // tslint:disable-next-line:no-unused-variable\n    updateTile(tile: Tile) {\n        // to be overloaded by subclasses\n    }\n\n    /**\n     * This method is called by the [[MapView]] to determine if the content of the surrounding\n     * tiles must be preloaded.\n     *\n     * @returns `true` if the [[MapView]] should try to preload tiles surrounding the visible\n     * tiles; `false` otherwise. The default is `false`.\n     */\n    shouldPreloadTiles(): boolean {\n        return false;\n    }\n\n    /**\n     * The minimum zoom level at which data is available or displayed at\n     * (depending on [[DataSource]] subclass).\n     * @deprecated Use [[minDataLevel]] and [[minDisplayLevel]] instead.\n     */\n    get minZoomLevel(): number {\n        logger.warn(\n            \"DataSource.minZoomLevel is deprecated. Use minDataLevel and maxDataLevel instead.\"\n        );\n        return this.minDataLevel;\n    }\n\n    set minZoomLevel(level: number) {\n        logger.warn(\n            \"DataSource.minZoomLevel is deprecated. Use minDataLevel and minDisplayLevel instead.\"\n        );\n        this.minDataLevel = level;\n    }\n\n    /**\n     * The maximum zoom level at which data is available or displayed at\n     * (depending on [[DataSource]] subclass).\n     * @deprecated Use [[maxDataLevel]] and [[maxDisplayLevel]] instead.\n     */\n    get maxZoomLevel(): number {\n        logger.warn(\n            \"DataSource.maxZoomLevel is deprecated. Use maxDataLevel and maxDisplayLevel instead.\"\n        );\n        return this.maxDataLevel;\n    }\n\n    set maxZoomLevel(level: number) {\n        logger.warn(\n            \"DataSource.maxZoomLevel is deprecated. Use maxDataLevel and maxDisplayLevel instead.\"\n        );\n        this.maxDataLevel = level;\n    }\n\n    /**\n     * Maximum geometry height above ground level this `DataSource` can produce.\n     *\n     * Used in first stage of frustum culling before [[Tile.maxGeometryHeight]] data is available.\n     *\n     * @default 0.\n     */\n    get maxGeometryHeight() {\n        return this.m_maxGeometryHeight;\n    }\n    set maxGeometryHeight(value: number) {\n        this.m_maxGeometryHeight = value;\n    }\n\n    /**\n     * The difference between storage level and display level of tile.\n     *\n     * Storage level offset is a value applied (added) to current zoom level giving\n     * a final tile level being displayed. This way we may differentate current\n     * zoom level from the storage level that is displayed, giving fine grained\n     * control over the tiles being decoded an displayed.\n     */\n    get storageLevelOffset() {\n        return this.m_storageLevelOffset;\n    }\n\n    /**\n     * Setup the relative offset between storage level and display level of tile.\n     *\n     * @param levelOffset Difference between zoom level and display level.\n     */\n    set storageLevelOffset(levelOffset: number) {\n        this.m_storageLevelOffset = levelOffset;\n    }\n\n    /**\n     * Enables or disables overlay of geometry on elevation. It must be overloaded by data sources\n     * supporting this feature.\n     *\n     * @param value True to enable, false to disable.\n     */\n    setEnableElevationOverlay(enable: boolean) {\n        // to be overloaded by subclasses\n    }\n\n    /**\n     * Computes the data zoom level to use.\n     *\n     * @param zoomLevel The zoom level of the [[MapView]].\n     * @returns The data zoom level to use.\n     */\n    getDataZoomLevel(zoomLevel: number): number {\n        return THREE.MathUtils.clamp(\n            zoomLevel + this.m_storageLevelOffset,\n            this.minDataLevel,\n            this.maxDataLevel\n        );\n    }\n\n    /**\n     * Returns `true` if [[DataSource]] should be displayed for the zoom level.\n     * @param zoomLevel The zoom level of the [[MapView]].\n     */\n    isVisible(zoomLevel: number): boolean {\n        return zoomLevel >= this.minDisplayLevel && zoomLevel <= this.maxDisplayLevel;\n    }\n\n    /**\n     * Returns `true` if [[DataSource]] can load tile with given [[TileKey]] and zoom level.\n     *\n     * @param zoomLevel The zoom level of the [[MapView]].\n     * @param tileKey The unique identifier for a map tile.\n     * @returns `true` if the tile for the given [[TileKey]] can be loaded.\n     */\n    canGetTile(zoomLevel: number, tileKey: TileKey): boolean {\n        return tileKey.level <= zoomLevel;\n    }\n\n    /**\n     * Returns `true` if [[MapView]] should traverse tiles further with given [[TileKey]] and\n     * zoom level.\n     *\n     * @param zoomLevel The zoom level of the [[MapView]].\n     * @param tileKey The unique identifier for a map tile.\n     * @returns `true` if the subtiles of the given [[TileKey]] should be\n     * checked for collisions.\n     */\n    shouldSubdivide(zoomLevel: number, tileKey: TileKey): boolean {\n        return tileKey.level <= zoomLevel;\n    }\n\n    /**\n     * Returns `true` if [[MapView]] should render the text elements with the given [[TileKey]] and\n     * zoom level.\n     *\n     * This is an additional check for the tiles that are already selected for rendering so the\n     * default implementation returns `true`.\n     *\n     * @param zoomLevel The zoom level.\n     * @param tileKey The unique identifier for a map tile.\n     * @returns `true` if the text elements created for the given [[TileKey]] should be rendered.\n     */\n    // tslint:disable-next-line:no-unused-variable\n    shouldRenderText(zoomLevel: number, tileKey: TileKey): boolean {\n        return true;\n    }\n\n    /**\n     * Sends a request to the [[MapView]] to redraw the scene.\n     */\n    requestUpdate() {\n        this.dispatchEvent(UPDATE_EVENT);\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport {\n    Attachment,\n    BaseTechniqueParams,\n    BufferAttribute,\n    CallExpr,\n    DecodedTile,\n    Env,\n    Expr,\n    ExtrudedPolygonTechnique,\n    FillTechnique,\n    Geometry,\n    GeometryKind,\n    GeometryKindSet,\n    getArrayConstructor,\n    getFeatureId,\n    getPropertyValue,\n    IndexedTechnique,\n    InterleavedBufferAttribute,\n    isCirclesTechnique,\n    isExtrudedLineTechnique,\n    isExtrudedPolygonTechnique,\n    isFillTechnique,\n    isJsonExpr,\n    isLineMarkerTechnique,\n    isLineTechnique,\n    isPoiTechnique,\n    isSegmentsTechnique,\n    isSolidLineTechnique,\n    isSquaresTechnique,\n    isStandardTechnique,\n    isTerrainTechnique,\n    isTextTechnique,\n    MakeTechniqueAttrs,\n    MapEnv,\n    needsVertexNormals,\n    SolidLineTechnique,\n    StandardExtrudedLineTechnique,\n    Technique,\n    TerrainTechnique,\n    TextPathGeometry,\n    Value\n} from \"@here/harp-datasource-protocol\";\nimport {\n    ExprEvaluatorContext,\n    OperatorDescriptor\n} from \"@here/harp-datasource-protocol/lib/ExprEvaluator\";\n// tslint:disable:max-line-length\nimport {\n    EdgeLengthGeometrySubdivisionModifier,\n    SubdivisionMode\n} from \"@here/harp-geometry/lib/EdgeLengthGeometrySubdivisionModifier\";\nimport { SphericalGeometrySubdivisionModifier } from \"@here/harp-geometry/lib/SphericalGeometrySubdivisionModifier\";\nimport { EarthConstants, GeoCoordinates, ProjectionType } from \"@here/harp-geoutils\";\nimport {\n    EdgeMaterial,\n    EdgeMaterialParameters,\n    FadingFeature,\n    isHighPrecisionLineMaterial,\n    MapMeshBasicMaterial,\n    MapMeshDepthMaterial,\n    MapMeshStandardMaterial,\n    setShaderMaterialDefine,\n    SolidLineMaterial\n} from \"@here/harp-materials\";\nimport { ContextualArabicConverter } from \"@here/harp-text-canvas\";\nimport { assert, LoggerManager } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\nimport { AnimatedExtrusionTileHandler } from \"../AnimatedExtrusionHandler\";\nimport {\n    applyBaseColorToMaterial,\n    buildMetricValueEvaluator,\n    buildObject,\n    createMaterial,\n    getBufferAttribute,\n    usesObject3D\n} from \"../DecodedTileHelpers\";\nimport {\n    createDepthPrePassMesh,\n    isRenderDepthPrePassEnabled,\n    setDepthPrePassStencil\n} from \"../DepthPrePass\";\nimport { DisplacementMap, TileDisplacementMap } from \"../DisplacementMap\";\nimport { MapAdapterUpdateEnv, MapMaterialAdapter } from \"../MapMaterialAdapter\";\nimport { MapObjectAdapter, MapObjectAdapterParams } from \"../MapObjectAdapter\";\nimport { FALLBACK_RENDER_ORDER_OFFSET } from \"../MapView\";\nimport { MapViewPoints } from \"../MapViewPoints\";\nimport { PathBlockingElement } from \"../PathBlockingElement\";\nimport { TextElement } from \"../text/TextElement\";\nimport { DEFAULT_TEXT_DISTANCE_SCALE } from \"../text/TextElementsRenderer\";\nimport { Tile, TileFeatureData } from \"../Tile\";\nimport { LodMesh } from \"./LodMesh\";\n\nconst logger = LoggerManager.instance.create(\"TileGeometryCreator\");\n\nconst tmpVector3 = new THREE.Vector3();\nconst tmpVector2 = new THREE.Vector2();\n\nclass AttachmentCache {\n    readonly bufferAttributes = new Map<BufferAttribute, THREE.BufferAttribute>();\n\n    readonly interleavedAttributes = new Map<\n        InterleavedBufferAttribute,\n        Array<{ name: string; attribute: THREE.InterleavedBufferAttribute }>\n    >();\n}\n\nclass MemoCallExpr extends CallExpr implements OperatorDescriptor {\n    private readonly m_deps: string[];\n    private readonly m_cachedProperties: Array<Value | undefined> = [];\n    private m_cachedValue?: Value;\n\n    constructor(expr: Expr) {\n        super(\"memo\", [expr]);\n        this.m_deps = Array.from(expr.dependencies().properties);\n        this.descriptor = this;\n    }\n\n    call(context: ExprEvaluatorContext): Value {\n        let changed = false;\n\n        this.m_deps.forEach((d, i) => {\n            const newValue = context.env.lookup(d);\n            if (!changed && newValue !== this.m_cachedProperties[i]) {\n                changed = true;\n            }\n            if (changed) {\n                this.m_cachedProperties[i] = newValue;\n            }\n        });\n\n        if (changed || this.m_cachedValue === undefined) {\n            this.m_cachedValue = context.evaluate(this.args[0]);\n        }\n\n        return this.m_cachedValue;\n    }\n}\n\nclass AttachmentInfo {\n    constructor(\n        readonly geometry: Geometry,\n        readonly info: Attachment,\n        readonly cache: AttachmentCache\n    ) {}\n\n    getBufferAttribute(description: BufferAttribute): THREE.BufferAttribute {\n        if (this.cache.bufferAttributes.has(description)) {\n            return this.cache.bufferAttributes.get(description)!;\n        }\n        const attribute = getBufferAttribute(description);\n        this.cache.bufferAttributes.set(description, attribute);\n        return attribute;\n    }\n\n    getInterleavedBufferAttributes(description: InterleavedBufferAttribute) {\n        const interleavedAttributes = this.cache.interleavedAttributes.get(description);\n\n        if (interleavedAttributes) {\n            return interleavedAttributes;\n        }\n\n        const ArrayCtor = getArrayConstructor(description.type);\n        const buffer = new ArrayCtor(description.buffer);\n        const interleavedBuffer = new THREE.InterleavedBuffer(buffer, description.stride);\n\n        const attrs = description.attributes.map(interleavedAttr => {\n            const attribute = new THREE.InterleavedBufferAttribute(\n                interleavedBuffer,\n                interleavedAttr.itemSize,\n                interleavedAttr.offset,\n                false\n            );\n            const name = interleavedAttr.name;\n            return { name, attribute };\n        });\n\n        this.cache.interleavedAttributes.set(description, attrs);\n        return attrs;\n    }\n}\n\n/**\n * Parameters that control fading.\n */\nexport interface FadingParameters {\n    fadeNear?: number;\n    fadeFar?: number;\n}\n\n/**\n * Parameters that control fading for extruded buildings with fading edges.\n */\nexport interface PolygonFadingParameters extends FadingParameters {\n    color?: string | number;\n    colorMix?: number;\n    lineFadeNear?: number;\n    lineFadeFar?: number;\n}\n\n/**\n * Support class to create geometry for a [[Tile]] from a [[DecodedTile]].\n */\nexport class TileGeometryCreator {\n    private static m_instance: TileGeometryCreator;\n\n    /**\n     * The `instance` of the `TileGeometryCreator`.\n     *\n     * @returns TileGeometryCreator\n     */\n    static get instance(): TileGeometryCreator {\n        return this.m_instance || (this.m_instance = new TileGeometryCreator());\n    }\n\n    /**\n     *  Creates an instance of TileGeometryCreator. Access is allowed only through `instance`.\n     */\n    private constructor() {\n        //\n    }\n\n    /**\n     * Apply `enabledKinds` and `disabledKinds` to all techniques in the `decodedTile`. If a\n     * technique is identified as disabled, its property `enabled` is set to `false`.\n     *\n     * @param decodedTile The decodedTile containing the actual tile map data.\n     * @param enabledKinds Optional [[GeometryKindSet]] used to specify which object kinds should be\n     *      created.\n     * @param disabledKinds Optional [[GeometryKindSet]] used to filter objects that should not be\n     *      created.\n     */\n    initDecodedTile(\n        decodedTile: DecodedTile,\n        enabledKinds?: GeometryKindSet | undefined,\n        disabledKinds?: GeometryKindSet | undefined\n    ) {\n        for (const technique of decodedTile.techniques) {\n            // tslint:disable-next-line: deprecation\n            const kind = technique.kind;\n\n            // No info about kind, no way to filter it.\n            if (kind === undefined || (kind instanceof Set && kind.size === 0)) {\n                technique._kindState = true;\n                continue;\n            }\n\n            // Technique is enabled only if enabledKinds is defined and technique belongs to that set or\n            // if that's not the case, disabledKinds must be undefined or technique does not belong to it.\n            technique._kindState =\n                !(disabledKinds !== undefined && disabledKinds.hasOrIntersects(kind)) ||\n                (enabledKinds !== undefined && enabledKinds.hasOrIntersects(kind));\n        }\n\n        for (const srcGeometry of decodedTile.geometries) {\n            for (const group of srcGeometry.groups) {\n                group.createdOffsets = [];\n            }\n        }\n    }\n\n    /**\n     * Called after the `Tile` has been decoded. It is required to call `initDecodedTile` before\n     * calling this method.\n     *\n     * @see [[TileGeometryCreator#initDecodedTile]]\n     *\n     * @param tile The [[Tile]] to process.\n     * @param decodedTile The decodedTile containing the actual tile map data.\n     */\n    createAllGeometries(tile: Tile, decodedTile: DecodedTile) {\n        const filter = (technique: IndexedTechnique): boolean => {\n            return technique._kindState !== false;\n        };\n\n        this.createObjects(tile, decodedTile, filter);\n\n        this.preparePois(tile, decodedTile);\n\n        // TextElements do not get their geometry created by Tile, but are managed on a\n        // higher level.\n        const textFilter = (technique: IndexedTechnique): boolean => {\n            if (\n                !isPoiTechnique(technique) &&\n                !isLineMarkerTechnique(technique) &&\n                !isTextTechnique(technique)\n            ) {\n                return false;\n            }\n            return filter(technique);\n        };\n        this.createTextElements(tile, decodedTile, textFilter);\n\n        this.createLabelRejectionElements(tile, decodedTile);\n\n        // HARP-7899, disable ground plane for globe\n        if (tile.dataSource.addGroundPlane && tile.projection.type === ProjectionType.Planar) {\n            // The ground plane is required for when we change the zoom back and we fall back to the\n            // parent, in that case we reduce the renderOrder of the parent tile and this ground\n            // place ensures that parent doesn't come through. This value must be above the\n            // renderOrder of all objects in the fallback tile, otherwise there won't be a proper\n            // covering of the parent tile by the children, hence dividing by 2. To put a bit more\n            // concretely, we assume all objects are rendered with a renderOrder between 0 and\n            // FALLBACK_RENDER_ORDER_OFFSET / 2, i.e. 10000. The ground plane is put at -10000, and\n            // the fallback tiles have their renderOrder set between -20000 and -10000\n            TileGeometryCreator.instance.addGroundPlane(tile, -FALLBACK_RENDER_ORDER_OFFSET / 2);\n        }\n    }\n\n    createLabelRejectionElements(tile: Tile, decodedTile: DecodedTile) {\n        if (decodedTile.pathGeometries === undefined) {\n            return;\n        }\n        for (const path of decodedTile.pathGeometries) {\n            tile.addBlockingElement(new PathBlockingElement(path.path));\n        }\n    }\n\n    /**\n     * Processes the given tile and assign default values for geometry kinds,\n     * render orders and label priorities.\n     *\n     * @param {Tile} tile\n     * @param {(GeometryKindSet | undefined)} enabledKinds\n     * @param {(GeometryKindSet | undefined)} disabledKinds\n     */\n    processTechniques(\n        tile: Tile,\n        enabledKinds: GeometryKindSet | undefined,\n        disabledKinds: GeometryKindSet | undefined\n    ): void {\n        const decodedTile = tile.decodedTile;\n\n        if (decodedTile === undefined) {\n            return;\n        }\n\n        this.processPriorities(tile);\n\n        // Speedup and simplify following code: Test all techniques if they intersect with\n        // enabledKinds and disabledKinds, in which case they are flagged. The disabledKinds can be\n        // ignored hereafter.\n        this.initDecodedTile(decodedTile, enabledKinds, disabledKinds);\n\n        // compile the dynamic expressions.\n        const exprPool = tile.dataSource.exprPool;\n        decodedTile.techniques.forEach((technique: any) => {\n            for (const propertyName in technique) {\n                if (!technique.hasOwnProperty(propertyName)) {\n                    continue;\n                }\n                const value = technique[propertyName];\n                if (isJsonExpr(value) && propertyName !== \"kind\") {\n                    // \"kind\" is reserved.\n                    try {\n                        let expr = Expr.fromJSON(value);\n                        if (expr.dependencies().volatile !== true) {\n                            expr = new MemoCallExpr(Expr.fromJSON(value));\n                        }\n                        technique[propertyName] = expr.intern(exprPool);\n                    } catch (error) {\n                        logger.error(\"Failed to compile expression:\", error);\n                    }\n                }\n            }\n        });\n    }\n\n    /**\n     * Adds a THREE object to the root of the tile and register [[MapObjectAdapter]].\n     *\n     * Sets the owning tiles datasource.name and the `tileKey` in the `userData` property of the\n     * object, such that the tile it belongs to can be identified during picking.\n     *\n     * @param tile The [[Tile]] to add the object to.\n     * @param object The object to add to the root of the tile.\n     * @param geometryKind The kind of object. Can be used for filtering.\n     * @param custom additional parameters for [[MapObjectAdapter]]\n     */\n    registerTileObject(\n        tile: Tile,\n        object: THREE.Object3D,\n        geometryKind: GeometryKind | GeometryKindSet | undefined,\n        mapAdapterParams?: MapObjectAdapterParams\n    ) {\n        const kind =\n            geometryKind instanceof Set\n                ? Array.from((geometryKind as GeometryKindSet).values())\n                : Array.isArray(geometryKind)\n                ? geometryKind\n                : [geometryKind];\n\n        MapObjectAdapter.create(object, {\n            kind,\n            ...mapAdapterParams\n        });\n\n        // TODO legacy fields, encoded directly in `userData to be removed\n        if (object.userData === undefined) {\n            object.userData = {};\n        }\n\n        const userData = object.userData;\n        userData.tileKey = tile.tileKey;\n        userData.dataSource = tile.dataSource.name;\n\n        userData.kind = kind;\n\n        // Force a visibility check of all objects.\n        tile.resetVisibilityCounter();\n    }\n\n    /**\n     * Splits the text paths that contain sharp corners.\n     *\n     * @param tile The [[Tile]] to process paths on.\n     * @param textPathGeometries The original path geometries that may have defects.\n     * @param textFilter: Optional filter. Should return true for any text technique that is\n     *      applicable.\n     */\n    prepareTextPaths(\n        textPathGeometries: TextPathGeometry[],\n        decodedTile: DecodedTile,\n        textFilter?: (technique: IndexedTechnique) => boolean\n    ): TextPathGeometry[] {\n        const processedPaths = new Array<TextPathGeometry>();\n        const newPaths = textPathGeometries.slice();\n\n        while (newPaths.length > 0) {\n            const textPath = newPaths.pop();\n\n            if (textPath === undefined) {\n                break;\n            }\n\n            const technique = decodedTile.techniques[textPath.technique];\n            if (\n                !isTextTechnique(technique) ||\n                (textFilter !== undefined && !textFilter(technique))\n            ) {\n                continue;\n            }\n\n            processedPaths.push(textPath);\n        }\n        return processedPaths;\n    }\n\n    /**\n     * Creates [[TextElement]] objects from the decoded tile and list of materials specified. The\n     * priorities of the [[TextElement]]s are updated to simplify label placement.\n     *\n     * @param tile The [[Tile]] to create the testElements on.\n     * @param decodedTile The [[DecodedTile]].\n     * @param textFilter: Optional filter. Should return true for any text technique that is\n     *      applicable.\n     */\n    createTextElements(\n        tile: Tile,\n        decodedTile: DecodedTile,\n        textFilter?: (technique: IndexedTechnique) => boolean\n    ) {\n        const mapView = tile.mapView;\n        const textStyleCache = tile.textStyleCache;\n        const worldOffsetX = tile.computeWorldOffsetX();\n\n        const discreteZoomLevel = Math.floor(mapView.zoomLevel);\n        const discreteZoomEnv = new MapEnv({ $zoom: discreteZoomLevel }, mapView.env);\n\n        if (decodedTile.textPathGeometries !== undefined) {\n            const textPathGeometries = this.prepareTextPaths(\n                decodedTile.textPathGeometries,\n                decodedTile,\n                textFilter\n            );\n\n            for (const textPath of textPathGeometries) {\n                const technique = decodedTile.techniques[textPath.technique];\n\n                if (\n                    technique._kindState === false ||\n                    !isTextTechnique(technique) ||\n                    (textFilter !== undefined && !textFilter(technique))\n                ) {\n                    continue;\n                }\n\n                const path: THREE.Vector3[] = [];\n                for (let i = 0; i < textPath.path.length; i += 3) {\n                    path.push(\n                        new THREE.Vector3(\n                            textPath.path[i] + worldOffsetX,\n                            textPath.path[i + 1],\n                            textPath.path[i + 2]\n                        )\n                    );\n                }\n\n                // Make sorting stable.\n                const priority =\n                    technique.priority !== undefined\n                        ? getPropertyValue(technique.priority, discreteZoomEnv)\n                        : 0;\n                const fadeNear =\n                    technique.fadeNear !== undefined\n                        ? getPropertyValue(technique.fadeNear, discreteZoomEnv)\n                        : technique.fadeNear;\n                const fadeFar =\n                    technique.fadeFar !== undefined\n                        ? getPropertyValue(technique.fadeFar, discreteZoomEnv)\n                        : technique.fadeFar;\n                const userData = textPath.objInfos;\n                const featureId = getFeatureId(userData);\n                const textElement = new TextElement(\n                    ContextualArabicConverter.instance.convert(textPath.text),\n                    path,\n                    textStyleCache.getRenderStyle(technique),\n                    textStyleCache.getLayoutStyle(technique),\n                    priority,\n                    technique.xOffset !== undefined ? technique.xOffset : 0.0,\n                    technique.yOffset !== undefined ? technique.yOffset : 0.0,\n                    featureId,\n                    technique.style,\n                    fadeNear,\n                    fadeFar,\n                    tile.offset\n                );\n                textElement.pathLengthSqr = textPath.pathLengthSqr;\n                textElement.minZoomLevel =\n                    technique.minZoomLevel !== undefined\n                        ? technique.minZoomLevel\n                        : mapView.minZoomLevel;\n                textElement.maxZoomLevel =\n                    technique.maxZoomLevel !== undefined\n                        ? technique.maxZoomLevel\n                        : mapView.maxZoomLevel;\n                textElement.distanceScale =\n                    technique.distanceScale !== undefined\n                        ? technique.distanceScale\n                        : DEFAULT_TEXT_DISTANCE_SCALE;\n                textElement.mayOverlap = technique.mayOverlap === true;\n                textElement.reserveSpace = technique.reserveSpace !== false;\n                // tslint:disable-next-line: deprecation\n                textElement.kind = technique.kind;\n                // Get the userData for text element picking.\n                textElement.userData = textPath.objInfos;\n                textElement.textFadeTime = technique.textFadeTime;\n\n                tile.addTextElement(textElement);\n            }\n        }\n\n        if (decodedTile.textGeometries !== undefined) {\n            for (const text of decodedTile.textGeometries) {\n                if (text.technique === undefined || text.stringCatalog === undefined) {\n                    continue;\n                }\n\n                const technique = decodedTile.techniques[text.technique];\n\n                if (\n                    technique._kindState === false ||\n                    !isTextTechnique(technique) ||\n                    (textFilter !== undefined && !textFilter(technique))\n                ) {\n                    continue;\n                }\n\n                const positions = new THREE.BufferAttribute(\n                    new Float32Array(text.positions.buffer),\n                    text.positions.itemCount\n                );\n\n                const numPositions = positions.count;\n                if (numPositions < 1) {\n                    continue;\n                }\n\n                const priority =\n                    technique.priority !== undefined\n                        ? getPropertyValue(technique.priority, discreteZoomEnv)\n                        : 0;\n                const fadeNear =\n                    technique.fadeNear !== undefined\n                        ? getPropertyValue(technique.fadeNear, discreteZoomEnv)\n                        : technique.fadeNear;\n                const fadeFar =\n                    technique.fadeFar !== undefined\n                        ? getPropertyValue(technique.fadeFar, discreteZoomEnv)\n                        : technique.fadeFar;\n\n                for (let i = 0; i < numPositions; ++i) {\n                    const x = positions.getX(i) + worldOffsetX;\n                    const y = positions.getY(i);\n                    const z = positions.getZ(i);\n                    const label = text.stringCatalog[text.texts[i]];\n                    if (label === undefined) {\n                        // skip missing labels\n                        continue;\n                    }\n\n                    const userData = text.objInfos !== undefined ? text.objInfos[i] : undefined;\n                    const featureId = getFeatureId(userData);\n\n                    const textElement = new TextElement(\n                        ContextualArabicConverter.instance.convert(label!),\n                        new THREE.Vector3(x, y, z),\n                        textStyleCache.getRenderStyle(technique),\n                        textStyleCache.getLayoutStyle(technique),\n                        priority,\n                        technique.xOffset || 0.0,\n                        technique.yOffset || 0.0,\n                        featureId,\n                        technique.style,\n                        undefined,\n                        undefined,\n                        tile.offset\n                    );\n\n                    textElement.minZoomLevel =\n                        technique.minZoomLevel !== undefined\n                            ? technique.minZoomLevel\n                            : mapView.minZoomLevel;\n                    textElement.maxZoomLevel =\n                        technique.maxZoomLevel !== undefined\n                            ? technique.maxZoomLevel\n                            : mapView.maxZoomLevel;\n                    textElement.mayOverlap = technique.mayOverlap === true;\n                    textElement.reserveSpace = technique.reserveSpace !== false;\n                    // tslint:disable-next-line: deprecation\n                    textElement.kind = technique.kind;\n\n                    textElement.fadeNear = fadeNear;\n                    textElement.fadeFar = fadeFar;\n                    textElement.textFadeTime = technique.textFadeTime;\n\n                    // Get the userData for text element picking.\n                    textElement.userData = userData;\n                    tile.addTextElement(textElement);\n                }\n            }\n        }\n    }\n\n    /**\n     * Creates `Tile` objects from the decoded tile and list of materials specified.\n     *\n     * @param tile The [[Tile]] to create the geometry on.\n     * @param decodedTile The [[DecodedTile]].\n     * @param techniqueFilter: Optional filter. Should return true for any technique that is\n     *      applicable.\n     */\n    createObjects(\n        tile: Tile,\n        decodedTile: DecodedTile,\n        techniqueFilter?: (technique: IndexedTechnique) => boolean\n    ) {\n        const materials: THREE.Material[] = [];\n        const mapView = tile.mapView;\n        const dataSource = tile.dataSource;\n        const discreteZoomLevel = Math.floor(mapView.zoomLevel);\n        const discreteZoomEnv = new MapEnv({ $zoom: discreteZoomLevel }, mapView.env);\n        const objects = tile.objects;\n        const viewRanges = mapView.viewRanges;\n        const elevationEnabled = mapView.elevationProvider !== undefined;\n\n        for (const attachment of this.getAttachments(decodedTile)) {\n            const srcGeometry = attachment.geometry;\n            const groups = attachment.info.groups;\n            const groupCount = groups.length;\n\n            for (let groupIndex = 0; groupIndex < groupCount; ) {\n                const group = groups[groupIndex++];\n                const start = group.start;\n                const techniqueIndex = group.technique;\n                const technique = decodedTile.techniques[techniqueIndex];\n\n                if (group.createdOffsets === undefined) {\n                    group.createdOffsets = [];\n                }\n\n                if (\n                    group.createdOffsets!.indexOf(tile.offset) !== -1 ||\n                    technique._kindState === false ||\n                    (techniqueFilter !== undefined && !techniqueFilter(technique))\n                ) {\n                    continue;\n                }\n\n                let count = group.count;\n                group.createdOffsets!.push(tile.offset);\n\n                // compress consecutive groups\n                for (\n                    ;\n                    groupIndex < groupCount && groups[groupIndex].technique === techniqueIndex;\n                    ++groupIndex\n                ) {\n                    if (start + count !== groups[groupIndex].start) {\n                        break;\n                    }\n\n                    count += groups[groupIndex].count;\n\n                    // Mark this group as created, so it does not get processed again.\n                    groups[groupIndex].createdOffsets!.push(tile.offset);\n                }\n\n                if (!usesObject3D(technique)) {\n                    continue;\n                }\n\n                let material: THREE.Material | undefined = materials[techniqueIndex];\n\n                if (material === undefined) {\n                    const onMaterialUpdated = (texture: THREE.Texture) => {\n                        dataSource.requestUpdate();\n                        if (texture !== undefined) {\n                            tile.addOwnedTexture(texture);\n                        }\n                    };\n                    material = createMaterial(\n                        {\n                            technique,\n                            env: mapView.env,\n                            fog: mapView.scene.fog !== null,\n                            shadowsEnabled: mapView.shadowsEnabled\n                        },\n                        onMaterialUpdated\n                    );\n                    if (material === undefined) {\n                        continue;\n                    }\n                    materials[techniqueIndex] = material;\n                }\n\n                // tslint:disable-next-line: deprecation\n                const techniqueKind = technique.kind;\n\n                // Modify the standard textured shader to support height-based coloring.\n                if (isTerrainTechnique(technique)) {\n                    this.setupTerrainMaterial(technique, material, tile.mapView.clearColor);\n                }\n\n                const bufferGeometry = new THREE.BufferGeometry();\n\n                srcGeometry.vertexAttributes?.forEach(vertexAttribute => {\n                    const buffer = attachment.getBufferAttribute(vertexAttribute);\n                    bufferGeometry.setAttribute(vertexAttribute.name, buffer);\n                });\n\n                srcGeometry.interleavedVertexAttributes?.forEach(attr => {\n                    attachment\n                        .getInterleavedBufferAttributes(attr)\n                        .forEach(({ name, attribute }) =>\n                            bufferGeometry.setAttribute(name, attribute)\n                        );\n                });\n\n                const index = attachment.info.index ?? srcGeometry.index;\n                if (index) {\n                    bufferGeometry.setIndex(attachment.getBufferAttribute(index));\n                }\n\n                if (!bufferGeometry.getAttribute(\"normal\") && needsVertexNormals(technique)) {\n                    bufferGeometry.computeVertexNormals();\n                }\n\n                bufferGeometry.addGroup(start, count);\n\n                if (isSolidLineTechnique(technique)) {\n                    // TODO: Unify access to shader defines via SolidLineMaterial setters\n                    assert(!isHighPrecisionLineMaterial(material));\n                    const lineMaterial = material as SolidLineMaterial;\n                    if (\n                        technique.clipping !== false &&\n                        tile.projection.type === ProjectionType.Planar\n                    ) {\n                        tile.boundingBox.getSize(tmpVector3);\n                        tmpVector2.set(tmpVector3.x, tmpVector3.y);\n                        lineMaterial.clipTileSize = tmpVector2;\n                    }\n\n                    if (bufferGeometry.getAttribute(\"color\")) {\n                        setShaderMaterialDefine(lineMaterial, \"USE_COLOR\", true);\n                    }\n                }\n\n                // Add the solid line outlines as a separate object.\n                const hasSolidLinesOutlines: boolean =\n                    isSolidLineTechnique(technique) && technique.secondaryWidth !== undefined;\n\n                // When the source geometry is split in groups, we\n                // should create objects with an array of materials.\n                const hasFeatureGroups =\n                    Expr.isExpr(technique.enabled) &&\n                    srcGeometry.featureStarts &&\n                    srcGeometry.featureStarts.length > 0;\n\n                const object = buildObject(\n                    technique,\n                    bufferGeometry,\n                    hasFeatureGroups ? [material] : material,\n                    tile,\n                    elevationEnabled\n                );\n\n                object.renderOrder = getPropertyValue(technique.renderOrder, mapView.env);\n\n                if (attachment.info.uuid !== undefined) {\n                    object.uuid = attachment.info.uuid;\n                    object.userData.geometryId = attachment.info.uuid;\n                }\n\n                if (\n                    (isCirclesTechnique(technique) || isSquaresTechnique(technique)) &&\n                    technique.enablePicking !== undefined\n                ) {\n                    // tslint:disable-next-line:max-line-length\n                    (object as MapViewPoints).enableRayTesting = technique.enablePicking!;\n                }\n\n                if (isLineTechnique(technique) || isSegmentsTechnique(technique)) {\n                    const fadingParams = this.getFadingParams(discreteZoomEnv, technique);\n                    FadingFeature.addRenderHelper(\n                        object,\n                        viewRanges,\n                        fadingParams.fadeNear,\n                        fadingParams.fadeFar,\n                        false\n                    );\n                }\n\n                if (isSolidLineTechnique(technique)) {\n                    const fadingParams = this.getFadingParams(discreteZoomEnv, technique);\n\n                    FadingFeature.addRenderHelper(\n                        object,\n                        viewRanges,\n                        fadingParams.fadeNear,\n                        fadingParams.fadeFar,\n                        false\n                    );\n                }\n\n                if (isExtrudedLineTechnique(technique)) {\n                    // extruded lines are normal meshes, and need transparency only when fading or\n                    // dynamic properties is defined.\n                    if (technique.fadeFar !== undefined) {\n                        const fadingParams = this.getFadingParams(\n                            mapView.env,\n                            technique as StandardExtrudedLineTechnique\n                        );\n\n                        FadingFeature.addRenderHelper(\n                            object,\n                            viewRanges,\n                            fadingParams.fadeNear,\n                            fadingParams.fadeFar,\n                            true\n                        );\n                    }\n                }\n\n                this.addUserData(tile, srcGeometry, technique, object);\n\n                if (isExtrudedPolygonTechnique(technique)) {\n                    object.castShadow = mapView.shadowsEnabled;\n                    object.receiveShadow = mapView.shadowsEnabled;\n                } else if (isStandardTechnique(technique) || isFillTechnique(technique)) {\n                    object.receiveShadow = mapView.shadowsEnabled;\n                }\n\n                if (\n                    isExtrudedPolygonTechnique(technique) ||\n                    isStandardTechnique(technique) ||\n                    isFillTechnique(technique)\n                ) {\n                    // filled polygons are normal meshes, and need transparency only when fading or\n                    // dynamic properties is defined.\n\n                    if (technique.fadeFar !== undefined) {\n                        const fadingParams = this.getFadingParams(discreteZoomEnv, technique);\n                        FadingFeature.addRenderHelper(\n                            object,\n                            viewRanges,\n                            fadingParams.fadeNear,\n                            fadingParams.fadeFar,\n                            true\n                        );\n                    }\n                }\n\n                const extrudedObjects: Array<{\n                    object: THREE.Object3D;\n                    /**\n                     * If set to `true`, an [[ExtrusionFeature]] that injects extrusion shader\n                     * chunk will be applied to the material. Otherwise, extrusion should\n                     * be added in the material's shader manually.\n                     */\n                    materialFeature: boolean;\n                }> = [];\n\n                const animatedExtrusionHandler = mapView.animatedExtrusionHandler;\n\n                let extrusionAnimationEnabled: boolean | undefined = false;\n\n                if (\n                    isExtrudedPolygonTechnique(technique) &&\n                    animatedExtrusionHandler !== undefined\n                ) {\n                    let animateExtrusionValue = getPropertyValue(\n                        technique.animateExtrusion,\n                        discreteZoomEnv\n                    );\n                    if (animateExtrusionValue !== null) {\n                        animateExtrusionValue =\n                            typeof animateExtrusionValue === \"boolean\"\n                                ? animateExtrusionValue\n                                : typeof animateExtrusionValue === \"number\"\n                                ? animateExtrusionValue !== 0\n                                : false;\n                    }\n                    extrusionAnimationEnabled =\n                        animateExtrusionValue !== null &&\n                        animatedExtrusionHandler.forceEnabled === false\n                            ? animateExtrusionValue\n                            : animatedExtrusionHandler.enabled;\n                }\n\n                const renderDepthPrePass =\n                    isExtrudedPolygonTechnique(technique) &&\n                    isRenderDepthPrePassEnabled(technique, discreteZoomEnv);\n\n                if (renderDepthPrePass) {\n                    const depthPassMesh = createDepthPrePassMesh(object as THREE.Mesh);\n                    // Set geometry kind for depth pass mesh so that it gets the displacement map\n                    // for elevation overlay.\n                    this.registerTileObject(tile, depthPassMesh, techniqueKind, {\n                        technique\n                    });\n                    objects.push(depthPassMesh);\n\n                    if (extrusionAnimationEnabled) {\n                        extrudedObjects.push({\n                            object: depthPassMesh,\n                            materialFeature: true\n                        });\n                    }\n\n                    setDepthPrePassStencil(depthPassMesh, object as THREE.Mesh);\n                }\n\n                this.registerTileObject(tile, object, techniqueKind, {\n                    technique\n                });\n                objects.push(object);\n\n                // Add the extruded building edges as a separate geometry.\n                if (isExtrudedPolygonTechnique(technique) && attachment.info.edgeIndex) {\n                    const edgeGeometry = new THREE.BufferGeometry();\n                    edgeGeometry.setAttribute(\"position\", bufferGeometry.getAttribute(\"position\"));\n\n                    const colorAttribute = bufferGeometry.getAttribute(\"color\");\n                    if (colorAttribute !== undefined) {\n                        edgeGeometry.setAttribute(\"color\", colorAttribute);\n                    }\n\n                    const extrusionAttribute = bufferGeometry.getAttribute(\"extrusionAxis\");\n                    if (extrusionAttribute !== undefined) {\n                        edgeGeometry.setAttribute(\"extrusionAxis\", extrusionAttribute);\n                    }\n\n                    const normalAttribute = bufferGeometry.getAttribute(\"normal\");\n                    if (normalAttribute !== undefined) {\n                        edgeGeometry.setAttribute(\"normal\", normalAttribute);\n                    }\n\n                    const uvAttribute = bufferGeometry.getAttribute(\"uv\");\n                    if (uvAttribute !== undefined) {\n                        edgeGeometry.setAttribute(\"uv\", uvAttribute);\n                    }\n\n                    edgeGeometry.setIndex(\n                        attachment.getBufferAttribute(attachment.info.edgeIndex!)\n                    );\n\n                    // Read the uniforms from the technique values (and apply the default values).\n                    const extrudedPolygonTechnique = technique as ExtrudedPolygonTechnique;\n\n                    const fadingParams = this.getPolygonFadingParams(\n                        discreteZoomEnv,\n                        extrudedPolygonTechnique\n                    );\n\n                    // Configure the edge material based on the theme values.\n                    const materialParams: EdgeMaterialParameters = {\n                        color: fadingParams.color,\n                        colorMix: fadingParams.colorMix,\n                        fadeNear: fadingParams.lineFadeNear,\n                        fadeFar: fadingParams.lineFadeFar\n                    };\n                    const edgeMaterial = new EdgeMaterial(materialParams);\n                    const edgeObj = new THREE.LineSegments(edgeGeometry, edgeMaterial);\n\n                    // Set the correct render order.\n                    edgeObj.renderOrder = object.renderOrder + 0.1;\n\n                    FadingFeature.addRenderHelper(\n                        edgeObj,\n                        viewRanges,\n                        fadingParams.lineFadeNear,\n                        fadingParams.lineFadeFar,\n                        false\n                    );\n\n                    if (extrusionAnimationEnabled) {\n                        extrudedObjects.push({\n                            object: edgeObj,\n                            materialFeature: false\n                        });\n                    }\n\n                    this.registerTileObject(tile, edgeObj, techniqueKind, {\n                        technique\n                    });\n                    MapMaterialAdapter.create(edgeMaterial, {\n                        color: technique.lineColor,\n                        opacity: technique.opacity\n                    });\n                    objects.push(edgeObj);\n                }\n\n                // animate the extrusion of buildings\n                if (isExtrudedPolygonTechnique(technique) && extrusionAnimationEnabled) {\n                    extrudedObjects.push({\n                        object,\n                        materialFeature: true\n                    });\n                    object.customDepthMaterial = new MapMeshDepthMaterial({\n                        depthPacking: THREE.RGBADepthPacking\n                    });\n\n                    const extrusionAnimationDuration =\n                        technique.animateExtrusionDuration !== undefined &&\n                        animatedExtrusionHandler.forceEnabled === false\n                            ? technique.animateExtrusionDuration\n                            : animatedExtrusionHandler.duration;\n\n                    tile.animatedExtrusionTileHandler = new AnimatedExtrusionTileHandler(\n                        tile,\n                        extrudedObjects,\n                        extrusionAnimationDuration\n                    );\n                    mapView.animatedExtrusionHandler.add(tile.animatedExtrusionTileHandler);\n                }\n\n                // Add the fill area edges as a separate geometry.\n\n                if (isFillTechnique(technique) && attachment.info.edgeIndex) {\n                    const outlineGeometry = new THREE.BufferGeometry();\n                    outlineGeometry.setAttribute(\n                        \"position\",\n                        bufferGeometry.getAttribute(\"position\")\n                    );\n                    outlineGeometry.setIndex(\n                        attachment.getBufferAttribute(attachment.info.edgeIndex!)\n                    );\n\n                    const fillTechnique = technique as FillTechnique;\n\n                    const fadingParams = this.getPolygonFadingParams(mapView.env, fillTechnique);\n\n                    // Configure the edge material based on the theme values.\n                    const materialParams: EdgeMaterialParameters = {\n                        color: fadingParams.color,\n                        colorMix: fadingParams.colorMix,\n                        fadeNear: fadingParams.lineFadeNear,\n                        fadeFar: fadingParams.lineFadeFar\n                    };\n                    const outlineMaterial = new EdgeMaterial(materialParams);\n                    const outlineObj = new THREE.LineSegments(outlineGeometry, outlineMaterial);\n                    outlineObj.renderOrder = object.renderOrder + 0.1;\n\n                    FadingFeature.addRenderHelper(\n                        outlineObj,\n                        viewRanges,\n                        fadingParams.lineFadeNear,\n                        fadingParams.lineFadeFar,\n                        false\n                    );\n\n                    this.registerTileObject(tile, outlineObj, techniqueKind, {\n                        technique\n                    });\n                    MapMaterialAdapter.create(outlineMaterial, {\n                        color: fillTechnique.lineColor,\n                        opacity: fillTechnique.opacity\n                    });\n                    objects.push(outlineObj);\n                }\n\n                // Add the fill area edges as a separate geometry.\n                if (hasSolidLinesOutlines) {\n                    const outlineTechnique = technique as SolidLineTechnique;\n                    const outlineMaterial = material.clone() as SolidLineMaterial;\n                    applyBaseColorToMaterial(\n                        outlineMaterial,\n                        outlineMaterial.color,\n                        outlineTechnique,\n                        outlineTechnique.secondaryColor ?? 0x000000,\n                        discreteZoomEnv\n                    );\n\n                    if (outlineTechnique.secondaryCaps !== undefined) {\n                        outlineMaterial.caps = getPropertyValue(\n                            outlineTechnique.secondaryCaps,\n                            mapView.env\n                        );\n                    }\n                    const outlineObj = buildObject(\n                        technique,\n                        bufferGeometry,\n                        outlineMaterial,\n                        tile,\n                        elevationEnabled\n                    );\n\n                    outlineObj.renderOrder =\n                        (getPropertyValue(outlineTechnique.secondaryRenderOrder, mapView.env) ??\n                            0) - 0.0000001;\n\n                    this.addUserData(tile, srcGeometry, technique, outlineObj);\n\n                    const fadingParams = this.getFadingParams(discreteZoomEnv, technique);\n                    FadingFeature.addRenderHelper(\n                        outlineObj,\n                        viewRanges,\n                        fadingParams.fadeNear,\n                        fadingParams.fadeFar,\n                        false\n                    );\n\n                    const secondaryWidth = buildMetricValueEvaluator(\n                        outlineTechnique.secondaryWidth,\n                        // tslint:disable-next-line: deprecation\n                        outlineTechnique.metricUnit\n                    );\n                    this.registerTileObject(tile, outlineObj, techniqueKind, { technique });\n                    const mainMaterialAdapter = MapMaterialAdapter.get(material);\n\n                    const outlineMaterialAdapter = MapMaterialAdapter.create(outlineMaterial, {\n                        color: outlineTechnique.secondaryColor,\n                        opacity: outlineTechnique.opacity,\n                        caps: outlineTechnique.secondaryCaps,\n                        // Still handled above\n                        lineWidth: (frameMapView: MapAdapterUpdateEnv) => {\n                            if (!mainMaterialAdapter) {\n                                return;\n                            }\n                            mainMaterialAdapter.ensureUpdated(frameMapView);\n                            const mainLineWidth =\n                                mainMaterialAdapter.currentStyledProperties.lineWidth;\n\n                            const secondaryLineWidth = getPropertyValue(\n                                secondaryWidth,\n                                mapView.env\n                            );\n                            const opacity = outlineMaterialAdapter.currentStyledProperties\n                                .opacity as number | null;\n                            if (\n                                typeof mainLineWidth === \"number\" &&\n                                typeof secondaryLineWidth === \"number\"\n                            ) {\n                                if (\n                                    secondaryLineWidth <= mainLineWidth &&\n                                    (opacity === null || opacity === undefined || opacity === 1)\n                                ) {\n                                    // We could mark object as invisible somehow, not sure how\n                                    // objectAdapter.markInvisible();\n                                    return 0;\n                                } else {\n                                    return secondaryLineWidth;\n                                }\n                            } else {\n                                return 0;\n                            }\n                        }\n                    });\n                    objects.push(outlineObj);\n                }\n            }\n        }\n    }\n\n    /**\n     * Prepare the [[Tile]]s pois. Uses the [[PoiManager]] in [[MapView]].\n     */\n    preparePois(tile: Tile, decodedTile: DecodedTile) {\n        if (decodedTile.poiGeometries !== undefined) {\n            tile.mapView.poiManager.addPois(tile, decodedTile);\n        }\n    }\n\n    /**\n     * Create a ground plane mesh for a tile\n     * @param tile Tile\n     * @param material Material\n     * @param createTexCoords Enable creation of texture coordinates\n     */\n    createGroundPlane(\n        tile: Tile,\n        material: THREE.Material | THREE.Material[],\n        createTexCoords: boolean,\n        shadowsEnabled?: boolean\n    ): THREE.Mesh {\n        const { dataSource, projection, mapView } = tile;\n        const sourceProjection = dataSource.getTilingScheme().projection;\n        const shouldSubdivide = projection.type === ProjectionType.Spherical;\n        const tmpV = new THREE.Vector3();\n\n        function moveTileCenter(geom: THREE.BufferGeometry) {\n            const attr = geom.getAttribute(\"position\") as THREE.BufferAttribute;\n            const posArray = attr.array as Float32Array;\n            for (let i = 0; i < posArray.length; i += 3) {\n                tmpV.set(posArray[i], posArray[i + 1], posArray[i + 2]);\n                projection.reprojectPoint(sourceProjection, tmpV, tmpV);\n                tmpV.sub(tile.center);\n                posArray[i] = tmpV.x;\n                posArray[i + 1] = tmpV.y;\n                posArray[i + 2] = tmpV.z;\n            }\n            attr.needsUpdate = true;\n        }\n\n        // Create plane\n        const { east, west, north, south } = tile.geoBox;\n        const geometry = new THREE.BufferGeometry();\n        const sw = sourceProjection.projectPoint(\n            new GeoCoordinates(south, west),\n            new THREE.Vector3()\n        );\n        const se = sourceProjection.projectPoint(\n            new GeoCoordinates(south, east),\n            new THREE.Vector3()\n        );\n        const nw = sourceProjection.projectPoint(\n            new GeoCoordinates(north, west),\n            new THREE.Vector3()\n        );\n        const ne = sourceProjection.projectPoint(\n            new GeoCoordinates(north, east),\n            new THREE.Vector3()\n        );\n        const posAttr = new THREE.BufferAttribute(\n            new Float32Array([...sw.toArray(), ...se.toArray(), ...nw.toArray(), ...ne.toArray()]),\n            3\n        );\n        geometry.setAttribute(\"position\", posAttr);\n        if (shadowsEnabled === true) {\n            sourceProjection.surfaceNormal(sw, tmpV);\n            // Webmercator needs to have it negated to work correctly.\n            tmpV.negate();\n            const normAttr = new THREE.BufferAttribute(\n                new Float32Array([\n                    ...tmpV.toArray(),\n                    ...tmpV.toArray(),\n                    ...tmpV.toArray(),\n                    ...tmpV.toArray()\n                ]),\n                3\n            );\n            geometry.setAttribute(\"normal\", normAttr);\n        }\n        geometry.setIndex(new THREE.BufferAttribute(new Uint16Array([0, 1, 2, 2, 1, 3]), 1));\n\n        if (createTexCoords) {\n            const uvAttr = new THREE.BufferAttribute(new Float32Array([0, 0, 1, 0, 0, 1, 1, 1]), 2);\n            geometry.setAttribute(\"uv\", uvAttr);\n        }\n\n        if (shouldSubdivide) {\n            const geometries: THREE.BufferGeometry[] = [];\n            const sphericalModifier = new SphericalGeometrySubdivisionModifier(\n                THREE.MathUtils.degToRad(10),\n                sourceProjection\n            );\n            const enableMixedLod = mapView.enableMixedLod || mapView.enableMixedLod === undefined;\n\n            if (enableMixedLod) {\n                // Use a [[LodMesh]] to adapt tesselation of tile depending on zoom level\n                for (let zoomLevelOffset = 0; zoomLevelOffset < 4; ++zoomLevelOffset) {\n                    const subdivision = Math.pow(2, zoomLevelOffset);\n                    const zoomLevelGeometry = geometry.clone();\n                    if (subdivision > 1) {\n                        const edgeModifier = new EdgeLengthGeometrySubdivisionModifier(\n                            subdivision,\n                            tile.geoBox,\n                            SubdivisionMode.All,\n                            sourceProjection\n                        );\n                        edgeModifier.modify(zoomLevelGeometry);\n                    }\n                    sphericalModifier.modify(zoomLevelGeometry);\n                    moveTileCenter(zoomLevelGeometry);\n                    geometries.push(zoomLevelGeometry);\n                }\n                return new LodMesh(geometries, material);\n            } else {\n                // Use static mesh if mixed LOD is disabled\n                sphericalModifier.modify(geometry);\n                moveTileCenter(geometry);\n\n                return new THREE.Mesh(geometry, material);\n            }\n        } else {\n            // Use static mesh for planar projection\n            moveTileCenter(geometry);\n            return new THREE.Mesh(geometry, material);\n        }\n    }\n\n    /**\n     * Creates and add a background plane for the tile.\n     * @param tile Tile\n     * @param renderOrder Render order of the tile\n     */\n    addGroundPlane(tile: Tile, renderOrder: number) {\n        const shadowsEnabled = tile.mapView.shadowsEnabled;\n        const material = this.createGroundPlaneMaterial(\n            new THREE.Color(tile.mapView.clearColor),\n            tile.mapView.shadowsEnabled,\n            tile.mapView.projection.type === ProjectionType.Spherical\n        );\n        const mesh = this.createGroundPlane(tile, material, false, shadowsEnabled);\n        mesh.receiveShadow = shadowsEnabled;\n        mesh.renderOrder = renderOrder;\n        this.registerTileObject(tile, mesh, GeometryKind.Background);\n        tile.objects.push(mesh);\n    }\n\n    private createGroundPlaneMaterial(\n        color: THREE.Color,\n        shadowsEnabled: boolean,\n        depthWrite: boolean\n    ): THREE.Material {\n        if (shadowsEnabled) {\n            return new MapMeshStandardMaterial({\n                color,\n                visible: true,\n                depthWrite,\n                removeDiffuseLight: true\n            });\n        } else {\n            return new MapMeshBasicMaterial({\n                color,\n                visible: true,\n                depthWrite\n            });\n        }\n    }\n\n    /**\n     * Gets the attachments of the given [[DecodedTile]].\n     *\n     * @param decodedTile The [[DecodedTile]].\n     */\n    private *getAttachments(decodedTile: DecodedTile): Generator<AttachmentInfo> {\n        const cache = new AttachmentCache();\n\n        for (const geometry of decodedTile.geometries) {\n            // the main attachment\n\n            const mainAttachment: Attachment = {\n                index: geometry.index,\n                edgeIndex: geometry.edgeIndex,\n                uuid: geometry.uuid,\n                groups: geometry.groups\n            };\n\n            yield new AttachmentInfo(geometry, mainAttachment, cache);\n\n            if (geometry.attachments) {\n                // the additional attachments\n                for (const info of geometry.attachments) {\n                    yield new AttachmentInfo(geometry, info, cache);\n                }\n            }\n        }\n    }\n\n    /**\n     * Process the given [[Tile]] and assign default values to render orders\n     * and label priorities.\n     *\n     * @param tile The [[Tile]] to process.\n     */\n    private processPriorities(tile: Tile) {\n        const decodedTile = tile.decodedTile;\n\n        if (decodedTile === undefined) {\n            return;\n        }\n\n        const theme = tile.mapView;\n\n        if (!theme) {\n            return;\n        }\n\n        const { priorities, labelPriorities } = tile.mapView.theme;\n\n        decodedTile.techniques.forEach(technique => {\n            if (\n                isTextTechnique(technique) ||\n                isPoiTechnique(technique) ||\n                isLineMarkerTechnique(technique)\n            ) {\n                // for screen-space techniques the `category` is used to assign\n                // priorities.\n                if (labelPriorities && typeof technique._category === \"string\") {\n                    // override the `priority` when the technique uses `category`.\n                    const priority = labelPriorities.indexOf(technique._category);\n                    if (priority !== -1) {\n                        technique.priority = labelPriorities.length - priority;\n                    }\n                }\n            } else if (priorities && technique._styleSet !== undefined) {\n                // Compute the render order based on the style category and styleSet.\n                const computeRenderOrder = (category: string): number | undefined => {\n                    const priority = priorities?.findIndex(\n                        entry => entry.group === technique._styleSet && entry.category === category\n                    );\n\n                    return priority !== undefined && priority !== -1\n                        ? (priority + 1) * 10\n                        : undefined;\n                };\n\n                if (typeof technique._category === \"string\") {\n                    // override the renderOrder when the technique is using categories.\n                    const renderOrder = computeRenderOrder(technique._category);\n\n                    if (renderOrder !== undefined) {\n                        technique.renderOrder = renderOrder;\n                    }\n                }\n\n                if (typeof technique._secondaryCategory === \"string\") {\n                    // override the secondaryRenderOrder when the technique is using categories.\n                    const secondaryRenderOrder = computeRenderOrder(technique._secondaryCategory);\n\n                    if (secondaryRenderOrder !== undefined) {\n                        (technique as any).secondaryRenderOrder = secondaryRenderOrder;\n                    }\n                }\n            }\n        });\n    }\n\n    private setupTerrainMaterial(\n        technique: TerrainTechnique,\n        material: THREE.Material,\n        terrainColor: number\n    ) {\n        if (technique.displacementMap === undefined) {\n            // Render terrain using the given color.\n            const stdMaterial = material as MapMeshStandardMaterial;\n            stdMaterial.color.set(terrainColor);\n            return;\n        }\n\n        // Render terrain using height-based colors.\n        (material as any).onBeforeCompile = (shader: THREE.Shader) => {\n            shader.fragmentShader = shader.fragmentShader.replace(\n                \"#include <map_pars_fragment>\",\n                `#include <map_pars_fragment>\n    uniform sampler2D displacementMap;\n    uniform float displacementScale;\n    uniform float displacementBias;`\n            );\n            shader.fragmentShader = shader.fragmentShader.replace(\n                \"#include <map_fragment>\",\n                `#ifdef USE_MAP\n    float minElevation = ${EarthConstants.MIN_ELEVATION.toFixed(1)};\n    float maxElevation = ${EarthConstants.MAX_ELEVATION.toFixed(1)};\n    float elevationRange = maxElevation - minElevation;\n\n    float disp = texture2D( displacementMap, vUv ).x * displacementScale + displacementBias;\n    vec4 texelColor = texture2D( map, vec2((disp - minElevation) / elevationRange, 0.0) );\n    texelColor = mapTexelToLinear( texelColor );\n    diffuseColor *= texelColor;\n#endif`\n            );\n            // We remove the displacement map from manipulating the vertices, it is\n            // however still required for the pixel shader, so it can't be directly\n            // removed.\n            shader.vertexShader = shader.vertexShader.replace(\n                \"#include <displacementmap_vertex>\",\n                \"\"\n            );\n        };\n        (material as MapMeshStandardMaterial).displacementMap!.needsUpdate = true;\n    }\n\n    private addUserData(\n        tile: Tile,\n        srcGeometry: Geometry,\n        technique: Technique,\n        object: THREE.Object3D\n    ) {\n        if (isTerrainTechnique(technique)) {\n            assert(\n                Object.keys(object.userData).length === 0,\n                \"Unexpected user data in terrain object\"\n            );\n\n            assert(\n                typeof srcGeometry.objInfos![0] === \"object\",\n                \"Wrong attribute map type for terrain geometry\"\n            );\n\n            const displacementMap = (srcGeometry.objInfos as DisplacementMap[])[0];\n            const tileDisplacementMap: TileDisplacementMap = {\n                tileKey: tile.tileKey,\n                texture: new THREE.DataTexture(\n                    displacementMap.buffer,\n                    displacementMap.xCountVertices,\n                    displacementMap.yCountVertices,\n                    THREE.LuminanceFormat,\n                    THREE.FloatType\n                ),\n                displacementMap,\n                geoBox: tile.geoBox\n            };\n            object.userData = tileDisplacementMap;\n        } else {\n            // Set the feature data for picking with `MapView.intersectMapObjects()` except for\n            // solid-line which uses tile-based picking.\n            const featureData: TileFeatureData = {\n                geometryType: srcGeometry.type,\n                starts: srcGeometry.featureStarts,\n                objInfos: srcGeometry.objInfos\n            };\n            object.userData.feature = featureData;\n            object.userData.technique = technique;\n        }\n    }\n\n    /**\n     * Gets the fading parameters for several kinds of objects.\n     */\n    private getFadingParams(\n        env: Env,\n        technique: MakeTechniqueAttrs<BaseTechniqueParams>\n    ): FadingParameters {\n        const fadeNear =\n            technique.fadeNear !== undefined\n                ? getPropertyValue(technique.fadeNear, env)\n                : FadingFeature.DEFAULT_FADE_NEAR;\n        const fadeFar =\n            technique.fadeFar !== undefined\n                ? getPropertyValue(technique.fadeFar, env)\n                : FadingFeature.DEFAULT_FADE_FAR;\n        return {\n            fadeNear,\n            fadeFar\n        };\n    }\n\n    /**\n     * Gets the fading parameters for several kinds of objects.\n     */\n    private getPolygonFadingParams(\n        env: Env,\n        technique: FillTechnique | ExtrudedPolygonTechnique\n    ): PolygonFadingParameters {\n        let color: string | number | undefined;\n        let colorMix = EdgeMaterial.DEFAULT_COLOR_MIX;\n\n        if (technique.lineColor !== undefined) {\n            color = getPropertyValue(technique.lineColor, env);\n            if (isExtrudedPolygonTechnique(technique)) {\n                const extrudedPolygonTechnique = technique as ExtrudedPolygonTechnique;\n                colorMix =\n                    extrudedPolygonTechnique.lineColorMix !== undefined\n                        ? extrudedPolygonTechnique.lineColorMix\n                        : EdgeMaterial.DEFAULT_COLOR_MIX;\n            }\n        }\n\n        const fadeNear =\n            technique.fadeNear !== undefined\n                ? getPropertyValue(technique.fadeNear, env)\n                : FadingFeature.DEFAULT_FADE_NEAR;\n        const fadeFar =\n            technique.fadeFar !== undefined\n                ? getPropertyValue(technique.fadeFar, env)\n                : FadingFeature.DEFAULT_FADE_FAR;\n\n        const lineFadeNear =\n            technique.lineFadeNear !== undefined\n                ? getPropertyValue(technique.lineFadeNear, env)\n                : fadeNear;\n        const lineFadeFar =\n            technique.lineFadeFar !== undefined\n                ? getPropertyValue(technique.lineFadeFar, env)\n                : fadeFar;\n\n        if (color === undefined) {\n            color = EdgeMaterial.DEFAULT_COLOR;\n        }\n\n        return {\n            color,\n            colorMix,\n            fadeNear,\n            fadeFar,\n            lineFadeNear,\n            lineFadeFar\n        };\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nimport { UnicodeUtils } from \"../utils/UnicodeUtils\";\nimport { Font } from \"./FontCatalog\";\n\n/**\n * Structure containing all the required information necessary to render a BMFont glyph using\n * [[TextCanvas]].\n */\nexport class GlyphData {\n    /**\n     * Unicode character represented by this glyph.\n     */\n    readonly character: string;\n\n    /**\n     * Glyph' direction.\n     */\n    readonly direction: UnicodeUtils.Direction;\n\n    /**\n     * Array containing the positions for all corners of this glyph.\n     */\n    positions: THREE.Vector3[] = [];\n\n    /**\n     * Array containing the source texture coordinates for all corners of this glyph.\n     * Used to sample the original texture atlas pages.\n     */\n    sourceTextureCoordinates: THREE.Vector2[] = [];\n\n    /**\n     * Array containing the dynamic texture coordinates for all corners of this glyph.\n     * Used to sample the dynamic texture atlas page.\n     */\n    dynamicTextureCoordinates: THREE.Vector2[] = [];\n\n    /**\n     * Source texture atlas' page copy index.\n     */\n    copyIndex: number = 0;\n\n    /**\n     * Flag indicating if glyph can be currently rendered.\n     */\n    isInCache: boolean = false;\n\n    /**\n     * Creates a new `GlyphData` object.\n     *\n     * @param codePoint Unicode code point.\n     * @param block Unicode block.\n     * @param width Glyph' width.\n     * @param height Glyph' height.\n     * @param advanceX Amount of pixel to move after placing this glyph.\n     * @param offsetX Horizontal offset from the glyph' origin.\n     * @param offsetY Vertical offset from the glyph' origin.\n     * @param u0 Glyph' left texture coordinate.\n     * @param v0 Glyph' bottom texture coordinate.\n     * @param u1 Glyph' right texture coordinate.\n     * @param v1 Glyph' top texture coordinate.\n     * @param texture Glyph' source texture atlas page.\n     * @param font Glyph' font.\n     *\n     * @returns New `GlyphData`.\n     */\n    constructor(\n        readonly codePoint: number,\n        readonly block: string,\n        readonly width: number,\n        readonly height: number,\n        readonly advanceX: number,\n        readonly offsetX: number,\n        readonly offsetY: number,\n        u0: number,\n        v0: number,\n        u1: number,\n        v1: number,\n        readonly texture: THREE.Texture,\n        readonly font: Font\n    ) {\n        this.character = String.fromCodePoint(codePoint);\n        this.direction = UnicodeUtils.getDirection(codePoint, block);\n\n        const left = this.offsetX;\n        const right = left + this.width;\n        const top = font.metrics.lineHeight - this.offsetY;\n        const bottom = top - this.height;\n\n        this.positions.push(\n            new THREE.Vector3(left, bottom, 1.0),\n            new THREE.Vector3(right, bottom, 1.0),\n            new THREE.Vector3(left, top, 1.0),\n            new THREE.Vector3(right, top, 1.0)\n        );\n\n        this.sourceTextureCoordinates.push(\n            new THREE.Vector2(u0, v0),\n            new THREE.Vector2(u1, v0),\n            new THREE.Vector2(u0, v1),\n            new THREE.Vector2(u1, v1)\n        );\n\n        this.dynamicTextureCoordinates.push(\n            new THREE.Vector2(0.0, 0.0),\n            new THREE.Vector2(1.0, 0.0),\n            new THREE.Vector2(0.0, 1.0),\n            new THREE.Vector2(1.0, 1.0)\n        );\n    }\n\n    /**\n     * Clone this `GlyphData`.\n     *\n     * @returns Cloned `GlyphData`.\n     */\n    clone(): GlyphData {\n        return new GlyphData(\n            this.codePoint,\n            this.block,\n            this.width,\n            this.height,\n            this.advanceX,\n            this.offsetX,\n            this.offsetY,\n            this.sourceTextureCoordinates[0].x,\n            this.sourceTextureCoordinates[0].y,\n            this.sourceTextureCoordinates[3].x,\n            this.sourceTextureCoordinates[3].y,\n            this.texture,\n            this.font\n        );\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport * as THREE from \"three\";\n\nimport { MemoryUsage } from \"../TextCanvas\";\nimport { GlyphData } from \"./GlyphData\";\nimport { TextBufferObject } from \"./TextBufferObject\";\nimport { TextRenderStyle } from \"./TextStyle\";\n\nexport const MAX_CAPACITY = 65536;\nexport const VERTEX_BUFFER_STRIDE = 16;\nexport const INDEX_BUFFER_STRIDE = 1;\nexport const VERTICES_PER_QUAD = 4;\nexport const INDICES_PER_QUAD = 6;\nexport const QUAD_VERTEX_MEMORY_FOOTPRINT = VERTICES_PER_QUAD * VERTEX_BUFFER_STRIDE;\nexport const QUAD_INDEX_MEMORY_FOOTPRINT = INDICES_PER_QUAD * INDEX_BUFFER_STRIDE;\n\n/**\n * Number of bytes for float in an Float32Array.\n */\nconst NUM_BYTES_PER_FLOAT = 4;\n\n/**\n * Number of bytes for integer number in an UInt32Array.\n */\nconst NUM_BYTES_PER_INT32 = 4;\n\n/**\n * Interface containing user-supplied picking data, as well as the [[TextGeometry]] range it's\n * assigned to.\n */\ninterface PickingData {\n    start: number;\n    end: number;\n    data: any;\n}\n\n/**\n * Procedural geometry that holds vertex attribute data for all glyphs in a [[TextCanvas]].\n */\nexport class TextGeometry {\n    /**\n     * Count of currently drawn glyphs.\n     */\n    get drawCount(): number {\n        return this.m_drawCount;\n    }\n\n    /**\n     * Mesh used to render foreground glyphs.\n     */\n    get mesh(): THREE.Mesh {\n        return this.m_mesh;\n    }\n\n    /**\n     * Mesh used to render background glyphs.\n     */\n    get backgroundMesh(): THREE.Mesh {\n        return this.m_bgMesh;\n    }\n    /**\n     * Maximum glyph capacity.\n     */\n    readonly capacity: number;\n\n    private m_currentCapacity: number;\n    private m_drawCount: number;\n    private m_updateOffset: number;\n\n    private m_vertexBuffer: THREE.InterleavedBuffer;\n    private m_positionAttribute: THREE.InterleavedBufferAttribute;\n    private m_uvAttribute: THREE.InterleavedBufferAttribute;\n    private m_colorAttribute: THREE.InterleavedBufferAttribute;\n    private m_bgColorAttribute: THREE.InterleavedBufferAttribute;\n    private m_indexBuffer: THREE.BufferAttribute;\n\n    private m_geometry: THREE.BufferGeometry;\n    private m_mesh: THREE.Mesh;\n    private m_bgMesh: THREE.Mesh;\n\n    private m_pickingCount: number;\n    private m_pickingDataArray: PickingData[];\n\n    /**\n     * Creates a new `TextGeometry`.\n     *\n     * @param material Material used to render foreground glyphs.\n     * @param backgroundMaterial Material used to render background glyphs.\n     * @param initialSize Initial amount of glyphs that can be stored.\n     * @param capacity Maximum glyph capacity.\n     *\n     * @returns New `TextGeometry`.\n     */\n    constructor(\n        readonly scene: THREE.Scene,\n        material: THREE.Material,\n        backgroundMaterial: THREE.Material,\n        initialSize: number,\n        capacity: number\n    ) {\n        this.capacity = Math.min(capacity, MAX_CAPACITY);\n        this.m_currentCapacity = Math.min(initialSize, capacity);\n        this.m_drawCount = 0;\n        this.m_updateOffset = 0;\n        this.m_pickingCount = 0;\n\n        this.m_vertexBuffer = new THREE.InterleavedBuffer(\n            new Float32Array(this.m_currentCapacity * QUAD_VERTEX_MEMORY_FOOTPRINT),\n            VERTEX_BUFFER_STRIDE\n        );\n        this.m_vertexBuffer.setUsage(THREE.DynamicDrawUsage);\n        this.m_positionAttribute = new THREE.InterleavedBufferAttribute(this.m_vertexBuffer, 4, 0);\n        this.m_uvAttribute = new THREE.InterleavedBufferAttribute(this.m_vertexBuffer, 4, 4);\n        this.m_colorAttribute = new THREE.InterleavedBufferAttribute(this.m_vertexBuffer, 4, 8);\n        this.m_bgColorAttribute = new THREE.InterleavedBufferAttribute(this.m_vertexBuffer, 4, 12);\n\n        this.m_indexBuffer = new THREE.BufferAttribute(\n            new Uint32Array(this.m_currentCapacity * QUAD_INDEX_MEMORY_FOOTPRINT),\n            INDEX_BUFFER_STRIDE\n        );\n        this.m_indexBuffer.setUsage(THREE.DynamicDrawUsage);\n\n        this.m_geometry = new THREE.BufferGeometry();\n        this.m_geometry.setAttribute(\"position\", this.m_positionAttribute);\n        this.m_geometry.setAttribute(\"uv\", this.m_uvAttribute);\n        this.m_geometry.setAttribute(\"color\", this.m_colorAttribute);\n        this.m_geometry.setAttribute(\"bgColor\", this.m_bgColorAttribute);\n        this.m_geometry.setIndex(this.m_indexBuffer);\n\n        this.m_pickingDataArray = new Array(this.m_currentCapacity);\n\n        this.m_mesh = new THREE.Mesh(this.m_geometry, material);\n        this.m_bgMesh = new THREE.Mesh(this.m_geometry, backgroundMaterial);\n        this.m_mesh.renderOrder = Number.MAX_SAFE_INTEGER;\n        this.m_bgMesh.renderOrder = Number.MAX_SAFE_INTEGER - 1;\n        this.m_mesh.frustumCulled = false;\n        this.m_bgMesh.frustumCulled = false;\n        this.scene.add(this.m_bgMesh, this.m_mesh);\n    }\n\n    /**\n     * Release all allocated resources.\n     */\n    dispose() {\n        this.scene.remove(this.m_bgMesh, this.m_mesh);\n        this.m_geometry.dispose();\n    }\n\n    /**\n     * Clear the geometry.\n     */\n    clear() {\n        this.m_drawCount = 0;\n        this.m_updateOffset = 0;\n        this.m_pickingCount = 0;\n    }\n\n    /**\n     * Update the GPU resources to reflect the latest additions to the geometry.\n     */\n    update() {\n        if (this.drawCount > this.m_updateOffset) {\n            this.m_vertexBuffer.needsUpdate = true;\n            this.m_vertexBuffer.updateRange.offset =\n                this.m_updateOffset * QUAD_VERTEX_MEMORY_FOOTPRINT;\n            this.m_vertexBuffer.updateRange.count =\n                (this.m_drawCount - this.m_updateOffset) * QUAD_VERTEX_MEMORY_FOOTPRINT;\n            this.m_indexBuffer.needsUpdate = true;\n            this.m_indexBuffer.updateRange.offset =\n                this.m_updateOffset * QUAD_INDEX_MEMORY_FOOTPRINT;\n            this.m_indexBuffer.updateRange.count =\n                (this.m_drawCount - this.m_updateOffset) * QUAD_INDEX_MEMORY_FOOTPRINT;\n        }\n        this.m_updateOffset = this.m_drawCount;\n        this.m_geometry.setDrawRange(0, this.m_drawCount * INDICES_PER_QUAD);\n    }\n\n    /**\n     * Add a new glyph to the `TextGeometry`.\n     *\n     * @param glyphData [[GlyphData]] holding the glyph description.\n     * @param corners Transformed glyph corners.\n     * @param weight Foreground glyph sampling weight.\n     * @param bgWeight Foreground glyph sampling weight.\n     * @param mirrored If `true`, UVs will be horizontally mirrored (needed for RTL punctuation).\n     * @param style Currently set [[TextRenderStyle]].\n     *\n     * @returns Result of the addition.\n     */\n    add(\n        glyphData: GlyphData,\n        corners: THREE.Vector3[],\n        weight: number,\n        bgWeight: number,\n        mirrored: boolean,\n        style: TextRenderStyle\n    ): boolean {\n        if (this.m_drawCount >= this.capacity) {\n            return false;\n        } else if (this.m_drawCount >= this.m_currentCapacity) {\n            const newSize = Math.min(this.m_currentCapacity * 2, this.capacity);\n            this.resizeBuffers(newSize);\n        }\n\n        const baseVertex = this.m_drawCount * VERTICES_PER_QUAD;\n        const baseIndex = this.m_drawCount * INDICES_PER_QUAD;\n\n        for (let i = 0; i < VERTICES_PER_QUAD; ++i) {\n            this.m_positionAttribute.setXYZW(\n                baseVertex + i,\n                corners[i].x,\n                corners[i].y,\n                corners[i].z,\n                (mirrored ? -1.0 : 1.0) * style.rotation\n            );\n            const mirroredUVIdx = mirrored ? ((i + 1) % 2) + Math.floor(i / 2) * 2 : i;\n            this.m_uvAttribute.setXYZW(\n                baseVertex + i,\n                glyphData.dynamicTextureCoordinates[mirroredUVIdx].x,\n                glyphData.dynamicTextureCoordinates[mirroredUVIdx].y,\n                weight,\n                bgWeight\n            );\n            this.m_colorAttribute.setXYZW(\n                baseVertex + i,\n                style.color.r,\n                style.color.g,\n                style.color.b,\n                style.opacity\n            );\n            this.m_bgColorAttribute.setXYZW(\n                baseVertex + i,\n                style.backgroundColor.r,\n                style.backgroundColor.g,\n                style.backgroundColor.b,\n                style.backgroundOpacity\n            );\n        }\n\n        this.m_indexBuffer.setX(baseIndex, baseVertex);\n        this.m_indexBuffer.setX(baseIndex + 1, baseVertex + 1);\n        this.m_indexBuffer.setX(baseIndex + 2, baseVertex + 2);\n        this.m_indexBuffer.setX(baseIndex + 3, baseVertex + 2);\n        this.m_indexBuffer.setX(baseIndex + 4, baseVertex + 1);\n        this.m_indexBuffer.setX(baseIndex + 5, baseVertex + 3);\n\n        ++this.m_drawCount;\n        return true;\n    }\n\n    /**\n     * Add a new glyph to a text buffer.\n     *\n     * @param buffer Target buffer where glyph attributes will be stored.\n     * @param offset Offset of the target buffer.\n     * @param glyphData [[GlyphData]] holding the glyph description.\n     * @param corners Transformed glyph corners.\n     * @param weight Foreground glyph sampling weight.\n     * @param bgWeight Foreground glyph sampling weight.\n     * @param mirrored If `true`, UVs will be mirrored (needed for RTL punctuation).\n     * @param style Currently set [[TextRenderStyle]].\n     */\n    addToBuffer(\n        buffer: Float32Array,\n        offset: number,\n        glyphData: GlyphData,\n        corners: THREE.Vector3[],\n        weight: number,\n        bgWeight: number,\n        mirrored: boolean,\n        style: TextRenderStyle\n    ): void {\n        for (let i = 0; i < VERTICES_PER_QUAD; ++i) {\n            const vertexOffset = offset + VERTEX_BUFFER_STRIDE * i;\n            buffer[vertexOffset] = corners[i].x;\n            buffer[vertexOffset + 1] = corners[i].y;\n            buffer[vertexOffset + 2] = corners[i].z;\n            buffer[vertexOffset + 3] = (mirrored ? -1.0 : 1.0) * style.rotation;\n\n            const mirroredUVIdx = mirrored ? ((i + 1) % 2) + Math.floor(i / 2) * 2 : i;\n            buffer[vertexOffset + 4] = glyphData.dynamicTextureCoordinates[mirroredUVIdx].x;\n            buffer[vertexOffset + 5] = glyphData.dynamicTextureCoordinates[mirroredUVIdx].y;\n            buffer[vertexOffset + 6] = weight;\n            buffer[vertexOffset + 7] = bgWeight;\n\n            buffer[vertexOffset + 8] = style.color.r;\n            buffer[vertexOffset + 9] = style.color.g;\n            buffer[vertexOffset + 10] = style.color.b;\n            buffer[vertexOffset + 11] = style.opacity;\n\n            buffer[vertexOffset + 12] = style.backgroundColor.r;\n            buffer[vertexOffset + 13] = style.backgroundColor.g;\n            buffer[vertexOffset + 14] = style.backgroundColor.b;\n            buffer[vertexOffset + 15] = style.backgroundOpacity;\n        }\n    }\n\n    /**\n     * Add a previously computed [[TextBufferObject]] to the `TextGeometry`. Extra parameters can\n     * be passed to override the passed attribute data.\n     *\n     * @param textBufferObject [[TextBufferObject]] containing computed glyphs.\n     * @param position Override position value.\n     * @param scale Override scale value.\n     * @param rotation Override rotation value.\n     * @param color Override color value.\n     * @param opacity Override opacity value.\n     * @param bgColor Override background color value.\n     * @param bgOpacity Override background opacity value.\n     *\n     * @returns Result of the addition.\n     */\n    addTextBufferObject(\n        textBufferObject: TextBufferObject,\n        position?: THREE.Vector3,\n        scale?: number,\n        rotation?: number,\n        color?: THREE.Color,\n        opacity?: number,\n        bgColor?: THREE.Color,\n        bgOpacity?: number\n    ): boolean {\n        if (this.m_drawCount + textBufferObject.glyphs.length >= this.capacity) {\n            return false;\n        } else if (this.m_drawCount + textBufferObject.glyphs.length >= this.m_currentCapacity) {\n            const newSize = Math.min(this.m_currentCapacity * 2, this.capacity);\n            this.resizeBuffers(newSize);\n        }\n\n        const s = scale || 1.0;\n        const r = rotation || 0.0;\n        const cosR = Math.cos(r);\n        const sinR = Math.sin(r);\n        const offsetX = position !== undefined ? position.x : 0.0;\n        const offsetY = position !== undefined ? position.y : 0.0;\n        const offsetZ = position !== undefined ? position.z : 0.0;\n\n        const buffer = textBufferObject.buffer;\n\n        const rot = buffer[3];\n        const rotSign = rot < 0 ? -1.0 : 1.0;\n\n        const red = color !== undefined ? color.r : buffer[8];\n        const green = color !== undefined ? color.g : buffer[9];\n        const blue = color !== undefined ? color.b : buffer[10];\n        const alpha = opacity !== undefined ? opacity : buffer[11];\n        const bgRed = bgColor !== undefined ? bgColor.r : buffer[12];\n        const bgGreen = bgColor !== undefined ? bgColor.g : buffer[13];\n        const bgBlue = bgColor !== undefined ? bgColor.b : buffer[14];\n        const bgAlpha = bgOpacity !== undefined ? bgOpacity : buffer[15];\n\n        const targetOffset = this.m_drawCount * VERTICES_PER_QUAD;\n        for (let i = 0; i < textBufferObject.glyphs.length; ++i) {\n            const srcOffset = i * QUAD_VERTEX_MEMORY_FOOTPRINT;\n\n            const glyph = textBufferObject.glyphs[i];\n            if (!glyph.isInCache) {\n                return false;\n            }\n\n            const mirrored = buffer[srcOffset + 4] > buffer[srcOffset + VERTEX_BUFFER_STRIDE + 4];\n            const w = buffer[srcOffset + 6];\n            const bw = buffer[srcOffset + 7];\n\n            for (let j = 0; j < VERTICES_PER_QUAD; ++j) {\n                const x = buffer[srcOffset + j * VERTEX_BUFFER_STRIDE];\n                const y = buffer[srcOffset + j * VERTEX_BUFFER_STRIDE + 1];\n                this.m_positionAttribute.setXYZW(\n                    targetOffset + i * VERTICES_PER_QUAD + j,\n                    x * s * cosR + y * s * -sinR + offsetX,\n                    x * s * sinR + y * s * cosR + offsetY,\n                    buffer[srcOffset + j * VERTEX_BUFFER_STRIDE + 2] + offsetZ,\n                    buffer[srcOffset + j * VERTEX_BUFFER_STRIDE + 3] + rotSign * r\n                );\n                const mirroredUVIdx = mirrored ? ((j + 1) % 2) + Math.floor(j / 2) * 2 : j;\n                this.m_uvAttribute.setXYZW(\n                    targetOffset + i * VERTICES_PER_QUAD + j,\n                    glyph.dynamicTextureCoordinates[mirroredUVIdx].x,\n                    glyph.dynamicTextureCoordinates[mirroredUVIdx].y,\n                    w,\n                    (bw - w) / s + w\n                );\n                this.m_colorAttribute.setXYZW(\n                    targetOffset + i * VERTICES_PER_QUAD + j,\n                    red,\n                    green,\n                    blue,\n                    alpha\n                );\n                this.m_bgColorAttribute.setXYZW(\n                    targetOffset + i * VERTICES_PER_QUAD + j,\n                    bgRed,\n                    bgGreen,\n                    bgBlue,\n                    bgAlpha\n                );\n            }\n\n            this.m_indexBuffer.setX(\n                (this.m_drawCount + i) * INDICES_PER_QUAD,\n                (this.m_drawCount + i) * VERTICES_PER_QUAD\n            );\n            this.m_indexBuffer.setX(\n                (this.m_drawCount + i) * INDICES_PER_QUAD + 1,\n                (this.m_drawCount + i) * VERTICES_PER_QUAD + 1\n            );\n            this.m_indexBuffer.setX(\n                (this.m_drawCount + i) * INDICES_PER_QUAD + 2,\n                (this.m_drawCount + i) * VERTICES_PER_QUAD + 2\n            );\n            this.m_indexBuffer.setX(\n                (this.m_drawCount + i) * INDICES_PER_QUAD + 3,\n                (this.m_drawCount + i) * VERTICES_PER_QUAD + 2\n            );\n            this.m_indexBuffer.setX(\n                (this.m_drawCount + i) * INDICES_PER_QUAD + 4,\n                (this.m_drawCount + i) * VERTICES_PER_QUAD + 1\n            );\n            this.m_indexBuffer.setX(\n                (this.m_drawCount + i) * INDICES_PER_QUAD + 5,\n                (this.m_drawCount + i) * VERTICES_PER_QUAD + 3\n            );\n        }\n\n        this.m_drawCount += textBufferObject.glyphs.length;\n        return true;\n    }\n\n    /**\n     * Adds picking data for glyphs from the specified start until the last glyph added.\n     *\n     * @param startIdx First glyph index that this picking data is associated to.\n     * @param endIdx Last glyph index that this picking data is associated to.\n     * @param pickingData Picking data to be added.\n     */\n    addPickingData(startIdx: number, endIdx: number, pickingData: any): boolean {\n        if (this.m_pickingCount >= this.m_currentCapacity) {\n            return false;\n        }\n\n        this.m_pickingDataArray[this.m_pickingCount] = {\n            start: Math.min(startIdx, this.capacity),\n            end: Math.min(endIdx, this.capacity),\n            data: pickingData\n        };\n\n        ++this.m_pickingCount;\n        return true;\n    }\n\n    /**\n     * Fill the picking results for the pixel with the given screen coordinate. If multiple glyphs\n     * are found, the order of the results is unspecified.\n     *\n     * @param screenPosition Screen coordinate of picking position.\n     * @param pickCallback Callback to be called for every picked element.\n     */\n    pick(screenPosition: THREE.Vector2, pickCallback: (pickData: any | undefined) => void) {\n        for (const pickingData of this.m_pickingDataArray) {\n            if (pickingData === undefined) {\n                return;\n            }\n\n            for (let i = pickingData.start; i < pickingData.end; ++i) {\n                const positionIndex = i * VERTICES_PER_QUAD;\n\n                const minX = Math.min(\n                    this.m_positionAttribute.getX(positionIndex + 2),\n                    this.m_positionAttribute.getX(positionIndex + 1)\n                );\n                if (screenPosition.x < minX) {\n                    continue;\n                }\n\n                const maxX = Math.max(\n                    this.m_positionAttribute.getX(positionIndex + 2),\n                    this.m_positionAttribute.getX(positionIndex + 1)\n                );\n                if (screenPosition.x > maxX) {\n                    continue;\n                }\n\n                const minY = Math.min(\n                    this.m_positionAttribute.getY(positionIndex + 2),\n                    this.m_positionAttribute.getY(positionIndex + 1)\n                );\n                if (screenPosition.y < minY) {\n                    continue;\n                }\n\n                const maxY = Math.max(\n                    this.m_positionAttribute.getY(positionIndex + 2),\n                    this.m_positionAttribute.getY(positionIndex + 1)\n                );\n                if (screenPosition.y > maxY) {\n                    continue;\n                }\n\n                pickCallback(pickingData.data);\n                break;\n            }\n        }\n    }\n\n    /**\n     * Update the info with the memory footprint caused by objects owned by the `TextGeometry`.\n     *\n     * @param info The info object to increment with the values from this `TextGeometry`.\n     */\n    updateMemoryUsage(info: MemoryUsage) {\n        const numBytes =\n            this.m_vertexBuffer.count * NUM_BYTES_PER_FLOAT +\n            this.m_indexBuffer.count * NUM_BYTES_PER_INT32;\n        info.heapSize += numBytes;\n        info.gpuSize += numBytes;\n    }\n\n    private resizeBuffers(size: number) {\n        this.m_currentCapacity = size;\n\n        const newVertexBuffer = new Float32Array(size * QUAD_VERTEX_MEMORY_FOOTPRINT);\n        newVertexBuffer.set(this.m_vertexBuffer.array);\n        this.m_vertexBuffer = new THREE.InterleavedBuffer(newVertexBuffer, VERTEX_BUFFER_STRIDE);\n        this.m_vertexBuffer.setUsage(THREE.DynamicDrawUsage);\n        this.m_positionAttribute = new THREE.InterleavedBufferAttribute(this.m_vertexBuffer, 4, 0);\n        this.m_uvAttribute = new THREE.InterleavedBufferAttribute(this.m_vertexBuffer, 4, 4);\n        this.m_colorAttribute = new THREE.InterleavedBufferAttribute(this.m_vertexBuffer, 4, 8);\n        this.m_bgColorAttribute = new THREE.InterleavedBufferAttribute(this.m_vertexBuffer, 4, 12);\n\n        const newIndexBuffer = new Uint32Array(size * QUAD_INDEX_MEMORY_FOOTPRINT);\n        newIndexBuffer.set(this.m_indexBuffer.array);\n        this.m_indexBuffer = new THREE.BufferAttribute(newIndexBuffer, INDEX_BUFFER_STRIDE);\n        this.m_indexBuffer.setUsage(THREE.DynamicDrawUsage);\n\n        this.m_geometry.dispose();\n        this.m_geometry = new THREE.BufferGeometry();\n        this.m_geometry.setAttribute(\"position\", this.m_positionAttribute);\n        this.m_geometry.setAttribute(\"uv\", this.m_uvAttribute);\n        this.m_geometry.setAttribute(\"color\", this.m_colorAttribute);\n        this.m_geometry.setAttribute(\"bgColor\", this.m_bgColorAttribute);\n        this.m_geometry.setIndex(this.m_indexBuffer);\n\n        this.m_pickingDataArray.length = this.m_currentCapacity;\n\n        this.scene.remove(this.m_bgMesh, this.m_mesh);\n        this.m_mesh = new THREE.Mesh(this.m_geometry, this.m_mesh.material);\n        this.m_bgMesh = new THREE.Mesh(this.m_geometry, this.m_bgMesh.material);\n        this.m_mesh.renderOrder = Number.MAX_SAFE_INTEGER;\n        this.m_bgMesh.renderOrder = Number.MAX_SAFE_INTEGER - 1;\n        this.m_mesh.frustumCulled = false;\n        this.m_bgMesh.frustumCulled = false;\n        this.scene.add(this.m_bgMesh, this.m_mesh);\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nimport { GlyphData } from \"../rendering/GlyphData\";\nimport { FontUnit, FontVariant } from \"../rendering/TextStyle\";\nimport { UnicodeUtils } from \"../utils/UnicodeUtils\";\n\n/**\n * Collection of different constants and utility functions used by [[Typesetter]]s.\n */\nexport namespace TypesettingUtils {\n    /**\n     * Ratio between EMs and Pixels.\n     */\n    export const EM_TO_PX = 16.0;\n\n    /**\n     * Ratio between Points and Pixels.\n     */\n    export const PT_TO_PX = 1.25;\n\n    /**\n     * Angle used when emulating italic fonts (oblique).\n     */\n    export const OBLIQUE_ANGLE = 0.174533;\n\n    /**\n     * Horizontal offset used when emulating italic fonts (oblique).\n     */\n    export const OBLIQUE_OFFSET = Math.tan(OBLIQUE_ANGLE);\n\n    /**\n     * Convert between any size specified in any [[FontUnit]] to pixels.\n     *\n     * @param size Font size (specified in `unit`).\n     * @param unit Size unit.\n     * @param originalSize Original size (pixels)\n     *\n     * @returns Pixel size.\n     */\n    export function getPixelSize(size: number, unit: FontUnit, originalSize: number) {\n        let result = size;\n        switch (unit) {\n            case FontUnit.Em:\n                result *= EM_TO_PX;\n                break;\n            case FontUnit.Point:\n                result *= PT_TO_PX;\n                break;\n            case FontUnit.Percent:\n                result *= (1.0 / 100) * originalSize;\n                break;\n        }\n        return result;\n    }\n\n    /**\n     * Gets the scale applied to a certain character when using the [[FontVariant]].`SmallCaps`.\n     *\n     * @param glyphs Array containing [[TransformedGlyphData]].\n     * @param index Index to `glyphDataArray`.\n     * @param fontVariant Currently active [[FontVariant]].\n     *\n     * @returns Glyph `SmallCaps` scale.\n     */\n    export function getSmallCapsScale(\n        glyphs: GlyphData[],\n        smallCapsTransformations: boolean[],\n        index: number,\n        fontVariant: FontVariant\n    ): number {\n        const isSmallCaps =\n            smallCapsTransformations[index] && fontVariant === FontVariant.SmallCaps;\n        return isSmallCaps\n            ? glyphs[index].font.metrics.xHeight / glyphs[index].font.metrics.capHeight\n            : 1.0;\n    }\n\n    /**\n     * Returns the first strong direction (LTR or RTL) found for a given array of [[GlyphData]].\n     *\n     * @param glyphs Array containing [[GlyphData]].\n     * @param offset `glyphDataArray` offset.\n     *\n     * @returns Strong direction.\n     */\n    export function getDirection(glyphs: GlyphData[], offset: number): UnicodeUtils.Direction {\n        let result = UnicodeUtils.Direction.LTR;\n        let index = offset;\n        while (\n            glyphs[index].direction !== UnicodeUtils.Direction.LTR &&\n            glyphs[index].direction !== UnicodeUtils.Direction.RTL &&\n            index < glyphs.length - 1\n        ) {\n            ++index;\n        }\n\n        if (Math.abs(glyphs[index].direction) === 1.0) {\n            result = glyphs[index].direction;\n        }\n        return result;\n    }\n\n    /**\n     * Computes the transformation matrix for a glyph.\n     *\n     * @param transform Matrix used to store the results.\n     * @param position Glyph' position.\n     * @param scale Glyph' scale.\n     * @param rotation [[TextCanvas]] rotation.\n     * @param localRotation Glyph' local rotation.\n     */\n    export function computeGlyphTransform(\n        transform: THREE.Matrix3,\n        position: THREE.Vector3,\n        scale: number,\n        rotation: number,\n        localRotation: number\n    ): void {\n        const cosAngle = Math.cos(rotation);\n        const sinAngle = Math.sin(rotation);\n        const localCosAngle = Math.cos(localRotation);\n        const localSinAngle = Math.sin(localRotation);\n        transform.set(\n            scale * localCosAngle,\n            scale * -localSinAngle,\n            cosAngle * position.x - sinAngle * position.y,\n            scale * localSinAngle,\n            scale * localCosAngle,\n            sinAngle * position.x + cosAngle * position.y,\n            0,\n            0,\n            1.0\n        );\n    }\n\n    /**\n     * Updates the supplied bounds with the computed screen-space corners for a given glyph.\n     *\n     * @param corners Glyph' corners.\n     * @param globalBounds Global text bounds.\n     * @param individualBounds Individual per-character bounds.\n     */\n    export function updateBounds(\n        corners: THREE.Vector3[],\n        globalBounds: THREE.Box2,\n        individualBounds?: { array: THREE.Box2[]; offset: number }\n    ): void {\n        const minX = Math.min(corners[0].x, corners[1].x, corners[2].x, corners[3].x);\n        const maxX = Math.max(corners[0].x, corners[1].x, corners[2].x, corners[3].x);\n        const minY = Math.min(corners[0].y, corners[1].y, corners[2].y, corners[3].y);\n        const maxY = Math.max(corners[0].y, corners[1].y, corners[2].y, corners[3].y);\n\n        if (individualBounds !== undefined) {\n            if (individualBounds.array[individualBounds.offset] !== undefined) {\n                individualBounds.array[individualBounds.offset].min.set(minX, minY);\n                individualBounds.array[individualBounds.offset].max.set(maxX, maxY);\n            } else {\n                individualBounds.array.push(\n                    new THREE.Box2(new THREE.Vector2(minX, minY), new THREE.Vector2(maxX, maxY))\n                );\n            }\n            ++individualBounds.offset;\n        }\n\n        globalBounds.min.set(\n            Math.min(globalBounds.min.x, minX),\n            Math.min(globalBounds.min.y, minY)\n        );\n        globalBounds.max.set(\n            Math.max(globalBounds.max.x, maxX),\n            Math.max(globalBounds.max.y, maxY)\n        );\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nimport { ColorUtils, Expr, getPropertyValue, Value } from \"@here/harp-datasource-protocol\";\nimport { disableBlending, enableBlending } from \"@here/harp-materials\";\nimport { evaluateColorProperty } from \"./DecodedTileHelpers\";\nimport { MapView } from \"./MapView\";\n\n/**\n * @hidden\n *\n * Pick of [[MapView]] properties required to update materials used [[MapMaterialAdapter]].\n */\nexport type MapAdapterUpdateEnv = Pick<MapView, \"env\" | \"frameNumber\">;\n\n/**\n * @hidden\n *\n * Custom, callback based property evaluator used by [[MapObjectAdapter]] to evaluate dynamic\n * properties of object/material.\n */\nexport type StylePropertyEvaluator = (context: MapAdapterUpdateEnv) => Value;\n\n/**\n * @hidden\n *\n * Styled properties of material managed by [[MapMaterialAdapter]].\n */\nexport interface StyledProperties {\n    [name: string]: Expr | StylePropertyEvaluator | Value | undefined;\n}\n\n/**\n * @hidden\n *\n * [[MapView]] specific data assigned to `THREE.Material` instance in installed in `userData`.\n *\n * [[MapMaterialAdapter]] is registered in `usedData.mapAdapter` property of `THREE.Material`.\n */\nexport class MapMaterialAdapter {\n    /**\n     * Resolve `MapMaterialAdapter` associated with `material`.\n     */\n    static get(material: THREE.Material): MapMaterialAdapter | undefined {\n        const mapAdapter = material.userData?.mapAdapter;\n        if (mapAdapter instanceof MapMaterialAdapter) {\n            return mapAdapter;\n        } else if (mapAdapter !== undefined) {\n            // NOTE: we can rebuild MapMaterialAdapter here if userData.mapAdapter contains\n            // stylesed etc, this can be done to rebuild previously saved scene\n            return undefined;\n        } else {\n            return undefined;\n        }\n    }\n\n    static install(objData: MapMaterialAdapter): MapMaterialAdapter {\n        if (!objData.material.userData) {\n            objData.material.userData = {};\n        }\n        return (objData.material.userData.mapAdapter = objData);\n    }\n\n    static create(\n        material: THREE.Material,\n        styledProperties: StyledProperties\n    ): MapMaterialAdapter {\n        return MapMaterialAdapter.install(new MapMaterialAdapter(material, styledProperties));\n    }\n\n    static ensureUpdated(material: THREE.Material, context: MapAdapterUpdateEnv): boolean {\n        return MapMaterialAdapter.get(material)?.ensureUpdated(context) ?? false;\n    }\n\n    /**\n     * Associated material object.\n     */\n    readonly material: THREE.Material;\n\n    /**\n     * Styled material properties.\n     *\n     * Usually pick from [[Technique]] attributes that constitute material properties managed\n     * by this adapter.\n     */\n    readonly styledProperties: StyledProperties;\n\n    /**\n     * Current values of styled material properties.\n     *\n     * Actual values valid for scope of one frame updated in [[ensureUpdated]].\n     */\n    readonly currentStyledProperties: { [name: string]: Value | undefined };\n\n    private m_lastUpdateFrameNumber = -1;\n    private m_dynamicProperties: Array<[string, Expr | StylePropertyEvaluator]>;\n\n    constructor(material: THREE.Material, styledProperties: StyledProperties) {\n        this.material = material;\n        this.styledProperties = styledProperties;\n\n        this.currentStyledProperties = {};\n        this.m_dynamicProperties = [];\n        for (const propName in styledProperties) {\n            if (!styledProperties.hasOwnProperty(propName)) {\n                continue;\n            }\n            const propDefinition = styledProperties![propName];\n            if (Expr.isExpr(propDefinition) || typeof propDefinition === \"function\") {\n                this.m_dynamicProperties.push([propName, propDefinition as any]);\n            } else {\n                this.currentStyledProperties[propName] = propDefinition;\n            }\n        }\n        this.setupStaticProperties();\n    }\n\n    /**\n     * Serialize contents.\n     *\n     * `THREE.Material.userData` is serialized during `clone`/`toJSON`, so we need to ensure that\n     * we emit only \"data\" set of this object.\n     */\n    toJSON() {\n        return { styledProperties: this.styledProperties };\n    }\n\n    /**\n     * Ensure that underlying object is updated to current state of [[MapView]].\n     *\n     * Updates dynamically styled properties of material by evaluating scene dependent expressions.\n     *\n     * Executes updates only once per frame basing on [[MapView.frameNumber]].\n     *\n     * @returns `true` if object performed some kind of update, `false` if no update was needed.\n     */\n    ensureUpdated(context: MapAdapterUpdateEnv) {\n        if (this.m_lastUpdateFrameNumber === context.frameNumber) {\n            return false;\n        }\n        this.m_lastUpdateFrameNumber = context.frameNumber;\n\n        return this.updateDynamicProperties(context);\n    }\n\n    /**\n     * Applies static properties to target material.\n     */\n    private setupStaticProperties() {\n        let updateBaseColor = false;\n        for (const propName in this.styledProperties) {\n            if (!this.styledProperties.hasOwnProperty(propName)) {\n                continue;\n            }\n            const currentValue = this.currentStyledProperties[propName];\n            if (currentValue === undefined || currentValue === null) {\n                continue;\n            }\n            if (propName === \"color\" || propName === \"opacity\") {\n                updateBaseColor = true;\n            } else {\n                this.applyMaterialGenericProp(propName, currentValue);\n            }\n        }\n        if (updateBaseColor) {\n            const color = (this.currentStyledProperties.color as number) ?? 0xff0000;\n            const opacity = (this.currentStyledProperties.opacity as number) ?? 1;\n            this.applyMaterialBaseColor(color, opacity);\n        }\n    }\n\n    /**\n     * Applies static properties to target material.\n     */\n    private updateDynamicProperties(context: MapAdapterUpdateEnv) {\n        let somethingChanged = false;\n        if (this.m_dynamicProperties.length > 0) {\n            let updateBaseColor = false;\n\n            for (const [propName, propDefinition] of this.m_dynamicProperties) {\n                const newValue = Expr.isExpr(propDefinition)\n                    ? getPropertyValue(propDefinition, context.env)\n                    : propDefinition(context);\n                if (newValue === this.currentStyledProperties[propName]) {\n                    continue;\n                }\n                this.currentStyledProperties[propName] = newValue;\n\n                // `color` and `opacity` are special properties to support RGBA\n                if (propName === \"color\" || propName === \"opacity\") {\n                    updateBaseColor = true;\n                } else {\n                    this.applyMaterialGenericProp(propName, newValue);\n                    somethingChanged = true;\n                }\n            }\n\n            if (updateBaseColor) {\n                const color = this.currentStyledProperties.color ?? 0xff0000;\n                const opacity = (this.currentStyledProperties.opacity as number) ?? 1;\n                this.applyMaterialBaseColor(color, opacity);\n                somethingChanged = true;\n            }\n        }\n        return somethingChanged;\n    }\n\n    private applyMaterialGenericProp(propName: string, value: Value) {\n        const m = this.material as any;\n        if (m[propName] instanceof THREE.Color) {\n            let colorValue = value;\n            if (typeof colorValue !== \"number\") {\n                const parsed = evaluateColorProperty(colorValue);\n                if (parsed === undefined) {\n                    return;\n                }\n                colorValue = parsed;\n            }\n            const rgbValue = ColorUtils.removeAlphaFromHex(colorValue);\n            m[propName].set(rgbValue);\n        } else {\n            m[propName] = value;\n        }\n    }\n\n    private applyMaterialBaseColor(color: Value, opacity: number | undefined) {\n        if (typeof color !== \"number\") {\n            const parsed = evaluateColorProperty(color);\n            if (parsed === undefined) {\n                return;\n            }\n            color = parsed;\n        }\n        const { r, g, b, a } = ColorUtils.getRgbaFromHex(color ?? 0xff0000);\n        const actualOpacity = a * THREE.MathUtils.clamp(opacity ?? 1, 0, 1);\n        this.material.opacity = actualOpacity;\n        (this.material as any).color.setRGB(r, g, b);\n\n        const opaque = actualOpacity >= 1.0;\n        if (!opaque) {\n            enableBlending(this.material);\n        } else {\n            disableBlending(this.material);\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\nimport { PickingRaycaster } from \"./PickingRaycaster\";\n\n/**\n * `MapViewPoints` is a class to extend for the `\"circles\"` and `\"squares\"` [[Technique]]s to\n * implement raycasting of [[THREE.Points]] as expected in [[MapView]], that are in screen space. It\n * copies the behaviour of the `raycast` method in [[THREE.Points]] and dispatches it to its\n * children classes, [[Circles]] and [[Squares]], who hold the intersection testing in the\n * `testPoint` method. This class also has the ability to dismiss the testing via the\n * `enableRayTesting` flag.\n *\n * Its main motivation is to handle the point styles of XYZ projects.\n *\n * @see https://github.com/mrdoob/three.js/blob/master/src/objects/Points.js\n */\nexport abstract class MapViewPoints extends THREE.Points {\n    /**\n     * This allows to discard the ray testing.\n     */\n    enableRayTesting: boolean = true;\n\n    /**\n     * Implements the intersection testing in screen space between the drawn points and the ray. The\n     * drawing of the points being different between [[Circles]] and [[Squares]], this method is\n     * implemented in these child classes.\n     *\n     * @param point The point to test.\n     * @param screenPosition The point position on screen.\n     * @param pickCoordinates The picking position on screen.\n     * @param index The index of the point in the [[THREE.Geometry]].\n     * @param distance The distance between the point and the ray origin.\n     * @param intersects The results array.\n     */\n    abstract testPoint(\n        point: THREE.Vector3,\n        screenPosition: THREE.Vector2,\n        pickCoordinates: THREE.Vector2,\n        index: number,\n        distance: number,\n        intersects: THREE.Intersection[]\n    ): void;\n\n    /**\n     * This method is similar to the original method `raycast` in [[THREE.Points]] except that it\n     * then calls the tailored `testPoint` method in the children classes to test intersections\n     * depending on whether the points are circles or squares, which [[THREE.Points]] cannot do.\n     *\n     * @param raycaster The raycaster.\n     * @param intersects The array to fill with the results.\n     */\n    raycast(raycaster: PickingRaycaster, intersects: THREE.Intersection[]) {\n        if (!this.enableRayTesting) {\n            return;\n        }\n\n        const geometry = this.geometry;\n        const matrixWorld = this.matrixWorld;\n        const screenCoords = raycaster.ray.origin\n            .clone()\n            .add(raycaster.ray.direction)\n            .project(raycaster.camera);\n        const mouseCoords = new THREE.Vector2(\n            Math.ceil(((screenCoords.x + 1) / 2) * raycaster.width),\n            Math.ceil(((1 - screenCoords.y) / 2) * raycaster.height)\n        );\n\n        if (geometry instanceof THREE.BufferGeometry) {\n            const point = new THREE.Vector3();\n            const index = geometry.index;\n            const attributes = geometry.attributes;\n            const positions = attributes.position.array;\n            if (index !== null) {\n                const indices = index.array;\n                for (let i = 0, il = indices.length; i < il; i++) {\n                    const a = indices[i];\n                    point.fromArray(positions as number[], a * 3);\n                    const pointInfo = getPointInfo(point, matrixWorld, raycaster);\n                    if (pointInfo.pointIsOnScreen) {\n                        this.testPoint(\n                            point,\n                            pointInfo.absoluteScreenPosition!,\n                            mouseCoords,\n                            i,\n                            pointInfo.distance!,\n                            intersects\n                        );\n                    }\n                }\n            } else {\n                for (let i = 0, l = positions.length / 3; i < l; i++) {\n                    point.fromArray(positions as number[], i * 3);\n                    const pointInfo = getPointInfo(point, matrixWorld, raycaster);\n                    if (pointInfo.pointIsOnScreen) {\n                        this.testPoint(\n                            point,\n                            pointInfo.absoluteScreenPosition!,\n                            mouseCoords,\n                            i,\n                            pointInfo.distance!,\n                            intersects\n                        );\n                    }\n                }\n            }\n        } else {\n            const vertices = geometry.vertices;\n            for (let index = 0; index < vertices.length; index++) {\n                const point = vertices[index];\n                const pointInfo = getPointInfo(point, matrixWorld, raycaster);\n                if (pointInfo.pointIsOnScreen) {\n                    this.testPoint(\n                        point,\n                        pointInfo.absoluteScreenPosition!,\n                        mouseCoords,\n                        index,\n                        pointInfo.distance!,\n                        intersects\n                    );\n                }\n            }\n        }\n    }\n}\n\nfunction getPointInfo(\n    point: THREE.Vector3,\n    matrixWorld: THREE.Matrix4,\n    raycaster: PickingRaycaster\n): {\n    pointIsOnScreen: boolean;\n    absoluteScreenPosition?: THREE.Vector2;\n    distance?: number;\n} {\n    const worldPosition = point.clone();\n    worldPosition.applyMatrix4(matrixWorld);\n    const distance = worldPosition.distanceTo(raycaster.ray.origin);\n    worldPosition.project(raycaster.camera);\n    const relativeScreenPosition = new THREE.Vector2(worldPosition.x, worldPosition.y);\n    const pointIsOnScreen =\n        relativeScreenPosition.x < 1 &&\n        relativeScreenPosition.x > -1 &&\n        relativeScreenPosition.y < 1 &&\n        relativeScreenPosition.y > -1;\n    if (pointIsOnScreen) {\n        worldPosition.x = ((worldPosition.x + 1) / 2) * raycaster.width;\n        worldPosition.y = ((1 - worldPosition.y) / 2) * raycaster.height;\n        const absoluteScreenPosition = new THREE.Vector2(worldPosition.x, worldPosition.y);\n        return {\n            absoluteScreenPosition,\n            pointIsOnScreen,\n            distance\n        };\n    }\n    return {\n        pointIsOnScreen\n    };\n}\n\n/**\n * Point object that implements the raycasting of circles in screen space.\n */\nexport class Circles extends MapViewPoints {\n    /** @override */\n    testPoint(\n        point: THREE.Vector3,\n        screenPosition: THREE.Vector2,\n        pickCoordinates: THREE.Vector2,\n        index: number,\n        distance: number,\n        intersects: THREE.Intersection[]\n    ) {\n        const dx = screenPosition.x - pickCoordinates.x;\n        const dy = screenPosition.y - pickCoordinates.y;\n        const dist = Math.sqrt(dx * dx + dy * dy);\n        const radius = (this.material as THREE.PointsMaterial).size / 2;\n\n        if (dist <= radius) {\n            intersects.push({\n                point,\n                distance,\n                index,\n                object: this\n            });\n        }\n    }\n}\n\n/**\n * Point object that implements the raycasting of squares in screen space.\n */\nexport class Squares extends MapViewPoints {\n    /** @override */\n    testPoint(\n        point: THREE.Vector3,\n        screenPosition: THREE.Vector2,\n        pickCoordinates: THREE.Vector2,\n        index: number,\n        distance: number,\n        intersects: THREE.Intersection[]\n    ) {\n        const dx = screenPosition.x - pickCoordinates.x;\n        const dy = screenPosition.y - pickCoordinates.y;\n        const halfSize = (this.material as THREE.PointsMaterial).size / 2;\n\n        if (Math.abs(dx) <= halfSize && Math.abs(dy) <= halfSize) {\n            intersects.push({\n                point,\n                distance,\n                index,\n                object: this\n            });\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\n/**\n * Usage in Modules:\n *\n * import { DebugContext, debugContext } from \"../lib/DebugContext\";\n *\n * Declare a debug option:\n * debugContext.settings.setOption(\"MY_DBG_OPT\", \"default\");\n *\n * Access an option:\n * if (debugContext.settings.option(\"MY_DBG_OPT\")) {\n *     ...\n * }\n *\n *\n * Access in browser console:\n *\n * window.__debugContext.settings.addEventListener(\"MY_DBG_OPT\", function(event) {\n *  console.log(\"name:\", event.type, \"value:\", event.value)});\n *\n */\n\n/**\n * Allows access to the global `window` object here. The constructor of [[DebugContext]] adds the\n * instance to `window`, so it is available from the browser console.\n */\n\ninterface DebugInfo {\n    __debugContext?: DebugContext;\n}\n\nconst isNode = typeof window === \"undefined\";\n\n/**\n * A `DebugOption` is a pair that consists of an option value and an array of change listeners.\n * Listeners are called up when setting the option's value.\n */\nclass DebugOption extends THREE.EventDispatcher {\n    static SET_EVENT_TYPE: string = \"set\";\n\n    /**\n     * Constructs the `DebugOption`.\n     *\n     * @param value The value of the option.\n     */\n    constructor(public value: any) {\n        super();\n    }\n\n    /**\n     * Updates the value of a given option.\n     *\n     * @param value The new value for the option.\n     * @param name The name of the option to set.\n     */\n    set(value: any, name: string) {\n        this.value = value;\n        this.dispatchEvent({ type: DebugOption.SET_EVENT_TYPE, name, value });\n    }\n}\n\n/**\n * Maintains a map of [[DebugOption]]s. You can add listeners to debug options by passing their\n * names.\n */\nexport class DebugContext {\n    private m_optionsMap: Map<string, DebugOption>;\n\n    /**\n     * Builds a `DebugContext`.\n     */\n    constructor() {\n        this.m_optionsMap = new Map<string, DebugOption>();\n\n        // If we have a `window` object, we store the context in it to make it available in the\n        // console.\n        if (!isNode && typeof window !== \"undefined\" && window) {\n            const debugInfo = window as DebugInfo;\n            debugInfo.__debugContext = this;\n        }\n    }\n\n    /**\n     * Sets the value of an option. Calls change listeners of that option, even if the value has\n     * not been changed. The change listeners provided here are not called during this set\n     * operation.\n     *\n     * @param name Name of the option.\n     * @param value Value of the option.\n     */\n    setValue(name: string, value: any): void {\n        let opt = this.m_optionsMap.get(name);\n        if (!opt) {\n            opt = new DebugOption(value);\n            this.m_optionsMap.set(name, opt);\n        } else {\n            opt.set(value, name);\n        }\n    }\n\n    /**\n     * Gets the option value.\n     *\n     * @param name Name of option.\n     */\n    getValue(name: string): any {\n        const opt = this.m_optionsMap.get(name);\n        return opt ? opt.value : undefined;\n    }\n\n    /**\n     * Determines if the option is registered.\n     *\n     * @param name Name of option.\n     */\n    hasOption(name: string): boolean {\n        return this.m_optionsMap.get(name) !== undefined;\n    }\n\n    /**\n     * Adds a listener to a debug option.\n     *\n     * @param name Name of the option that requires a listener.\n     * @param listener The listener function to add.\n     */\n    addEventListener(name: string, listener: (event: THREE.Event) => void) {\n        const opt = this.m_optionsMap.get(name);\n        if (opt) {\n            opt.addEventListener(DebugOption.SET_EVENT_TYPE, listener);\n        } else {\n            throw Error(\"Unknown option: \" + name);\n        }\n    }\n\n    /**\n     * Checks for a listener in a debug option.\n     *\n     * @param name Name of the option to check for.\n     * @param listener The listener function to check for.\n     */\n    hasEventListener(name: string, listener: (event: THREE.Event) => void) {\n        const opt = this.m_optionsMap.get(name);\n        if (opt) {\n            return opt.hasEventListener(DebugOption.SET_EVENT_TYPE, listener);\n        } else {\n            throw Error(\"Unknown option: \" + name);\n        }\n    }\n\n    /**\n     * Removes a listener from a debug option.\n     *\n     * @param name Name of the option from which to remove a listener.\n     * @param listener The listener function to remove.\n     */\n    removeEventListener(name: string, listener: (event: THREE.Event) => void) {\n        const opt = this.m_optionsMap.get(name);\n        if (opt) {\n            opt.removeEventListener(DebugOption.SET_EVENT_TYPE, listener);\n        } else {\n            throw Error(\"Unknown option: \" + name);\n        }\n    }\n\n    /**\n     * Provides access to the options map. This method is useful for creating an automatic\n     * browser GUI.\n     */\n    get options(): Map<string, any> {\n        return this.m_optionsMap;\n    }\n\n    /**\n     * Clears away all debug options. Currently, `THREE.EventDispatcher` does not provide an API\n     * to remove all event listeners.\n     */\n    clear() {\n        this.m_optionsMap.forEach(option => {\n            option.set(undefined, \"\");\n        });\n    }\n}\n\nexport const debugContext = new DebugContext();\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeometryType, getFeatureId, Technique } from \"@here/harp-datasource-protocol\";\nimport * as THREE from \"three\";\n\nimport { OrientedBox3 } from \"@here/harp-geoutils\";\nimport { MapView } from \"./MapView\";\nimport { MapViewPoints } from \"./MapViewPoints\";\nimport { TileFeatureData } from \"./Tile\";\n\n/**\n * Describes the general type of a picked object.\n */\nexport enum PickObjectType {\n    /**\n     * Unspecified.\n     */\n    Unspecified = 0,\n\n    /**\n     * A point object.\n     */\n    Point,\n\n    /**\n     * A line object.\n     */\n    Line,\n\n    /**\n     * An area object.\n     */\n    Area,\n\n    /**\n     * The text part of a [[TextElement]]\n     */\n    Text,\n\n    /**\n     * The Icon of a [[TextElement]].\n     */\n    Icon,\n\n    /**\n     * Any general 3D object, for example, a landmark.\n     */\n    Object3D\n}\n\n/**\n * A general pick result. You can access the details of a picked geometry from the property\n * `intersection`, which is available if a geometry was hit. If a road was hit, a [[RoadPickResult]]\n * is returned, which has additional information, but no `intersection`.\n */\nexport interface PickResult {\n    /**\n     * General type of object.\n     */\n    type: PickObjectType;\n\n    /**\n     * A 2D point in screen coordinates, or a 3D point in world coordinates.\n     */\n    point: THREE.Vector2 | THREE.Vector3;\n\n    /**\n     * Distance from the camera to the picking point; used to determine the closest object.\n     */\n    distance: number;\n\n    /**\n     * An optional feature ID of the picked object; typically applies to the Optimized Map\n     * Vector (OMV) format.\n     */\n    featureId?: number;\n\n    /**\n     * Defined for geometry only.\n     */\n    intersection?: THREE.Intersection;\n\n    /**\n     * Defined for roads or if `enableTechniqueInfo` option is enabled.\n     */\n    technique?: Technique;\n\n    /**\n     * Optional user data that has been defined in the picked object. This object points directly to\n     * information contained in the original [[TileFeatureData]] stored in [[MapView]], and should\n     * not be modified.\n     */\n    userData?: any;\n}\n\nconst tmpOBB = new OrientedBox3();\n\n/**\n * Handles the picking of scene geometry and roads.\n * @internal\n */\nexport class PickHandler {\n    constructor(\n        readonly mapView: MapView,\n        readonly camera: THREE.Camera,\n        public enablePickTechnique = false\n    ) {}\n\n    /**\n     * Does a raycast on all objects in the scene; useful for picking. This function is Limited to\n     * objects that THREE.js can raycast. However, any solid lines that have their geometry in the\n     * shader cannot be tested for intersection.\n     *\n     * @param x The X position in CSS/client coordinates, without the applied display ratio.\n     * @param y The Y position in CSS/client coordinates, without the applied display ratio.\n     * @returns the list of intersection results.\n     */\n    intersectMapObjects(x: number, y: number): PickResult[] {\n        const worldPos = this.mapView.getNormalizedScreenCoordinates(x, y);\n        const rayCaster = this.mapView.raycasterFromScreenPoint(x, y);\n        const pickResults: PickResult[] = [];\n\n        if (this.mapView.textElementsRenderer !== undefined) {\n            const { clientWidth, clientHeight } = this.mapView.canvas;\n            const screenX = worldPos.x * clientWidth * 0.5;\n            const screenY = worldPos.y * clientHeight * 0.5;\n            const scenePosition = new THREE.Vector2(screenX, screenY);\n            this.mapView.textElementsRenderer.pickTextElements(scenePosition, pickResults);\n        }\n\n        const intersects: THREE.Intersection[] = [];\n        const tileList = this.mapView.visibleTileSet.dataSourceTileList;\n        tileList.forEach(dataSourceTileList => {\n            dataSourceTileList.renderedTiles.forEach(tile => {\n                tmpOBB.copy(tile.boundingBox);\n                tmpOBB.position.sub(this.mapView.worldCenter);\n                // This offset shifts the box by the given tile offset, see renderTileObjects in\n                // MapView\n                const worldOffsetX = tile.computeWorldOffsetX();\n                tmpOBB.position.x += worldOffsetX;\n\n                if (tmpOBB.intersectsRay(rayCaster.ray) !== undefined) {\n                    rayCaster.intersectObjects(tile.objects, true, intersects);\n                }\n            });\n        });\n\n        for (const intersect of intersects) {\n            const pickResult: PickResult = {\n                type: PickObjectType.Unspecified,\n                point: intersect.point,\n                distance: intersect.distance,\n                intersection: intersect\n            };\n\n            if (\n                intersect.object.userData === undefined ||\n                intersect.object.userData.feature === undefined\n            ) {\n                pickResults.push(pickResult);\n                continue;\n            }\n\n            const featureData: TileFeatureData = intersect.object.userData.feature;\n            if (this.enablePickTechnique) {\n                pickResult.technique = intersect.object.userData.technique;\n            }\n\n            this.addObjInfo(featureData, intersect, pickResult);\n\n            if (featureData.objInfos !== undefined) {\n                const featureId =\n                    featureData.objInfos.length === 1\n                        ? getFeatureId(featureData.objInfos[0])\n                        : undefined;\n                pickResult.featureId = featureId;\n            }\n\n            let pickObjectType: PickObjectType;\n\n            switch (featureData.geometryType) {\n                case GeometryType.Point:\n                case GeometryType.Text:\n                    pickObjectType = PickObjectType.Point;\n                    break;\n                case GeometryType.Line:\n                case GeometryType.ExtrudedLine:\n                case GeometryType.SolidLine:\n                case GeometryType.TextPath:\n                    pickObjectType = PickObjectType.Line;\n                    break;\n                case GeometryType.Polygon:\n                case GeometryType.ExtrudedPolygon:\n                    pickObjectType = PickObjectType.Area;\n                    break;\n                case GeometryType.Object3D:\n                    pickObjectType = PickObjectType.Object3D;\n                    break;\n                default:\n                    pickObjectType = PickObjectType.Unspecified;\n            }\n\n            pickResult.type = pickObjectType;\n            pickResults.push(pickResult);\n        }\n\n        pickResults.sort((a: PickResult, b: PickResult) => {\n            return a.distance - b.distance;\n        });\n\n        return pickResults;\n    }\n\n    private addObjInfo(\n        featureData: TileFeatureData,\n        intersect: THREE.Intersection,\n        pickResult: PickResult\n    ) {\n        if (featureData.objInfos === undefined) {\n            return;\n        }\n\n        if (pickResult.intersection!.object instanceof MapViewPoints) {\n            pickResult.userData = featureData.objInfos[intersect.index!];\n            return;\n        }\n\n        if (\n            featureData.starts === undefined ||\n            featureData.starts.length === 0 ||\n            (intersect.faceIndex === undefined && intersect.index === undefined)\n        ) {\n            return;\n        }\n\n        if (featureData.starts.length === 1) {\n            pickResult.userData = featureData.objInfos[0];\n            return;\n        }\n\n        const intersectIndex =\n            intersect.faceIndex !== undefined ? intersect.faceIndex * 3 : intersect.index!;\n\n        // TODO: Implement binary search.\n        let objInfosIndex = 0;\n        for (const featureStartIndex of featureData.starts) {\n            if (featureStartIndex > intersectIndex) {\n                break;\n            }\n            objInfosIndex++;\n        }\n        pickResult.userData = featureData.objInfos[objInfosIndex - 1];\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\n/**\n * Use `ColorCache` to reuse a color specified by name and save allocation as well as\n * setup time.\n *\n * Implemented as a singleton. Do not modify colors after getting them from the `ColorCache`.\n */\nexport class ColorCache {\n    /**\n     * Return instance of `ColorCache`.\n     */\n    static get instance() {\n        return this.m_instance;\n    }\n\n    private static m_instance: ColorCache = new ColorCache();\n    private m_map: Map<string, THREE.Color> = new Map();\n\n    /**\n     * Returns the color for the given `colorCode`. This function may reuse a previously generated\n     * color, so you cannot modify the contents of the color.\n     *\n     * @param colorCode ThreeJS color code or name. You must provide a valid color code or name,\n     * as this function does not do any validation.\n     */\n    getColor(colorCode: string | number): THREE.Color {\n        if (typeof colorCode === \"number\") {\n            colorCode = \"#\" + colorCode.toString(16).padStart(6, \"0\");\n        }\n\n        let color = this.m_map.get(colorCode);\n        if (color !== undefined) {\n            return color;\n        }\n        color = new THREE.Color(colorCode);\n        this.m_map.set(colorCode, color);\n        return color;\n    }\n\n    /**\n     * Returns the number of elements in the cache.\n     */\n    get size(): number {\n        return this.m_map.size;\n    }\n\n    /**\n     * Clears the cache. Only references to the THREE.Color are removed from the cache.\n     * Consequently, clearing the cache does not cause any negative visual impact.\n     */\n    clear(): void {\n        this.m_map.clear();\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { ViewRanges } from \"@here/harp-datasource-protocol/lib/ViewRanges\";\nimport { EarthConstants, Projection, ProjectionType } from \"@here/harp-geoutils\";\nimport { assert } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\nimport { ElevationProvider } from \"./ElevationProvider\";\nimport { MapViewUtils } from \"./Utils\";\n\nconst epsilon = 0.000001;\n\nexport interface ClipPlanesEvaluator {\n    /**\n     * Minimum elevation to be rendered, values beneath the sea level are negative.\n     */\n    minElevation: number;\n\n    /**\n     * Set maximum elevation to be rendered, values above sea level are positive.\n     */\n    maxElevation: number;\n\n    /**\n     * Compute near and far clipping planes distance.\n     *\n     * Evaluation method should be called on every frame  and camera clip planes updated.\n     * This is related to evaluator implementation and its input data, that may suddenly change\n     * such as camera position or angle, projection type or so.\n     * Some evaluators may not depend on all or even any of input objects, but to preserve\n     * compatibility with any evaluator type it is strongly recommended to update on every frame.\n     * @note The camera clipping planes (near/far properties) aren't automatically updated\n     * via #evaluateClipPlanes() call, user should do it manually if needed.\n     * @param camera The [[THREE.Camera]] in use.\n     * @param projection The geo-projection currently used for encoding geographic data.\n     * @param elevationProvider The optional elevation provider for fine tuned range calculation,\n     * taking into account terrain variability and unevenness.\n     *\n     */\n    evaluateClipPlanes(\n        camera: THREE.Camera,\n        projection: Projection,\n        elevationProvider?: ElevationProvider\n    ): ViewRanges;\n}\n\n/**\n * Simplest camera clip planes evaluator, interpolates near/far planes based on ground distance.\n *\n * At general ground distance to camera along the surface normal is used as reference point for\n * planes evaluation, where near plane distance is set as fraction of this distance refereed as\n * [[nearMultiplier]]. Far plane equation has its own multiplier - [[nearFarMultiplier]],\n * which is applied to near plane and offset giving finally far plane distance.\n * This evaluator supports both planar and spherical projections, although it's behavior is\n * slightly different in each case. General algorithm sets near plane between camera and\n * ground level, while far plane is just calculated using scale and bias approach with far offset\n * and multiplier.\n * @deprecated Class contains the legacy (first and original) clip planes evaluation method, which\n * is widely used in examples thus is still kept for backward compatibility and comparisons.\n */\nexport class InterpolatedClipPlanesEvaluator implements ClipPlanesEvaluator {\n    readonly farMin: number;\n\n    protected m_tmpVectors: THREE.Vector3[] = [\n        new THREE.Vector3(),\n        new THREE.Vector3(),\n        new THREE.Vector3()\n    ];\n    protected m_tmpQuaternion: THREE.Quaternion = new THREE.Quaternion();\n\n    constructor(\n        readonly nearMin: number = 0.1,\n        readonly nearMultiplier: number = 0.1,\n        readonly nearFarMultiplier = 50.0,\n        readonly farOffset = 200.0\n    ) {\n        assert(nearMin > 0);\n        assert(nearFarMultiplier >= 0);\n        assert(farOffset >= 0);\n        this.farMin = nearMin * nearFarMultiplier + farOffset;\n    }\n\n    // tslint:disable-next-line: no-empty\n    set minElevation(elevation: number) {}\n\n    get minElevation(): number {\n        // This evaluator does not support elevation so its always set to 0.\n        return 0;\n    }\n\n    // tslint:disable-next-line: no-empty\n    set maxElevation(elevation: number) {}\n\n    get maxElevation(): number {\n        // This evaluator does not support elevation so its always set to 0.\n        return 0;\n    }\n\n    evaluateClipPlanes(\n        camera: THREE.Camera,\n        projection: Projection,\n        elevationProvider?: ElevationProvider\n    ): ViewRanges {\n        let nearPlane: number = this.nearMin;\n        let farPlane: number = this.farMin;\n        if (projection.type === ProjectionType.Spherical) {\n            // near and far plane for a set up where\n            // the camera is looking at the center of the scene.\n            const r = EarthConstants.EQUATORIAL_RADIUS;\n            const d = camera.position.length();\n            const alpha = Math.asin(r / d);\n            // Extract X, Y, Z axes into tmp vectors array.\n            camera.matrixWorld.extractBasis(\n                this.m_tmpVectors[0],\n                this.m_tmpVectors[1],\n                this.m_tmpVectors[2]\n            );\n            // Setup quaternion based on X axis.\n            this.m_tmpQuaternion.setFromAxisAngle(this.m_tmpVectors[0], alpha);\n            // Acquire forward vector based on Z axis reversed (keep it in tmpVectors[2]).\n            const fwd = this.m_tmpVectors[2].negate();\n            // Apply quaternion rotation to forward vector, store it in tmpVectors[1].\n            const fwdRot = this.m_tmpVectors[1].copy(fwd).applyQuaternion(this.m_tmpQuaternion);\n            // Store camera position tmpVectors[0] and reference it with p.\n            const p = this.m_tmpVectors[0].copy(camera.position);\n            p.addScaledVector(fwdRot, Math.sqrt(d * d - r * r));\n            farPlane = p.sub(camera.position).dot(fwd) + this.farOffset;\n            nearPlane = Math.max(\n                this.nearMin,\n                projection.groundDistance(camera.position) * this.nearMultiplier\n            );\n        } else if (projection.type === ProjectionType.Planar) {\n            const groundDistance = projection.groundDistance(camera.position);\n            nearPlane = Math.max(this.nearMin, groundDistance * this.nearMultiplier);\n            // Will be already clamped to minFar due to clamping above.\n            farPlane = nearPlane * this.nearFarMultiplier + this.farOffset;\n        } else {\n            assert(false, \"Unsupported projection type\");\n        }\n\n        const viewRanges: ViewRanges = {\n            near: nearPlane,\n            far: farPlane,\n            minimum: this.nearMin,\n            maximum: farPlane\n        };\n        return viewRanges;\n    }\n}\n\n/**\n * Abstract evaluator class that adds support for elevation constraints.\n *\n * Classes derived from this should implement algorithms that takes into account rendered\n * features height (elevations), such as ground plane is no more flat (or spherical), but\n * contains geometry that should be overlapped by frustum planes.\n */\nexport abstract class ElevationBasedClipPlanesEvaluator implements ClipPlanesEvaluator {\n    private m_maxElevation: number;\n    private m_minElevation: number;\n\n    constructor(maxElevation: number, minElevation: number) {\n        assert(maxElevation >= minElevation);\n        this.m_minElevation = minElevation;\n        this.m_maxElevation = maxElevation;\n    }\n\n    abstract evaluateClipPlanes(\n        camera: THREE.Camera,\n        projection: Projection,\n        elevationProvider?: ElevationProvider\n    ): ViewRanges;\n\n    /**\n     * Set maximum elevation above sea level to be rendered.\n     *\n     * @param elevation the elevation (altitude) value in world units (meters).\n     * @note If you set this exactly to the maximum rendered feature height (altitude above\n     * the sea, you may notice some flickering or even polygons disappearing related to rounding\n     * errors or depth buffer precision. In such cases increase [[nearFarMargin]] or add a little\n     * bit offset to your assumed maximum elevation.\n     * @note Reasonable values are in between (-DeadSeeDepression, MtEverestHeight>, both values\n     * are defined in [[EarthConstant]] as [[EarthConstant.MIN_ELEVATION]] and\n     * [[EarthConstant.MAX_ELEVATION]] respectively.\n     * @see minElevation for more information about precision and rounding errors.\n     */\n    set maxElevation(elevation: number) {\n        this.m_maxElevation = elevation;\n        // Min elevation should be at least equal or smaller to max elevation.\n        this.m_minElevation = Math.min(elevation, this.m_minElevation);\n    }\n\n    /**\n     * Get maximum elevation to be covered by camera frustum.\n     */\n    get maxElevation(): number {\n        return this.m_maxElevation;\n    }\n\n    /**\n     * Set minimum elevation to be rendered, values beneath the sea level are negative.\n     *\n     * @param elevation the minimum elevation (depression) in world units (meters).\n     * @note If you set this parameter to zero you may not see any features rendered if they are\n     * just below the sea level more than half of [[nearFarMargin]] assumed. Similarly if set to\n     * -100m and rendered features lays exactly in such depression, you may notice that problem.\n     * The errors usually come from projection precision loss and depth buffer nature (significant\n     * precision loss closer to far plane). Thus is such cases either increase the margin (if you\n     * are sure features are just at this elevation, or setup bigger offset for [[minElevation]].\n     * Reasonable values are between <-DeadSeaDepression, MtEverestHeight), where the first denotes\n     * lowest depression on the Earth defined as [[EarthConstants.MIN_ELEVATION]] and the second is\n     * the highest point our planet.\n     * @see https://developer.nvidia.com/content/depth-precision-visualized\n     */\n    set minElevation(elevation: number) {\n        this.m_minElevation = elevation;\n        // Max elevation should be at least equal or bigger than min elevation.\n        this.m_maxElevation = Math.max(elevation, this.m_maxElevation);\n    }\n\n    /**\n     * Get minimum elevation to be covered by camera frustum.\n     */\n    get minElevation(): number {\n        return this.m_minElevation;\n    }\n}\n\n/**\n * Top view, clip planes evaluator that computes view ranges based on ground distance and elevation.\n *\n * This evaluator supports both planar and spherical projections, although it behavior is\n * slightly different in each case. General algorithm sets near plane and far plane close\n * to ground level, but taking into account maximum and minimum elevation of features on the ground.\n *\n * @note This evaluator supports only cameras which are always looking down the ground surface\n * (top-down view) along surface normal and does not preserve correct clip planes when\n * modifying camera pitch (tilt) angle. In simple words it is suitable only for top view camera\n * settings.\n */\nexport class TopViewClipPlanesEvaluator extends ElevationBasedClipPlanesEvaluator {\n    /**\n     * Helper for reducing number of objects created at runtime.\n     */\n    protected m_tmpVectors: THREE.Vector3[] = [\n        new THREE.Vector3(),\n        new THREE.Vector3(),\n        new THREE.Vector3()\n    ];\n    /**\n     * Helper object for reducing performance impact.\n     */\n    protected m_tmpQuaternion: THREE.Quaternion = new THREE.Quaternion();\n    private m_minimumViewRange: ViewRanges;\n\n    /**\n     * Allows to setup near/far offsets (margins), rendered geometry elevation relative to sea\n     * level as also minimum near plane and maximum far plane distance constraints.\n     * It is strongly recommended to set some reasonable [[nearFarMargin]] (offset) between near\n     * and far planes to avoid flickering.\n     * @param maxElevation defines near plane offset from the ground in the surface normal\n     * direction, positive values allows to render elevated terrain features (mountains,\n     * buildings). Defaults to Burj Khalifa building height.\n     * @param minElevation defines far plane offset from the ground surface, negative values moves\n     * far plane below the ground level (use it to render depressions). Default zero - sea level.\n     * @param nearMin minimum allowable near plane distance from camera, must be bigger than zero.\n     * @param nearFarMarginRatio minimum distance between near and far plane, as a ratio of average\n     * near/far plane distance, it have to be significantly bigger than zero (especially if\n     * [[maxElevation]] and [[minElevation]] are equal), otherwise you may notice flickering when\n     * rendering, or even render empty scene if frustum planes are almost equal.\n     * @param farMaxRatio maximum ratio between ground and far plane distance, allows to limit\n     * viewing distance at overall. Have to be bigger than 1.0.\n     * @note Keep in mind that this evaluator does not evaluate terrain (or building) elevation\n     * automatically, to keep such features rendered (between frustum planes) use [[minElevation]],\n     * [[maxElevation]] constraints. You may change this parameters at any time, but it requires\n     * repeating [[evaluatePlanes]] step, if your camera is moving you need to evaluate planes\n     * anyway.\n     * @note You may treat [[minElevation]] and [[maxElevation]] parameters as the maximum and\n     * minimum renderable elevation respectively along the surface normal, when camera is\n     * constantly looking downwards (top-down view). If you need [[ClipPlanesEvaluator]] for\n     * cameras that support tilt or yaw please use [[TiltViewClipPlanesEvaluator]].\n     * @note [[nearFarMaxRatio]] does not limit far plane when spherical projection is in use,\n     * the algorithm used there estimates distance to point on tangent where line from camera\n     * touches the sphere horizon and there is no reason to clamp it.\n     */\n    constructor(\n        maxElevation: number = EarthConstants.MAX_BUILDING_HEIGHT,\n        minElevation: number = 0,\n        readonly nearMin: number = 1.0,\n        readonly nearFarMarginRatio: number = 0.05,\n        readonly farMaxRatio = 6.0\n    ) {\n        super(maxElevation, minElevation);\n        assert(nearMin > 0);\n        assert(nearFarMarginRatio > epsilon);\n        assert(farMaxRatio > 1.0);\n        const nearFarMargin = nearFarMarginRatio * nearMin;\n        this.m_minimumViewRange = {\n            near: nearMin,\n            far: nearMin + nearFarMargin,\n            minimum: this.nearMin,\n            maximum: Math.max(nearMin * farMaxRatio, nearMin + nearFarMargin)\n        };\n    }\n\n    /** @override */\n    evaluateClipPlanes(\n        camera: THREE.Camera,\n        projection: Projection,\n        elevationProvider?: ElevationProvider\n    ): ViewRanges {\n        if (projection.type === ProjectionType.Spherical) {\n            return this.evaluateDistanceSphericalProj(camera, projection, elevationProvider);\n        } else if (projection.type === ProjectionType.Planar) {\n            return this.evaluateDistancePlanarProj(camera, projection, elevationProvider);\n        }\n        assert(false, \"Unsupported projection type\");\n        return { ...this.minimumViewRange };\n    }\n\n    /**\n     * Get minimum view range that is possible to achieve with current evaluator settings.\n     * @note This value will not change after evaluator is constructed.\n     */\n    protected get minimumViewRange(): ViewRanges {\n        return this.m_minimumViewRange;\n    }\n\n    /**\n     * Calculate camera altitude (closest distance) to ground level in world units.\n     * @param camera\n     * @param projection\n     */\n    protected getCameraAltitude(camera: THREE.Camera, projection: Projection): number {\n        return projection.groundDistance(camera.position);\n    }\n\n    protected evaluateDistancePlanarProj(\n        camera: THREE.Camera,\n        projection: Projection,\n        elevationProvider?: ElevationProvider\n    ): ViewRanges {\n        assert(projection.type !== ProjectionType.Spherical);\n\n        let nearPlane: number = this.nearMin;\n        let farPlane: number = this.nearMin * this.farMaxRatio;\n\n        // Calculate distance to closest point on the ground.\n        const groundDistance = this.getCameraAltitude(camera, projection);\n        const farMax = groundDistance * this.farMaxRatio;\n        // We could at least try to keep margins along the eye vector (center of the view) in\n        // tact with pitch angle changes, but this does not solve all tilt angle problems,\n        // rather use more sophisticated evaluator.\n        nearPlane = groundDistance - this.maxElevation;\n        farPlane = groundDistance - this.minElevation;\n\n        // Apply the constraints.\n        nearPlane = Math.max(nearPlane, this.nearMin);\n        farPlane = Math.min(farPlane, farMax);\n        // Apply margins\n        const nearFarMargin = (this.nearFarMarginRatio * (nearPlane + farPlane)) / 2;\n        nearPlane = Math.max(nearPlane - nearFarMargin / 2, this.nearMin);\n        farPlane = Math.max(farPlane + nearFarMargin / 2, nearPlane + nearFarMargin);\n\n        const viewRanges: ViewRanges = {\n            near: nearPlane,\n            far: farPlane,\n            minimum: this.nearMin,\n            maximum: Math.max(farMax, farPlane)\n        };\n        return viewRanges;\n    }\n\n    protected evaluateDistanceSphericalProj(\n        camera: THREE.Camera,\n        projection: Projection,\n        elevationProvider?: ElevationProvider\n    ): ViewRanges {\n        assert(projection.type === ProjectionType.Spherical);\n\n        let nearPlane: number = this.nearMin;\n        let farPlane: number = this.nearMin * this.farMaxRatio;\n\n        // The near plane calculus is quite straight forward and works the same as for planar\n        // projections. We simply search for the closest point of the ground just above\n        // the camera, then we apply margin (elevation) to it along the sphere surface normal:\n        const cameraAltitude = this.getCameraAltitude(camera, projection);\n        nearPlane = cameraAltitude - this.maxElevation;\n\n        // Far plane calculation requires different approaches depending from camera projection:\n        // - perspective\n        // - orthographic\n\n        const r = EarthConstants.EQUATORIAL_RADIUS;\n        let d = camera.position.length();\n        d = d === 0 ? epsilon : d;\n        if (camera.type === \"PerspectiveCamera\") {\n            // This solution computes near and far plane for a set up where\n            // the camera is looking at the center of the scene.\n\n            // The far plane distance calculus requires finding the sphere tangent line that is\n            // co-linear with (goes thru) camera position, such tangent creates right angle\n            // with sphere diameter where it touches its surface (point T). Given that sphere is\n            // always at world origin and camera orbits around it we have (see\n            // #getTangentBasedFarPlane):\n            // angle(OTC) = 90\n            // sin(OCT) = sin(alpha) = r / d\n            // alpha = asin(r / d)\n            const alpha = Math.asin(r / d);\n            // If alpha it bigger than half fov angle, our visibility limit is set by tangent\n            // line, otherwise we need to find top (or right) plane intersection with sphere,\n            // which is definitely closer than the tangent point mentioned above.\n            const cam = camera as THREE.PerspectiveCamera;\n            // Take fov directly if it is vertical, otherwise we translate it using aspect ratio:\n            const aspect = cam.aspect > 1 ? cam.aspect : 1 / cam.aspect;\n            const halfFovAngle = THREE.MathUtils.degToRad((cam.fov * aspect) / 2);\n\n            const farTangent = this.getTangentBasedFarPlane(cam, d, r, alpha);\n            farPlane =\n                halfFovAngle > alpha\n                    ? farTangent\n                    : this.getFovBasedFarPlane(cam, d, r, 2 * halfFovAngle, projection);\n        }\n        // Orthographic camera projection\n        else {\n            farPlane = this.getOrthoBasedFarPlane(d, r);\n        }\n\n        // In extreme cases the largest depression assumed may be further than tangent\n        // based far plane distance, take it into account\n        const farMin = cameraAltitude - this.minElevation;\n        const farMax = cameraAltitude * this.farMaxRatio;\n        // Apply the constraints.\n        nearPlane = Math.max(nearPlane, this.nearMin);\n        farPlane = Math.max(farPlane, farMin);\n        // Apply margins\n        const nearFarMargin = (this.nearFarMarginRatio * (nearPlane + farPlane)) / 2;\n        nearPlane = Math.max(nearPlane - nearFarMargin / 2, this.nearMin);\n        farPlane = Math.max(farPlane + nearFarMargin / 2, nearPlane + nearFarMargin);\n\n        const viewRanges: ViewRanges = {\n            near: nearPlane,\n            far: farPlane,\n            minimum: this.nearMin,\n            maximum: farMax\n        };\n        return viewRanges;\n    }\n\n    /**\n     * Calculate distance from a point to the tangent point of a sphere.\n     *\n     * Returns zero if point is below surface or only very slightly above surface of sphere.\n     * @param d Distance from point to center of sphere\n     * @param r Radius of sphere\n     */\n    protected getTangentDistance(d: number, r: number): number {\n        // There may be situations when maximum elevation still remains below sea level\n        // (elevation < 0) or it is negligible (elevation ~ epsilon)\n        if (d - r < epsilon) {\n            return 0;\n        }\n\n        // The distance to tangent point may be described as:\n        // t = sqrt(d^2 - r^2)\n        return Math.sqrt(d * d - r * r);\n    }\n\n    /**\n     * Calculate far plane depending on furthest visible distance from camera position.\n     *\n     * Furthest visible distance is assumed to be distance from camera to horizon\n     * plus distance from elevated geometry to horizon(so that high objects behind horizon\n     * remain visible).\n     * @param camera The camera of the mapview\n     * @param d Distance from camera to origin\n     * @param r Radius of earth\n     * @param alpha Angle between camera eye vector and tangent\n     */\n    protected getTangentBasedFarPlane(\n        camera: THREE.PerspectiveCamera,\n        d: number,\n        r: number,\n        alpha: number\n    ): number {\n        // Find tangent point intersection distance\n        //         , - ~ ~ ~ - ,\n        //     , '               ' ,        E\n        //   ,           .           ,    . ' far + elev\n        //  ,            .   r + e   , '   /\n        // ,             .     ,  '    ,  /\n        // ,             . O '         , / te\n        // ,             | .           ,/\n        //  ,            |   .  r     ,/\n        //   ,           |      .    ,\n        //     ,         |        , '_____ far\n        //       ' -_, _ | _ ,  ' / T\n        //     near      |      /\n        //               |    / t\n        //             d |  /\n        //               |/\n        //               C\n        const t = this.getTangentDistance(d, r);\n\n        // Because we would like to see elevated geometry that may be visible beyond\n        // the tangent point on ground surface, we need to extend viewing distance along\n        // the tangent line by te (see graph above).\n        const te = this.getTangentDistance(r + this.maxElevation, r);\n\n        // Next step is to project CE vector(length t + te) onto camera eye (forward) vector\n        // to get maximum camera far plane distance.\n        //\n        // Knowing that:\n        // tangentVec.dot(cameraFwdVec) = cos(alpha) * len(tangentVec) * len(cameraFwdVec).\n        // where:\n        // ||cameraFwdVec|| == 1 ^ ||tangentVec|| == t + te\n        // Formula simplifies to:\n        const far = Math.cos(alpha) * (t + te);\n\n        return far;\n    }\n\n    protected getFovBasedFarPlane(\n        camera: THREE.PerspectiveCamera,\n        d: number,\n        r: number,\n        fovAngle: number,\n        projection: Projection\n    ) {\n        // Find intersection point that is closer to tangent point.\n        //\n        //         , - ~ ~ ~ - ,\n        //     , '               ' ,\n        //   ,           .           ,\n        //  ,            .     r     ,' T1\n        // ,             .     ,  '  / ,\n        // ,             . O.'  a   /  ,\n        // ,             | .  `  . /   ,\n        //  ,            |   .  r / TA,\n        //   ,           |    .  /   ,\n        //     ,         |     ./  ,'_____ far\n        //       ' -_, _ | _ , /' T0\n        //     near      |    /\n        //               |   / t\n        //             d | /\n        //               |/\n        //               C\n        //\n        // See:\n        // tslint:disable-next-line: max-line-length\n        // https://www.scratchapixel.com/lessons/3d-basic-rendering/minimal-ray-tracer-rendering-simple-shapes/ray-sphere-intersection\n\n        // Vector from camera to world center\n        const dVec = camera.position;\n        // Extract camera X, Y, Z orientation axes into tmp vectors array.\n        camera.matrixWorld.extractBasis(\n            this.m_tmpVectors[0],\n            this.m_tmpVectors[1],\n            this.m_tmpVectors[2]\n        );\n        // Setup quaternion (X axis based) for angle between frustum plane and camera eye.\n        this.m_tmpQuaternion.setFromAxisAngle(this.m_tmpVectors[0], fovAngle / 2);\n        // Acquire camera (eye) forward vector from Z axis (keep it in tmpVectors[2]).\n        const cameraFwdVec = this.m_tmpVectors[2];\n        // Apply quaternion to forward vector, creating intersection vector, which is\n        // parallel to top or right frustum plane (depending on the aspect ratio).\n        const tVec = this.m_tmpVectors[1].copy(cameraFwdVec).applyQuaternion(this.m_tmpQuaternion);\n        // Calculate camera to origin vector projection onto frustum plane (top or right).\n        // This gives us the length of CTA segment:\n        const cta = dVec.dot(tVec);\n        // If it is negative, it means that the dVec and the tVec points in\n        // opposite directions - there is no intersection - or intersection could\n        // potentially be behind the intersection ray's origin (camera position).\n        if (cta < 0) {\n            // Intersection points are behind camera, camera looks in wrong direction.\n            const groundDistance = this.getCameraAltitude(camera, projection);\n            // Setup far plane to maximum distance.\n            return groundDistance * this.farMaxRatio;\n        }\n        // Knowing the length of |CTA| we just need to subtract the length of |T0TA|\n        // segment from it to get far plane distance.\n        // In order to calculate |T0TA| we firstly need to use use Pythagorean theorem to\n        // find length of |OTA| = a. Here we use the right triangle formed by O-C-TA points:\n        // |OC|^2 = |CTA|^2 + |OTA|^2, where |OTA| = a, |OC| = d, |CTA| = cta\n        // a^2 = d^2 - cta^2\n        const a2 = dVec.dot(dVec) - cta * cta;\n        // Note that if a is greater than sphere radius the ray misses the sphere and\n        // thus there is no intersection at all.\n        const r2 = r * r;\n        assert(a2 <= r2, \"Please use this evaluator only for top view camera poses.\");\n        // Now to find the length of |T0TA| == |T1TA| we use the second right triangle\n        // formed by O-T0-TA points. Of course we know that |T0TA| segment length is\n        // equal to |T1TA|, and |OT0| segment is simply sphere radius.\n        // In order to find |T0TA| length we again use Pythagorean theorem, which says:\n        // |OT0|^2 = |OTA|^2 + |T0TA|^2, where |OTO| = r, |OTA| = a\n        // |T0TA|^2 = r^2 - a^2\n        const tota = Math.sqrt(r2 - a2);\n        // Finally our far plane (intersection point) is defined as:\n        return cta - tota;\n    }\n\n    protected getOrthoBasedFarPlane(d: number, r: number): number {\n        //         , - ~ ~ ~ - ,\n        //     , '               ' ,     E\n        //   ,            .--------- ,-.'- far + elev\n        // | ,            .   r + e , `, |\n        // |,             .     , '     ,| te\n        // |,             . O '.........,|..\n        // |,             |        r    ,|  far\n        // | ,            |            , |\n        // |  ,           |           ,  | t\n        // |    ,         |        , '   |\n        // |      ' -_, _ | _ ,  '       |\n        // |    near      | \\/___________| near - elev\n        // |              |              |\n        // |            d |              |\n        // |              |              |\n        //                C\n        // The distance to tangent point may be described as:\n        const t = d;\n        // Tangent extension due to terrain elevation behind the horizon may be calculated\n        // based on the right triangle:\n        // (r+maxElev)^2 = r^2 + te^2\n        // te = sqrt((r+maxElev)^2 - r^2)\n        // although we may not calculate it if elevation is negligible:\n        const te =\n            this.maxElevation < epsilon\n                ? 0\n                : Math.sqrt(r + this.maxElevation) * (r + this.maxElevation) - r * r;\n        // Both near and far planes distances are directly applied to frustum, because tangents'\n        // lines are parallel to camera look at vector.\n        // Now far plane distance is constituted with:\n        return t + te;\n    }\n}\n\n/**\n * Evaluates camera clipping planes taking into account ground distance and camera angles.\n *\n * This evaluator provides support for camera with varying tilt (pitch) angle, the angle\n * between camera __look at__ vector and the ground surface normal.\n */\nexport class TiltViewClipPlanesEvaluator extends TopViewClipPlanesEvaluator {\n    /**\n     * Calculate the lengths of frustum planes intersection with the ground plane.\n     * This evaluates distances between eye vector (or eye plane in orthographic projection) and\n     * ground intersections of top and bottom frustum planes.\n     * @note This method assumes the world surface (ground) to be flat and\n     * works only with planar projections.\n     *\n     * @param camera The [[THREE.Camera]] instance in use,\n     * @param projection The geo-projection used to convert geographic to world coordinates.\n     */\n    protected getFrustumGroundIntersectionDist(\n        camera: THREE.Camera,\n        projection: Projection\n    ): { top: number; bottom: number } {\n        assert(projection.type !== ProjectionType.Spherical);\n        // This algorithm computes the length of frustum planes before intersecting with a flat\n        // ground surface. Entire computation is split over two projections method and performed\n        // for top and bottom plane, with addition of terrain (ground) elevation which is taken\n        // into account.\n        // The following diagram may help explain the algorithm below.\n        //   🎥\n        //   C\n        //   |\\\n        //   |.\\ .\n        //   | . \\  . t\n        // z |  .  \\   .c2\n        //   |  c1.  \\e ___. max elev\n        //   |     .   \\      .\n        //___|a___D1.____\\E1_____.D2______ g\n        //   C1      .     \\ __. min elev\n        //            .      \\.E2\n        //          b  .    .\n        //              . .\n        //               .\n        // Where:\n        // - C gives the camera position.\n        // - z is the height of the camera above the ground.\n        // - z1 == z2 == z, for perspective camera all planes origin its the same\n        // - a is a right angle.\n        // - e is the look at vector of the camera.\n        // - t and b are the frustum planes of the camera (top and bottom respectively).\n        // - angle between c1 to c2 is the fov.\n        // - c1, c2 - vectors from camera to the ground along frustum planes.\n        // - angles between c1 and e or e and c2 splits fov on equal halves.\n        // - d1 and d2 are the intersection points of the frustum with the world/ground plane.\n        // - angle between z and e is the pitch of the camera.\n        // - angle between g and e is the tilt angle.\n        // - g is the ground/world surface\n        //\n        // The goal is to find distance for top/bottom planes intersections of frustum with ground\n        // plane.\n        // This are the distances from C->D1 and C->D2, and are described as\n        // c1 and c2. Then we may compensate/correct those distances with actual\n        // ground elevations, which is done by simply offsetting camera altitude, as it is\n        // opposite to elevating ground level.\n        const halfPiLimit = Math.PI / 2 - epsilon;\n        const cameraAltitude = this.getCameraAltitude(camera, projection);\n        // tslint:disable-next-line: deprecation\n        const cameraTilt = MapViewUtils.extractCameraTilt(camera, projection);\n        // Angle between z and c2\n        let topAngleRad: number;\n        // Angle between z and c1\n        let bottomAngleRad: number;\n        // Bottom plane origin altitude\n        let z1: number;\n        // Top plane origin altitude\n        let z2: number;\n        // For perspective projection:\n        if (camera.type === \"PerspectiveCamera\") {\n            const cam = (camera as any) as THREE.PerspectiveCamera;\n            // Angle between z and c2, note, the fov is vertical, otherwise we would need to\n            // translate it using aspect ratio:\n            // let aspect = camera.aspect > 1 ? camera.aspect : 1 / camera.aspect;\n            const aspect = 1;\n            // Half fov angle in radians\n            const halfFovAngle = THREE.MathUtils.degToRad((cam.fov * aspect) / 2);\n            topAngleRad = THREE.MathUtils.clamp(\n                cameraTilt + halfFovAngle,\n                -halfPiLimit,\n                halfPiLimit\n            );\n            bottomAngleRad = THREE.MathUtils.clamp(\n                cameraTilt - halfFovAngle,\n                -halfPiLimit,\n                halfPiLimit\n            );\n            z1 = z2 = cameraAltitude;\n        }\n        // For orthographic projection:\n        else {\n            const cam = (camera as any) as THREE.OrthographicCamera;\n            // For orthogonal camera projections we may simply ignore FOV and use 0 for FOV\n            // the top/bottom planes are simply parallel to the eye vector:\n            topAngleRad = bottomAngleRad = cameraTilt;\n            // Although the ray origin is not always the same (eye position) as for\n            // the perspective projections, thus we need to compensate for ortho-cube\n            // dimensions:\n            // sin(tilt) = zc2 / top\n            // sin(tilt) = zc1 / bottom\n            // zc2 = sin(tilt) * top\n            // zc1 = sin(tilt) * bottom\n            const sinBeta = Math.sin(cameraTilt);\n            z2 = cameraAltitude + sinBeta * cam.top;\n            z1 = cameraAltitude - sinBeta * cam.bottom;\n        }\n        // Distance along the top plane to the ground - c2\n        // cos(topAngle) = (z2 - minElev) / |c2|\n        // |c2| = (z2 - minElev) / cos(topAngle)\n        const topDist = (z2 - this.minElevation) / Math.cos(topAngleRad);\n        // Distance along the bottom plane to the ground - c1\n        // cos(bottomAngle) = (z - minElev) / |c1|\n        // |c1| = (z - minElev) / cos(bottomAngle)\n        const bottomDist = (z1 - this.maxElevation) / Math.cos(bottomAngleRad);\n\n        return {\n            top: Math.max(topDist, 0),\n            bottom: Math.max(bottomDist, 0)\n        };\n    }\n\n    /** @override */\n    protected evaluateDistancePlanarProj(\n        camera: THREE.Camera,\n        projection: Projection,\n        elevationProvider?: ElevationProvider\n    ): ViewRanges {\n        assert(projection.type !== ProjectionType.Spherical);\n        const viewRanges = { ...this.minimumViewRange };\n\n        // Generally near/far planes are set to keep top/bottom planes intersection distance.\n        // Then elevations margins are applied. Here margins (min/max elevations) are meant to\n        // be defined as distance along the ground normal vector thus during camera\n        // tilt they may affect near/far planes positions differently.\n        const planesDist = this.getFrustumGroundIntersectionDist(camera, projection);\n\n        // Project clipping plane distances for the top/bottom frustum planes (edges), but\n        // only if we deal with perspective camera type, this step is not required\n        // for orthographic projections, cause all clip planes are parallel to eye vector.\n        if (camera.type === \"PerspectiveCamera\") {\n            const cam = camera as THREE.PerspectiveCamera;\n            // Angle between z and c2, note, the fov is vertical, otherwise we would need to\n            // translate it using aspect ratio:\n            // let aspect = camera.aspect > 1 ? camera.aspect : 1 / camera.aspect;\n            const aspect = 1;\n            // Half fov angle in radians\n            const halfFovAngle = THREE.MathUtils.degToRad((cam.fov * aspect) / 2);\n            const cosHalfFov = Math.cos(halfFovAngle);\n            // cos(halfFov) = near / bottomDist\n            // near = cos(halfFov) * bottomDist\n            viewRanges.near = planesDist.bottom * cosHalfFov;\n            // cos(halfFov) = far / topDist\n            // far = cos(halfFov) * topDist\n            viewRanges.far = planesDist.top * cosHalfFov;\n        }\n        // Orthographic camera projection.\n        else {\n            viewRanges.near = planesDist.bottom;\n            viewRanges.far = planesDist.top;\n        }\n\n        // Compute target (focus) point distance.\n        // tslint:disable-next-line: deprecation\n        const { distance } = MapViewUtils.getTargetAndDistance(\n            projection,\n            camera,\n            elevationProvider\n        );\n        // Clamp values to constraints.\n        const farMax = distance * this.farMaxRatio;\n        viewRanges.near = Math.max(viewRanges.near, this.nearMin);\n        viewRanges.far = Math.min(viewRanges.far, farMax);\n\n        // Apply margins\n        const nearFarMargin = (this.nearFarMarginRatio * (viewRanges.near + viewRanges.far)) / 2;\n        viewRanges.near = Math.max(viewRanges.near - nearFarMargin / 2, this.nearMin);\n        viewRanges.far = Math.max(\n            viewRanges.far + nearFarMargin / 2,\n            viewRanges.near + nearFarMargin\n        );\n        viewRanges.minimum = this.nearMin;\n        viewRanges.maximum = farMax;\n\n        return viewRanges;\n    }\n\n    /** @override */\n    protected evaluateDistanceSphericalProj(\n        camera: THREE.Camera,\n        projection: Projection,\n        elevationProvider?: ElevationProvider\n    ): ViewRanges {\n        assert(projection.type === ProjectionType.Spherical);\n        const viewRanges = { ...this.minimumViewRange };\n\n        // Near plane calculus is pretty straightforward and does not depend on camera tilt:\n        const cameraAltitude = this.getCameraAltitude(camera, projection);\n        viewRanges.near = cameraAltitude - this.maxElevation;\n\n        let halfFovAngle: number = 0;\n        if (camera instanceof THREE.PerspectiveCamera) {\n            // Take fov directly if it is vertical, otherwise we translate it using aspect ratio:\n            const aspect = camera.aspect > 1 ? camera.aspect : 1 / camera.aspect;\n            halfFovAngle = THREE.MathUtils.degToRad((camera.fov * aspect) / 2);\n\n            // Now we need to account for camera tilt and frustum volume, so the longest\n            // frustum edge does not intersects with sphere, it takes the worst case\n            // scenario regardless of camera tilt, so may be improved little bit with more\n            // sophisticated algorithm.\n            viewRanges.near *= Math.cos(halfFovAngle);\n        }\n\n        // Far plane calculation requires different approaches depending from camera projection:\n        // - perspective\n        // - orthographic\n        const cameraToOrigin = this.m_tmpVectors[0].copy(camera.position).negate();\n        const r = EarthConstants.EQUATORIAL_RADIUS;\n        const d = cameraToOrigin.length();\n        let farPlane: number;\n        if (camera instanceof THREE.PerspectiveCamera) {\n            // Step-wise calculate angle between camera eye vector and tangent\n\n            // Calculate angle between surface normal(below camera position) and tangent.\n            const alpha = Math.asin(r / d);\n\n            // Calculate angle between look at and surface normal(below camera position)\n            const cameraPitch = this.getCameraPitch(cameraToOrigin, camera);\n\n            // Calculate angle between camera eye vector and tangent.\n            const modifiedAlpha = Math.abs(alpha - cameraPitch);\n\n            // Use tangent based far plane if horizon is within field of view\n            const farTangent = this.getTangentBasedFarPlane(camera, d, r, modifiedAlpha);\n            farPlane =\n                halfFovAngle >= modifiedAlpha\n                    ? farTangent\n                    : this.getTiltedFovBasedFarPlane(d, r, halfFovAngle, cameraPitch);\n        } else {\n            farPlane = this.getOrthoBasedFarPlane(d, r);\n        }\n        viewRanges.far = farPlane;\n\n        // Compute the focus point (target) distance for current camera and projection setup,\n        // in a same way the MapView component does.\n        // tslint:disable-next-line: deprecation\n        const { distance } = MapViewUtils.getTargetAndDistance(\n            projection,\n            camera,\n            elevationProvider\n        );\n        // Apply the constraints.\n        const farMin = cameraAltitude - this.minElevation;\n        const farMax = distance * this.farMaxRatio;\n        viewRanges.near = Math.max(viewRanges.near, this.nearMin);\n        viewRanges.far = THREE.MathUtils.clamp(viewRanges.far, farMin, farMax);\n\n        // Apply margins.\n        const nearFarMargin = (this.nearFarMarginRatio * (viewRanges.near + viewRanges.far)) / 2;\n        viewRanges.near = Math.max(viewRanges.near - nearFarMargin / 2, this.nearMin);\n        viewRanges.far = Math.max(\n            viewRanges.far + nearFarMargin / 2,\n            viewRanges.near + nearFarMargin\n        );\n\n        // Set minimum and maximum view range.\n        viewRanges.minimum = this.nearMin;\n        viewRanges.maximum = farMax;\n\n        return viewRanges;\n    }\n\n    protected getTiltedFovBasedFarPlane(\n        d: number,\n        r: number,\n        halfFovAngle: number,\n        cameraPitch: number\n    ) {\n        // Find intersection point that is closer to tangent point.\n        //\n        //         , - ~ ~ ~ - ,\n        //     , '               ' ,\n        //   ,           .           ,\n        //  ,            .     r     ,' T1\n        // ,             .     ,  '  / ,\n        // ,             . O.'  a   /  ,\n        // ,             | .  `  . /   ,\n        //  ,            |   .  r / TA,\n        //   ,           |    .  /   ,\n        //     ,         |     ./  ,'_____ far\n        //       ' -_, _ | _ , /' T0\n        //     near      |    /\n        //               |   / t\n        //             d | /\n        //               |/\n        //               C\n        //\n        // See:\n        // tslint:disable-next-line: max-line-length\n        // https://www.scratchapixel.com/lessons/3d-basic-rendering/minimal-ray-tracer-rendering-simple-shapes/ray-sphere-intersection\n\n        // compute length of t (distance to fov intersection with sphere)\n        // with law of cosines:\n        // r² = d² + t² - 2dt * cos(alpha)\n        // solved for t:\n        // t0 = d * cos(alpha) - sqrt(d²*cos²(alpha) - d² + r²)  <-- first intersection\n        // t1 = d * cos(alpha) + sqrt(d²*cos²(alpha) - d² + r²)  <-- second intersection\n        // Use first intersection:\n        const cosAlpha = Math.cos(cameraPitch + halfFovAngle);\n        const dSqr = d * d;\n        const t = d * cosAlpha - Math.sqrt(dSqr * cosAlpha * cosAlpha - dSqr + r * r);\n\n        assert(\n            !isNaN(t),\n            \"Field of view does not intersect sphere. Use tangent based far plane instead.\"\n        );\n\n        // project t onto camera fwd vector\n        const far = Math.cos(halfFovAngle) * t;\n\n        return far;\n    }\n\n    private getCameraPitch(cameraToOrigin: THREE.Vector3, camera: THREE.PerspectiveCamera) {\n        cameraToOrigin.normalize();\n        const lookAt = camera.getWorldDirection(this.m_tmpVectors[1]).normalize();\n        const cosAlpha1 = cameraToOrigin.dot(lookAt);\n        const cameraPitch = Math.acos(THREE.MathUtils.clamp(cosAlpha1, -1.0, 1.0));\n\n        return cameraPitch;\n    }\n}\n\n/**\n * Provides the most basic evaluation concept giving fixed values with some constraints.\n */\nexport class FixedClipPlanesEvaluator implements ClipPlanesEvaluator {\n    readonly minFar: number;\n    private m_nearPlane: number;\n    private m_farPlane: number;\n\n    constructor(readonly minNear: number = 1, readonly minFarOffset: number = 10) {\n        this.minFar = minNear + minFarOffset;\n        this.m_nearPlane = minNear;\n        this.m_farPlane = this.minFar;\n    }\n\n    get nearPlane(): number {\n        return this.m_nearPlane;\n    }\n\n    set nearPlane(fixedNear: number) {\n        this.invalidatePlanes(fixedNear, this.m_farPlane);\n    }\n\n    get farPlane(): number {\n        return this.m_farPlane;\n    }\n\n    set farPlane(fixedFar: number) {\n        this.invalidatePlanes(this.m_nearPlane, fixedFar);\n    }\n\n    // tslint:disable-next-line: no-empty\n    set minElevation(elevation: number) {}\n\n    get minElevation(): number {\n        // This evaluator does not support elevation so its always set to 0.\n        return 0;\n    }\n\n    // tslint:disable-next-line: no-empty\n    set maxElevation(elevation: number) {}\n\n    get maxElevation(): number {\n        // This evaluator does not support elevation so its always set to 0.\n        return 0;\n    }\n\n    /** @override */\n    evaluateClipPlanes(\n        camera: THREE.Camera,\n        projection: Projection,\n        elevationProvider?: ElevationProvider\n    ): ViewRanges {\n        // We do not need to perform actual evaluation cause results are precomputed and\n        // kept stable until somebody changes the properties.\n        const viewRanges: ViewRanges = {\n            near: this.m_nearPlane,\n            far: this.m_farPlane,\n            minimum: this.minNear,\n            maximum: this.m_farPlane\n        };\n        return viewRanges;\n    }\n\n    private invalidatePlanes(near: number, far: number) {\n        // When clamping prefer to extend far plane at about minimum distance, giving\n        // near distance setup priority over far.\n        const nearDist: number = Math.max(this.minNear, near);\n        const farDist: number = Math.max(this.minFar, far, nearDist + this.minFarOffset);\n        this.m_nearPlane = nearDist;\n        this.m_farPlane = farDist;\n    }\n}\n\n/**\n * Factory function that creates default [[ClipPlanesEvaluator]] that calculates near plane based\n * on ground distance and camera orientation.\n *\n * Creates [[TiltViewClipPlanesEvaluator]].\n */\nexport const createDefaultClipPlanesEvaluator = () => new TiltViewClipPlanesEvaluator();\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { ITileDecoder } from \"@here/harp-datasource-protocol\";\nimport { ConcurrentWorkerSet } from \"./ConcurrentWorkerSet\";\nimport { WorkerBasedDecoder } from \"./WorkerBasedDecoder\";\n\n/**\n * Default concurrent decoder helper.\n *\n * A convenient singleton that maintains a separate [[ConcurrentWorkerSet]] for each bundle\n * requested. Provides easy access to [[WorkerBasedDecoder]]s for data sources.\n */\nexport class ConcurrentDecoderFacade {\n    /**\n     * The URL containing a script to fall back (default) to when looking for worker sets\n     * and decoders.\n     */\n    static defaultScriptUrl: string = \"./decoder.bundle.js\";\n\n    /**\n     * The default number of workers.\n     */\n    static defaultWorkerCount?: number = undefined;\n\n    /**\n     * Returns a [[WorkerBasedDecoder]] instance.\n     *\n     * @param decoderServiceType The name of the decoder service type.\n     * @param scriptUrl The optional URL with the workers' script.\n     * @param workerCount The number of web workers to use.\n     */\n    static getTileDecoder(\n        decoderServiceType: string,\n        scriptUrl?: string,\n        workerCount?: number\n    ): ITileDecoder {\n        const workerSet = this.getWorkerSet(scriptUrl, workerCount);\n\n        return new WorkerBasedDecoder(workerSet, decoderServiceType);\n    }\n\n    /**\n     * Returns a [[ConcurrentWorkerSet]] instance based on the script URL specified.\n     *\n     * @param scriptUrl The optional URL with the workers' script. If not specified,\n     * the function uses [[defaultScriptUrl]] instead.\n     * @param workerCount The number of web workers to use.\n     */\n    static getWorkerSet(scriptUrl?: string, workerCount?: number): ConcurrentWorkerSet {\n        if (scriptUrl === undefined) {\n            scriptUrl = this.defaultScriptUrl;\n        }\n\n        let workerSet = this.workerSets[scriptUrl];\n        if (workerSet === undefined) {\n            workerSet = new ConcurrentWorkerSet({\n                scriptUrl,\n                workerCount: workerCount === undefined ? this.defaultWorkerCount : workerCount\n            });\n            this.workerSets[scriptUrl] = workerSet;\n        }\n        return workerSet;\n    }\n\n    /**\n     * Destroys a [[ConcurrentWorkerSet]] instance.\n     *\n     * @param scriptUrl The worker script URL that was used to create the [[ConcurrentWorkerSet]].\n     */\n    static destroyWorkerSet(scriptUrl: string) {\n        const workerSet = this.workerSets[scriptUrl];\n        if (workerSet !== undefined) {\n            workerSet.destroy();\n            delete this.workerSets[scriptUrl];\n        }\n    }\n\n    /**\n     * Destroys all managed [[ConcurrentWorkerSet]]s.\n     */\n    static destroy() {\n        Object.keys(this.workerSets).forEach(name => {\n            this.workerSets[name].destroy();\n        });\n        this.workerSets = {};\n    }\n\n    /**\n     * The [[ConcurrentWorkerSet]] instances which are stored by the script URL.\n     */\n    private static workerSets: {\n        [bundleUrl: string]: ConcurrentWorkerSet;\n    } = {};\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { getOptionValue, MathUtils } from \"@here/harp-utils\";\n\n/**\n * Copyright info attached to data displayed on map. Provided by [[DataSource]] and attached\n * to [[Tile]]s.\n *\n * In most cases, an application should display this information on [[MapView]] to conform with\n * licencing terms of its map data providers.\n *\n * @see [[CopyrightElementHandler]]\n */\nexport interface CopyrightInfo {\n    /**\n     * Unique id of the copyright holder.\n     *\n     * `id`s should be unique. It is recommended to build them from unique identifiers like\n     * registered domain names.\n     *\n     * Examples:\n     *\n     *  * `openstreetmap.org` - for data originating from OpenStreetMap project\n     *  * `naturalearthdata.com` - for data originating from Natural Earth dataset\n     *\n     * Note: [[DataSource]] may return [[CopyrightInfo]] with only `id`, thus defining only holder\n     * of copyright, however, valid attribution may require proper `label` and `link`.\n     *\n     * Entries with same `id` are deduplicated by [[CopyrightInfo.mergeArrays]].\n     */\n    id: string;\n\n    /**\n     * Copyright text to display after the copyright symbol on the map.\n     *\n     * If undefined, `id` is used as text label.\n     * Set it to empty string to not render a copyright info.\n     */\n    label?: string;\n\n    /**\n     * Optional URL pointing to further copyright information.\n     */\n    link?: string;\n\n    /**\n     * Optional, copyright notice year.\n     */\n    year?: number;\n}\n\nexport namespace CopyrightInfo {\n    /**\n     * Merge [[CopyrightInfo]] arrays, removing duplicates.\n     *\n     * `id` and `label` are considered keys in deduplication algorithm.\n     *\n     * @param sources non-duplicate elements from this array are added to `target`\n     * @returns merge of all copyright infos in `sources`\n     */\n    export function mergeArrays(a: CopyrightInfo[], b?: CopyrightInfo[]): CopyrightInfo[] {\n        const result: CopyrightInfo[] = [];\n        for (const source of [a, b]) {\n            if (source === undefined) {\n                continue;\n            }\n\n            for (const sourceInfo of source) {\n                const existingInfo = result.find(\n                    findItem =>\n                        findItem.id === sourceInfo.id ||\n                        (findItem.label !== undefined && findItem.label === sourceInfo.label)\n                );\n\n                if (existingInfo === undefined) {\n                    result.push({ ...sourceInfo });\n                } else {\n                    existingInfo.year = MathUtils.max2(sourceInfo.year, existingInfo.year);\n                    existingInfo.label = getOptionValue(sourceInfo.label, existingInfo.label);\n                    existingInfo.link = getOptionValue(sourceInfo.link, existingInfo.link);\n                }\n            }\n        }\n        return result;\n    }\n\n    /**\n     * Format copyright information to a HTML string that can be displayed in the UI.\n     *\n     * * Empty list returns empty string.\n     * * Entries with empty (but defined) labels are skipped.\n     *\n     * @param copyrightInfo Array of copyrights to format.\n     */\n    export function formatAsHtml(copyrightInfo: CopyrightInfo[]): string {\n        if (copyrightInfo.length === 0) {\n            return \"\";\n        }\n\n        const filtered = copyrightInfo.filter(entry => entry.label !== \"\");\n        if (filtered.length === 0) {\n            return \"\";\n        }\n\n        return (\n            \"© \" +\n            filtered\n                .map(entry => {\n                    const label = entry.label ?? entry.id;\n                    const text = entry.year !== undefined ? `${entry.year} ${label}` : label;\n                    const link = entry.link;\n                    return link\n                        ? `<a href=\"${link}\" target=\"_blank\" rel=\"noreferrer noopener\">${text}</a>`\n                        : `${text}`;\n                })\n                .join(\", \")\n        );\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    HighPrecisionLineMaterial,\n    HighPrecisionPointMaterial,\n    isHighPrecisionPointMaterial\n} from \"@here/harp-materials\";\nimport {\n    BufferAttribute,\n    BufferGeometry,\n    Camera,\n    Color,\n    Float32BufferAttribute,\n    InterleavedBuffer,\n    InterleavedBufferAttribute,\n    Matrix4,\n    PointsMaterialParameters,\n    ShaderMaterial,\n    ShaderMaterialParameters,\n    Vector3\n} from \"three\";\n\nimport * as HPL from \"./HighPrecisionLines\";\nimport * as HPP from \"./HighPrecisionPoints\";\nimport { triangulateLine } from \"./TriangulateLines\";\n\nexport namespace HighPrecisionUtils {\n    /**\n     * Extract the `float` parts of all vector members, Making this a `Vector3` of `float`.\n     * precision.\n     *\n     * @param v\n     */\n    export function doubleToFloatVec(v: Vector3): Vector3 {\n        return new Vector3(Math.fround(v.x), Math.fround(v.y), Math.fround(v.z));\n    }\n\n    /**\n     * Convert a `Vector3` to `float` (in place!) Returns the minor float vector, which is the\n     * difference of the double elements and their float counterparts.\n     *\n     * @param v Vector3 to convert to float IN-PLACE!\n     */\n    export function makeFloatVec(v: Vector3): Vector3 {\n        const majorX = Math.fround(v.x);\n        const majorY = Math.fround(v.y);\n        const majorZ = Math.fround(v.z);\n\n        const minorVec = new Vector3(v.x - majorX, v.y - majorY, v.z - majorZ);\n\n        v.x = Math.fround(majorX);\n        v.y = Math.fround(majorY);\n        v.z = Math.fround(majorZ);\n\n        return minorVec;\n    }\n\n    /**\n     * Describes addtional postion data needed to render high-precision vertices. Created by\n     * [[createHighPrecisionCameraPos]].\n     */\n    export interface HighPrecisionCameraInfo {\n        /**\n         * View Projection matrix of this high-precision camera.\n         */\n        viewProjection: Matrix4;\n\n        /**\n         * Low-order bits of the high-precision camera's position.\n         */\n        eyePosLo: Vector3;\n\n        /**\n         * High-order bits of the high-precision camera's position.\n         */\n        eyePosHi: Vector3;\n    }\n\n    /**\n     * Describes different properties used when creating a [[HighPrecisionLine]] or\n     * a [[HighPrecisionWireFrameLine]].\n     */\n    export interface HighPrecisionLineParams extends ShaderMaterialParameters {\n        /**\n         * Color of the rendered line.\n         */\n        color?: number | string | Color;\n\n        /**\n         * Width of the rendered line (specified in world units).\n         */\n        lineWidth?: number;\n\n        /**\n         * Add rounded caps to the extremes of the line if set to `true`.\n         */\n        addCircles?: boolean;\n\n        /**\n         * Opacity of the rendered line.\n         */\n        opacity?: number;\n\n        /**\n         * Renders a wireframe line if set to `true`.\n         */\n        wireFrame?: boolean;\n    }\n\n    /**\n     * Calculate high-precision camera position used in vertex shader of high-precision materials.\n     *\n     * @param camera Camera used to get the high-precision position.\n     * @param objectInverseWorldMatrix Inverse World Matrix of the rendered [[HighPrecisionObject]].\n     */\n    export function createHighPrecisionCameraPos(\n        camera: Camera,\n        objectInverseWorldMatrix: Matrix4\n    ): HighPrecisionCameraInfo {\n        const _projScreenMatrix = new Matrix4().copy(camera.projectionMatrix);\n        const mvp = _projScreenMatrix.multiply(camera.matrixWorldInverse);\n        const eyePos = new Vector3(0, 0, 0).applyMatrix4(objectInverseWorldMatrix);\n\n        // split the double float vector into hi and lo parts\n        const eyePosFloat = doubleToFloatVec(eyePos);\n\n        const eyePosLo = doubleToFloatVec(eyePos.sub(eyePosFloat));\n\n        return {\n            viewProjection: mvp,\n            eyePosHi: eyePosFloat,\n            eyePosLo\n        };\n    }\n\n    /**\n     * Updates the high-precision uniform data of a material used to render a\n     * [[HighPrecisionObject]].\n     *\n     * @param object [[HighPrecisionObject]] used for rendering.\n     * @param camera Camera used to get the high-precision position.\n     * @param shaderMaterial Material which uniforms will be updated.\n     */\n    export function updateHpUniforms(\n        object: HPL.HighPrecisionObject,\n        camera: Camera,\n        shaderMaterial: ShaderMaterial\n    ): void {\n        const highPrecisionCameraInfo = createHighPrecisionCameraPos(\n            camera,\n            object.matrixWorldInverse\n        );\n        const mvp = highPrecisionCameraInfo.viewProjection;\n\n        if (shaderMaterial !== undefined && shaderMaterial.isMaterial) {\n            if (\n                shaderMaterial.uniforms &&\n                shaderMaterial.uniforms.u_mvp &&\n                shaderMaterial.uniforms.u_eyepos &&\n                shaderMaterial.uniforms.u_eyepos_lowpart\n            ) {\n                shaderMaterial.uniforms.u_mvp.value = new Float32Array(mvp.elements);\n                shaderMaterial.uniforms.u_eyepos.value = new Float32Array(\n                    highPrecisionCameraInfo.eyePosHi.toArray()\n                );\n                shaderMaterial.uniforms.u_eyepos_lowpart.value = new Float32Array(\n                    highPrecisionCameraInfo.eyePosLo.toArray()\n                );\n            } else {\n                throw Error(\"High pecision material has missing uniforms\");\n            }\n        } else {\n            throw Error(\"High pecision line has no high precision material\");\n        }\n    }\n\n    /**\n     * Assembles the necessary attribute buffers needed to render [[HighPrecisionObject]].\n     *\n     * @param positions Array of positions.\n     */\n    export function createAttributes(\n        positions: ArrayLike<number> | ArrayLike<Vector3>\n    ): {\n        positionHigh: BufferAttribute;\n        positionLow: BufferAttribute;\n    } {\n        if (positions.length > 0) {\n            const v = positions[0];\n\n            if (v === undefined || v === null) {\n                throw Error(\"Empty element in positions\");\n            }\n\n            const positionVec = new Array<number>();\n            const positionVecLow = new Array<number>();\n\n            const addHPValue = (...values: number[]) => {\n                for (const value of values) {\n                    const major = Math.fround(value);\n                    positionVecLow.push(value - major);\n                    positionVec.push(major);\n                }\n            };\n\n            const addHPVector = (vec: Vector3) => {\n                addHPValue(vec.x, vec.y, vec.z);\n            };\n\n            const vAny = v as any;\n            if (vAny.z !== undefined) {\n                (positions as Vector3[]).forEach(vec => {\n                    addHPVector(vec);\n                });\n            } else {\n                if (positionVec.length % 3 !== 0) {\n                    throw Error(\"Positions must be 3D, not 2D\");\n                }\n                (positions as number[]).forEach((n: number): void => {\n                    addHPValue(n);\n                });\n            }\n\n            return {\n                positionHigh: new Float32BufferAttribute(positionVec, 3),\n                positionLow: new Float32BufferAttribute(positionVecLow, 3)\n            };\n        } else {\n            return {\n                positionHigh: new Float32BufferAttribute([], 3),\n                positionLow: new Float32BufferAttribute([], 3)\n            };\n        }\n    }\n\n    /**\n     * Assembles an interleaved buffer containing the position attribute data for a\n     * [[HighPrecisionObject]].\n     *\n     * @param positions Array of positions.\n     * @param stride Stride of the elements in the `positions` array.\n     * @param positionOffset Offset into the `positions` array.\n     */\n    export function addInterleavedAttributes3(\n        positions: ArrayLike<number>,\n        stride: number,\n        positionOffset = 0\n    ): ArrayLike<number> {\n        const newPositions = new Array<number>();\n\n        const end = positions.length;\n\n        for (let i = 0; i < end; i += stride) {\n            for (let j = 0; j < positionOffset; j++) {\n                newPositions.push(positions[i + j]);\n            }\n\n            const x = positions[i + positionOffset];\n            const y = positions[i + positionOffset + 1];\n            const z = positions[i + positionOffset + 2];\n            const majorX = Math.fround(x);\n            const minorX = x - majorX;\n            const majorY = Math.fround(y);\n            const minorY = y - majorY;\n            const majorZ = Math.fround(z);\n            const minorZ = z - majorZ;\n\n            // insert values in interleaved buffer\n            newPositions.push(majorX, majorY, majorZ, minorX, minorY, minorZ);\n\n            for (let j = positionOffset + 3; j < stride; j++) {\n                newPositions.push(positions[i + j]);\n            }\n        }\n\n        return newPositions;\n    }\n\n    /**\n     * Adds the high-precision position attribute data to a [[HighPrecisionObject]].\n     *\n     * @param object [[HighPrecisionObject]] which position attribute will be set.\n     * @param positions Array of positions.\n     */\n    export function setPositions(\n        object: HPL.HighPrecisionObject,\n        positions: ArrayLike<number> | ArrayLike<Vector3>\n    ): number {\n        const attributes = createAttributes(positions);\n\n        object.bufferGeometry.setAttribute(\"position\", attributes.positionHigh);\n        object.bufferGeometry.setAttribute(\"positionLow\", attributes.positionLow);\n\n        return attributes.positionHigh.itemSize;\n    }\n\n    /**\n     * Convert positions from `Array<Vector3>` to `Array<number>`.\n     *\n     * @param positions Array of positions.\n     */\n    export function convertPositions(\n        positions: ArrayLike<number> | ArrayLike<Vector3>\n    ): { positions: number[] } {\n        if (positions.length <= 0) {\n            return { positions: [] };\n        }\n\n        const v = positions[0];\n\n        if (v === undefined || v === null) {\n            throw Error(\"Empty element in positions\");\n        }\n\n        const vAny = v as any;\n        if (vAny.y === undefined && vAny.z === undefined) {\n            return { positions: positions as number[] };\n        }\n\n        const returnPositions = new Array<number>();\n        (positions as Vector3[]).forEach(vec => {\n            returnPositions.push(vec.x, vec.y, vec.z);\n        });\n\n        return { positions: returnPositions };\n    }\n\n    /**\n     * Creates a [[HighPrecisionLine]] or [[HighPrecisionWireFrameLine]] object.\n     *\n     * @param linePositions Array of 2D/3D positions.\n     * @param params Parameters used to configure the created [[HighPrecisionObject]].\n     */\n    export function createLine(\n        linePositions: ArrayLike<number>,\n        params: HighPrecisionLineParams\n    ): HPL.HighPrecisionLine | HPL.HighPrecisionWireFrameLine {\n        const lineWidth = params.lineWidth !== undefined ? params.lineWidth : 5;\n        const addCircles = params.addCircles !== undefined ? params.addCircles : false;\n        const wireFrame = params.wireFrame !== undefined ? params.wireFrame : false;\n\n        const positions: number[] = [];\n        const indices: number[] = [];\n\n        triangulateLine(linePositions, lineWidth, positions, indices, addCircles);\n\n        const hpLineGeometry = new BufferGeometry();\n        const hpPositions = addInterleavedAttributes3(positions, 3);\n        const buffer = new InterleavedBuffer(new Float32Array(hpPositions), 6);\n\n        const positionAttribute = new InterleavedBufferAttribute(buffer, 3, 0, false);\n        const positionLowAttribute = new InterleavedBufferAttribute(buffer, 3, 3, false);\n\n        hpLineGeometry.setAttribute(\"position\", positionAttribute);\n        hpLineGeometry.setAttribute(\"positionLow\", positionLowAttribute);\n        hpLineGeometry.setIndex(new BufferAttribute(new Uint32Array(indices), 1));\n\n        const hpSolidMaterial = new HighPrecisionLineMaterial(params);\n\n        const lineObject = wireFrame\n            ? new HPL.HighPrecisionWireFrameLine(hpLineGeometry, hpSolidMaterial)\n            : new HPL.HighPrecisionLine(hpLineGeometry, hpSolidMaterial);\n\n        lineObject.setupForRendering();\n\n        return lineObject;\n    }\n\n    /**\n     * Creates a group of [[HighPrecisionPoints]].\n     *\n     * @param pointPositions Array of 2D/3D positions.\n     * @param materialParameters Parameters used to configure the material used to render the\n     * created [[HighPrecisionPoints]].\n     */\n    export function createPoints(\n        pointPositions: ArrayLike<number>,\n        materialParameters?: PointsMaterialParameters | HighPrecisionPointMaterial\n    ): HPP.HighPrecisionPoints {\n        const indices: number[] = [];\n\n        // tslint:disable-next-line:prefer-for-of - pointPositions doesn't have iterable interface\n        for (let i = 0; i < pointPositions.length; i++) {\n            indices.push(indices.length / 3);\n        }\n\n        const hpPointsGeometry = new BufferGeometry();\n\n        const hpPointsMaterial = isHighPrecisionPointMaterial(materialParameters)\n            ? materialParameters\n            : new HighPrecisionPointMaterial(materialParameters);\n\n        const pointsObject = new HPP.HighPrecisionPoints(hpPointsGeometry, hpPointsMaterial);\n\n        setPositions(pointsObject, pointPositions);\n\n        pointsObject.setupForRendering();\n\n        return pointsObject;\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { Value } from \"@here/harp-datasource-protocol/index-decoder\";\n\n/**\n * Feature Modifier ids to choose which OmvFeatureModifer should be used in OmvDecoder.\n */\nexport enum FeatureModifierId {\n    /**\n     * Generic feature modifier used when no other modifiers are defined.\n     *\n     * @note You do not need to specify it in [[OmvDataSourceParameters]] as it is added by default\n     * if no other feature modifier is used.\n     */\n    default,\n    /**\n     * Identifier to use the OmvTomTomFeatureModifier in the OmvDecoder.\n     */\n    tomTom\n}\n\n/**\n * Definition of a filter.\n */\nexport interface OmvFilterString {\n    /**  String value */\n    value: string;\n    /** Match condition */\n    match: OmvFilterString.StringMatch;\n}\n\n/**\n * Adding the match condition type and the matching function to the namespace of `OmvFilterString`.\n */\nexport namespace OmvFilterString {\n    /**\n     * Match condition.\n     */\n    export enum StringMatch {\n        /** Matches any. */\n        Any,\n        /** Exact match. */\n        Match,\n        /** Matches if a test string starts with a filter string. */\n        StartsWith,\n        /** Matches if a test string contains a filter string. */\n        Contains,\n        /** Matches if a test string ends with a filter string. */\n        EndsWith\n    }\n\n    /**\n     * Check for a string against a filter.\n     *\n     * @param str The string to check against a filter.\n     * @param filterString The filter containing the match condition.\n     * @returns `true` if the match condition is satisfied.\n     */\n    export function matchString(str: string, filterString: OmvFilterString): boolean {\n        switch (filterString.match) {\n            case OmvFilterString.StringMatch.Any:\n                return true;\n            case OmvFilterString.StringMatch.Match:\n                return str === filterString.value;\n            case OmvFilterString.StringMatch.StartsWith:\n                return filterString.value.startsWith(str);\n            case OmvFilterString.StringMatch.EndsWith:\n                return filterString.value.endsWith(str);\n            default:\n                return str.indexOf(filterString.value) >= 0;\n        }\n    }\n}\n\n/**\n * Definition of a filter for a feature attribute\n */\nexport interface OmvFilterFeatureAttribute {\n    key: string;\n    value: Value;\n}\n\nexport enum OmvGeometryType {\n    UNKNOWN = 0,\n    POINT = 1,\n    LINESTRING = 2,\n    POLYGON = 3\n}\n\n/**\n * Internal type of a layer filter description, Should not be publicly available.\n *\n * @hidden\n */\nexport interface OmvLayerFilterDescription {\n    name: OmvFilterString;\n    minLevel: number;\n    maxLevel: number;\n}\n\n/**\n * Internal type of a single filter description, Should not be publicly available.\n *\n * @hidden\n */\nexport interface OmvFilterDescription {\n    layerName: OmvFilterString;\n    geometryTypes?: OmvGeometryType[];\n    classes?: OmvFilterString[];\n    minLevel: number;\n    maxLevel: number;\n    featureAttribute?: OmvFilterFeatureAttribute;\n}\n\n/**\n * Internal type of a complete [[OmvFeatureFilter]] description, should not be publicly available.\n *\n * @hidden\n */\nexport interface OmvFeatureFilterDescription {\n    processLayersDefault: boolean;\n    processPointsDefault: boolean;\n    processLinesDefault: boolean;\n    processPolygonsDefault: boolean;\n\n    layersToProcess: OmvLayerFilterDescription[];\n    layersToIgnore: OmvLayerFilterDescription[];\n    pointsToProcess: OmvFilterDescription[];\n    pointsToIgnore: OmvFilterDescription[];\n    linesToProcess: OmvFilterDescription[];\n    linesToIgnore: OmvFilterDescription[];\n    polygonsToProcess: OmvFilterDescription[];\n    polygonsToIgnore: OmvFilterDescription[];\n\n    // enabledKinds and disabledKinds\n    kindsToProcess: string[];\n    kindsToIgnore: string[];\n}\n\n/**\n * Internal interface for options passed from the [[OmvDataSource]] to the decoder.\n *\n * @hidden\n */\nexport interface OmvDecoderOptions {\n    /**\n     * If true, features that have no technique in the theme will be printed to the console (can be\n     * excessive!).\n     */\n    showMissingTechniques?: boolean;\n\n    /**\n     * Gather feature attributes from [[OmvData]]. Defaults to false.\n     */\n    gatherFeatureAttributes?: boolean;\n\n    /**\n     * @deprecated Tile info is not decoded anymore. The same information can be generated\n     * implementing a [[IGeometryProcessor]] and using [[OmvProtobufDataAdapter]] to decode OMV\n     * data.\n     */\n    createTileInfo?: boolean;\n\n    /**\n     * @deprecated Tile info is not decoded anymore. The same information can be generated\n     * implementing a [[IGeometryProcessor]] and using [[OmvProtobufDataAdapter]] to decode OMV\n     * data.\n     */\n    gatherRoadSegments?: boolean;\n\n    /**\n     * Optional storage level offset for [[Tile]]s. Default is -2.\n     */\n    storageLevelOffset?: number;\n\n    /**\n     * If not set to `false` very short text labels will be skipped during decoding based on a\n     * heuristic.\n     */\n    skipShortLabels?: boolean;\n\n    /**\n     * A description for the feature filter which can be safely passed down to the web workers.\n     * It has to be generated with the help of the [[OmvFeatureFilterDescriptionBuilder]] (to\n     * guarantee the correctness).\n     */\n    filterDescription?: OmvFeatureFilterDescription | null;\n\n    // NOTE: Consider using OmvFeatureModifiers objects already instead of ids, this way we could\n    // get rid of politicalView property as properly configured feature modifier (with country\n    // code), would be already defined here.\n    /**\n     * List of user specified [[OmvFeatureModifier]]s, list order declares the order of processing.\n     *\n     * Each identifier is used to choose corresponding OmvFeatureModifier, if undefined at least\n     * [[OmvGenericFeatureModifier]] is added to decoder.\n     */\n    featureModifiers?: FeatureModifierId[];\n\n    /**\n     * Country code (lower-case ISO 3166-1 alpha-2) defining optional point of view to be used.\n     * Set to empty string (\"\") if you want to use default (widely accepted) point of view.\n     * If set to `undefined` leaves current political view decoder configuration.\n     */\n    politicalView?: string;\n\n    enableElevationOverlay?: boolean;\n}\n\n/**\n * Default OMV tile decoder service type.\n *\n * Used for requesting decoder services using [[WorkerServiceManager]].\n */\nexport const OMV_TILE_DECODER_SERVICE_TYPE = \"omv-tile-decoder\";\n\n/**\n * Default OMV tiler service type.\n *\n * Used for requesting tiler services using [[WorkerServiceManager]].\n */\nexport const OMV_TILER_SERVICE_TYPE = \"omv-tiler\";\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { TileKey } from \"@here/harp-geoutils\";\nimport { DataSource, Tile } from \"@here/harp-mapview\";\n\nexport class OmvTile extends Tile {\n    constructor(dataSource: DataSource, tileKey: TileKey) {\n        super(dataSource, tileKey);\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * An [[Array]] following the order longitude, latitude, altitude.\n */\nexport type GeoPointLike = [number, number, number?];\n\n/**\n * Type guard to assert that `object` conforms to [[GeoPointLike]] interface.\n */\nexport function isGeoPointLike(geoPoint: any): geoPoint is GeoPointLike {\n    if (Array.isArray(geoPoint)) {\n        const [longitude, latitude, altitude] = geoPoint;\n        return (\n            typeof longitude === \"number\" &&\n            typeof latitude === \"number\" &&\n            (altitude === undefined || typeof altitude === \"number\")\n        );\n    }\n    return false;\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Represents an object with `LatLng` like interface.\n */\nexport interface LatLngLike {\n    /** The latitude in degrees. */\n    lat: number;\n\n    /** The longitude in degrees. */\n    lng: number;\n}\n\n/**\n * Type guard to assert that `object` conforms to [[LatLngLike]] interface.\n */\nexport function isLatLngLike(object: any): object is LatLngLike {\n    return object && typeof object.lat === \"number\" && typeof object.lng === \"number\";\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeoBox } from \"../coordinates/GeoBox\";\nimport { GeoCoordinates } from \"../coordinates/GeoCoordinates\";\nimport { GeoCoordinatesLike } from \"../coordinates/GeoCoordinatesLike\";\nimport { Box3Like, isBox3Like } from \"../math/Box3Like\";\nimport { MathUtils } from \"../math/MathUtils\";\nimport { isOrientedBox3Like, OrientedBox3Like } from \"../math/OrientedBox3Like\";\nimport { Vector3Like } from \"../math/Vector3Like\";\nimport { EarthConstants } from \"./EarthConstants\";\nimport { Projection, ProjectionType } from \"./Projection\";\n\nimport * as THREE from \"three\";\n\nclass EquirectangularProjection extends Projection {\n    static geoToWorldScale: number = 1.0 / (2.0 * Math.PI);\n    static worldToGeoScale: number = (2.0 * Math.PI) / 1.0;\n\n    /** @override */\n    readonly type: ProjectionType = ProjectionType.Planar;\n\n    /** @override */\n    getScaleFactor(_worldPoint: Vector3Like): number {\n        return 1;\n    }\n\n    /** @override */\n    worldExtent<WorldBoundingBox extends Box3Like>(\n        minAltitude: number,\n        maxAltitude: number,\n        result?: WorldBoundingBox\n    ): WorldBoundingBox {\n        if (!result) {\n            result = (new THREE.Box3() as Box3Like) as WorldBoundingBox;\n        }\n        result.min.x = 0.0;\n        result.min.y = 0.0;\n        result.min.z = minAltitude;\n        result.max.x = this.unitScale;\n        result.max.y = this.unitScale / 2;\n        result.max.z = maxAltitude;\n        return result;\n    }\n\n    /** @override */\n    projectPoint<WorldCoordinates extends Vector3Like>(\n        geoPoint: GeoCoordinatesLike,\n        result?: WorldCoordinates\n    ): WorldCoordinates {\n        if (result === undefined) {\n            /*\n             * The following tslint:disable is due to the fact that the [[WorldCoordinates]]\n             * might be a concrete class which is not available at runtime.\n             * Consider the following example:\n             *\n             *  const x: THREE.Vector3 = new THREE.Vector3(0,0,0);\n             *  const result = EquirectangularProjection.projectPoint<THREE.Vector3>(x);\n             *\n             * Note: type of `result` is Vector3Like and not as expected: THREE.Vector3!\n             */\n            // tslint:disable-next-line:no-object-literal-type-assertion\n            result = { x: 0, y: 0, z: 0 } as WorldCoordinates;\n        }\n        result.x =\n            (THREE.MathUtils.degToRad(geoPoint.longitude) + Math.PI) *\n            EquirectangularProjection.geoToWorldScale *\n            this.unitScale;\n        result.y =\n            (THREE.MathUtils.degToRad(geoPoint.latitude) + Math.PI * 0.5) *\n            EquirectangularProjection.geoToWorldScale *\n            this.unitScale;\n        result.z = geoPoint.altitude || 0;\n        return result;\n    }\n\n    /** @override */\n    unprojectPoint(worldPoint: Vector3Like): GeoCoordinates {\n        const geoPoint = GeoCoordinates.fromRadians(\n            (worldPoint.y * EquirectangularProjection.worldToGeoScale) / this.unitScale -\n                Math.PI * 0.5,\n            (worldPoint.x * EquirectangularProjection.worldToGeoScale) / this.unitScale - Math.PI,\n            worldPoint.z\n        );\n        return geoPoint;\n    }\n\n    /** @override */\n    unprojectAltitude(worldPoint: Vector3Like): number {\n        return worldPoint.z;\n    }\n\n    /** @override */\n    projectBox<WorldBoundingBox extends Box3Like | OrientedBox3Like>(\n        geoBox: GeoBox,\n        result?: WorldBoundingBox\n    ): WorldBoundingBox {\n        const worldCenter = this.projectPoint(\n            new GeoCoordinates(geoBox.center.latitude, geoBox.center.longitude, 0)\n        );\n        const { latitudeSpanInRadians, longitudeSpanInRadians, altitudeSpan } = geoBox;\n        const sizeX = longitudeSpanInRadians * EquirectangularProjection.geoToWorldScale;\n        const sizeY = latitudeSpanInRadians * EquirectangularProjection.geoToWorldScale;\n        if (!result) {\n            result = (new THREE.Box3() as Box3Like) as WorldBoundingBox;\n        }\n        if (isBox3Like(result)) {\n            result.min.x = worldCenter.x - sizeX * 0.5 * this.unitScale;\n            result.min.y = worldCenter.y - sizeY * 0.5 * this.unitScale;\n            result.max.x = worldCenter.x + sizeX * 0.5 * this.unitScale;\n            result.max.y = worldCenter.y + sizeY * 0.5 * this.unitScale;\n            if (altitudeSpan !== undefined) {\n                result.min.z = worldCenter.z - altitudeSpan * 0.5;\n                result.max.z = worldCenter.z + altitudeSpan * 0.5;\n            } else {\n                result.min.z = 0;\n                result.max.z = 0;\n            }\n        } else if (isOrientedBox3Like(result)) {\n            MathUtils.newVector3(1, 0, 0, result.xAxis);\n            MathUtils.newVector3(0, 1, 0, result.yAxis);\n            MathUtils.newVector3(0, 0, 1, result.zAxis);\n            result.position.x = worldCenter.x;\n            result.position.y = worldCenter.y;\n            result.position.z = worldCenter.z;\n            result.extents.x = sizeX * 0.5 * this.unitScale;\n            result.extents.y = sizeY * 0.5 * this.unitScale;\n            result.extents.z = Math.max(Number.EPSILON, (altitudeSpan || 0) * 0.5);\n        }\n        return result;\n    }\n\n    /** @override */\n    unprojectBox(worldBox: Box3Like): GeoBox {\n        const minGeo = this.unprojectPoint(worldBox.min);\n        const maxGeo = this.unprojectPoint(worldBox.max);\n        return GeoBox.fromCoordinates(minGeo, maxGeo);\n    }\n\n    /** @override */\n    groundDistance(worldPoint: Vector3Like): number {\n        return worldPoint.z;\n    }\n\n    /** @override */\n    scalePointToSurface(worldPoint: Vector3Like): Vector3Like {\n        worldPoint.z = 0;\n        return worldPoint;\n    }\n\n    /** @override */\n    surfaceNormal(_worldPoint: Vector3Like, normal?: Vector3Like) {\n        if (normal === undefined) {\n            normal = { x: 0, y: 0, z: 1 };\n        } else {\n            normal.x = 0;\n            normal.y = 0;\n            normal.z = 1;\n        }\n        return normal;\n    }\n}\n\n/**\n * Equirectangular [[Projection]] used to convert geo coordinates to unit coordinates and vice\n * versa.\n */\nexport const normalizedEquirectangularProjection: Projection = new EquirectangularProjection(1);\n\n/**\n * Equirectangular [[Projection]] used to convert geo coordinates to world coordinates and vice\n * versa.\n */\nexport const equirectangularProjection: Projection = new EquirectangularProjection(\n    EarthConstants.EQUATORIAL_CIRCUMFERENCE\n);\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeoBox } from \"../coordinates/GeoBox\";\nimport { GeoCoordinates } from \"../coordinates/GeoCoordinates\";\nimport { GeoCoordinatesLike } from \"../coordinates/GeoCoordinatesLike\";\nimport { Box3Like, isBox3Like } from \"../math/Box3Like\";\nimport { MathUtils } from \"../math/MathUtils\";\nimport { isOrientedBox3Like, OrientedBox3Like } from \"../math/OrientedBox3Like\";\nimport { Vector3Like } from \"../math/Vector3Like\";\nimport { EarthConstants } from \"./EarthConstants\";\nimport { Projection, ProjectionType } from \"./Projection\";\n\nimport * as THREE from \"three\";\n\n/**\n *\n * https://en.wikipedia.org/wiki/Transverse_Mercator_projection\n * http://mathworld.wolfram.com/MercatorProjection.html\n *\n */\nclass TransverseMercatorProjection extends Projection {\n    /**\n     * Like in regular Mercator projection, there are two points on sphere\n     * with radius about 5 degrees, that is out of projected space.\n     *\n     *\n     * in regular Mercator these points are:\n     *     (90, any), (-90, any)\n     *\n     * and in transverse Mercator:\n     *     (0, 90), (0, -90)\n     *\n     * So, in transverse we need to compute distnce to poles, and clamp if\n     * radius is exceeded\n     */\n    static clampGeoPoint(geoPoint: GeoCoordinatesLike, _unitScale: number) {\n        const lat = geoPoint.latitude;\n        const lon = geoPoint.longitude;\n\n        const r = TransverseMercatorUtils.POLE_RADIUS;\n        const rsq = TransverseMercatorUtils.POLE_RADIUS_SQ;\n\n        const nearestQuarter = Math.round(lon / 90);\n        const deltaLon = nearestQuarter * 90 - lon;\n        if (nearestQuarter % 2 === 0 || Math.abs(deltaLon) > r) {\n            return geoPoint;\n        }\n\n        const deltaLat = lat - 0;\n        const distanceToPoleSq = deltaLon * deltaLon + deltaLat * deltaLat;\n        if (distanceToPoleSq < rsq) {\n            const distanceToPole = Math.sqrt(distanceToPoleSq);\n            const scale = (r - distanceToPole) / distanceToPole;\n            // const quarter = ((nearestQuarter % 4) + 4) % 4;\n            // const dir = quarter === 1 ? -1 : quarter === 3 ? 1 : 0;\n            const dir = 1;\n            const offsetLon = deltaLon === 0 && deltaLat === 0 ? r * dir : deltaLon;\n            return new GeoCoordinates(lat + deltaLat * scale, lon + offsetLon * scale);\n        }\n\n        return geoPoint;\n    }\n\n    /** @override */\n    readonly type: ProjectionType = ProjectionType.Planar;\n\n    private m_phi0: number = 0;\n    private m_lambda0: number = 0;\n\n    constructor(readonly unitScale: number) {\n        super(unitScale);\n    }\n\n    /** @override */\n    getScaleFactor(worldPoint: Vector3Like): number {\n        return Math.cosh((worldPoint.x / this.unitScale - 0.5) * 2 * Math.PI);\n    }\n\n    /** @override */\n    worldExtent<WorldBoundingBox extends Box3Like>(\n        minAltitude: number,\n        maxAltitude: number,\n        result?: WorldBoundingBox\n    ): WorldBoundingBox {\n        if (!result) {\n            result = (new THREE.Box3() as Box3Like) as WorldBoundingBox;\n        }\n        result.min.x = 0;\n        result.min.y = 0;\n        result.min.z = minAltitude;\n        result.max.x = this.unitScale;\n        result.max.y = this.unitScale;\n        result.max.z = maxAltitude;\n        return result;\n    }\n\n    /** @override */\n    projectPoint<WorldCoordinates extends Vector3Like>(\n        geoPoint: GeoCoordinatesLike,\n        result?: WorldCoordinates\n    ): WorldCoordinates {\n        if (!result) {\n            // tslint:disable-next-line:no-object-literal-type-assertion\n            result = { x: 0, y: 0, z: 0 } as WorldCoordinates;\n        }\n\n        const clamped = TransverseMercatorProjection.clampGeoPoint(geoPoint, this.unitScale);\n        const normalLon = clamped.longitude / 360 + 0.5;\n        const offset = normalLon === 1 ? 0 : Math.floor(normalLon);\n        const phi = THREE.MathUtils.degToRad(clamped.latitude);\n        const lambda = THREE.MathUtils.degToRad(clamped.longitude - offset * 360) - this.m_lambda0;\n\n        const B = Math.cos(phi) * Math.sin(lambda);\n        // result.x = 1/2 * Math.log((1 + B) / (1 - B));\n        result.x = Math.atanh(B);\n        result.y = Math.atan2(Math.tan(phi), Math.cos(lambda)) - this.m_phi0;\n\n        const outScale = 0.5 / Math.PI;\n        result.x =\n            this.unitScale * (THREE.MathUtils.clamp(result.x * outScale + 0.5, 0, 1) + offset);\n        result.y = this.unitScale * THREE.MathUtils.clamp(result.y * outScale + 0.5, 0, 1);\n\n        result.z = geoPoint.altitude || 0;\n        return result;\n    }\n\n    /** @override */\n    unprojectPoint(worldPoint: Vector3Like): GeoCoordinates {\n        const tau = Math.PI * 2;\n        const nx = worldPoint.x / this.unitScale;\n        const ny = worldPoint.y / this.unitScale;\n        const offset = nx === 1 ? 0 : Math.floor(nx);\n        const x = tau * (nx - 0.5 - offset);\n        const y = tau * (ny - 0.5);\n        const z = worldPoint.z || 0;\n\n        const D = y + this.m_phi0;\n\n        const phi = Math.asin(Math.sin(D) / Math.cosh(x));\n        const lambda = this.m_lambda0 + Math.atan2(Math.sinh(x), Math.cos(D)) + offset * tau;\n\n        const geoPoint = GeoCoordinates.fromRadians(phi, lambda, z);\n        return geoPoint;\n    }\n\n    /** @override */\n    projectBox<WorldBoundingBox extends Box3Like | OrientedBox3Like>(\n        geoBox: GeoBox,\n        result?: WorldBoundingBox\n    ): WorldBoundingBox {\n        const { north, south, east, west } = geoBox;\n\n        const pointsToCheck = [\n            geoBox.center,\n            geoBox.northEast,\n            geoBox.southWest,\n            new GeoCoordinates(south, east),\n            new GeoCoordinates(north, west)\n        ];\n\n        const E = TransverseMercatorUtils.POLE_EDGE_DEG;\n\n        const containsWestCut = west < -90 && east > -90;\n        const containsEastCut = west < 90 && east > 90;\n        const containsCenterX = west < 0 && east > 0;\n        const containsCenterY = west < E && east > -E && north > 0 && south < 0;\n\n        if (containsWestCut) {\n            pointsToCheck.push(new GeoCoordinates(north, -90));\n            pointsToCheck.push(new GeoCoordinates(south, -90));\n        }\n\n        if (containsEastCut) {\n            pointsToCheck.push(new GeoCoordinates(north, 90));\n            pointsToCheck.push(new GeoCoordinates(south, 90));\n        }\n\n        if (containsCenterX) {\n            pointsToCheck.push(new GeoCoordinates(north, 0));\n            pointsToCheck.push(new GeoCoordinates(south, 0));\n        }\n\n        if (containsCenterY) {\n            pointsToCheck.push(new GeoCoordinates(0, west));\n            pointsToCheck.push(new GeoCoordinates(0, east));\n        }\n\n        TransverseMercatorUtils.alignLatitude(pointsToCheck, pointsToCheck[0]);\n\n        const projected = pointsToCheck.map(p => this.projectPoint(p));\n        const vx = projected.map(p => p.x);\n        const vy = projected.map(p => p.y);\n        const vz = projected.map(p => p.z);\n\n        const minX = Math.min(...vx);\n        const minY = Math.min(...vy);\n        const minZ = Math.min(...vz);\n        const maxX = Math.max(...vx);\n        const maxY = Math.max(...vy);\n        const maxZ = Math.max(...vz);\n\n        if (!result) {\n            result = (new THREE.Box3() as Box3Like) as WorldBoundingBox;\n        }\n        if (isBox3Like(result)) {\n            result.min.x = minX;\n            result.min.y = minY;\n            result.min.z = minZ;\n            result.max.x = maxX;\n            result.max.y = maxY;\n            result.max.z = maxZ;\n        } else if (isOrientedBox3Like(result)) {\n            MathUtils.newVector3(1, 0, 0, result.xAxis);\n            MathUtils.newVector3(0, 1, 0, result.yAxis);\n            MathUtils.newVector3(0, 0, 1, result.zAxis);\n            result.position.x = (minX + maxX) / 2;\n            result.position.y = (minY + maxY) / 2;\n            result.position.z = (minZ + maxZ) / 2;\n            result.extents.x = (maxX - minX) / 2;\n            result.extents.y = (maxY - minY) / 2;\n            result.extents.z = (maxZ - minZ) / 2;\n        } else {\n            throw new Error(\"invalid bounding box\");\n        }\n        return result;\n    }\n\n    /**\n     * There are 8 sub-regions on entire projection space\n     * where both longitude and latitude preserve direction.\n     * If bounding box hits more than one region, it should be splitted\n     * into sub-boxes by regions, (un)projected and then united again.\n     *\n     *\n     * directions in form [latitude / longitude]:\n     *    1 ┌─────────|─────────┐\n     *      │ dr / dl | dl / ul │\n     * 0.75 ----------|----------\n     *      │ ur / dr | ul / ur │\n     * 0.5  ----------|----------\n     *      │ ul / ur | ur / dr │\n     * 0.25 ----------|----------\n     *      │ dl / ul | dr / dl │\n     *      └─────────|─────────┘\n     *     0         0.5        1\n     *     @override\n     */\n    unprojectBox(worldBox: Box3Like): GeoBox {\n        const s = this.unitScale;\n\n        const min = worldBox.min;\n        const max = worldBox.max;\n        const pointsToCheck = [\n            { x: (min.x + max.x) / 2, y: (min.y + max.y) / 2, z: 0 },\n            min,\n            max,\n            { x: min.x, y: max.y, z: 0 },\n            { x: max.x, y: min.y, z: 0 }\n        ];\n\n        const center = 0.5 * s;\n        const lowerQ = 0.25 * s;\n        const upperQ = 0.75 * s;\n\n        const containsCenterX = min.x < center && max.x > center;\n        const containsCenterY = min.y < center && max.y > center;\n        const containsLowerQY = min.y < lowerQ && max.y > lowerQ;\n        const containsUpperQY = min.y < upperQ && max.y > upperQ;\n\n        if (containsCenterY) {\n            pointsToCheck.push({ x: min.x, y: center, z: 0 });\n            pointsToCheck.push({ x: max.x, y: center, z: 0 });\n\n            if (containsCenterX) {\n                pointsToCheck.push({ x: center, y: center, z: 0 });\n            }\n        }\n        if (containsLowerQY) {\n            pointsToCheck.push({ x: min.x, y: lowerQ, z: 0 });\n            pointsToCheck.push({ x: max.x, y: lowerQ, z: 0 });\n\n            if (containsCenterX) {\n                pointsToCheck.push({ x: center, y: lowerQ, z: 0 });\n            }\n        }\n        if (containsUpperQY) {\n            pointsToCheck.push({ x: min.x, y: upperQ, z: 0 });\n            pointsToCheck.push({ x: max.x, y: upperQ, z: 0 });\n\n            if (containsCenterX) {\n                pointsToCheck.push({ x: center, y: upperQ, z: 0 });\n            }\n        }\n\n        const geoPoints = pointsToCheck.map(p => this.unprojectPoint(p));\n        TransverseMercatorUtils.alignLongitude(geoPoints, geoPoints[0]);\n\n        const latitudes = geoPoints.map(g => g.latitude);\n        const longitudes = geoPoints.filter(g => Math.abs(g.latitude) < 90).map(g => g.longitude);\n        const altitudes = geoPoints.map(g => g.altitude || 0);\n\n        const minGeo = new GeoCoordinates(\n            Math.min(...latitudes),\n            Math.min(...longitudes),\n            Math.min(...altitudes)\n        );\n\n        const maxGeo = new GeoCoordinates(\n            Math.max(...latitudes),\n            Math.max(...longitudes),\n            Math.max(...altitudes)\n        );\n\n        const geoBox = GeoBox.fromCoordinates(minGeo, maxGeo);\n        return geoBox;\n    }\n\n    /** @override */\n    unprojectAltitude(worldPoint: Vector3Like): number {\n        return worldPoint.z;\n    }\n\n    /** @override */\n    groundDistance(worldPoint: Vector3Like): number {\n        return worldPoint.z;\n    }\n\n    /** @override */\n    scalePointToSurface(worldPoint: Vector3Like): Vector3Like {\n        worldPoint.z = 0;\n        return worldPoint;\n    }\n\n    /** @override */\n    surfaceNormal(_worldPoint: Vector3Like, normal?: Vector3Like) {\n        if (normal === undefined) {\n            normal = { x: 0, y: 0, z: -1 };\n        } else {\n            normal.x = 0;\n            normal.y = 0;\n            normal.z = -1;\n        }\n        return normal;\n    }\n}\n\nexport class TransverseMercatorUtils {\n    static POLE_EDGE: number = 1.4844222297453323;\n    static POLE_EDGE_DEG: number = THREE.MathUtils.radToDeg(TransverseMercatorUtils.POLE_EDGE);\n    static POLE_RADIUS: number = 90 - TransverseMercatorUtils.POLE_EDGE_DEG;\n    static POLE_RADIUS_SQ: number = Math.pow(TransverseMercatorUtils.POLE_RADIUS, 2);\n\n    /**\n     * There are two regions on projected space that have same geo coordinates,\n     * it's the entire lines   { x: [0..1], y: 0 } and { x: [0..1], y: 1 }\n     * they both have geo coordinates of   (0, [-90..+90])\n     * and should be aligned somehow to fall into first or second region\n     * to make proper bounding boxes, tile bounds, etc.\n     */\n    static alignLatitude(points: GeoCoordinatesLike[], referencePoint: GeoCoordinatesLike): void {\n        const EPSILON = 1e-9;\n\n        for (const point of points) {\n            if (point.latitude === 0) {\n                point.latitude = referencePoint.latitude * EPSILON;\n            }\n        }\n    }\n\n    /**\n     * There are two regions on projected plane,\n     * { x: 0.5, y: [0..0.25] }    and    { x: 0.5, y: [0.75..1] }\n     * that represent longitude edge where -180 and +180 met.\n     * Points falling in this regions should be aligned to get proper boxes etc.\n     */\n    static alignLongitude(points: GeoCoordinatesLike[], referencePoint: GeoCoordinatesLike): void {\n        const bad = referencePoint.longitude < 0 ? 180 : -180;\n        const good = referencePoint.longitude < 0 ? -180 : 180;\n\n        for (const point of points) {\n            if (point.longitude === bad) {\n                point.longitude = good;\n            }\n        }\n    }\n}\n\n/**\n * Transverse Mercator [[Projection]] used to convert geo coordinates to world coordinates\n * and vice versa.\n */\nexport const transverseMercatorProjection: Projection = new TransverseMercatorProjection(\n    EarthConstants.EQUATORIAL_CIRCUMFERENCE\n);\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeoBox } from \"../coordinates/GeoBox\";\nimport { Box3Like } from \"../math/Box3Like\";\nimport { Vector3Like } from \"../math/Vector3Like\";\nimport { Projection } from \"../projection/Projection\";\nimport { SubdivisionScheme } from \"./SubdivisionScheme\";\nimport { TileKey } from \"./TileKey\";\nimport { TilingScheme } from \"./TilingScheme\";\n\nimport * as THREE from \"three\";\n\n/**\n * `FlatTileBoundingBoxGenerator` generates bounding boxes in world and geo coordinates for a given\n * TilingScheme.\n */\nexport class FlatTileBoundingBoxGenerator {\n    private readonly m_tilingScheme: TilingScheme;\n    private readonly m_worldDimensions: Vector3Like;\n    private readonly m_worldBox: Box3Like;\n    /**\n     * Creates a new `FlatTileBoundingBoxGenerator` that can generate bounding boxes for the given\n     * TilingScheme.\n     *\n     * @param tilingScheme The [[TilingScheme]] used to compute bounding boxes.\n     * @param minElevation The minimum elevation in meters.\n     * @param maxElevation The maximum elevation in meters.\n     */\n    constructor(\n        readonly tilingScheme: TilingScheme,\n        readonly minElevation: number = 0,\n        readonly maxElevation: number = 0\n    ) {\n        this.m_tilingScheme = tilingScheme;\n        this.m_worldBox = tilingScheme.projection.worldExtent(minElevation, maxElevation);\n        const { min, max } = this.m_worldBox;\n        this.m_worldDimensions = { x: max.x - min.x, y: max.y - min.y, z: max.z - min.z };\n    }\n\n    /**\n     * Returns the [[Projection]] of the [[TilingScheme]].\n     */\n    get projection(): Projection {\n        return this.m_tilingScheme.projection;\n    }\n\n    /**\n     * Returns the [[SubdivisionScheme]] of the [[TilingScheme]].\n     */\n    get subdivisionScheme(): SubdivisionScheme {\n        return this.m_tilingScheme.subdivisionScheme;\n    }\n\n    /**\n     * Returns the bounding box in world coordinates of the given [[TileKey]].\n     *\n     * Example:\n     * ```typescript\n     * const worldBounds = new THREE.Box3();\n     * generator.getWorldBox(geoBox, worldBounds);\n     * console.log(worldBounds.getCenter());\n     * ```\n     *\n     * @param tileKey The TileKey.\n     * @param result The optional object used to store the resulting bounding box in world\n     * coordinates.\n     */\n    getWorldBox(tileKey: TileKey, result?: Box3Like): Box3Like {\n        const level = tileKey.level;\n        const levelDimensionX = this.subdivisionScheme.getLevelDimensionX(level);\n        const levelDimensionY = this.subdivisionScheme.getLevelDimensionY(level);\n        const sizeX = this.m_worldDimensions.x / levelDimensionX;\n        const sizeY = this.m_worldDimensions.y / levelDimensionY;\n        const originX = this.m_worldBox.min.x + sizeX * tileKey.column;\n        const originY = this.m_worldBox.min.y + sizeY * tileKey.row;\n\n        if (!result) {\n            result = new THREE.Box3();\n        }\n\n        result.min.x = originX;\n        result.min.y = originY;\n        result.min.z = this.m_worldBox.min.z;\n        result.max.x = originX + sizeX;\n        result.max.y = originY + sizeY;\n        result.max.z = this.m_worldBox.max.z;\n        return result;\n    }\n\n    /**\n     * Returns the bounding box in geo coordinates for the given [[TileKey]].\n     *\n     * Example:\n     * ```typescript\n     * const geoBox = generator.getGeoBox(worldBounds);\n     * console.log(geoBox.center);\n     * ```\n     *\n     * @param tileKey The [[TileKey]].\n     */\n    getGeoBox(tileKey: TileKey): GeoBox {\n        const worldBox = this.getWorldBox(tileKey);\n        return this.projection.unprojectBox(worldBox);\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { SubdivisionScheme } from \"./SubdivisionScheme\";\n\nclass HalfQuadTreeSubdivisionScheme implements SubdivisionScheme {\n    getSubdivisionX(): number {\n        return 2;\n    }\n    getSubdivisionY(level: number): number {\n        return level === 0 ? 1 : 2;\n    }\n    getLevelDimensionX(level: number): number {\n        // tslint:disable-next-line:no-bitwise\n        return 1 << level;\n    }\n    getLevelDimensionY(level: number): number {\n        // tslint:disable-next-line:no-bitwise\n        return level !== 0 ? 1 << (level - 1) : 1;\n    }\n}\n\n/**\n * A [[SubdivisionScheme]] used to represent half quadtrees. This particular subdivision scheme is\n * used by the HERE tiling scheme.\n */\nexport const halfQuadTreeSubdivisionScheme: SubdivisionScheme = new HalfQuadTreeSubdivisionScheme();\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { TileKey } from \"./TileKey\";\n\nexport class SubTiles implements Iterable<TileKey> {\n    constructor(public tileKey: TileKey, public sizeX: number, public sizeY: number) {}\n\n    [Symbol.iterator](): Iterator<TileKey> {\n        return this.sizeX === 2 && this.sizeY === 2\n            ? SubTiles.ZCurveIterator(this.tileKey)\n            : SubTiles.RowColumnIterator(this.tileKey, this.sizeX, this.sizeY);\n    }\n}\n\nexport namespace SubTiles {\n    export function* RowColumnIterator(\n        parentKey: TileKey,\n        sizeX: number,\n        sizeY: number\n    ): Iterator<TileKey> {\n        for (let y = 0; y < sizeY; y++) {\n            for (let x = 0; x < sizeX; x++) {\n                yield TileKey.fromRowColumnLevel(\n                    parentKey.row * sizeY + y,\n                    parentKey.column * sizeX + x,\n                    parentKey.level + 1\n                );\n            }\n        }\n    }\n\n    export function* ZCurveIterator(parentKey: TileKey): Iterator<TileKey> {\n        // tslint:disable:no-bitwise\n        for (let i = 0; i < 4; i++) {\n            yield TileKey.fromRowColumnLevel(\n                (parentKey.row << 1) | (i >> 1),\n                (parentKey.column << 1) | (i & 1),\n                parentKey.level + 1\n            );\n        }\n        // tslint:enableno-bitwise\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeoBox } from \"../coordinates/GeoBox\";\nimport { GeoCoordinates } from \"../coordinates/GeoCoordinates\";\nimport { GeoCoordinatesLike } from \"../coordinates/GeoCoordinatesLike\";\nimport { Vector3Like } from \"../math/Vector3Like\";\nimport { TileKey } from \"./TileKey\";\nimport { TilingScheme } from \"./TilingScheme\";\n\nexport class TileKeyUtils {\n    static geoCoordinatesToTileKey(\n        tilingScheme: TilingScheme,\n        geoPoint: GeoCoordinatesLike,\n        level: number\n    ): TileKey | null {\n        const projection = tilingScheme.projection;\n        const worldPoint = projection.projectPoint(geoPoint);\n\n        return this.worldCoordinatesToTileKey(tilingScheme, worldPoint, level);\n    }\n\n    static worldCoordinatesToTileKey(\n        tilingScheme: TilingScheme,\n        worldPoint: Vector3Like,\n        level: number\n    ): TileKey | null {\n        const projection = tilingScheme.projection;\n        const subdivisionScheme = tilingScheme.subdivisionScheme;\n\n        const cx = subdivisionScheme.getLevelDimensionX(level);\n        const cy = subdivisionScheme.getLevelDimensionY(level);\n\n        const { min, max } = projection.worldExtent(0, 0);\n        const worldSizeX = max.x - min.x;\n        const worldSizeY = max.y - min.y;\n\n        if (worldPoint.x < min.x || worldPoint.x > max.x) {\n            return null;\n        }\n\n        if (worldPoint.y < min.y || worldPoint.y > max.y) {\n            return null;\n        }\n\n        const column = Math.min(cx - 1, Math.floor((cx * (worldPoint.x - min.x)) / worldSizeX));\n        const row = Math.min(cy - 1, Math.floor((cy * (worldPoint.y - min.y)) / worldSizeY));\n\n        return TileKey.fromRowColumnLevel(row, column, level);\n    }\n\n    static geoRectangleToTileKeys(\n        tilingScheme: TilingScheme,\n        geoBox: GeoBox,\n        level: number\n    ): TileKey[] {\n        const wrap = (value: number, lower: number, upper: number) => {\n            if (value < lower) {\n                return upper - ((lower - value) % (upper - lower));\n            }\n\n            return lower + ((value - lower) % (upper - lower));\n        };\n\n        const clamp = (x: number, minVal: number, maxVal: number) => {\n            return Math.min(Math.max(x, minVal), maxVal);\n        };\n\n        // Clamp at the poles and wrap around the international date line.\n        const southWestLongitude = wrap(geoBox.southWest.longitudeInRadians, -Math.PI, Math.PI);\n        const southWestLatitude = clamp(\n            geoBox.southWest.latitudeInRadians,\n            -(Math.PI * 0.5),\n            Math.PI * 0.5\n        );\n        const northEastLongitude = wrap(geoBox.northEast.longitudeInRadians, -Math.PI, Math.PI);\n        const northEastLatitude = clamp(\n            geoBox.northEast.latitudeInRadians,\n            -(Math.PI * 0.5),\n            Math.PI * 0.5\n        );\n        const minTileKey = TileKeyUtils.geoCoordinatesToTileKey(\n            tilingScheme,\n            GeoCoordinates.fromRadians(southWestLatitude, southWestLongitude),\n            level\n        );\n        const maxTileKey = TileKeyUtils.geoCoordinatesToTileKey(\n            tilingScheme,\n            GeoCoordinates.fromRadians(northEastLatitude, northEastLongitude),\n            level\n        );\n        const columnCount = tilingScheme.subdivisionScheme.getLevelDimensionX(level);\n\n        if (!minTileKey || !maxTileKey) {\n            throw new Error(\"Invalid coordinates\");\n        }\n\n        const minColumn = minTileKey.column;\n        let maxColumn = maxTileKey.column;\n\n        // wrap around case\n        if (southWestLongitude > northEastLongitude) {\n            if (maxColumn !== minColumn) {\n                maxColumn += columnCount;\n            } else {\n                // do not duplicate\n                maxColumn += columnCount - 1;\n            }\n        }\n\n        const minRow = Math.min(minTileKey.row, maxTileKey.row);\n        const maxRow = Math.max(minTileKey.row, maxTileKey.row);\n\n        const keys = new Array<TileKey>();\n\n        for (let row = minRow; row <= maxRow; ++row) {\n            for (let column = minColumn; column <= maxColumn; ++column) {\n                keys.push(TileKey.fromRowColumnLevel(row, column % columnCount, level));\n            }\n        }\n\n        return keys;\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { SubdivisionScheme } from \"./SubdivisionScheme\";\nimport { SubTiles } from \"./SubTiles\";\nimport { TileKey } from \"./TileKey\";\n\nexport class TileTreeTraverse {\n    private m_subdivisionScheme: SubdivisionScheme;\n\n    constructor(subdivisionScheme: SubdivisionScheme) {\n        this.m_subdivisionScheme = subdivisionScheme;\n    }\n\n    subTiles(tileKey: TileKey): Iterable<TileKey> {\n        const divX = this.m_subdivisionScheme.getSubdivisionX(tileKey.level);\n        const divY = this.m_subdivisionScheme.getSubdivisionY(tileKey.level);\n\n        return new SubTiles(tileKey, divX, divY);\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { IChannel } from \"./IChannel\";\n\n/**\n * Class for the default console channel.\n */\n\nexport class ConsoleChannel implements IChannel {\n    error(message?: any, ...optionalParams: any[]) {\n        // tslint:disable-next-line:no-console\n        console.error(message, ...optionalParams);\n    }\n\n    debug(message?: any, ...optionalParams: any[]) {\n        // tslint:disable-next-line:no-console\n        console.debug(message, ...optionalParams);\n    }\n\n    info(message?: any, ...optionalParams: any[]) {\n        // tslint:disable-next-line:no-console\n        console.info(message, ...optionalParams);\n    }\n\n    log(message?: any, ...optionalParams: any[]) {\n        // tslint:disable-next-line:no-console\n        console.log(message, ...optionalParams);\n    }\n\n    trace(message?: any, ...optionalParams: any[]) {\n        // tslint:disable-next-line:no-console\n        console.trace(message, ...optionalParams);\n    }\n\n    warn(message?: any, ...optionalParams: any[]) {\n        // tslint:disable-next-line:no-console\n        console.warn(message, ...optionalParams);\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { IChannel } from \"./IChannel\";\nimport { ILogger, LoggerOptions, LogLevel } from \"./ILogger\";\n\n/**\n * Logger class.\n */\nexport class Logger implements ILogger {\n    enabled: boolean = true;\n    level: LogLevel = LogLevel.Trace;\n\n    constructor(readonly name: string, private m_channel: IChannel, options?: LoggerOptions) {\n        if (options !== undefined) {\n            this.update(options);\n        }\n    }\n\n    error(message?: any, ...optionalParams: any[]) {\n        if (this.enabled && this.level <= LogLevel.Error) {\n            this.m_channel.error(this.prefix, message, ...optionalParams);\n        }\n    }\n\n    debug(message?: any, ...optionalParams: any[]) {\n        if (this.enabled && this.level <= LogLevel.Debug) {\n            this.m_channel.debug(this.prefix, message, ...optionalParams);\n        }\n    }\n\n    info(message?: any, ...optionalParams: any[]) {\n        if (this.enabled && this.level <= LogLevel.Info) {\n            this.m_channel.info(this.prefix, message, ...optionalParams);\n        }\n    }\n\n    log(message?: any, ...optionalParams: any[]) {\n        if (this.enabled && this.level <= LogLevel.Log) {\n            this.m_channel.log(this.prefix, message, ...optionalParams);\n        }\n    }\n\n    trace(message?: any, ...optionalParams: any[]) {\n        if (this.enabled && this.level <= LogLevel.Trace) {\n            this.m_channel.trace(this.prefix, message, ...optionalParams);\n        }\n    }\n\n    warn(message?: any, ...optionalParams: any[]) {\n        if (this.enabled && this.level <= LogLevel.Warn) {\n            this.m_channel.warn(this.prefix, message, ...optionalParams);\n        }\n    }\n\n    update(options: LoggerOptions) {\n        this.enabled = options.enabled === undefined ? this.enabled : options.enabled;\n        this.level = options.level === undefined ? this.level : options.level;\n    }\n\n    private get prefix(): string {\n        return this.name + \":\";\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { IChannel } from \"./IChannel\";\nimport { LogLevel } from \"./ILogger\";\n\ndeclare let self: Worker;\n\nexport const WORKERCHANNEL_MSG_TYPE = \"worker-channel-message\";\n\n/**\n * The interface for the messages of the WorkerChannel.\n */\nexport interface IWorkerChannelMessage {\n    message: any[];\n    type: \"worker-channel-message\";\n    level: LogLevel;\n}\n\n/**\n * The class for the worker channel.\n */\nexport class WorkerChannel implements IChannel {\n    error(message?: any, ...optionalParams: any[]) {\n        const workerMessage: IWorkerChannelMessage = {\n            message: [message, ...optionalParams],\n            type: WORKERCHANNEL_MSG_TYPE,\n            level: LogLevel.Error\n        };\n        self.postMessage(workerMessage);\n    }\n\n    debug(message?: any, ...optionalParams: any[]) {\n        const workerMessage: IWorkerChannelMessage = {\n            message: [message, ...optionalParams],\n            type: WORKERCHANNEL_MSG_TYPE,\n            level: LogLevel.Debug\n        };\n        self.postMessage(workerMessage);\n    }\n\n    info(message?: any, ...optionalParams: any[]) {\n        const workerMessage: IWorkerChannelMessage = {\n            message: [message, ...optionalParams],\n            type: WORKERCHANNEL_MSG_TYPE,\n            level: LogLevel.Info\n        };\n        self.postMessage(workerMessage);\n    }\n\n    log(message?: any, ...optionalParams: any[]) {\n        const workerMessage: IWorkerChannelMessage = {\n            message: [message, ...optionalParams],\n            type: WORKERCHANNEL_MSG_TYPE,\n            level: LogLevel.Log\n        };\n        self.postMessage(workerMessage);\n    }\n\n    trace(message?: any, ...optionalParams: any[]) {\n        const workerMessage: IWorkerChannelMessage = {\n            message: [message, ...optionalParams],\n            type: WORKERCHANNEL_MSG_TYPE,\n            level: LogLevel.Trace\n        };\n        self.postMessage(workerMessage);\n    }\n\n    warn(message?: any, ...optionalParams: any[]) {\n        const workerMessage: IWorkerChannelMessage = {\n            message: [message, ...optionalParams],\n            type: WORKERCHANNEL_MSG_TYPE,\n            level: LogLevel.Warn\n        };\n        self.postMessage(workerMessage);\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport * as THREE from \"three\";\n\n/**\n * The base shader to use for [[MapView]]'s composing passes, like [[MSAAMaterial]].\n */\n\nexport const CopyShader: THREE.Shader = {\n    uniforms: {\n        tDiffuse: { value: null },\n        opacity: { value: 1.0 }\n    },\n    vertexShader: `\n    varying vec2 vUv;\n    void main() {\n        vUv = uv;\n        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n    }`,\n    fragmentShader: `\n    uniform float opacity;\n    uniform sampler2D tDiffuse;\n    varying vec2 vUv;\n    void main() {\n        vec4 texel = texture2D( tDiffuse, vUv );\n        gl_FragColor = opacity * texel;\n    }`\n};\n\n/**\n * The material is used for composing.\n */\nexport class CopyMaterial extends THREE.ShaderMaterial {\n    /**\n     * The constructor of `CopyMaterial`.\n     *\n     * @param uniforms The [[CopyShader]]'s uniforms.\n     */\n    constructor(uniforms: { [uniformName: string]: THREE.IUniform }) {\n        super({\n            name: \"CopyMaterial\",\n            uniforms,\n            vertexShader: CopyShader.vertexShader,\n            fragmentShader: CopyShader.fragmentShader,\n            premultipliedAlpha: true,\n            transparent: false,\n            blending: THREE.NoBlending,\n            depthTest: false,\n            depthWrite: false\n        });\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport default {\n    atmosphere_common_utils: `\n\n    float conditionalBranchFree(bool condition, float primary, float secondary) {\n        // Interpolate between primary and secondary:\n        // result = secondary * (1 - factor) + primary * factor\n        // where:\n        // factor = float(condition)\n        return mix(secondary, primary, float(condition));\n    }\n\n    vec3 conditionalBranchFree(bool condition, vec3 primary, vec3 secondary) {\n        return mix(secondary, primary, float(condition));\n    }\n    `,\n    atmosphere_vertex_utils: `\n\n    const float RayleighScaleDepth = 0.25;\n\n    struct AtmosphereColor\n    {\n        vec3 mie;\n        vec3 rayleigh;\n    };\n\n    float scale(float cosAngle)\n    {\n        float x = 1.0 - cosAngle;\n        return RayleighScaleDepth  * exp(-0.00287 + x*(0.459 + x*(3.83 + x*(-6.80 + x*5.25))));\n    }\n\n    float getNearSphereIntersect(vec3 v3Pos, vec3 v3Ray, float fCameraHeight2, float fOuterRadius2) {\n        // Solve simple square equation for the x0 (first point of intersection).\n#if defined(IMPROVE_INTERSECT_PRECISION)\n        // To improve precision instead of simple projection: b = 2.0 * dot(vPos, v3Ray),\n        // we change the equation that gives better results especially around the poles.\n        float fB = 2.0 * length(v3Pos) * dot(normalize(v3Pos), v3Ray);\n#else\n        float fB = 2.0 * dot(v3Pos, v3Ray);\n#endif\n        float fC = fCameraHeight2 - fOuterRadius2;\n        // det = b^2 - 4*a*c, where a = 1\n        float fDet = max(0.0, fB * fB - 4.0 * fC);\n        // Intersection points distances are defined as follows:\n        // x0 = (-b - sqrt(det)) / 2*a ^ x1 = (-b + sqrt(det)) / 2*a\n        // we search for x0:\n        return 0.5 * (-fB - sqrt(fDet));\n    }\n\n    float getFarSphereIntersect(vec3 v3Pos, vec3 v3Ray, float fCameraHeight2, float fOuterRadius2) {\n        // Solve simple square equation for the x1 (second point of intersection).\n#if defined(IMPROVE_INTERSECT_PRECISION)\n        float fB = 2.0 * length(v3Pos) * dot(normalize(v3Pos), v3Ray);\n#else\n        float fB = 2.0 * dot(v3Pos, v3Ray);\n#endif\n        float fC = fCameraHeight2 - fOuterRadius2;\n        // det = b^2 - 4*a*c, where a = 1\n        float fDet = max(0.0, fB * fB - 4.0 * fC);\n        // Compute second intersection distance:\n        // x1 = (-b + sqrt(det)) / 2*a\n        return 0.5 * (-fB + sqrt(fDet));\n    }\n    `,\n    atmosphere_fragment_utils: `\n\n    // Branch free RGB to HSV conversion.\n    // Based on article:\n    // http://lolengine.net/blog/2013/01/13/fast-rgb-to-hsv\n    // and optimized OpenGL SL algorithm\n    // http://lolengine.net/blog/2013/07/27/rgb-to-hsv-in-glsl\n    vec3 rgb2Hsv(vec3 c)\n    {\n        const vec4 RGB_HSV_CONV = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n        // Ternary operator may be used explicitly if compiler can use fast conditional move.\n        // vec4 p = c.g < c.b ? vec4(c.bg, RGB_HSV_CONV.wz) : vec4(c.gb, RGB_HSV_CONV.xy);\n        vec4 p = mix(vec4(c.bg, RGB_HSV_CONV.wz), vec4(c.gb, RGB_HSV_CONV.xy), step(c.b, c.g));\n        // vec4 q = c.r < p.x ? vec4(p.xyw, c.r) : vec4(c.r, p.yzx);\n        vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n        float d = q.x - min(q.w, q.y);\n        float e = 1.0e-10;\n        return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n    }\n\n    // Branch free HSV to RGB conversion\n    vec3 hsv2Rgb(vec3 c)\n    {\n        const vec4 HSV_RGB_CONV = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n        vec3 p = abs(fract(c.xxx + HSV_RGB_CONV.xyz) * 6.0 - HSV_RGB_CONV.www);\n        return c.z * mix(HSV_RGB_CONV.xxx, clamp(p - HSV_RGB_CONV.xxx, 0.0, 1.0), c.y);\n    }\n\n    vec3 correctExposure(vec3 rgb, float exposure)\n    {\n        const vec3 fullColor = vec3(1.0);\n        return fullColor - exp(-exposure * rgb);\n    }\n\n    vec3 correctColor(vec3 rgb, vec3 hsvShift)\n    {\n        const float e = 0.0000001;\n        // Convert rgb color to hsv\n        vec3 hsv = rgb2Hsv(rgb);\n        // Shift hue value with angle wrapping\n        hsv.x = mod(hsv.x + hsvShift.x, 1.0);\n        // Shift and clamp saturation\n        hsv.y = clamp(hsv.y + hsvShift.y, 0.0, 1.0);\n        // Change value if it is significant (greater then epsilon)\n        hsv.z = hsv.z > e ? clamp(hsv.z + hsvShift.z, 0.0, 1.0) : 0.0;\n        // Convert shifted hsv back to rgb\n        return hsv2Rgb(hsv);\n    }\n    `\n};\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { JsonExpr } from \"./Expr\";\nimport { InterpolatedPropertyDefinition } from \"./InterpolatedPropertyDefs\";\n\n/**\n * Available line caps types(`\"None\"`, `\"Round\"`, `\"Square\"`, `\"TriangleOut\"`, `\"TriangleIn\"`).\n * Default is `\"Round\"`.\n */\nexport type LineCaps = \"Square\" | \"Round\" | \"None\" | \"TriangleOut\" | \"TriangleIn\";\n\n/**\n * Available line dash types(`\"Round\"`, `\"Square\"`, `\"Diamond\"`).\n * Default is `\"Square\"`.\n */\nexport type LineDashes = \"Square\" | \"Round\" | \"Diamond\";\n\n/**\n * Standard kinds of geometry.\n */\nexport enum StandardGeometryKind {\n    /**\n     * Used in the enabledKinds/disabledKinds filter to match any kind.\n     */\n    All = \"_all_\",\n\n    /**\n     * Background geometry.\n     */\n    Background = \"background\",\n\n    /**\n     * Terrain geometry.\n     */\n    Terrain = \"terrain\",\n\n    /**\n     * Default value for the FillTechnique.\n     */\n    Area = \"area\",\n\n    /**\n     * Default value for all line techniques.\n     */\n    Line = \"line\",\n\n    /**\n     * Default value for the FillTechnique.\n     */\n    Water = \"water\",\n\n    /**\n     * Political borders.\n     */\n    Border = \"border\",\n\n    /**\n     * Basis for all roads.\n     */\n    Road = \"road\",\n\n    /**\n     * Default value for the ExtrudedPolygonTechnique.\n     */\n    Building = \"building\",\n\n    /**\n     * Default value for the TextTechnique, LineMarkerTechnique and the PoiTechnique.\n     */\n    Label = \"label\",\n\n    /**\n     * Anything that may show up last.\n     */\n    Detail = \"detail\"\n}\n\n/**\n * Geometry kind used for use by [[BaseTechniqueParams.kind]].\n *\n * The kind of geometry is used to group objects together,\n * allowing the group to be hidden or displayed.\n *\n * Any string can be used to specify the kind of the technique in a style in the theme file. Is is\n * suggested to specify multiple kinds for specific types of data. For a highway, the following list\n * of kinds is suggested:\n *\n *    [\"line\", \"road\", \"road:highway\"]\n *\n * If it is a tunnel for a highway:\n *\n *    [\"line\", \"road\", \"road:highway\", \"tunnel\", \"road:tunnel\", \"road:highway:tunnel\"]\n *\n * If specified in this way, specific types of data (here: highway roads) can be enabled and/or\n * disabled.\n */\nexport type GeometryKind = string | StandardGeometryKind;\nexport const GeometryKind = StandardGeometryKind;\n\n/**\n * Decorate property type with possible dynamic variants.\n */\nexport type DynamicProperty<T> = T | JsonExpr | InterpolatedPropertyDefinition<T>;\n\n/*\n * Description of length units inside a style. Supports literal values (interpreted as `m`), `m` and\n * `px`(i.e. `80`, `14px`, `0.6m`, etc.).\n */\nexport type StyleLength = string | number;\n\n/**\n * Description of colors inside a style. Supports hex values as well as CSS hex, rgb and hsl values\n * (i.e. `0xffffff`, `#f00fab`, `#aaa`, `rgb(255, 0 120)`, `hsl(360, 100%, 100%)`, etc.).\n */\nexport type StyleColor = string | number;\n\n/**\n * A set of [[GeometryKind]]s.\n */\nexport class GeometryKindSet extends Set {\n    /**\n     * Return `true` if the Set is a superset of the set 'subset'.\n     */\n    isSuperset(subset: Set<any>): boolean {\n        for (const elem of subset) {\n            if (!this.has(elem)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Return `true` if the Set intersects Set 'set'.\n     */\n    hasIntersection(set: any) {\n        for (const elem of set) {\n            if (this.has(elem)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Return `true` if the Set either intersects Set 'set' (if set is a Set), of has element 'set'\n     * if set is not a Set.\n     */\n    hasOrIntersects(set: any) {\n        if (set instanceof Set) {\n            return this.hasIntersection(set);\n        }\n        return this.has(set);\n    }\n\n    /**\n     * Return `true` if this set and the array of elements share at least a single element.\n     */\n    hasOrIntersectsArray(subset: any[]) {\n        for (const elem of subset) {\n            if (this.has(elem)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n\n/**\n * Common attributes or all [[Technique]]s.\n */\nexport interface BaseTechniqueParams {\n    /**\n     * The name used to identify materials created from this technique.\n     */\n    id?: string;\n\n    /**\n     * The render order of the objects created using this technique.\n     *\n     * If not specified in style file, [[StyleSetEvaluator]] will assign monotonically increasing\n     * values according to style position in file.\n     */\n    renderOrder?: DynamicProperty<number>;\n\n    /**\n     * The category of this technique.\n     *\n     * The category is used in conjunction with [[Theme.priorities]]\n     * to assign render orders to the objects created by this [[Style]].\n     */\n    category?: DynamicProperty<string>;\n\n    /**\n     * Optional. If `true`, no IDs will be saved for the geometry this technique creates.\n     */\n    transient?: boolean;\n\n    /**\n     * Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object start\n     * fading out (opacity decreases).\n     */\n    fadeNear?: DynamicProperty<number>;\n\n    /**\n     * Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object has zero\n     * opacity and stops fading out. An undefined value disables fading.\n     */\n    fadeFar?: DynamicProperty<number>;\n\n    /**\n     * Specified kind of geometry. One kind is set as default in the technique, and can be\n     * overridden in the style.\n     *\n     * @deprecated Use [[enabled]] with expressions based on `['dynamic-properties']` operator.\n     */\n    kind?: GeometryKind | GeometryKindSet;\n\n    /**\n     * Runtime filtering of techniques.\n     *\n     * Use with `['dynamic-properties']` operator for dynamic feature highlight, highlighig etc.\n     *\n     * @see Picking example - [[PickingExample]]\n     */\n    enabled?: DynamicProperty<boolean>;\n}\n\nexport enum TextureCoordinateType {\n    /**\n     * Texture coordinates are in tile space.\n     * SW of the tile will have (0,0) and NE will have (1,1).\n     */\n    TileSpace = \"tile-space\",\n\n    /**\n     * Texture coordinates are in equirectangular space.\n     * (u, v) = ( (longitude+180) / 360, (latitude+90) / 180).\n     */\n    EquirectangularSpace = \"equirectangular-space\",\n\n    /**\n     * Texture coordinates in feature space.\n     *\n     * To compute texture coordinates in feature space,\n     * the feature must have a property named `bbox` with value\n     * the tuple `[west, south, east, north]`.\n     */\n    FeatureSpace = \"feature-space\"\n}\n\n/**\n * Standard technique parameters.\n */\nexport interface StandardTechniqueParams extends BaseTechniqueParams {\n    /**\n     * Color of the feature in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`,\n     * `\"#fff\"`, `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.\n     * See https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.color.\n     * @format color-hex\n     */\n    color?: DynamicProperty<StyleColor>;\n    /**\n     * A value of `true` creates a wireframe geometry. (May not be supported with all techniques).\n     * See https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.wireframe.\n     */\n    wireframe?: boolean;\n    /**\n     * If `vertexColors` is `true`, every vertex has color information, which is interpolated\n     * between vertices.\n     * See https://threejs.org/docs/#api/en/materials/Material.vertexColors.\n     */\n    vertexColors?: boolean;\n    /**\n     * How rough the material appears. `0.0` means a smooth mirror reflection. `1.0` means fully\n     * diffuse. Default is `1.0`.\n     * See https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.roughness.\n     */\n    roughness?: DynamicProperty<number>;\n    /**\n     * How much the material is like a metal. Nonmetallic materials such as wood or stone use `0.0`,\n     * metallic ones use `1.0`, with nothing (usually) in between. Default is `0.0`. A value between\n     * `0.0` and `1.0` can be used for a rusty metal look. If `metalnessMap` is also provided, both\n     * values are multiplied.\n     * See https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.metalness.\n     */\n    metalness?: DynamicProperty<number>;\n    /**\n     * The material will not be rendered if the opacity is lower than this value.\n     * See https://threejs.org/docs/#api/en/materials/Material.alphaTest.\n     */\n    alphaTest?: DynamicProperty<number>;\n    /**\n     * Skip rendering clobbered pixels.\n     * See https://threejs.org/docs/#api/en/materials/Material.depthTest.\n     */\n    depthTest?: boolean;\n    /**\n     * Set to 'true' if line should appear transparent. Rendering transparent lines may come with a\n     * slight performance impact.\n     * See https://threejs.org/docs/#api/en/materials/Material.transparent.\n     */\n    transparent?: boolean;\n    /**\n     * For transparent lines, set a value between 0.0 for totally transparent, to 1.0 for totally\n     * opaque.\n     * See https://threejs.org/docs/#api/en/materials/Material.opacity.\n     */\n    opacity?: DynamicProperty<number>;\n    /**\n     * Emissive (light) color of the material, essentially a solid color unaffected by other\n     * lighting. Default is black.\n     * See https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.emissive.\n     * @format color-hex\n     */\n    emissive?: DynamicProperty<StyleColor>;\n    /**\n     * Intensity of the emissive light. Modulates the emissive color. Default is `1`.\n     * See https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.emissiveIntensity.\n     */\n    emissiveIntensity?: DynamicProperty<number>;\n    /**\n     * The index of refraction (IOR) of air (approximately 1) divided by the index of refraction of\n     * the material. It is used with environment mapping modes `THREE.CubeRefractionMapping` and\n     * `THREE.EquirectangularRefractionMapping`. The refraction ratio should not exceed `1`. Default\n     *  is `0.98`.\n     * See https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.refractionRatio.\n     */\n    refractionRatio?: DynamicProperty<number>;\n\n    /**\n     * Whether and how texture coordinates should be generated. No texture coordinates are\n     * generated if `undefined`.\n     * Should be set if any texture assigned (e.g. `map`, `normalMap`, ...).\n     */\n    textureCoordinateType?: TextureCoordinateType;\n\n    /*\n     * URL or texture buffer that should be used as color map. See:\n     * https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.map\n     */\n    map?: string | TextureBuffer;\n    mapProperties?: TextureProperties;\n\n    /**\n     * URL or texture buffer that should be used as normal map. See:\n     * https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.normalMap\n     */\n    normalMap?: string | TextureBuffer;\n    normalMapType?: number;\n    normalMapProperties?: TextureProperties;\n\n    /**\n     * URL or texture buffer that should be used as displacement map. See:\n     * https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.displacementMap\n     */\n    displacementMap?: string | TextureBuffer;\n    displacementMapProperties?: TextureProperties;\n\n    /**\n     * URL or texture buffer that should be used as roughness map. See:\n     * https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.roughnessMap\n     */\n    roughnessMap?: string | TextureBuffer;\n    roughnessMapProperties?: TextureProperties;\n\n    /**\n     * URL or texture buffer that should be used as emissive map. See:\n     * https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.emissiveMap\n     */\n    emissiveMap?: string | TextureBuffer;\n    emissiveMapProperties?: TextureProperties;\n\n    /**\n     * URL or texture buffer that should be used as bump map. See:\n     * https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.bumpMap\n     */\n    bumpMap?: string | TextureBuffer;\n    bumpMapProperties?: TextureProperties;\n\n    /**\n     * URL or texture buffer that should be used as metalness map. See:\n     * https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.metalnessMap\n     */\n    metalnessMap?: string | TextureBuffer;\n    metalnessMapProperties?: TextureProperties;\n\n    /**\n     * URL or texture buffer that should be used as alpha map. See:\n     * https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.alphaMap\n     */\n    alphaMap?: string | TextureBuffer;\n    alphaMapProperties?: TextureProperties;\n}\n\n/**\n * Possible parameters of [[PointTechnique]].\n */\nexport interface PointTechniqueParams extends BaseTechniqueParams {\n    /**\n     * Color of a point in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`,\n     * `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.\n     * @format color-hex\n     */\n    color?: DynamicProperty<StyleColor>;\n    /**\n     * URL of a texture image to be loaded.\n     */\n    texture?: string;\n    /**\n     * Set to `true` if line should appear transparent. Rendering transparent lines may come with a\n     * slight performance impact.\n     */\n    transparent?: boolean;\n    /**\n     * For transparent lines, set a value between 0.0 for totally transparent, to 1.0 for totally\n     * opaque.\n     */\n    opacity?: DynamicProperty<number>;\n    /**\n     * Size of point in pixels.\n     */\n    size?: number;\n    /**\n     * Whether to enable picking on these points.\n     */\n    enablePicking?: boolean;\n}\n\n/**\n * Define the stacking option. Enum values for theme file are in \"kebab-case\".\n */\nexport enum PoiStackMode {\n    /**\n     * Show in a stack.\n     */\n    Show = \"show-in-stack\",\n    /**\n     * Do not show in a stack.\n     */\n    Hide = \"hide-in-stack\",\n    /**\n     * Show category parent in the stack.\n     */\n    ShowParent = \"show-parent\"\n}\n\n/**\n * Defines options (tokens) supported for text placements defined via [[placements]] attribute.\n *\n * Possible values are defined as vertical placement letter and horizontal letter, where\n * one of the axis may be ignored and then assumed centered. Moving clock-wise, we have:\n * `TL` (top-left), `T` (top-center), `TR` (top-right), `R` (center-right), `BR` (bottom-right),\n * `B` (bottom-center), `BL` (bottom-left), `L` (left), `C` (center-center).\n * Alternatively instead of `T`, `B`, `L`, `R` geographic directions may be used accordingly:\n * `NW` (north-west), `N` (north), `NE` (north-east), `E` (east), `SE` (south-east), `S` (south),\n * `SW` (south-west), `W` (west).\n */\nexport enum PlacementToken {\n    TopLeft = \"TL\",\n    Top = \"T\",\n    TopRight = \"TR\",\n    Right = \"R\",\n    BottomRight = \"BR\",\n    Bottom = \"B\",\n    BottomLeft = \"BL\",\n    Left = \"L\",\n    Center = \"C\",\n    NorthWest = \"NW\",\n    North = \"N\",\n    NorthEast = \"NE\",\n    East = \"E\",\n    SouthEast = \"SE\",\n    South = \"S\",\n    SouthWest = \"SW\",\n    West = \"W\"\n}\n\n/**\n * Technique that describes icons with labels. Used in [[PoiTechnique]] and [[LineMarkerTechnique]]\n * (for road shields).\n */\nexport interface MarkerTechniqueParams extends BaseTechniqueParams {\n    /**\n     * Text to be displayed for feature.\n     *\n     * Defaults to first defined:\n     *  - feature property `label` if present in technique (deprecated)\n     *  - `[\"get\", \"name:short\"]` is `useAbbreviation` is true\n     *  - `[\"get\", \"iso_code\"]` is `useIsoCode` is true\n     *  - `[\"get\", \"name:$LANGUAGE\"]` for each specified language\n     *  - `[\"get\", \"name\"]`\n     *\n     * See [[ExtendedTileInfo.getFeatureText]]\n     */\n    text?: DynamicProperty<string>;\n\n    /**\n     * Field name of object containing the text to be rendered.\n     *\n     * @deprecated, Use `[\"get\", \"FIELD\"]`.\n     */\n    label?: string;\n    /**\n     * If `true`, the abbreviation (field `name:short`) of the elements is used as text.\n     *\n     * @deprecated Use proper expression with [`get`, `name:short`] for this purpose.\n     */\n    useAbbreviation?: boolean;\n    /**\n     * If `true`, the iso code (field 'iso_code') of the elements is used as text.\n     * The `iso_code` field contains the ISO 3166-1 2-letter country code.\n     *\n     * @deprecated Use proper expression with [`get`, `iso_code`] for this purpose.\n     */\n    useIsoCode?: boolean;\n    /**\n     * Priority of marker, defaults to `0`. Markers with highest priority get placed first.\n     */\n    priority?: DynamicProperty<number>;\n    /**\n     * Minimum zoomLevel at which to display the label text. No default.\n     */\n    textMinZoomLevel?: number;\n    /**\n     * Maximum zoomLevel at which to display the label text. No default.\n     */\n    textMaxZoomLevel?: number;\n    /**\n     * Minimum zoomLevel at which to display the label icon. No default.\n     */\n    iconMinZoomLevel?: number;\n    /**\n     * Maximum zoomLevel at which to display the label icon. No default.\n     */\n    iconMaxZoomLevel?: number;\n\n    /**\n     * Icon color.\n     *\n     * If specified, combined using multiplication with color value read from icon texture.\n     *\n     * Works best for grayscale or monochromatic textures.\n     */\n    iconColor?: StyleColor;\n\n    /**\n     * Icon brightness.\n     *\n     * Factor that multiplies a color on top of the icon texture (and `iconColor`) with `0` being\n     * fully black as final output, `1` being the original rgb colors of the texture.\n     *\n     * @default `1`\n     */\n    iconBrightness?: number;\n\n    /**\n     * Scaling factor of icon. Defaults to 0.5, reducing the size ot 50% in the distance.\n     */\n    distanceScale?: number;\n    /**\n     * If `false`, text may overlap markers.\n     * @default `false`\n     */\n    textMayOverlap?: boolean;\n    /**\n     * If `false`, the icon may overlap text and other icons of lower priority. If not defined, the\n     * property value from `textMayOverlap` will be used.\n     * @default `false`\n     */\n    iconMayOverlap?: boolean;\n    /**\n     * If `false`, text will not reserve screen space, other markers will be able to overlap.\n     * @default `true`\n     */\n    textReserveSpace?: boolean;\n    /**\n     * If `false`, icon will not reserve screen space, other markers will be able to overlap. If not\n     * defined, the property value from `iconReserveSpace` will be used.\n     * @default `true`\n     */\n    iconReserveSpace?: boolean;\n    /**\n     * If `false`, text will not be rendered during animations. Defaults to `true`.\n     */\n    renderTextDuringMovements?: boolean;\n    /**\n     * If `true`, the label will always be rendered on top. If overlapping with other labels with\n     * this flag set, the render order is undefined.\n     * @default `false`\n     */\n    alwaysOnTop?: boolean;\n    /**\n     * If `true`, icon will appear even if the text part is blocked by other labels. Defaults to\n     * `false`.\n     */\n    textIsOptional?: boolean;\n    /**\n     * Should be displayed on map or not. Defaults to `true`.\n     */\n    showOnMap?: boolean;\n    /**\n     * Specify stack mode. Defaults to `ShowInStack`.\n     */\n    stackMode?: PoiStackMode;\n    /**\n     * Minimal distance between markers in screen pixels.\n     */\n    minDistance?: number;\n    /**\n     * If true, the text will appear even if the icon cannot be rendered because of missing icon\n     * graphics. Defaults to `true`.\n     */\n    iconIsOptional?: boolean;\n    /**\n     * Fading time for labels in seconds.\n     */\n    textFadeTime?: number;\n    /**\n     * Fading time for icons in seconds.\n     */\n    iconFadeTime?: number;\n    /**\n     * Horizontal offset (to the right) in screen pixels.\n     */\n    xOffset?: DynamicProperty<number>;\n    /**\n     * Vertical offset (up) in screen pixels.\n     */\n    yOffset?: DynamicProperty<number>;\n    /**\n     * Horizontal offset (to the right) in screen pixels.\n     */\n    iconXOffset?: DynamicProperty<number>;\n    /**\n     * Vertical offset (up) in screen pixels.\n     */\n    iconYOffset?: DynamicProperty<number>;\n    /**\n     * Scaling factor of icon.\n     */\n    iconScale?: number;\n    /**\n     * Vertical height in pixels, controls vertical scaling. Overrides `iconScale`.\n     */\n    screenHeight?: DynamicProperty<number>;\n    /**\n     * Horizontal height in pixels, controls horizontal scaling. Overrides `iconScale`.\n     */\n    screenWidth?: DynamicProperty<number>;\n    /**\n     * Name of the POI table which should be used for this POI.\n     */\n    poiTable?: string;\n    /**\n     * Fixed name to identify POI options in the POI table. If `poiName` has a value, this value\n     * supersedes any value read from the field referenced in `poiNameField`.\n     */\n    poiName?: string;\n    /**\n     * Name of the field to evaluate to get the name of the POI options in the POI table.\n     */\n    poiNameField?: string;\n    /**\n     * Name of [[ImageTexture]] definition to use.\n     */\n    imageTexture?: DynamicProperty<string>;\n    /**\n     * Field name to extract imageTexture content from.\n     */\n    imageTextureField?: string;\n    /**\n     * Prefix for `imageTexture` if `imageTextureField` is used.\n     */\n    imageTexturePrefix?: string;\n    /**\n     * Postfix for `imageTexture` if `imageTextureField` is used.\n     */\n    imageTexturePostfix?: string;\n    /**\n     * Name of the text style.\n     */\n    style?: string;\n    /**\n     * Name of the preferred [[Font]] to be used when rendering.\n     */\n    fontName?: string;\n    /**\n     * Size of the text (pixels).\n     */\n    size?: DynamicProperty<number>;\n    /**\n     * Size of the text background (pixels).\n     */\n    backgroundSize?: DynamicProperty<number>;\n    /**\n     * Glyph style to apply for the currently active [[Font]].\n     */\n    fontStyle?: \"Regular\" | \"Bold\" | \"Italic\" | \"BoldItalic\";\n    /**\n     * Glyph variant to apply for the currently active [[Font]].\n     */\n    fontVariant?: \"Regular\" | \"AllCaps\" | \"SmallCaps\";\n    /**\n     * Glyph local rotation (radians).\n     */\n    rotation?: number;\n    /**\n     * Text color in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`,\n     * `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.\n     * @format color-hex\n     */\n    color?: DynamicProperty<StyleColor>;\n    /**\n     * Text background color in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`,\n     * `\"#fff\"`, `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.\n     * @format color-hex\n     */\n    backgroundColor?: DynamicProperty<StyleColor>;\n    /**\n     * For transparent text, set a value between 0.0 for totally transparent, to 1.0 for totally\n     * opaque.\n     */\n    opacity?: DynamicProperty<number>;\n    /**\n     * Background text opacity value.\n     */\n    backgroundOpacity?: DynamicProperty<number>;\n    /**\n     * Inter-glyph spacing (pixels). Scaled by `size`.\n     */\n    tracking?: DynamicProperty<number>;\n    /**\n     * Inter-line spacing (pixels). Scaled by `size`.\n     */\n    leading?: DynamicProperty<number>;\n    /**\n     * Maximum number of lines for this label.\n     */\n    maxLines?: DynamicProperty<number>;\n    /**\n     * Maximum line width (pixels).\n     */\n    lineWidth?: DynamicProperty<number>;\n    /**\n     * [[TextCanvas]] rotation (radians).\n     */\n    canvasRotation?: DynamicProperty<number>;\n    /**\n     * Line typesetting rotation (radians).\n     */\n    lineRotation?: DynamicProperty<number>;\n    /**\n     * Wrapping (line-breaking) mode.\n     */\n    wrappingMode?: DynamicProperty<\"None\" | \"Character\" | \"Word\">;\n    /**\n     * Text position regarding the baseline.\n     *\n     * @note The [[placements]] attribute may override the alignment settings.\n     */\n    hAlignment?: DynamicProperty<\"Left\" | \"Center\" | \"Right\">;\n    /**\n     * Text position inside a line.\n     *\n     * @note The [[placements]] attribute may supersede it.\n     */\n    vAlignment?: DynamicProperty<\"Above\" | \"Center\" | \"Below\">;\n    /**\n     * Text label positions relative to the label central position (anchor point).\n     *\n     * This attribute defines a comma separated tokens of possible text placements\n     * relative to label central position (anchor), for example: \"TL, TR, C\".\n     * Keep in mind that horizontal placement defines text position in opposite way to\n     * the alignment, so the text `R` placed (located on the **right side** of label position)\n     * will be the same as `Left` aligned by deduction. On other side vertical placement is quite\n     * similar to vertical alignment so `T` placement corresponds with `Above` alignment.\n     *\n     * @note This attribute may override [[hAlignment]] and [[vAlignment]] if defined.\n     */\n    placements?: string;\n\n    /**\n     * World space offset in meters applied to the icon. Valid only for icons which have the\n     * \"offset_direction\" property as an attribute of the data.\n     */\n    worldOffset?: DynamicProperty<number>;\n}\n\nexport interface LineTechniqueParams extends BaseTechniqueParams {\n    /**\n     * Color of a line in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`,\n     * `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.\n     * @format color-hex\n     */\n    color: DynamicProperty<StyleColor>;\n    /**\n     * Set to true if line should appear transparent. Rendering transparent lines may come with a\n     * slight performance impact.\n     */\n    transparent?: boolean;\n    /**\n     * For transparent lines, set a value between 0.0 for totally transparent, to 1.0 for totally\n     * opaque.\n     */\n    opacity?: DynamicProperty<number>;\n    /**\n     * Width of line in pixels. WebGL implementations will normally render all lines with 1 pixel\n     * width, and ignore this value.\n     */\n    lineWidth: DynamicProperty<number>;\n}\n\n/**\n * Declares a geometry as a segment.\n */\nexport interface SegmentsTechniqueParams extends BaseTechniqueParams {\n    /**\n     * Color of segments in a hexadecimal notation, for example: `\"#e4e9ec\"` or `\"#fff\"`.\n     * @format color-hex\n     */\n    color: DynamicProperty<StyleColor>;\n    /**\n     * Set to `true` if line should appear transparent. Rendering transparent lines may come with a\n     * slight performance impact.\n     */\n    transparent?: boolean;\n    /**\n     * For transparent lines, set a value between `0.0` for fully transparent, to `1.0` for fully\n     * opaque.\n     */\n    opacity?: DynamicProperty<number>;\n    /**\n     * Width of a line in meters.\n     */\n    lineWidth: DynamicProperty<number>;\n}\n\n/**\n * Declares a a geometry as a polygon.\n */\nexport interface PolygonalTechniqueParams {\n    /**\n     * Whether to use polygon offset. Default is false. This corresponds to the\n     * GL_POLYGON_OFFSET_FILL WebGL feature.\n     *\n     * PolygonOffset is used to raise the geometry towards the geometry (for depth calculation\n     * only). Default is false.\n     *\n     * See here: https://sites.google.com/site/threejstuts/home/polygon_offset\n     *\n     * To activate polygonOffset these values have to be set to pull the line \"forwards\":\n     *\n     * transparent: true\n     *\n     * polygonOffset: true\n     *\n     * polygonOffsetFactor : -1.0, (as an example, see link above)\n     *\n     * polygonOffsetUnits: -1 (as an example, see link above)\n     */\n    polygonOffset?: boolean;\n\n    /**\n     * Sets the polygon offset factor. Default is 0.\n     */\n    polygonOffsetFactor?: DynamicProperty<number>;\n\n    /**\n     * Sets the polygon offset units. Default is 0.\n     */\n    polygonOffsetUnits?: DynamicProperty<number>;\n\n    /**\n     * Sets the polygon outline color.\n     * @format color-hex\n     */\n    lineColor?: DynamicProperty<StyleColor>;\n\n    /**\n     * Distance to the camera (0.0 = nearPlane, 1.0 = farPlane) at which the object edges start\n     * fading out.\n     */\n    lineFadeNear?: DynamicProperty<number>;\n\n    /**\n     * Distance to the camera (0.0 = nearPlane, 1.0 = farPlane) at which the object edges become\n     * transparent. A value of <= 0.0 disables fading.\n     */\n    lineFadeFar?: DynamicProperty<number>;\n}\n\n/**\n * Declares a a geometry as a basic extruded line.\n */\nexport interface BasicExtrudedLineTechniqueParams\n    extends BaseTechniqueParams,\n        PolygonalTechniqueParams {\n    /**\n     * A value determining the shading technique. Valid values are \"Basic\" and \"Standard\". Default\n     * is \"Basic\".\n     *\n     * `\"basic\"`   : Simple shading, faster to render. Only simple color and opacity are effective.\n     * `\"standard\"`: Elaborate shading, with metalness, and roughness.\n     *\n     * TODO: is this TechniqueParams or Style prop ?\n     */\n    shading?: \"basic\";\n    /**\n     * Color of a line in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`,\n     * `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.\n     * @format color-hex\n     */\n    color: DynamicProperty<StyleColor>;\n    /**\n     * Set to `true` if line should appear transparent. Rendering transparent lines may come with a\n     * slight performance impact.\n     */\n    transparent?: boolean;\n    /**\n     * For transparent lines, set a value between 0.0 for totally transparent, to 1.0 for totally\n     * opaque.\n     */\n    opacity?: DynamicProperty<number>;\n    /**\n     * Width of line in meters for different zoom levels.\n     */\n    lineWidth: DynamicProperty<number>;\n    /**\n     * A value of `true` creates a wireframe geometry. (May not be supported with all techniques).\n     */\n    wireframe?: boolean;\n    /**\n     * Style of both end caps. Possible values: `\"None\"`, `\"Circle\"`. A value of undefined maps to\n     * `\"Circle\"`.\n     */\n    caps?: DynamicProperty<\"None\" | \"Circle\">;\n}\n\n/**\n * Declares a a geometry as a standard extruded line.\n */\nexport interface StandardExtrudedLineTechniqueParams\n    extends StandardTechniqueParams,\n        PolygonalTechniqueParams {\n    /**\n     * A value determining the shading technique. Valid values are `\"basic\"` and `\"standard\"`.\n     * Default is `\"basic\"`.\n     *\n     * `\"basic\"` : Simple shading, faster to render. Only simple color and opacity are effective.\n     * `\"standard\"` : Elaborate shading, with metalness, and roughness.\n     */\n    shading: \"standard\";\n    /**\n     * Width of a line in meters for different zoom levels.\n     */\n    lineWidth: DynamicProperty<number>;\n    /**\n     * Style of both end caps. Possible values: `\"None\"`, `\"Circle\"`. A value of undefined maps to\n     * `\"Circle\"`.\n     */\n    caps?: DynamicProperty<\"None\" | \"Circle\">;\n}\n\n/**\n * Declares a a geometry as a solid line.\n */\nexport interface SolidLineTechniqueParams extends BaseTechniqueParams, PolygonalTechniqueParams {\n    /**\n     * Color of a line in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`,\n     * `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.\n     * @format color-hex\n     */\n    color: DynamicProperty<StyleColor>;\n    /**\n     * Color of a line outline in hexadecimal or CSS-style notation,\n     * for example: `\"#e4e9ec\"`, `\"#fff\"`, `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.\n     * @format color-hex\n     */\n    outlineColor?: DynamicProperty<StyleColor>;\n    /**\n     * Set to `true` if line should appear transparent. Rendering transparent lines may come with a\n     * slight performance impact.\n     */\n    transparent?: boolean;\n    /**\n     * For transparent lines, set a value between `0.0` for fully transparent, to `1.0` for fully\n     * opaque.\n     */\n    opacity?: DynamicProperty<number>;\n    // TODO: Make pixel units default.\n    /**\n     * @deprecated Specify metrics units as part of the value instead.\n     * Units in which different size properties are specified. Either `Meter` (default) or `Pixel`.\n     */\n    metricUnit?: string;\n    /**\n     * Width of a line in `metricUnit` for different zoom levels.\n     */\n    lineWidth: DynamicProperty<StyleLength>;\n    /**\n     * Outline width of a line in `metricUnit`s for different zoom levels.\n     */\n    outlineWidth?: DynamicProperty<StyleLength>;\n    /**\n     * Clip the line outside the tile if `true`.\n     */\n    clipping?: DynamicProperty<boolean>;\n    /**\n     * Describes line caps type (`\"None\"`, `\"Round\"`, `\"Square\"`, `\"TriangleOut\"`, `\"TriangleIn\"`).\n     * Default is `\"Round\"`.\n     */\n    caps?: DynamicProperty<LineCaps>;\n    /**\n     * Color of secondary line geometry in hexadecimal or CSS-style notation, for example:\n     * `\"#e4e9ec\"`, `\"#fff\"`, `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.\n     * @format color-hex\n     */\n    secondaryColor?: DynamicProperty<StyleColor>;\n    /**\n     * Width of secondary line geometry in `metricUnit`s for different zoom levels.\n     */\n    secondaryWidth?: DynamicProperty<StyleLength>;\n    /**\n     * The render order of the secondary line geometry object created using this technique.\n     */\n    secondaryRenderOrder?: DynamicProperty<number>;\n    /**\n     * Describes secondary line caps type (`\"None\"`, `\"Round\"`, `\"Square\"`, `\"TriangleOut\"`,\n     * `\"TriangleIn\"`).\n     * Default is `\"Round\"`.\n     */\n    secondaryCaps?: DynamicProperty<LineCaps>;\n    /**\n     * Describes the category of the secondary geometry object created using this technique.\n     */\n    secondaryCategory?: DynamicProperty<string>;\n    /**\n     * Describes the starting drawing position for the line (in the range [0...1]).\n     * Default is `0.0`.\n     */\n    drawRangeStart?: number;\n    /**\n     * Describes the ending drawing position for the line (in the range [0...1]).\n     * Default is `1.0`.\n     */\n    drawRangeEnd?: number;\n    /**\n     * Describes line dash type (`\"Round\"`, `\"Square\"`, `\"Diamond\"`).\n     * Default is `\"Square\"`.\n     */\n    dashes?: DynamicProperty<LineDashes>;\n    /**\n     * Color of a line dashes in hexadecimal or CSS-style notation,\n     * for example: `\"#e4e9ec\"`, `\"#fff\"`, `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.\n     * @format color-hex\n     */\n    dashColor?: DynamicProperty<StyleColor>;\n    /**\n     * Length of a line in meters for different zoom levels.\n     */\n    dashSize?: DynamicProperty<StyleLength>;\n    /**\n     * Size of a gap between lines in meters for different zoom levels.\n     */\n    gapSize?: DynamicProperty<StyleLength>;\n    /**\n     * Size in world units how far to offset the line perpendicular to its direction.\n     */\n    offset?: DynamicProperty<number>;\n}\n\n/**\n * Technique used to draw filled polygons.\n */\nexport interface FillTechniqueParams extends BaseTechniqueParams, PolygonalTechniqueParams {\n    /**\n     * Fill color in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`,\n     * `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.\n     * @format color-hex\n     */\n    color?: DynamicProperty<StyleColor>;\n    /**\n     * Set to `true` if line should appear transparent. Rendering transparent lines may come with a\n     * slight performance impact.\n     */\n    transparent?: boolean;\n    /**\n     * For transparent lines, set a value between `0.0` for fully transparent, to `1.0` for fully\n     * opaque.\n     */\n    opacity?: DynamicProperty<number>;\n    /**\n     * A value of `true` creates a wireframe geometry. (May not be supported with all techniques).\n     */\n    wireframe?: boolean;\n    /**\n     * Width of the lines. Currently limited to the [0, 1] range.\n     */\n    lineWidth?: DynamicProperty<number>;\n}\n\n/**\n * Technique used to draw a geometry as an extruded polygon, for example extruded buildings.\n */\nexport interface ExtrudedPolygonTechniqueParams extends StandardTechniqueParams {\n    /**\n     * Renders the footprint lines if set to 'true'.\n     */\n    footprint?: boolean;\n    /**\n     * Set to a negative value to remove all the vertical lines, and to a value between 0.0 and 1.0\n     * to modulate the amount of vertical lines rendered.\n     */\n    maxSlope?: number;\n    /**\n     * Width of the lines. Currently limited to the [0, 1] range.\n     */\n    lineWidth: DynamicProperty<number>;\n    /**\n     * Fill color in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`,\n     * `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.\n     * @format color-hex\n     */\n    lineColor?: DynamicProperty<StyleColor>;\n    /**\n     * Mix value between the lineColor(0.0) and the geometry's vertex colors(1.0).\n     */\n    lineColorMix?: number;\n\n    /**\n     * Distance to the camera (0.0 = nearPlane, 1.0 = farPlane) at which the object edges start\n     * fading out.\n     */\n    lineFadeNear?: DynamicProperty<number>;\n    /**\n     * Distance to the camera (0.0 = nearPlane, 1.0 = farPlane) at which the object edges become\n     * transparent. A value of <= 0.0 disables fading.\n     */\n    lineFadeFar?: DynamicProperty<number>;\n\n    /**\n     * Height above ground in world units of extruded polygon.\n     *\n     * Usually, unique per feature, so defaults to `[\"get\", \"height\"]`.\n     */\n    height?: DynamicProperty<number>;\n\n    /**\n     * Height of \"floor\" of extruded polygon in world units of extruded polygon.\n     *\n     * Usually, unique per feature, so defaults to `[\"number\", [\"get\", \"min_height\"], 0]`.\n     */\n    floorHeight?: DynamicProperty<number>;\n\n    /**\n     * In some data sources, for example Tilezen, building extrusion information might be missing.\n     * This attribute allows to define a default height of an extruded polygon in the theme.\n     *\n     * @deprecated use [[height]]\n     */\n    defaultHeight?: number;\n\n    /**\n     * Default color used if feature doesn't provide color attribute\n     * and [[MapEnv]] did not return it too.\n     * @format color-hex\n     */\n    defaultColor?: DynamicProperty<StyleColor>;\n\n    /**\n     * If `true`, the height of the extruded buildings will not be modified by the mercator\n     * projection distortion that happens around the poles.\n     *\n     * @default `false`\n     */\n    constantHeight?: boolean;\n\n    /**\n     * If `false`, wall geometry will not be added along the tile boundaries.\n     * @default `true`\n     */\n    boundaryWalls?: boolean;\n\n    /**\n     * Animate the extrusion of the buildings if set to `true`.\n     */\n    animateExtrusion?: DynamicProperty<boolean>;\n\n    /**\n     * Duration of the building's extrusion in milliseconds\n     */\n    animateExtrusionDuration?: number;\n\n    /**\n     * Control rendering of depth prepass before the actual geometry.\n     *\n     * Depth prepass is a method to render translucent meshes, hence only the visible front faces of\n     * a mesh are actually rendered, removing artifacts caused by blending with internal faces of\n     * the mesh. This method is used for drawing translucent buildings over map background.\n     *\n     * By default, each [[DataSource]] determines how/if enable the depth pre-pass. A value of\n     * `false` forcefully disables depth prepass.\n     */\n    enableDepthPrePass?: boolean;\n}\n\nexport interface ShaderTechniqueMaterialParameters {\n    [name: string]: any;\n}\n\n/**\n * Special technique for user-defined shaders. See\n * https://threejs.org/docs/#api/harp-materials/ShaderMaterial for details.\n */\nexport interface ShaderTechniqueParams extends BaseTechniqueParams {\n    /**\n     * Parameters for shader. See `THREE.ShaderMaterialParameters`.\n     */\n    params: ShaderTechniqueMaterialParameters;\n\n    /**\n     * Type of primitive for the shader technique. Valid values are \"point\" | \"line\" | \"segments\" |\n     * \"mesh\"\n     */\n    primitive: \"point\" | \"line\" | \"segments\" | \"mesh\";\n\n    /**\n     * Set to 'true' if line should appear transparent. Rendering transparent lines may come with a\n     * slight performance impact.\n     * See https://threejs.org/docs/#api/en/materials/Material.transparent.\n     */\n    transparent?: boolean;\n\n    [name: string]: any;\n}\n\n/**\n * Technique used to render a terrain geometry with a texture.\n * When using this technique, the datasource will produce texture coordinates in\n * local tile space (i.e. [0,0] at south-west and [1,1] at north-east tile corner).\n */\nexport interface TerrainTechniqueParams extends StandardTechniqueParams {\n    /**\n     * Colors to be applied at different heights (as a results of a `displacementMap`).\n     */\n    heightBasedColors?: HeightBasedColors;\n\n    /**\n     * If `heightBasedColors` is defined, this value defines the interpolation method used to\n     * generate the height-based gradient texture (defaults to `Discrete`).\n     */\n    heightGradientInterpolation?: \"Discrete\" | \"Linear\" | \"Cubic\";\n\n    /**\n     * If `heightBasedColors` is defined, this value defines the width (in pixels) of the generated\n     * gradient texture (defaults to `128`).\n     */\n    heightGradientWidth?: number;\n}\n\n/**\n * Render geometry as a text.\n */\nexport interface TextTechniqueParams extends BaseTechniqueParams {\n    /**\n     * Text to be displayed for feature.\n     *\n     * Defaults to first defined:\n     *  - feature property `label` if present in technique (depreacted);\n     *  - `[\"get\", \"name:short\"]` is `useAbbreviation` is true;\n     *  - `[\"get\", \"iso_code\"]` is `useIsoCode` is true;\n     *  - `[\"get\", \"name:$LANGUAGE\"]` for each specified language;\n     *  - `[\"get\", \"name\"]`.\n     *\n     * See [[ExtendedTileInfo.getFeatureText]].\n     */\n    text?: DynamicProperty<string>;\n\n    /**\n     * Field name of object containing the text to be rendered.\n     *\n     * @deprecated, Use `[\"get\", \"FIELD\"]`.\n     */\n    label?: string;\n    /**\n     * If `true`, the abbreviation (field `name:short`) of the elements is used as text.\n     *\n     * @deprecated Use proper expression with [`get`, `name:short`] for this purpose.\n     */\n    useAbbreviation?: boolean;\n    /**\n     * If `true`, the iso code (field 'iso_code') of the elements is used as text.\n     * The `iso_code` field contains the ISO 3166-1 2-letter country code.\n     *\n     * @deprecated Use proper expression with [`get`, `iso_code`] for this purpose.\n     */\n    useIsoCode?: boolean;\n    /**\n     * Priority of text, defaults to `0`. Elements with highest priority get placed first.\n     */\n    priority?: DynamicProperty<number>;\n    /**\n     * Minimal zoom level. If the current zoom level is smaller, the technique will not be used.\n     */\n    minZoomLevel?: number;\n    /**\n     * Maximum zoom level. If the current zoom level is larger, the technique will not be used.\n     */\n    maxZoomLevel?: number;\n    /**\n     * Scaling factor of the text. Defaults to 0.5, reducing the size ot 50% in the distance.\n     */\n    distanceScale?: number;\n    /**\n     * If `true`, icon is allowed to overlap other labels or icons of lower priority.\n     * @default `false`\n     */\n    mayOverlap?: boolean;\n    /**\n     * If `true`, element will reserve screen space, other markers of lower priority will not be\n     * able to overlap.\n     * @default `true`\n     */\n    reserveSpace?: boolean;\n    /**\n     * Fading time for labels in seconds.\n     */\n    textFadeTime?: number;\n    /**\n     * Horizontal offset (to the right) in screen pixels.\n     */\n    xOffset?: number;\n    /**\n     * Vertical offset (up) in screen pixels.\n     */\n    yOffset?: number;\n    /**\n     * Name of the text style.\n     */\n    style?: string;\n    /**\n     * Name of the preferred [[Font]] to be used when rendering.\n     */\n    fontName?: string;\n    /**\n     * Size of the text (pixels).\n     */\n    size?: DynamicProperty<number>;\n    /**\n     * Size of the text background (pixels).\n     */\n    backgroundSize?: DynamicProperty<number>;\n    /**\n     * Glyph style to apply for the currently active [[Font]].\n     */\n    fontStyle?: \"Regular\" | \"Bold\" | \"Italic\" | \"BoldItalic\";\n    /**\n     * Glyph variant to apply for the currently active [[Font]].\n     */\n    fontVariant?: \"Regular\" | \"AllCaps\" | \"SmallCaps\";\n    /**\n     * Glyph local rotation (radians).\n     */\n    rotation?: number;\n    /**\n     * Text color in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`,\n     * `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.\n     * @format color-hex\n     */\n    color?: DynamicProperty<StyleColor>;\n    /**\n     * Text background color in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`,\n     * `\"#fff\"`, `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.\n     * @format color-hex\n     */\n    backgroundColor?: DynamicProperty<StyleColor>;\n    /**\n     * For transparent text, set a value between 0.0 for totally transparent, to 1.0 for totally\n     * opaque.\n     */\n    opacity?: DynamicProperty<number>;\n    /**\n     * Background text opacity value.\n     */\n    backgroundOpacity?: DynamicProperty<number>;\n    /**\n     * Inter-glyph spacing (pixels). Scaled by `size`.\n     */\n    tracking?: DynamicProperty<number>;\n    /**\n     * Inter-line spacing (pixels). Scaled by `size`.\n     */\n    leading?: DynamicProperty<number>;\n    /**\n     * Maximum number of lines for this label.\n     */\n    maxLines?: DynamicProperty<number>;\n    /**\n     * Maximum line width (pixels).\n     */\n    lineWidth?: DynamicProperty<number>;\n    /**\n     * [[TextCanvas]] rotation (radians).\n     */\n    canvasRotation?: DynamicProperty<number>;\n    /**\n     * Line typesetting rotation (radians).\n     */\n    lineRotation?: DynamicProperty<number>;\n    /**\n     * Wrapping (line-breaking) mode.\n     */\n    wrappingMode?: DynamicProperty<\"None\" | \"Character\" | \"Word\">;\n    /**\n     * Text position regarding the baseline.\n     */\n    hAlignment?: DynamicProperty<\"Left\" | \"Center\" | \"Right\">;\n    /**\n     * Text position inside a line.\n     */\n    vAlignment?: DynamicProperty<\"Above\" | \"Center\" | \"Below\">;\n}\n\n/**\n * Buffer holding a texture.\n */\nexport interface TextureBuffer {\n    /**\n     * Buffer containing the (compressed) image or the raw texture data.\n     */\n    buffer: ArrayBuffer;\n\n    /**\n     * Mime type of the image or 'image/raw' in case of raw texture data.\n     */\n    type: string;\n\n    /**\n     * Properties for creating a three.js DataTexture\n     * (https://threejs.org/docs/#api/en/textures/DataTexture).\n     */\n    dataTextureProperties?: DataTextureProperties;\n}\n\n/**\n * Type guard to check if an object is an instance of `TextureBuffer`.\n */\nexport function isTextureBuffer(object: any): object is TextureBuffer {\n    return object && object.buffer && typeof object.type === \"string\";\n}\n\n/**\n * Properties of a DataTexture (https://threejs.org/docs/#api/en/textures/DataTexture).\n */\nexport interface DataTextureProperties {\n    width: number;\n    height: number;\n\n    format?: PixelFormat;\n    type?: TextureDataType;\n}\n\n/**\n * Properties of a Texture (https://threejs.org/docs/#api/en/textures/Texture).\n */\nexport interface TextureProperties {\n    /**\n     * Texture horizontal wrapping mode.\n     * See: https://threejs.org/docs/#api/en/textures/Texture.wrapS.\n     */\n    wrapS?: WrappingMode;\n\n    /**\n     * Texture vertical wrapping mode.\n     * See: https://threejs.org/docs/#api/en/textures/Texture.wrapT.\n     */\n    wrapT?: WrappingMode;\n\n    /**\n     * Texture magnification filter.\n     */\n    magFilter?: MagFilter;\n\n    /**\n     * Texture minification filter.\n     */\n    minFilter?: MinFilter;\n\n    /**\n     * Flip texture vertically.\n     * See: https://threejs.org/docs/#api/en/textures/Texture.flipY.\n     */\n    flipY?: boolean;\n\n    /**\n     * Texture horizontal repetition rate.\n     * See: https://threejs.org/docs/#api/en/textures/Texture.repeat.\n     */\n    repeatU?: number;\n\n    /**\n     * Texture vertical repetition rate.\n     * See: https://threejs.org/docs/#api/en/textures/Texture.repeat.\n     */\n    repeatV?: number;\n}\n\n/**\n * Interface containing the definition of different colors to be used at different heights with the\n * [[TerrainTechnique]].\n */\nexport interface HeightBasedColors {\n    heightArray: number[];\n    colorArray: string[];\n}\n\nexport type PixelFormat =\n    | \"Alpha\"\n    | \"RGB\"\n    | \"RGBA\"\n    | \"Luminance\"\n    | \"LuminanceAlpha\"\n    | \"RGBE\"\n    | \"Depth\"\n    | \"DepthStencil\"\n    | \"Red\";\n\nexport type TextureDataType =\n    | \"UnsignedByte\"\n    | \"Byte\"\n    | \"Short\"\n    | \"UnsignedShort\"\n    | \"Int\"\n    | \"UnsignedInt\"\n    | \"Float\"\n    | \"HalfFloat\";\n\n/**\n * Available texture wrapping modes.\n */\nexport type WrappingMode = \"clamp\" | \"repeat\" | \"mirror\";\n\n/**\n * Available texture magnification filters.\n */\nexport type MagFilter = \"nearest\" | \"linear\";\n\n/**\n * Available texture minification filters.\n */\nexport type MinFilter =\n    | \"nearest\"\n    | \"nearestMipMapNearest\"\n    | \"nearestMipMapLinear\"\n    | \"linear\"\n    | \"linearMipMapNearest\"\n    | \"linearMipMapLinear\";\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Technique } from \"./Techniques\";\n\nexport enum AttrScope {\n    /**\n     * Attributes that affect generation of feature geometry and thus must be resolved at decoding\n     * time.\n     *\n     * They may have huge variancy as they are implemented as vertex attributes or embedded in\n     * generated meshes.\n     *\n     * These attributes are available only in decoding scope.\n     */\n    FeatureGeometry,\n\n    /**\n     * Attributes that are common to whole group of features drawn with this technique.\n     * These attributes affect generated geometry and  thus must be resolved at decoding time.\n     *\n     * They shouldn't have big variancy and evaluate to at least dozens of values as each\n     * combination of these attributes consitute new technique and material.\n     *\n     * These attributes are available in decoding and rendering scope.\n     */\n    TechniqueGeometry,\n\n    /**\n     * Attributes that are common to whole group of features drawn with this technique.\n     * Attributes that can be changed in resulting object/material from frame to frame. They are\n     * usually implemented as uniforms.\n     *\n     * These attributes may be available only at rendering scope.\n     */\n    TechniqueRendering\n}\n\n/**\n * Extract  property names from [[Technique]]-like interface (excluding `name`) as union of string\n * literals.\n *\n * TechniquePropName<Base\n *\n */\nexport type TechniquePropNames<T> = T extends { name: any } ? keyof Omit<T, \"name\"> : keyof T;\n\nexport type TechniquePropScopes<T> = {\n    [P in TechniquePropNames<T>]?: AttrScope;\n};\n\nexport interface TechniqueDescriptor<T> {\n    attrTransparencyColor?: string;\n    attrScopes: TechniquePropScopes<T>;\n}\n\ntype OneThatMatches<T, P> = T extends P ? T : never;\ntype TechniqueByName<K extends Technique[\"name\"]> = OneThatMatches<Technique, { name: K }>;\n\nexport type TechniqueDescriptorRegistry = {\n    [P in Technique[\"name\"]]?: TechniqueDescriptor<TechniqueByName<P>>;\n};\n\nexport function mergeTechniqueDescriptor<T>(\n    ...descriptors: Array<Partial<TechniqueDescriptor<T>>>\n): TechniqueDescriptor<T> {\n    const result: TechniqueDescriptor<T> = {\n        attrScopes: {}\n    };\n    for (const descriptor of descriptors) {\n        if (descriptor.attrTransparencyColor !== undefined) {\n            result.attrTransparencyColor = descriptor.attrTransparencyColor;\n        }\n        if (descriptor.attrScopes !== undefined) {\n            result.attrScopes = { ...result.attrScopes, ...descriptor.attrScopes };\n        }\n    }\n    return result;\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { LoggerManager } from \"@here/harp-utils\";\nimport { Env } from \"./Env\";\nimport { Expr, ExprScope, Value } from \"./Expr\";\nimport { Pixels } from \"./Pixels\";\nimport { RGBA } from \"./RGBA\";\nimport { parseStringEncodedNumeral } from \"./StringEncodedNumeral\";\n\nconst logger = LoggerManager.instance.create(\"PropertyValue\");\n\n/**\n * Get the value of the specified property in given `env`.\n *\n * @param property Property of a technique.\n * @param env The [[Env]] used to evaluate the property\n * @param cache An optional expression cache.\n */\nexport function getPropertyValue(\n    property: Value | undefined,\n    env: Env,\n    cache?: Map<Expr, Value>\n): any {\n    if (Expr.isExpr(property)) {\n        try {\n            let r = property.evaluate(env, ExprScope.Dynamic, cache);\n\n            if (typeof r === \"string\") {\n                r = RGBA.parse(r) ?? Pixels.parse(r) ?? r;\n            }\n\n            if (r instanceof RGBA) {\n                return r.getHex();\n            } else if (r instanceof Pixels) {\n                return r.value * (Number(env.lookup(\"$pixelToMeters\")) ?? 1);\n            }\n            return r;\n        } catch (error) {\n            logger.error(\n                \"failed to evaluate expression\",\n                JSON.stringify(property),\n                \"error\",\n                String(error)\n            );\n            return null;\n        }\n    }\n\n    if (property === null || typeof property === \"undefined\") {\n        return null;\n    } else if (typeof property !== \"string\") {\n        // Property in numeric or array, etc. format\n        return property;\n    } else {\n        // Non-interpolated string encoded numeral parsing\n        const pixelToMeters = (env.lookup(\"$pixelToMeters\") as number) || 1;\n        const value = parseStringEncodedNumeral(property, pixelToMeters);\n        return value !== undefined ? value : property;\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    equirectangularProjection,\n    mercatorProjection,\n    normalizedEquirectangularProjection,\n    OrientedBox3,\n    Projection,\n    sphereProjection,\n    Vector3Like,\n    webMercatorProjection\n} from \"@here/harp-geoutils\";\nimport { Env } from \"./Expr\";\nimport { AttrEvaluationContext, evaluateTechniqueAttr } from \"./TechniqueAttr\";\nimport {\n    IndexedTechnique,\n    isLineMarkerTechnique,\n    isPoiTechnique,\n    isTextTechnique,\n    Technique\n} from \"./Techniques\";\nimport { TileInfo } from \"./TileInfo\";\n\n/**\n * This object has geometry data in the form of geometries buffers ready to be used by WebGL.\n * These geometries are not `three.js` objects. They are pure data stored as `ArrayBuffer`s and\n * metadata describing these buffers.\n */\nexport interface DecodedTile {\n    techniques: IndexedTechnique[];\n    geometries: Geometry[];\n    pathGeometries?: PathGeometry[];\n    textPathGeometries?: TextPathGeometry[];\n    textGeometries?: TextGeometry[]; // ### deprecate\n    poiGeometries?: PoiGeometry[];\n    tileInfo?: TileInfo;\n    decodeTime?: number; // time used to decode (in ms)\n\n    /**\n     * The default bounding box in [[Tile]] is based on the geo box of the tile.\n     * For data-sources that have 3d data this is not sufficient so the data-source can provide a\n     * more accurate bounding box once the data is decoded.\n     */\n    boundingBox?: OrientedBox3;\n\n    /**\n     * Data sources not defining a bounding box may define alternatively a maximum geometry height\n     * in meters. The bounding box of the resulting tile will be extended to encompass this height.\n     */\n    maxGeometryHeight?: number;\n\n    /**\n     * Tile data Copyright holder identifiers.\n     *\n     * `id`s should be unique. It is recommended to build them from unique identifiers like\n     * registered domain names.\n     *\n     * @see [[CopyrightInfo]]\n     */\n    copyrightHolderIds?: string[];\n}\n\n/**\n * This object keeps the path of the geometry. Space of the path depends on the\n * use case, so could be either world or local tile space.\n */\nexport interface PathGeometry {\n    path: Vector3Like[];\n}\n\n/**\n * Attributes corresponding to some decoded geometry. It may be either a map\n * of multiple attributes or just a number with the geometry's feature id.\n */\nexport type AttributeMap = {} | number;\n\n/**\n * This object keeps textual data together with metadata to place it on the map.\n */\nexport interface TextPathGeometry {\n    path: number[];\n    pathLengthSqr: number;\n    text: string;\n    technique: number;\n    objInfos?: AttributeMap;\n}\n\n/**\n * Returns an array with the data type specified as parameter.\n *\n * @param attr specifies which type of data is being stored in the array\n */\nexport function getArrayConstructor(attr: BufferElementType) {\n    switch (attr) {\n        case \"float\":\n            return Float32Array;\n        case \"uint8\":\n            return Uint8Array;\n        case \"uint16\":\n            return Uint16Array;\n        case \"uint32\":\n            return Uint32Array;\n        case \"int8\":\n            return Int8Array;\n        case \"int16\":\n            return Int16Array;\n        case \"int32\":\n            return Int32Array;\n    }\n}\n\n/**\n * Structured clone compliant WebGL interleaved buffer with its metadata attached.\n */\nexport interface InterleavedBufferAttribute {\n    buffer: ArrayBufferLike;\n    stride: number;\n    type: BufferElementType;\n    attributes: Array<{\n        name: string;\n        itemSize: number;\n        offset: number;\n    }>;\n}\n\n/**\n * Geometry types supported by [[Geometry]] objects.\n */\nexport enum GeometryType {\n    Unspecified = 0,\n    Point,\n    Line,\n    SolidLine,\n    Text,\n    TextPath,\n    ExtrudedLine,\n    Polygon,\n    ExtrudedPolygon,\n    Object3D,\n    Other = 1000\n}\n\n/**\n * Structured clone compliant version of a `three.js` geometry object, consisting of buffers with\n * metadata for map features and objects for example roads, trees or parks.\n */\nexport interface Geometry {\n    type: GeometryType;\n    vertexAttributes?: BufferAttribute[];\n    interleavedVertexAttributes?: InterleavedBufferAttribute[];\n    index?: BufferAttribute;\n    edgeIndex?: BufferAttribute;\n    groups: Group[];\n    uuid?: string;\n\n    /**\n     * Optional sorted list of feature start indices. The indices point into the index attribute.\n     * Feature i starts at featureStarts[i] and ends at featureStarts[i+1]-1, except for the last\n     * feature, which ends at index[index.length-1].\n     */\n    featureStarts?: number[];\n\n    /**\n     * Optional array of objects. It can be used to pass user data from the geometry to the mesh.\n     */\n    objInfos?: AttributeMap[];\n\n    /**\n     * Optional [[Array]] of [[Attachment]]s.\n     */\n    attachments?: Attachment[];\n}\n\n/**\n * Attachments together with [[Geometry]] define the meshes and the objects\n * of a [[Scene]].\n */\nexport interface Attachment {\n    /**\n     * The unique uuid of this [[Attachment]].\n     */\n    uuid?: string;\n\n    /**\n     * The name of this [[Attachment]].\n     */\n    name?: string;\n\n    /**\n     * The index [[BufferAttribute]]. If not provided the index\n     * buffer of the [[Geometry]] will be used.\n     */\n    index?: BufferAttribute;\n\n    /**\n     * Optional additional buffer index used to create an edge object.\n     */\n    edgeIndex?: BufferAttribute;\n\n    /**\n     * The draw [[Group]]]s of this [[Attachment]].\n     */\n    groups: Group[];\n}\n\n/**\n * The data stored in Buffers' elements can be of the following elementary types: float, signed or\n * unsigned integers (8-bit, 16-bit or 32-bit long).\n */\nexport type BufferElementType =\n    | \"float\"\n    | \"uint8\"\n    | \"uint16\"\n    | \"uint32\"\n    | \"int8\"\n    | \"int16\"\n    | \"int32\";\n\n/**\n * Structured clone compliant WebGL buffer and its metadata.\n */\nexport interface BufferAttribute {\n    name: string;\n    buffer: ArrayBufferLike;\n    type: BufferElementType;\n    itemCount: number;\n    normalized?: boolean;\n}\n\n/**\n * Structured clone compliant version of a `three.js` geometry object with text to be rendered.\n * It is composed of buffers with metadata for text objects.\n */\nexport interface TextGeometry {\n    positions: BufferAttribute;\n    texts: number[];\n    technique?: number;\n    stringCatalog?: Array<string | undefined>;\n    objInfos?: AttributeMap[];\n}\n\n/**\n * Structured clone compliant version of a `three.js` geometry object with points of interest (POIs)\n * to be rendered. It is composed of buffers with metadata for POI objects.\n */\nexport interface PoiGeometry {\n    positions: BufferAttribute;\n    texts: number[];\n    /**\n     * Names of the image texture or the name of the POI as indices into the array `stringCatalog`.\n     */\n    imageTextures?: number[];\n    technique?: number;\n    stringCatalog?: Array<string | undefined>;\n    objInfos?: AttributeMap[];\n    // Angle in degrees from north clockwise specifying the directions the icons can be shifted.\n    offsetDirections?: number[];\n}\n\n/**\n * Structured clone compliant WebGL group object and its metadata.\n * Its purpose is to make working with groups of objects easier.\n */\nexport interface Group {\n    start: number;\n    count: number;\n    technique: number;\n\n    /**\n     * Contains tile offsets if its [[Geometry]] has been created.\n     */\n    createdOffsets?: number[];\n}\n\n/**\n * Returns the projection object specified in the parameter.\n *\n * @param projectionName string describing projection to be used\n */\nexport function getProjection(projectionName: string): Projection | never {\n    switch (projectionName) {\n        case \"mercator\":\n            return mercatorProjection;\n        case \"webMercator\":\n            return webMercatorProjection;\n        case \"sphere\":\n            return sphereProjection;\n        case \"normalizedEquirectangular\":\n            return normalizedEquirectangularProjection;\n        case \"equirectangular\":\n            return equirectangularProjection;\n        default:\n            throw new Error(`Unknown projection ${projectionName}`);\n    } // switch\n}\n\n/**\n * String with the projection's name.\n *\n * @param projection `Projection` object containing the name of the projection to retrieve\n */\nexport function getProjectionName(projection: Projection): string | never {\n    if (projection === mercatorProjection) {\n        return \"mercator\";\n    } else if (projection === webMercatorProjection) {\n        return \"webMercator\";\n    } else if (projection === sphereProjection) {\n        return \"sphere\";\n    } else if (projection === normalizedEquirectangularProjection) {\n        return \"normalizedEquirectangular\";\n    } else if (projection === equirectangularProjection) {\n        return \"equirectangular\";\n    }\n    throw new Error(\"Unknown projection\");\n}\n\n/**\n * @returns Feature id from the provided attribute map.\n */\nexport function getFeatureId(attributeMap: AttributeMap | undefined): number {\n    if (attributeMap === undefined) {\n        return 0;\n    }\n\n    if (typeof attributeMap === \"number\") {\n        return attributeMap;\n    }\n\n    if (attributeMap.hasOwnProperty(\"$id\")) {\n        return (attributeMap as any).$id as number;\n    }\n\n    return 0;\n}\n\n/**\n * Determine the name of (OMV) feature. It implements the special handling required\n * to determine the text content of a feature from its tags, which are passed in as the `env`.\n *\n * @param env Environment containing the tags from the (OMV) feature.\n * @param useAbbreviation `true` to use the abbreviation if available.\n * @param useIsoCode `true` to use the tag \"iso_code\".\n * @param languages List of languages to use, for example: Specify \"en\" to use the tag \"name_en\"\n *                  as the text of the string. Order reflects priority.\n */\nexport function getFeatureName(\n    env: Env,\n    basePropName: string | undefined,\n    useAbbreviation?: boolean,\n    useIsoCode?: boolean,\n    languages?: string[]\n): string | undefined {\n    let name;\n    if (basePropName === undefined) {\n        basePropName = \"name\";\n    }\n    if (useAbbreviation) {\n        const abbreviation = env.lookup(`${basePropName}:short`);\n        if (typeof abbreviation === \"string\" && abbreviation.length > 0) {\n            return abbreviation;\n        }\n    }\n    if (useIsoCode) {\n        const isoCode = env.lookup(`iso_code`);\n        if (typeof isoCode === \"string\" && isoCode.length > 0) {\n            return isoCode;\n        }\n    }\n    if (languages !== undefined) {\n        for (const lang of languages) {\n            name = env.lookup(`${basePropName}:${lang}`) || env.lookup(`${basePropName}_${lang}`);\n            if (typeof name === \"string\" && name.length > 0) {\n                return name;\n            }\n        }\n    }\n    name = env.lookup(basePropName);\n    if (typeof name === \"string\") {\n        return name;\n    }\n    return undefined;\n}\n\n/**\n * Determine the text string of the map feature. It implements the special handling required\n * to determine the text content of a feature from its tags, which are passed in as the `env`.\n *\n * @param feature Feature, including properties from the (OMV) feature.\n * @param technique technique defining how text should be created from feature\n * @param languages List of languages to use, for example: Specify \"en\" to use the tag \"name_en\"\n *                  as the text of the string. Order reflects priority.\n */\nexport function getFeatureText(\n    context: Env | AttrEvaluationContext,\n    technique: Technique,\n    languages?: string[]\n): string | undefined {\n    let useAbbreviation: boolean | undefined;\n    let useIsoCode: boolean | undefined;\n    const env = context instanceof Env ? context : context.env;\n    let propName: string = \"name\";\n    if (\n        isTextTechnique(technique) ||\n        isPoiTechnique(technique) ||\n        isLineMarkerTechnique(technique)\n    ) {\n        if (technique.text !== undefined) {\n            return evaluateTechniqueAttr(context, technique.text);\n        }\n        // tslint:disable-next-line: deprecation\n        if (technique.label !== undefined) {\n            // tslint:disable-next-line: deprecation\n            propName = evaluateTechniqueAttr(context, technique.label)!;\n            if (typeof propName !== \"string\") {\n                return undefined;\n            }\n        }\n        // tslint:disable-next-line: deprecation\n        useAbbreviation = technique.useAbbreviation;\n        // tslint:disable-next-line: deprecation\n        useIsoCode = technique.useIsoCode;\n    }\n\n    return getFeatureName(env, propName, useAbbreviation, useIsoCode, languages);\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Theme } from \"@here/harp-datasource-protocol\";\nimport { TileKey, TilingScheme, webMercatorTilingScheme } from \"@here/harp-geoutils\";\nimport { DataSource } from \"./DataSource\";\nimport { TileGeometryCreator } from \"./geometry/TileGeometryCreator\";\nimport { Tile } from \"./Tile\";\n\n/**\n * Provides background geometry for all tiles.\n */\nexport class BackgroundDataSource extends DataSource {\n    private static readonly DEFAULT_TILING_SCHEME = webMercatorTilingScheme;\n    private m_tilingScheme: TilingScheme = BackgroundDataSource.DEFAULT_TILING_SCHEME;\n\n    constructor() {\n        super({ name: \"background\" });\n        this.cacheable = true;\n        this.addGroundPlane = true;\n    }\n\n    updateStorageLevelOffset() {\n        let storageLevelOffset: number | undefined;\n\n        this.mapView.dataSources.forEach(ds => {\n            if (ds === this) {\n                return;\n            }\n            const tilingScheme = ds.getTilingScheme();\n            if (tilingScheme === this.m_tilingScheme) {\n                storageLevelOffset =\n                    storageLevelOffset === undefined\n                        ? ds.storageLevelOffset\n                        : Math.max(storageLevelOffset, ds.storageLevelOffset);\n            }\n        });\n\n        if (storageLevelOffset === undefined) {\n            storageLevelOffset = 0;\n        }\n\n        if (storageLevelOffset !== this.storageLevelOffset) {\n            this.storageLevelOffset = storageLevelOffset;\n            this.mapView.clearTileCache(this.name);\n        }\n    }\n\n    /** @override */\n    setTheme(theme: Theme, languages?: string[]) {\n        this.mapView.clearTileCache(this.name);\n    }\n\n    setTilingScheme(tilingScheme?: TilingScheme) {\n        const newScheme = tilingScheme || BackgroundDataSource.DEFAULT_TILING_SCHEME;\n        if (newScheme === this.m_tilingScheme) {\n            return;\n        }\n\n        this.m_tilingScheme = newScheme;\n        this.updateStorageLevelOffset();\n        this.mapView.clearTileCache(this.name);\n    }\n\n    /** @override */\n    getTilingScheme(): TilingScheme {\n        return this.m_tilingScheme;\n    }\n\n    /** @override */\n    getTile(tileKey: TileKey): Tile | undefined {\n        const tile = new Tile(this, tileKey);\n        tile.forceHasGeometry(true);\n        tile.removeDecodedTile(); // Skip geometry loading.\n        TileGeometryCreator.instance.addGroundPlane(tile, Number.MIN_SAFE_INTEGER);\n\n        return tile;\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    BooleanLiteralExpr,\n    CallExpr,\n    CaseExpr,\n    Expr,\n    ExprVisitor,\n    HasAttributeExpr,\n    InterpolateExpr,\n    MatchExpr,\n    NullLiteralExpr,\n    NumberLiteralExpr,\n    ObjectLiteralExpr,\n    StepExpr,\n    StringLiteralExpr,\n    VarExpr\n} from \"./Expr\";\n\nimport { Value } from \"./Env\";\n\n/**\n * [[ExprPool]] maintains a set of unique interned [[Expr]] objects.\n *\n * @hidden\n */\nexport class ExprPool implements ExprVisitor<Expr, void> {\n    private readonly m_booleanLiterals = new Map<boolean, BooleanLiteralExpr>();\n    private readonly m_numberLiterals = new Map<number, NumberLiteralExpr>();\n    private readonly m_stringLiterals = new Map<string, StringLiteralExpr>();\n    private readonly m_objectLiterals = new Map<object, ObjectLiteralExpr>();\n    private readonly m_arrayLiterals: ObjectLiteralExpr[] = [];\n    private readonly m_varExprs = new Map<string, VarExpr>();\n    private readonly m_hasAttributeExprs = new Map<string, HasAttributeExpr>();\n    private readonly m_matchExprs: MatchExpr[] = [];\n    private readonly m_caseExprs: CaseExpr[] = [];\n    private readonly m_interpolateExprs: InterpolateExpr[] = [];\n    private readonly m_stepExprs: StepExpr[] = [];\n    private readonly m_callExprs = new Map<string, CallExpr[]>();\n\n    /**\n     * Add `expr` to this [[ExprPool]] and return a unique [[Expr]]\n     * object that is structurally equivalent to `expr`.\n     *\n     * @param expr The [[Expr]] to add to this [[ExprPool]].\n     * @returns A unique [[Expr]] that is structurally equivalent to `expr`.\n     */\n    add(expr: Expr): Expr {\n        return expr.accept(this, undefined);\n    }\n\n    visitNullLiteralExpr(expr: NullLiteralExpr, context: void): Expr {\n        return NullLiteralExpr.instance;\n    }\n\n    visitBooleanLiteralExpr(expr: BooleanLiteralExpr, context: void): Expr {\n        const e = this.m_booleanLiterals.get(expr.value);\n        if (e) {\n            return e;\n        }\n        this.m_booleanLiterals.set(expr.value, expr);\n        return expr;\n    }\n\n    visitNumberLiteralExpr(expr: NumberLiteralExpr, context: void): Expr {\n        const e = this.m_numberLiterals.get(expr.value);\n        if (e) {\n            return e;\n        }\n        this.m_numberLiterals.set(expr.value, expr);\n        return expr;\n    }\n\n    visitStringLiteralExpr(expr: StringLiteralExpr, context: void): Expr {\n        const e = this.m_stringLiterals.get(expr.value);\n        if (e) {\n            return e;\n        }\n        this.m_stringLiterals.set(expr.value, expr);\n        return expr;\n    }\n\n    visitObjectLiteralExpr(expr: ObjectLiteralExpr, context: void): Expr {\n        const e = this.m_objectLiterals.get(expr.value);\n        if (e) {\n            return e;\n        }\n\n        if (Array.isArray(expr.value)) {\n            const array = expr.value as Value[];\n\n            const r = this.m_arrayLiterals.find(literal => {\n                const elements = literal.value as Value[];\n                if (elements.length !== array.length) {\n                    return false;\n                }\n                return array.every((x, i) => x === elements[i]);\n            });\n\n            if (r !== undefined) {\n                return r;\n            }\n\n            this.m_arrayLiterals.push(expr);\n        }\n\n        this.m_objectLiterals.set(expr.value, expr);\n\n        return expr;\n    }\n\n    visitVarExpr(expr: VarExpr, context: void): Expr {\n        const e = this.m_varExprs.get(expr.name);\n        if (e) {\n            return e;\n        }\n        this.m_varExprs.set(expr.name, expr);\n        return expr;\n    }\n\n    visitHasAttributeExpr(expr: HasAttributeExpr, context: void): Expr {\n        const e = this.m_hasAttributeExprs.get(expr.name);\n        if (e) {\n            return e;\n        }\n        this.m_hasAttributeExprs.set(expr.name, expr);\n        return expr;\n    }\n\n    visitMatchExpr(expr: MatchExpr, context: void): Expr {\n        const value = expr.value.accept(this, context);\n        const branches: typeof expr.branches = expr.branches.map(([label, body]) => [\n            label,\n            body.accept(this, context)\n        ]);\n        const fallback = expr.fallback.accept(this, context);\n        for (const candidate of this.m_matchExprs) {\n            if (candidate.value !== value) {\n                continue;\n            }\n            if (candidate.fallback !== fallback) {\n                continue;\n            }\n            if (candidate.branches.length !== branches.length) {\n                continue;\n            }\n            let branchesMatching = true;\n            for (let i = 0; i < branches.length; i++) {\n                if (\n                    branches[i][0] !== candidate.branches[i][0] ||\n                    branches[i][1] !== candidate.branches[i][1]\n                ) {\n                    branchesMatching = false;\n                    break;\n                }\n            }\n            if (branchesMatching) {\n                return candidate;\n            }\n        }\n        const r = new MatchExpr(value, branches, fallback);\n        this.m_matchExprs.push(r);\n        return r;\n    }\n\n    visitCaseExpr(expr: CaseExpr, context: void): Expr {\n        const branches: typeof expr.branches = expr.branches.map(([condition, body]) => [\n            condition.accept(this, context),\n            body.accept(this, context)\n        ]);\n        const fallback = expr.fallback.accept(this, context);\n\n        for (const candidate of this.m_caseExprs) {\n            if (candidate.fallback !== fallback) {\n                continue;\n            }\n            if (candidate.branches.length !== branches.length) {\n                continue;\n            }\n            let branchesMatching = true;\n            for (let i = 0; i < branches.length; i++) {\n                if (\n                    branches[i][0] !== candidate.branches[i][0] ||\n                    branches[i][1] !== candidate.branches[i][1]\n                ) {\n                    branchesMatching = false;\n                    break;\n                }\n            }\n            if (branchesMatching) {\n                return candidate;\n            }\n        }\n\n        const r = new CaseExpr(branches, fallback);\n        this.m_caseExprs.push(r);\n        return r;\n    }\n\n    visitCallExpr(expr: CallExpr, context: void): Expr {\n        // rewrite the actual arguments\n        const expressions = expr.args.map(childExpr => childExpr.accept(this, context));\n        // ensure we have a valid set of interned expressions for the calls\n        if (!this.m_callExprs.has(expr.op)) {\n            this.m_callExprs.set(expr.op, []);\n        }\n        // get the calls for the given operator.\n        const calls = this.m_callExprs.get(expr.op)!;\n        for (const call of calls) {\n            // check the number of arguments\n            if (call.args.length !== expressions.length) {\n                continue;\n            }\n            // find the index of the first mismatch.\n            let index = 0;\n            for (; index < call.args.length; ++index) {\n                if (call.args[index] !== expressions[index]) {\n                    break;\n                }\n            }\n            if (index === call.args.length) {\n                // no mismatch found, return the 'interned' call.\n                return call;\n            }\n        }\n        const e = new CallExpr(expr.op, expressions);\n        e.descriptor = expr.descriptor;\n        calls.push(e);\n        return e;\n    }\n\n    visitStepExpr(expr: StepExpr, context: void): Expr {\n        if (this.m_stepExprs.includes(expr)) {\n            return expr;\n        }\n        const input = expr.input.accept(this, context);\n        const defaultValue = expr.defaultValue.accept(this, context);\n        const stops: Array<[number, Expr]> = expr.stops.map(stop => {\n            const key = stop[0];\n            const value = stop[1].accept(this, context);\n            return value === stop[1] ? stop : [key, value];\n        });\n        for (const step of this.m_stepExprs) {\n            if (\n                step.input === input &&\n                step.defaultValue === defaultValue &&\n                stops.length === step.stops.length &&\n                stops.every(\n                    ([key, value], i) => key === step.stops[i][0] && value === step.stops[i][1]\n                )\n            ) {\n                return step;\n            }\n        }\n        const e = new StepExpr(input, defaultValue, stops);\n        this.m_stepExprs.push(e);\n        return e;\n    }\n\n    visitInterpolateExpr(expr: InterpolateExpr, context: void): Expr {\n        if (this.m_interpolateExprs.includes(expr)) {\n            return expr;\n        }\n        const input = expr.input.accept(this, context);\n        const stops: Array<[number, Expr]> = expr.stops.map(stop => {\n            const key = stop[0];\n            const value = stop[1].accept(this, context);\n            return value === stop[1] ? stop : [key, value];\n        });\n        for (const interp of this.m_interpolateExprs) {\n            if (\n                interp.input === input &&\n                interp.mode[0] === expr.mode[0] &&\n                interp.mode[1] === expr.mode[1] &&\n                stops.length === interp.stops.length &&\n                stops.every(\n                    ([key, value], i) => key === interp.stops[i][0] && value === interp.stops[i][1]\n                )\n            ) {\n                return interp;\n            }\n        }\n        const e = new InterpolateExpr(expr.mode, input, stops);\n        this.m_interpolateExprs.push(e);\n        return e;\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { BufferAttribute, BufferGeometry, Vector3 } from \"three\";\n\nconst tmpVectorA = new Vector3();\nconst tmpVectorB = new Vector3();\nconst tmpVectorC = new Vector3();\n\n/**\n * The [[SubdivisionModifier]] subdivides triangle mesh geometries.\n */\nexport abstract class SubdivisionModifier {\n    /**\n     * Constructs a new [[SubdivisionModifier]].\n     */\n    constructor() {\n        // nothing to do\n    }\n\n    /**\n     * Subdivides the faces of the given [[THREE.BufferGeometry]].\n     *\n     * This method modifies (in-place) the vertices and the faces of the geometry.\n     * Please note that only the vertex position and their UV coordinates are subdivided.\n     * Normals, vertex colors and other attributes are left unmodified.\n     *\n     * @param geometry The [[THREE.BufferGeometry]] to subdivide.\n     */\n    modify(geometry: BufferGeometry): BufferGeometry {\n        const positionAttr = geometry.getAttribute(\"position\") as BufferAttribute;\n        const position = Array.from(positionAttr.array);\n\n        const uvAttr = geometry.getAttribute(\"uv\") as BufferAttribute;\n        const uv = uvAttr !== undefined ? Array.from(uvAttr.array) : undefined;\n\n        const edgeAttr = geometry.getAttribute(\"edge\") as BufferAttribute;\n        const edge = edgeAttr !== undefined ? Array.from(edgeAttr.array) : undefined;\n\n        const wallAttr = geometry.getAttribute(\"wall\") as BufferAttribute;\n        const wall = wallAttr !== undefined ? Array.from(wallAttr.array) : undefined;\n\n        const indexAttr = geometry.getIndex() as BufferAttribute;\n        const indices = Array.from(indexAttr.array);\n\n        // A cache containing the indices of the vertices added\n        // when subdiving the faces of the geometry.\n        const cache = new Map<string, number>();\n\n        /**\n         * Returns the index of the vertex positioned in the middle of the given vertices.\n         */\n        function middleVertex(i: number, j: number): number {\n            // Build a unique `key` for the pair of indices `(i, j)`.\n            const key = `${Math.min(i, j)}_${Math.max(i, j)}`;\n\n            const h = cache.get(key);\n\n            if (h !== undefined) {\n                // Nothing to do, a vertex in the middle of (i, j) was already created.\n                return h;\n            }\n\n            // The position of the new vertex.\n            tmpVectorA.set(position[i * 3], position[i * 3 + 1], position[i * 3 + 2]);\n            tmpVectorB.set(position[j * 3], position[j * 3 + 1], position[j * 3 + 2]);\n            tmpVectorC.lerpVectors(tmpVectorA, tmpVectorB, 0.5);\n\n            // The index of the new vertex.\n            const index = position.length / 3;\n            position.push(...tmpVectorC.toArray());\n            // Cache the position of the new vertex.\n            cache.set(key, index);\n\n            // The uvs of the new vertex.\n            if (uv !== undefined) {\n                tmpVectorA.set(uv[i * 2], uv[i * 2 + 1], 0);\n                tmpVectorB.set(uv[j * 2], uv[j * 2 + 1], 0);\n                tmpVectorC.lerpVectors(tmpVectorA, tmpVectorB, 0.5);\n                uv.push(tmpVectorC.x, tmpVectorC.y);\n            }\n\n            // The edge and wall attributes of the new vertex.\n            // If a new vertex has been introduced between i and j, connect the elements\n            // accordingly.\n            if (edge !== undefined) {\n                if (edge[i] === j) {\n                    edge.push(j);\n                    edge[i] = index;\n                } else if (edge[j] === i) {\n                    edge.push(i);\n                    edge[j] = index;\n                } else {\n                    edge.push(-1);\n                }\n            }\n            if (wall !== undefined) {\n                if (wall[i] === j) {\n                    wall.push(j);\n                    wall[i] = index;\n                } else if (wall[j] === i) {\n                    wall.push(i);\n                    wall[j] = index;\n                } else {\n                    wall.push(-1);\n                }\n            }\n\n            return index;\n        }\n\n        const newIndices = [];\n        while (indices.length >= 3) {\n            const v0 = indices.shift()!;\n            const v1 = indices.shift()!;\n            const v2 = indices.shift()!;\n\n            tmpVectorA.set(position[v0 * 3], position[v0 * 3 + 1], position[v0 * 3 + 2]);\n            tmpVectorB.set(position[v1 * 3], position[v1 * 3 + 1], position[v1 * 3 + 2]);\n            tmpVectorC.set(position[v2 * 3], position[v2 * 3 + 1], position[v2 * 3 + 2]);\n\n            const edgeToSplit = this.shouldSplitTriangle(tmpVectorA, tmpVectorB, tmpVectorC);\n\n            switch (edgeToSplit) {\n                case 0: {\n                    const v3 = middleVertex(v0, v1);\n                    indices.push(v0, v3, v2, v3, v1, v2);\n                    break;\n                }\n\n                case 1: {\n                    const v3 = middleVertex(v1, v2);\n                    indices.push(v0, v1, v3, v0, v3, v2);\n                    break;\n                }\n\n                case 2: {\n                    const v3 = middleVertex(v2, v0);\n                    indices.push(v0, v1, v3, v3, v1, v2);\n                    break;\n                }\n\n                case undefined: {\n                    newIndices.push(v0, v1, v2);\n                    break;\n                }\n\n                default:\n                    throw new Error(\"failed to subdivide the given geometry\");\n            }\n        }\n\n        positionAttr.array = new Float32Array(position);\n        positionAttr.count = position.length / positionAttr.itemSize;\n        positionAttr.needsUpdate = true;\n\n        geometry.setIndex(newIndices);\n\n        if (uv !== undefined) {\n            uvAttr.array = new Float32Array(uv);\n            uvAttr.count = uv.length / uvAttr.itemSize;\n            uvAttr.needsUpdate = true;\n        }\n\n        if (edge !== undefined) {\n            edgeAttr.array = new Float32Array(edge);\n            edgeAttr.count = edge.length / edgeAttr.itemSize;\n            edgeAttr.needsUpdate = true;\n        }\n\n        return geometry;\n    }\n\n    /**\n     * Returns if the given triangle should be subdivide.\n     *\n     * Implementations of this function should return the index of\n     * the edge of the triangle to split (0, 1, or 2) or undefined if\n     * the triangle doesn't need to be subdivided.\n     *\n     * @param a The position of the first vertex of the triangle.\n     * @param b The position of the second vertex of the triangle.\n     * @param c The position of the third vertex of the triangle.\n     */\n    protected abstract shouldSplitTriangle(a: Vector3, b: Vector3, c: Vector3): number | undefined;\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from \"./lib/LRUCache\";\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nconst SdfShaderChunks = {\n    sdf_attributes: `\n        attribute vec4 position;\n        attribute vec4 uv;\n        attribute vec4 color;\n        attribute vec4 bgColor;\n        `,\n    sdf_varying: `\n        varying vec4 vColor;\n        varying float vWeight;\n        varying vec2 vUv;\n        varying float vRotation;\n        `,\n    sdf_varying_computation: `\n        #if BG_TEXT\n        vColor = bgColor;\n        vWeight = uv.w;\n        #else\n        vColor = color;\n        vWeight = uv.z;\n        #endif\n        vUv = vec2(uv.xy);\n        vRotation = position.w;\n        `,\n    sdf_frag_uniforms: `\n        uniform sampler2D sdfTexture;\n        uniform vec4 sdfParams;\n        `,\n    sdf_sampling_functions: `\n        float median(float r, float g, float b) {\n            return max(min(r, g), min(max(r, g), b));\n        }\n\n        float getDistance(vec2 uvOffset) {\n            vec3 sample = texture2D(sdfTexture, vUv.xy + uvOffset).rgb;\n            #if MSDF\n            return median(sample.r, sample.g, sample.b);\n            #else\n            return sample.r;\n            #endif\n        }\n\n        float getOpacity(vec2 uvOffset, float weight) {\n            vec2 uv = vUv + uvOffset;\n            vec2 rotatedUVs = abs(vec2(\n                cos(vRotation) * uv.x - sin(vRotation) * uv.y,\n                sin(vRotation) * uv.x + cos(vRotation) * uv.y));\n\n            float dx = dFdx(rotatedUVs.x) * sdfParams.x;\n            float dy = dFdy(rotatedUVs.y) * sdfParams.y;\n            float toPixels = sdfParams.w * inversesqrt( dx * dx + dy * dy );\n\n            float dist = getDistance(uvOffset) + min(weight, 0.5 - 1.0 / sdfParams.w) - 0.5;\n            return clamp(dist * toPixels + 0.5, 0.0, 1.0);\n        }\n        `\n};\nObject.assign(THREE.ShaderChunk, SdfShaderChunks);\n\nconst clearVertexSource: string = `\n    attribute vec2 position;\n\n    uniform mat4 modelViewMatrix;\n    uniform mat4 projectionMatrix;\n\n    void main() {\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(position.xy, 0.0, 1.0);\n    }`;\n\nconst clearFragmentSource: string = `\n    precision highp float;\n    precision highp int;\n\n    void main() {\n        gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n    }`;\n\nconst copyVertexSource: string = `\n    attribute vec3 position;\n    attribute vec2 uv;\n\n    uniform mat4 modelViewMatrix;\n    uniform mat4 projectionMatrix;\n\n    varying vec3 vUv;\n\n    void main() {\n        vUv = vec3(uv.xy, position.z);\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(position.xy, 0.0, 1.0);\n    }`;\n\nconst copyFragmentSource: string = `\n    precision highp float;\n    precision highp int;\n\n    uniform float pageOffset;\n    uniform sampler2D page0;\n    uniform sampler2D page1;\n    uniform sampler2D page2;\n    uniform sampler2D page3;\n    uniform sampler2D page4;\n    uniform sampler2D page5;\n    uniform sampler2D page6;\n    uniform sampler2D page7;\n\n    varying vec3 vUv;\n\n    void main() {\n        vec4 sample = vec4(0.0);\n        if (vUv.z < pageOffset || vUv.z > (pageOffset + 7.0)) discard;\n        else if (vUv.z < pageOffset + 1.0) sample = texture2D(page0, vUv.xy);\n        else if (vUv.z < pageOffset + 2.0) sample = texture2D(page1, vUv.xy);\n        else if (vUv.z < pageOffset + 3.0) sample = texture2D(page2, vUv.xy);\n        else if (vUv.z < pageOffset + 4.0) sample = texture2D(page3, vUv.xy);\n        else if (vUv.z < pageOffset + 5.0) sample = texture2D(page4, vUv.xy);\n        else if (vUv.z < pageOffset + 6.0) sample = texture2D(page5, vUv.xy);\n        else if (vUv.z < pageOffset + 7.0) sample = texture2D(page6, vUv.xy);\n        else sample = texture2D(page7, vUv.xy);\n\n        gl_FragColor = sample;\n    }`;\n\nconst sdfTextVertexSource: string = `\n    #include <sdf_attributes>\n    #include <sdf_varying>\n\n    uniform mat4 modelViewMatrix;\n    uniform mat4 projectionMatrix;\n\n    void main() {\n        #include <sdf_varying_computation>\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(position.xyz, 1.0);\n    }`;\n\nconst sdfTextFragmentSource: string = `\n    precision highp float;\n    precision highp int;\n\n    #include <sdf_varying>\n    #include <sdf_frag_uniforms>\n    #include <sdf_sampling_functions>\n\n    void main() {\n        vec4 color = vColor;\n        color.a *= getOpacity(vec2(0.0), vWeight);\n        if (color.a < 0.05) {\n            discard;\n        }\n        gl_FragColor = color;\n    }`;\n\n/**\n * @hidden\n * Material used for clearing glyphs from a [[GlyphTextureCache]].\n */\nexport class GlyphClearMaterial extends THREE.RawShaderMaterial {\n    /**\n     * Creates a new `GlyphClearMaterial`.\n     *\n     * @returns New `GlyphClearMaterial`.\n     */\n    constructor() {\n        const shaderParams: THREE.ShaderMaterialParameters = {\n            name: \"GlyphClearMaterial\",\n            vertexShader: clearVertexSource,\n            fragmentShader: clearFragmentSource,\n            uniforms: {},\n            depthTest: false,\n            depthWrite: false\n        };\n        super(shaderParams);\n    }\n}\n\n/**\n * @hidden\n * Material used for copying glyphs into a [[GlyphTextureCache]].\n */\nexport class GlyphCopyMaterial extends THREE.RawShaderMaterial {\n    /**\n     * Creates a new `GlyphCopyMaterial`.\n     *\n     * @returns New `GlyphCopyMaterial`.\n     */\n    constructor() {\n        const shaderParams: THREE.ShaderMaterialParameters = {\n            name: \"GlyphCopyMaterial\",\n            vertexShader: copyVertexSource,\n            fragmentShader: copyFragmentSource,\n            uniforms: {\n                pageOffset: new THREE.Uniform(0.0),\n                page0: new THREE.Uniform(THREE.Texture.DEFAULT_IMAGE),\n                page1: new THREE.Uniform(THREE.Texture.DEFAULT_IMAGE),\n                page2: new THREE.Uniform(THREE.Texture.DEFAULT_IMAGE),\n                page3: new THREE.Uniform(THREE.Texture.DEFAULT_IMAGE),\n                page4: new THREE.Uniform(THREE.Texture.DEFAULT_IMAGE),\n                page5: new THREE.Uniform(THREE.Texture.DEFAULT_IMAGE),\n                page6: new THREE.Uniform(THREE.Texture.DEFAULT_IMAGE),\n                page7: new THREE.Uniform(THREE.Texture.DEFAULT_IMAGE)\n            },\n            depthTest: false,\n            depthWrite: false\n        };\n        super(shaderParams);\n    }\n}\n\n/**\n * @hidden\n * Material parameters passed on [[SdfTextMaterial]] creation.\n */\nexport interface SdfTextMaterialParameters {\n    texture: THREE.Texture;\n    textureSize: THREE.Vector2;\n    size: number;\n    distanceRange: number;\n    isMsdf: boolean;\n    isBackground: boolean;\n    vertexSource?: string;\n    fragmentSource?: string;\n}\n\n/**\n * Material designed to render transformable, high quality SDF text.\n */\nexport class SdfTextMaterial extends THREE.RawShaderMaterial {\n    /**\n     * Creates a new `SdfTextMaterial`.\n     *\n     * @param params Material parameters.\n     *\n     * @returns New `SdfTextMaterial`.\n     */\n    constructor(params: SdfTextMaterialParameters) {\n        const shaderParams: THREE.ShaderMaterialParameters = {\n            name: \"SdfTextMaterial\",\n            vertexShader:\n                params.vertexSource !== undefined ? params.vertexSource : sdfTextVertexSource,\n            fragmentShader:\n                params.fragmentSource !== undefined ? params.fragmentSource : sdfTextFragmentSource,\n            uniforms: {\n                sdfTexture: new THREE.Uniform(params.texture),\n                sdfParams: new THREE.Uniform(\n                    new THREE.Vector4(\n                        params.textureSize.x,\n                        params.textureSize.y,\n                        params.size,\n                        params.distanceRange\n                    )\n                )\n            },\n            defines: {\n                MSDF: params.isMsdf ? 1.0 : 0.0,\n                BG_TEXT: params.isBackground ? 1.0 : 0.0\n            },\n            depthTest: true,\n            depthWrite: true,\n            side: THREE.DoubleSide,\n            transparent: true\n        };\n        super(shaderParams);\n        this.extensions.derivatives = true;\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\nimport { GlyphData } from \"./GlyphData\";\nimport { TextLayoutStyle, TextRenderStyle } from \"./TextStyle\";\n\n/**\n * Object containing vertex buffer data generated by [[TextCanvas]].\n */\nexport class TextBufferObject {\n    /**\n     * Constructs a new `TextBufferObject`.\n     *\n     * @param glyphs Input glyphs.\n     * @param buffer Buffer containing the data generated by [[TextCanvas]].\n     * @param bounds Optional text bounds.\n     * @param characterBounds Optional character bounds.\n     * @param textRenderStyle [[TextRenderStyle]] applied by [[TextCanvas]].\n     * @param textLayoutStyle [[TextLayoutStyle]] applied by [[TextCanvas]].\n     *\n     * @returns New `TextBufferObject`.\n     */\n    constructor(\n        readonly glyphs: GlyphData[],\n        readonly buffer: Float32Array,\n        readonly bounds?: THREE.Box2,\n        readonly characterBounds?: THREE.Box2[],\n        readonly textRenderStyle?: TextRenderStyle,\n        readonly textLayoutStyle?: TextLayoutStyle\n    ) {}\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { FontCatalog } from \"../rendering/FontCatalog\";\nimport { SdfTextMaterial } from \"../rendering/TextMaterials\";\n\n/**\n * Material parameters passed on [[SdfTextMaterial]] creation when using the `\n * `createSdfTextMaterial` helper function.\n */\nexport interface SdfTextMaterialParameters {\n    fontCatalog: FontCatalog;\n    isBackground?: boolean;\n    vertexSource?: string;\n    fragmentSource?: string;\n}\n\n/**\n * Helper function designed to create [[SdfTextMaterials]] that can be rendered using\n * [[TextCanvas]].\n *\n * @param params Material parameters.\n *\n * @returns New `SdfTextMaterial`.\n */\nexport function createSdfTextMaterial(params: SdfTextMaterialParameters): SdfTextMaterial {\n    return new SdfTextMaterial({\n        texture: params.fontCatalog.texture,\n        textureSize: params.fontCatalog.textureSize,\n        size: params.fontCatalog.size,\n        distanceRange: params.fontCatalog.distanceRange,\n        isMsdf: params.fontCatalog.type === \"msdf\",\n        isBackground: params.isBackground === true,\n        vertexSource: params.vertexSource,\n        fragmentSource: params.fragmentSource\n    });\n}\n","/*\n * Copyright (C) 2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Vector3Like } from \"@here/harp-geoutils\";\nimport { sampleBilinear } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\nimport { VertexCache } from \"./VertexCache\";\n\n/**\n * @internal\n * BufferAttribute decorator that displaces on the fly the coordinates in a given attribute using a\n * specified displacement map.\n */\nexport class DisplacedBufferAttribute extends THREE.BufferAttribute {\n    private static MAX_CACHE_SIZE = 6;\n    private m_texture?: Float32Array;\n    private m_textureWidth: number = 0;\n    private m_textureHeight: number = 0;\n    private m_cache = new VertexCache(DisplacedBufferAttribute.MAX_CACHE_SIZE);\n    private m_lastBufferIndex?: number;\n    private m_lastPos = new THREE.Vector3();\n    private m_tmpNormal = new THREE.Vector3();\n\n    /**\n     * Creates an instance of displaced buffer attribute.\n     * @param originalAttribute The buffer attribute to be displaced (e.g. the position attribute).\n     * @param m_normals The normals along which the coordinates will be displaced.\n     * @param m_uvs The uv coordinates to be used to sample the displacement map.\n     * @param displacementMap A texture with the displacement values in 32bit floats.\n     */\n    constructor(\n        public originalAttribute: THREE.BufferAttribute | THREE.InterleavedBufferAttribute,\n        private m_normals: THREE.BufferAttribute | THREE.InterleavedBufferAttribute,\n        private m_uvs: THREE.BufferAttribute | THREE.InterleavedBufferAttribute,\n        displacementMap: THREE.DataTexture\n    ) {\n        super(originalAttribute.array, originalAttribute.itemSize, originalAttribute.normalized);\n        this.resetTexture(displacementMap);\n    }\n\n    /**\n     * Resets the displaced buffer attribute to use new buffer attributes or displacement map.\n     * @param originalAttribute The buffer attribute to be displaced (e.g. the position attribute).\n     * @param normals The normals along which the coordinates will be displaced.\n     * @param uvs  The uv coordinates to be used to sample the displacement map.\n     * @param displacementMap A texture with the displacement values in 32bit floats.\n     */\n    reset(\n        originalAttribute: THREE.BufferAttribute | THREE.InterleavedBufferAttribute,\n        normals: THREE.BufferAttribute | THREE.InterleavedBufferAttribute,\n        uvs: THREE.BufferAttribute | THREE.InterleavedBufferAttribute,\n        displacementMap: THREE.DataTexture\n    ) {\n        this.array = originalAttribute.array;\n        this.itemSize = originalAttribute.itemSize;\n        this.count = this.array.length / this.itemSize;\n        this.normalized = originalAttribute.normalized;\n        this.originalAttribute = originalAttribute;\n        this.m_normals = normals;\n        this.m_uvs = uvs;\n        this.m_cache.clear();\n        this.m_lastBufferIndex = undefined;\n        this.resetTexture(displacementMap);\n    }\n\n    // HARP-9585: These getters are overrides of the base class ones, however tslint doesn't\n    // recognize them as such.\n    getX(index: number): number {\n        return this.getDisplacedCoordinate(index).x;\n    }\n    getY(index: number): number {\n        return this.getDisplacedCoordinate(index).y;\n    }\n    getZ(index: number): number {\n        return this.getDisplacedCoordinate(index).z;\n    }\n\n    private resetTexture(displacementMap: THREE.DataTexture) {\n        this.m_texture = new Float32Array(displacementMap.image.data.buffer);\n        this.m_textureWidth = displacementMap.image.width;\n        this.m_textureHeight = displacementMap.image.height;\n    }\n    private getDisplacedCoordinate(bufferIndex: number): Vector3Like {\n        if (bufferIndex === this.m_lastBufferIndex) {\n            return this.m_lastPos;\n        }\n        this.m_lastBufferIndex = bufferIndex;\n        if (this.m_cache.get(bufferIndex, this.m_lastPos)) {\n            return this.m_lastPos;\n        }\n        this.displacePosition(bufferIndex);\n        this.m_cache.set(bufferIndex, this.m_lastPos);\n        return this.m_lastPos;\n    }\n    private displacePosition(bufferIndex: number) {\n        this.m_lastPos.fromBufferAttribute(\n            this.originalAttribute as THREE.BufferAttribute,\n            bufferIndex\n        );\n        const normals = this.m_normals as THREE.BufferAttribute;\n        this.m_tmpNormal.fromBufferAttribute(normals, bufferIndex);\n        const uvs = this.m_uvs;\n        const u = THREE.MathUtils.clamp(uvs.getX(bufferIndex), 0, 1);\n        const v = THREE.MathUtils.clamp(uvs.getY(bufferIndex), 0, 1);\n        const displacement = sampleBilinear(\n            this.m_texture!,\n            this.m_textureWidth,\n            this.m_textureHeight,\n            u,\n            v\n        );\n        this.m_lastPos.add(this.m_tmpNormal.multiplyScalar(displacement));\n    }\n}\n","/*\n * Copyright (C) 2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\nimport { DisplacedBufferAttribute } from \"./DisplacedBufferAttribute\";\n\nconst tmpV1 = new THREE.Vector3();\nconst tmpV2 = new THREE.Vector3();\nconst tmpBox = new THREE.Box3();\n\n/**\n * @internal\n * Range of displacement values found in a given displacement map.\n */\nexport interface DisplacementRange {\n    min: number;\n    max: number;\n}\n\n/**\n * @internal\n * Displace a box in a given direction by a specified range. The original box min and max vertices\n * are translated as a result by displacementRange.min and displacementRange.max respectively.\n * @param box The original box to displace.\n * @param displacementRange The minimum and maximum displacement values.\n * @param displacementDir Direction in which the displacement will be applied.\n * @return The displaced box.\n */\nexport function displaceBox(\n    box: THREE.Box3,\n    displacementRange: DisplacementRange,\n    displacementDir: THREE.Vector3\n): THREE.Box3 {\n    tmpBox.copy(box);\n    const tmpNormalMin = tmpV1.copy(displacementDir);\n    const tmpNormalMax = tmpV2.copy(tmpNormalMin);\n    box.translate(tmpNormalMin.multiplyScalar(displacementRange.min)).union(\n        tmpBox.translate(tmpNormalMax.multiplyScalar(displacementRange.max))\n    );\n    return box;\n}\n\n/**\n * @internal\n * BufferGeometry decorator that displaces on the fly the position attribute using a specified\n * displacement map.\n */\nexport class DisplacedBufferGeometry extends THREE.BufferGeometry {\n    private m_displacedPositions: DisplacedBufferAttribute;\n    private m_originalBoundingBox = new THREE.Box3();\n\n    /**\n     * Creates an instance of displaced buffer geometry.\n     * @param originalGeometry The goeometry to be displaced.\n     * @param displacementMap A texture with the displacement values.\n     * @param displacementRange The displacement value range found in the displacement map.\n     * @param displacedPositions Buffer attribute that will be used for displaced positions if\n     * provided, otherwise a new buffer attribute will be created.\n     */\n    constructor(\n        public originalGeometry: THREE.BufferGeometry,\n        displacementMap: THREE.DataTexture,\n        public displacementRange: DisplacementRange,\n        displacedPositions?: DisplacedBufferAttribute\n    ) {\n        super();\n        if (!displacedPositions) {\n            this.m_displacedPositions = new DisplacedBufferAttribute(\n                originalGeometry.attributes.position,\n                originalGeometry.attributes.normal,\n                originalGeometry.attributes.uv,\n                displacementMap\n            );\n        } else {\n            this.m_displacedPositions = displacedPositions;\n        }\n        this.resetAttributes();\n    }\n\n    /**\n     * Resets the displaced buffer geometry to use new geometry or displacement map.\n     * @param geometry The goeometry to be displaced.\n     * @param displacementMap A texture with the displacement values.\n     * @param displacementRange The displacement value range found in the displacement map.\n     */\n    reset(\n        geometry: THREE.BufferGeometry,\n        displacementMap: THREE.DataTexture,\n        displacementRange: DisplacementRange\n    ) {\n        this.originalGeometry = geometry;\n        const positions = geometry.attributes.position;\n        const normals = geometry.attributes.normal;\n        const uvs = geometry.attributes.uv;\n        this.m_displacedPositions.reset(positions, normals, uvs, displacementMap);\n        const displacementRangeChanged =\n            this.displacementRange.min !== displacementRange.min ||\n            this.displacementRange.max !== displacementRange.max;\n        this.displacementRange = displacementRange;\n        this.resetAttributes();\n        this.resetBoundingVolumes(displacementRangeChanged);\n    }\n\n    // HARP-9585: Override of base class method, however tslint doesn't recognize it as such.\n    // tslint:disable-next-line: explicit-override\n    computeBoundingBox(): void {\n        // Calculate a coarse approximation of the displaced geometry bbox by displacing the\n        // original bbox and enlarging it to cover the whole displacement range.\n        // This approximation is used to avoid having to displace the whole geometry, which will\n        // be done only if the bbox test passes.\n        if (this.originalGeometry.boundingBox === null) {\n            this.originalGeometry.computeBoundingBox();\n        }\n        const origBBox = this.m_originalBoundingBox.copy(this.originalGeometry.boundingBox!);\n        if (this.boundingBox === null) {\n            this.boundingBox = origBBox.clone();\n        } else {\n            this.boundingBox.copy(origBBox);\n        }\n        displaceBox(\n            this.boundingBox,\n            this.displacementRange,\n            tmpV1.fromBufferAttribute(this.attributes.normal as THREE.BufferAttribute, 0)\n        );\n    }\n\n    // HARP-9585: Override of base class method, however tslint doesn't recognize it as such.\n    // tslint:disable-next-line: explicit-override\n    computeBoundingSphere(): void {\n        // Use as coarse approximation the sphere bounding the bbox.\n        if (this.boundingBox === null) {\n            this.computeBoundingBox();\n        }\n        if (this.boundingSphere === null) {\n            this.boundingSphere = new THREE.Sphere();\n        }\n        this.boundingBox!.getBoundingSphere(this.boundingSphere!);\n    }\n\n    private needsBoundingBoxUpdate(displacementRangeChanged: boolean): boolean {\n        return (\n            displacementRangeChanged ||\n            (this.boundingBox !== null &&\n                (!this.originalGeometry.boundingBox ||\n                    !this.m_originalBoundingBox.equals(this.originalGeometry.boundingBox)))\n        );\n    }\n\n    private resetBoundingVolumes(displacementRangeChanged: boolean) {\n        if (this.needsBoundingBoxUpdate(displacementRangeChanged)) {\n            this.computeBoundingBox();\n            if (this.boundingSphere) {\n                this.computeBoundingSphere();\n            }\n        }\n    }\n\n    private resetAttributes() {\n        this.index = this.originalGeometry.index;\n        this.groups = this.originalGeometry.groups;\n        this.drawRange = this.originalGeometry.drawRange;\n        this.attributes = { ...this.originalGeometry.attributes };\n        this.attributes.position = this.m_displacedPositions;\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nimport {\n    Light,\n    MagFilter,\n    MinFilter,\n    PixelFormat,\n    TextureDataType,\n    WrappingMode\n} from \"@here/harp-datasource-protocol\";\n\n/**\n * Returns `three.js` pixel format object basing on a [[PixelFormat]] specified.\n */\nexport function toPixelFormat(format: PixelFormat): THREE.PixelFormat {\n    switch (format) {\n        case \"Alpha\":\n            return THREE.AlphaFormat;\n        case \"RGB\":\n            return THREE.RGBFormat;\n        case \"RGBA\":\n            return THREE.RGBAFormat;\n        case \"Luminance\":\n            return THREE.LuminanceFormat;\n        case \"LuminanceAlpha\":\n            return THREE.LuminanceAlphaFormat;\n        case \"RGBE\":\n            return THREE.RGBEFormat;\n        case \"Depth\":\n            return THREE.DepthFormat;\n        case \"DepthStencil\":\n            return THREE.DepthStencilFormat;\n        case \"Red\":\n            return THREE.RedFormat;\n        default:\n            throw new Error(`invalid pixel format: ${format}`);\n    }\n}\n\n/**\n * Returns `three.js` texture data types based on a [[TextureDataType]] specified.\n */\nexport function toTextureDataType(dataType: TextureDataType): THREE.TextureDataType {\n    switch (dataType) {\n        case \"UnsignedByte\":\n            return THREE.UnsignedByteType;\n        case \"Byte\":\n            return THREE.ByteType;\n        case \"Short\":\n            return THREE.ShortType;\n        case \"UnsignedShort\":\n            return THREE.UnsignedShortType;\n        case \"Int\":\n            return THREE.IntType;\n        case \"UnsignedInt\":\n            return THREE.UnsignedIntType;\n        case \"Float\":\n            return THREE.FloatType;\n        case \"HalfFloat\":\n            return THREE.HalfFloatType;\n        default:\n            throw new Error(`invalid texture data type: ${dataType}`);\n    }\n}\n\n/**\n * Returns `three.js` wrapping mode object based on a [[WrappingMode]] specified.\n */\nexport function toWrappingMode(mode: WrappingMode): THREE.Wrapping {\n    switch (mode) {\n        case \"clamp\":\n            return THREE.ClampToEdgeWrapping;\n        case \"repeat\":\n            return THREE.RepeatWrapping;\n        case \"mirror\":\n            return THREE.MirroredRepeatWrapping;\n        default:\n            throw new Error(`invalid wrapping mode: ${mode}`);\n    }\n}\n\n/**\n * Returns `three.js` texture filter object based on a [[MagFilter]] or [[MinFilter]] specified.\n */\nexport function toTextureFilter(filter: MagFilter | MinFilter): THREE.TextureFilter {\n    switch (filter) {\n        case \"nearest\":\n            return THREE.NearestFilter;\n        case \"nearestMipMapNearest\":\n            return THREE.NearestMipMapNearestFilter;\n        case \"nearestMipMapLinear\":\n            return THREE.NearestMipMapLinearFilter;\n        case \"linear\":\n            return THREE.LinearFilter;\n        case \"linearMipMapNearest\":\n            return THREE.LinearMipMapNearestFilter;\n        case \"linearMipMapLinear\":\n            return THREE.LinearMipMapLinearFilter;\n        default:\n            throw new Error(`invalid texture filter: ${filter}`);\n    }\n}\n\n/**\n * Create a specific light for lighting the map.\n */\nexport function createLight(lightDescription: Light): THREE.Light {\n    switch (lightDescription.type) {\n        case \"ambient\": {\n            const light = new THREE.AmbientLight(\n                lightDescription.color,\n                lightDescription.intensity\n            );\n            light.name = lightDescription.name;\n            return light;\n        }\n        case \"directional\": {\n            const light = new THREE.DirectionalLight(\n                lightDescription.color,\n                lightDescription.intensity\n            );\n            light.name = lightDescription.name;\n            if (lightDescription.castShadow !== undefined) {\n                light.castShadow = lightDescription.castShadow;\n            }\n            if (light.castShadow) {\n                light.shadow.bias = 0.00001;\n                light.shadow.mapSize.width = 1024;\n                light.shadow.mapSize.height = 1024;\n            }\n            light.position.set(\n                lightDescription.direction.x,\n                lightDescription.direction.y,\n                lightDescription.direction.z\n            );\n            light.position.normalize();\n            return light;\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nimport { Env, ExtrudedPolygonTechnique } from \"@here/harp-datasource-protocol\";\nimport { ColorUtils } from \"@here/harp-datasource-protocol/lib/ColorUtils\";\nimport { enforceBlending, MapMeshStandardMaterial } from \"@here/harp-materials\";\nimport { evaluateBaseColorProperty } from \"./DecodedTileHelpers\";\n\n/**\n * Bitmask used for the depth pre-pass to prevent multiple fragments in the same screen position\n * from rendering color.\n */\nexport const DEPTH_PRE_PASS_STENCIL_MASK = 0x01;\n\n/**\n * Render order offset for the depth pre-pass to ensure that it's rendered first.\n */\nconst DEPTH_PRE_PASS_RENDER_ORDER_OFFSET = 1e-6;\n\n/**\n * Check if technique requires (and not disables) use of depth prepass.\n *\n * Depth prepass is enabled if correct opacity is specified (in range `(0,1)`) _and_ not explicitly\n * disabled by `enableDepthPrePass` option.\n *\n * @param technique [[BaseStandardTechnique]] instance to be checked\n * @param env [[Env]] instance used to evaluate [[Expr]] based properties of [[Technique]]\n */\nexport function isRenderDepthPrePassEnabled(technique: ExtrudedPolygonTechnique, env: Env) {\n    // Depth pass explicitly disabled\n    if (technique.enableDepthPrePass === false) {\n        return false;\n    }\n    let transparent =\n        technique.opacity !== undefined && technique.opacity > 0.0 && technique.opacity < 1.0;\n    // If not opaque then check if transparency may be modified via alpha in base color.\n    // Otherwise we don't need to even test base color because opacity mixed with any base alpha,\n    // will always produce some transparency effect.\n    if (!transparent) {\n        // We do not support switching depth pass during alpha interpolation, ignore zoom level\n        // when calculating base color value.\n        const color = evaluateBaseColorProperty(technique, env);\n        if (color !== undefined) {\n            const alpha = ColorUtils.getAlphaFromHex(color);\n            transparent = alpha > 0.0 && alpha < 1.0;\n        }\n    }\n    return transparent;\n}\n\n/**\n * Creates material for depth prepass.\n *\n * Creates material that writes only to the z-buffer. Updates the original material instance, to\n * support depth prepass.\n *\n * @param baseMaterial The base material of mesh that is updated to work with depth prepass\n *     and then used. This parameter is a template for depth prepass material that is returned.\n * @returns depth prepass material, which is a clone of `baseMaterial` with the adapted settings.\n */\nexport function createDepthPrePassMaterial(baseMaterial: THREE.Material): THREE.Material {\n    baseMaterial.depthWrite = false;\n    baseMaterial.depthFunc = THREE.EqualDepth;\n    baseMaterial.colorWrite = true;\n    enforceBlending(baseMaterial);\n\n    const depthPassMaterial = baseMaterial.clone();\n    depthPassMaterial.depthWrite = true;\n    depthPassMaterial.depthTest = true;\n    depthPassMaterial.depthFunc = THREE.LessDepth;\n    depthPassMaterial.colorWrite = false;\n    depthPassMaterial.opacity = 1.0;\n    depthPassMaterial.blending = THREE.NoBlending;\n    return depthPassMaterial;\n}\n\n// tslint:disable:max-line-length\n/**\n * Clones a given mesh to render it in the depth prepass with another material. Both the original\n * and depth prepass meshes, when rendered in the correct order, create the proper depth prepass\n * effect. The original mesh material is slightly modified by [[createDepthPrePassMaterial]] to\n * support the depth prepass. This method is usable only if the material of this mesh has an\n * opacity value in the range `(0,1)`.\n *\n * The DepthPrePass object is created wis a slightly smaller `renderOrder` as the original mesh\n * to ensure that it's rendered first.\n *\n * @param mesh original mesh\n * @returns `Mesh` depth pre pass\n */\n// tslint:enable:max-line-length\nexport function createDepthPrePassMesh(mesh: THREE.Mesh): THREE.Mesh {\n    const originalGeometry = mesh.geometry;\n\n    if (!(originalGeometry instanceof THREE.BufferGeometry)) {\n        throw new Error(\"#createDepthPassMesh only BufferGeometry is supported\");\n    }\n    const positionAttribute = originalGeometry.getAttribute(\"position\");\n    if (!positionAttribute) {\n        throw new Error(\"#createDepthPassMesh position attribute not found\");\n    }\n\n    const depthPassGeometry = new THREE.BufferGeometry();\n    depthPassGeometry.setAttribute(\"position\", positionAttribute);\n    const uvAttribute = originalGeometry.getAttribute(\"uv\");\n    if (uvAttribute) {\n        depthPassGeometry.setAttribute(\"uv\", uvAttribute);\n    }\n    const normalAttribute = originalGeometry.getAttribute(\"normal\");\n    if (normalAttribute) {\n        depthPassGeometry.setAttribute(\"normal\", normalAttribute);\n    }\n    const extrusionAxisAttribute = originalGeometry.getAttribute(\"extrusionAxis\");\n    if (extrusionAxisAttribute) {\n        depthPassGeometry.setAttribute(\"extrusionAxis\", extrusionAxisAttribute);\n    }\n\n    if (originalGeometry.index) {\n        depthPassGeometry.setIndex(originalGeometry.index);\n    }\n\n    for (const group of originalGeometry.groups) {\n        const { start, count, materialIndex } = group;\n        depthPassGeometry.addGroup(start, count, materialIndex);\n    }\n\n    const depthPassMaterial =\n        mesh.material instanceof Array\n            ? mesh.material.map(createDepthPrePassMaterial)\n            : createDepthPrePassMaterial(mesh.material);\n\n    const depthPassMesh = new THREE.Mesh(depthPassGeometry, depthPassMaterial);\n    depthPassMesh.renderOrder = mesh.renderOrder - DEPTH_PRE_PASS_RENDER_ORDER_OFFSET;\n\n    return depthPassMesh;\n}\n\n/**\n * Sets up all the needed stencil logic needed for the depth pre-pass.\n *\n * This logic is in place to avoid z-fighting artifacts that can appear in geometries that have\n * coplanar triangles inside the same mesh.\n *\n * @param depthMesh Mesh created by `createDepthPrePassMesh`.\n * @param colorMesh Original mesh.\n */\nexport function setDepthPrePassStencil(depthMesh: THREE.Mesh, colorMesh: THREE.Mesh) {\n    // Set up depth mesh stencil logic.\n    // Set the depth pre-pass stencil bit for all processed fragments. We use\n    // `THREE.AlwaysStencilFunc` and not `THREE.NotEqualStencilFunc` to force all fragments to pass\n    // the stencil test and write the correct depth value.\n    const depthMaterial = depthMesh.material as MapMeshStandardMaterial;\n    depthMaterial.stencilWrite = true;\n    depthMaterial.stencilFail = THREE.KeepStencilOp;\n    depthMaterial.stencilZFail = THREE.KeepStencilOp;\n    depthMaterial.stencilZPass = THREE.ReplaceStencilOp;\n    depthMaterial.stencilFunc = THREE.AlwaysStencilFunc;\n    depthMaterial.stencilRef = 0xff;\n    (depthMaterial as any).stencilFuncMask = DEPTH_PRE_PASS_STENCIL_MASK;\n\n    // Set up color mesh stencil logic.\n    // Only write color for pixels with the depth pre-pass stencil bit set. Also, once a pixel is\n    // rendered, set the stencil bit to 0 to prevent subsequent pixels in the same clip position\n    // from rendering color again.\n    const colorMaterial = colorMesh.material as MapMeshStandardMaterial;\n    colorMaterial.stencilWrite = true;\n    colorMaterial.stencilFail = THREE.KeepStencilOp;\n    colorMaterial.stencilZFail = THREE.KeepStencilOp;\n    colorMaterial.stencilZPass = THREE.ZeroStencilOp;\n    colorMaterial.stencilFunc = THREE.EqualStencilFunc;\n    colorMaterial.stencilRef = 0xff;\n    (colorMaterial as any).stencilFuncMask = DEPTH_PRE_PASS_STENCIL_MASK;\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeometryKind } from \"@here/harp-datasource-protocol\";\nimport { Projection } from \"@here/harp-geoutils\";\nimport { hasDisplacementFeature } from \"@here/harp-materials\";\nimport { assert } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\nimport { TileDisplacementMap } from \"../DisplacementMap\";\nimport { ElevationProvider } from \"../ElevationProvider\";\nimport { TextElement } from \"../text/TextElement\";\nimport { Tile, TileObject } from \"../Tile\";\n\n/**\n * Overlays the specified object's geometry on the elevation represented by the given displacement\n * map .\n *\n * @param object The object to be overlaid.\n * @param displacementMap Texture representing the elevation data used to overlay the object.\n */\nfunction overlayObject(object: TileObject, displacementMap: THREE.DataTexture): void {\n    if (!(\"material\" in object)) {\n        return;\n    }\n\n    const material = (object as any).material as THREE.Mesh[\"material\"];\n\n    if (Array.isArray(material)) {\n        material.forEach(mat => {\n            if (hasDisplacementFeature(mat)) {\n                mat.displacementMap = displacementMap;\n            }\n        });\n    } else if (material && hasDisplacementFeature(material)) {\n        material.displacementMap = displacementMap;\n    }\n}\n\n/**\n * Overlays the specified coordinates on top of elevation data if available.\n *\n * @param worldCoords World coordinates to overlay.\n * @param elevationProvider Used to sample elevation data.\n * @param displacementMap Elevation data to be sampled.\n * @param projection Projection from geo to world space.\n * @returns `true` if the position was successfully overlaid, `false` otherwise (e.g. elevation\n * data not available).\n */\nfunction overlayPosition(\n    worldCoords: THREE.Vector3,\n    elevationProvider: ElevationProvider,\n    displacementMap: TileDisplacementMap,\n    projection: Projection\n): boolean {\n    // TODO: Move calculation of text element geoCoordinates to decoder.\n    const geoCoords = projection.unprojectPoint(worldCoords);\n\n    if (displacementMap.geoBox.contains(geoCoords)) {\n        geoCoords.altitude = elevationProvider.sampleHeight(geoCoords, displacementMap);\n    } else {\n        geoCoords.altitude = elevationProvider.getHeight(geoCoords, displacementMap.tileKey.level);\n        if (geoCoords.altitude === undefined) {\n            return false;\n        }\n    }\n    projection.projectPoint(geoCoords, worldCoords);\n    return true;\n}\n\n/**\n * Overlays the specified coordinates on top of elevation data if available.\n *\n * @param path World coordinates to overlay.\n * @param elevationProvider Used to sample elevation data.\n * @param displacementMap Elevation data to be sampled.\n * @param projection Projection from geo to world space.\n * @returns `true` if the position was successfully overlaid, `false` otherwise (e.g. elevation\n * data not available).\n */\nfunction overlayPath(\n    path: THREE.Vector3[],\n    elevationProvider: ElevationProvider,\n    displacementMap: TileDisplacementMap,\n    projection: Projection\n): boolean {\n    for (const position of path) {\n        if (!overlayPosition(position, elevationProvider, displacementMap, projection)) {\n            return false;\n        }\n    }\n    return true;\n}\n\n/**\n * Overlays a text element on top of elevation data if available.\n *\n * @param textElement The text element whose geometry will be overlaid.\n * @param elevationProvider  Used to sample elevation data.\n * @param displacementMap Elevation data to be sampled.\n * @param projection Projection from geo to world space.\n */\nexport function overlayTextElement(\n    textElement: TextElement,\n    elevationProvider: ElevationProvider,\n    displacementMap: TileDisplacementMap,\n    projection: Projection\n) {\n    assert(!textElement.elevated);\n    if (!displacementMap) {\n        return;\n    }\n\n    textElement.elevated = textElement.path\n        ? overlayPath(textElement.path, elevationProvider, displacementMap, projection)\n        : overlayPosition(textElement.position, elevationProvider, displacementMap, projection);\n}\n\n/**\n * Overlays the geometry in the given tile on top of elevation data if available. The tile's\n * elevation may be updated with a more precise range.\n *\n * @param tile The tile whose geometry will be overlaid.\n */\nexport function overlayOnElevation(tile: Tile): void {\n    const elevationProvider = tile.mapView.elevationProvider;\n\n    if (elevationProvider === undefined || tile.objects.length === 0) {\n        return;\n    }\n    const firstObject = tile.objects[0];\n    if (\n        !firstObject.userData ||\n        !firstObject.userData.kind ||\n        !firstObject.userData.kind.find((kind: GeometryKind) => {\n            return kind !== GeometryKind.All && kind !== GeometryKind.Terrain;\n        })\n    ) {\n        return;\n    }\n\n    const displacementMap = elevationProvider.getDisplacementMap(tile.tileKey);\n    if (displacementMap === undefined) {\n        return;\n    }\n\n    // TODO: HARP-8808 Apply displacement maps once per material.\n    for (const object of tile.objects) {\n        overlayObject(object, displacementMap.texture);\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Env, getPropertyValue, PoiTechnique } from \"@here/harp-datasource-protocol\";\nimport { OrientedBox3, Projection, ProjectionType } from \"@here/harp-geoutils\";\nimport {\n    hAlignFromPlacement,\n    HorizontalPlacement,\n    hPlacementFromAlignment,\n    MeasurementParameters,\n    TextCanvas,\n    TextPlacement,\n    vAlignFromPlacement,\n    VerticalPlacement,\n    vPlacementFromAlignment\n} from \"@here/harp-text-canvas\";\nimport { assert, Math2D, MathUtils } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\nimport { PoiManager } from \"../poi/PoiManager\";\nimport { PoiRenderer } from \"../poi/PoiRenderer\";\nimport { CollisionBox, DetailedCollisionBox, IBox, ScreenCollisions } from \"../ScreenCollisions\";\nimport { ScreenProjector } from \"../ScreenProjector\";\nimport { RenderState } from \"./RenderState\";\nimport { PoiInfo, poiIsRenderable, TextElement } from \"./TextElement\";\nimport { TextElementState } from \"./TextElementState\";\nimport { TextElementType } from \"./TextElementType\";\nimport { ViewState } from \"./ViewState\";\n\n/**\n * Minimum number of pixels per character. Used during estimation if there is enough screen space\n * available to render a text.\n */\nconst MIN_AVERAGE_CHAR_WIDTH = 5;\n\n/**\n * Functions related to text element placement.\n */\n\nconst tmpPosition = new THREE.Vector3(0, 0, 0);\nconst tmpCameraDir = new THREE.Vector3(0, 0, 0);\nconst tmpPointDir = new THREE.Vector3(0, 0, 0);\nconst COS_TEXT_ELEMENT_FALLOFF_ANGLE = 0.5877852522924731; // Math.cos(0.3 * Math.PI)\n\n/**\n * Checks whether the distance of the text element to the camera plane meets threshold criterias.\n *\n * @param textElement The textElement of which the view distance will be checked, with coordinates\n * in world space.\n * @param eyePos The eye (or camera) position that will be used as reference to calculate\n * the distance.\n * @param eyeLookAt The eye looking direction - normalized.\n * @param maxViewDistance The maximum distance value.\n * @returns The text element view distance if it's lower than the maximum value, otherwise\n * `undefined`.\n */\nfunction checkViewDistance(\n    textElement: TextElement,\n    eyePos: THREE.Vector3,\n    eyeLookAt: THREE.Vector3,\n    projectionType: ProjectionType,\n    maxViewDistance: number\n): number | undefined {\n    const textDistance = computeViewDistance(textElement, eyePos, eyeLookAt);\n\n    if (projectionType !== ProjectionType.Spherical) {\n        return textDistance <= maxViewDistance ? textDistance : undefined;\n    }\n\n    // For sphere projection: Filter labels that are close to the horizon\n    tmpPosition.copy(textElement.position).normalize();\n    tmpCameraDir.copy(eyePos).normalize();\n    const cosAlpha = tmpPosition.dot(tmpCameraDir);\n    const viewDistance =\n        cosAlpha > COS_TEXT_ELEMENT_FALLOFF_ANGLE && textDistance <= maxViewDistance\n            ? textDistance\n            : undefined;\n\n    return viewDistance;\n}\n\n/**\n * Computes distance of the specified text element to camera plane given with position and normal.\n *\n * The distance is measured as projection of the vector between @param eyePosition and text element\n * onto the @param eyeLookAt vector, so it actually computes the distance to plane that\n * contains @param eyePosition and is described with @param eyeLookAt as normal.\n *\n * @note Used for measuring the distances to camera, results in the metric that describes\n * distance to camera near plane (assuming near = 0). Such metric is better as input for labels\n * scaling or fading factors then simple euclidean distance because it does not fluctuate during\n * simple camera panning.\n *\n * @param textElement The textElement of which the view distance will be checked. It must have\n * coordinates in world space.\n * @param eyePosition The world eye coordinates used a reference position to calculate the distance.\n * @param eyeLookAt The eye looking direction or simply said projection plane normal.\n * @returns The text element view distance.\n */\nexport function computeViewDistance(\n    textElement: TextElement,\n    eyePosition: THREE.Vector3,\n    eyeLookAt: THREE.Vector3\n): number {\n    let viewDistance: number;\n\n    // Compute the distances as the distance along plane normal.\n    const path = textElement.path;\n    if (path && path.length > 1) {\n        const viewDistance0 = pointToPlaneDistance(path[0], eyePosition, eyeLookAt);\n        const viewDistance1 = pointToPlaneDistance(path[path.length - 1], eyePosition, eyeLookAt);\n\n        viewDistance = Math.min(viewDistance0, viewDistance1);\n    } else {\n        viewDistance = pointToPlaneDistance(textElement.position, eyePosition, eyeLookAt);\n    }\n\n    return viewDistance;\n}\n\n/**\n * Computes distance between the given point and a plane.\n *\n * May be used to measure distance of point labels to the camera projection (near) plane.\n *\n * @param pointPos The position to measure distance to.\n * @param planePos The position of any point on the plane.\n * @param planeNorm The plane normal vector (have to be normalized already).\n */\nexport function pointToPlaneDistance(\n    pointPos: THREE.Vector3,\n    planePos: THREE.Vector3,\n    planeNorm: THREE.Vector3\n) {\n    const labelCamVec = tmpPointDir.copy(pointPos).sub(planePos);\n    return labelCamVec.dot(planeNorm);\n}\n\n/**\n * Computes the maximum view distance for text elements as a ratio of the given view's maximum far\n * plane distance.\n * @param viewState The view for which the maximum view distance will be calculated.\n * @param farDistanceLimitRatio The ratio to apply to the maximum far plane distance.\n * @returns Maximum view distance.\n */\nexport function getMaxViewDistance(viewState: ViewState, farDistanceLimitRatio: number): number {\n    return viewState.maxVisibilityDist * farDistanceLimitRatio;\n}\n\n/**\n * State of fading.\n */\nexport enum PrePlacementResult {\n    Ok = 0,\n    NotReady,\n    Invisible,\n    TooFar,\n    Duplicate,\n    Count\n}\n\nconst tmpPlacementPosition = new THREE.Vector3();\nconst tmpPlacementBounds = new THREE.Box2();\n\n/**\n * Applies early rejection tests for a given text element meant to avoid trying to place labels\n * that are not visible, not ready, duplicates etc...\n * @param textElement The Text element to check.\n * @param viewState The view for which the text element will be placed.\n * @param viewCamera The view's camera.\n * @param m_poiManager To prepare pois for rendering.\n * @param [maxViewDistance] If specified, text elements farther than this max distance will be\n * rejected.\n * @returns An object with the result code and the text element view distance\n * ( or `undefined` of the checks failed) as second.\n */\nexport function checkReadyForPlacement(\n    textElement: TextElement,\n    viewState: ViewState,\n    viewCamera: THREE.Camera,\n    poiManager: PoiManager,\n    maxViewDistance?: number\n): { result: PrePlacementResult; viewDistance: number | undefined } {\n    let viewDistance: number | undefined;\n\n    if (!textElement.visible) {\n        return { result: PrePlacementResult.Invisible, viewDistance };\n    }\n\n    // If a PoiTable is specified in the technique, the table is required to be\n    // loaded before the POI can be rendered.\n    if (!poiManager.updatePoiFromPoiTable(textElement)) {\n        // PoiTable has not been loaded, but is required to determine\n        // visibility.\n        return { result: PrePlacementResult.NotReady, viewDistance };\n    }\n\n    // Text element visibility and zoom level ranges must be checked after calling\n    // updatePoiFromPoiTable, since that function may change those values.\n    if (\n        !textElement.visible ||\n        !MathUtils.isClamped(\n            viewState.zoomLevel,\n            textElement.minZoomLevel,\n            textElement.maxZoomLevel\n        )\n    ) {\n        return { result: PrePlacementResult.Invisible, viewDistance };\n    }\n\n    viewDistance =\n        maxViewDistance === undefined\n            ? computeViewDistance(textElement, viewState.worldCenter, viewState.lookAtVector)\n            : checkViewDistance(\n                  textElement,\n                  viewState.worldCenter,\n                  viewState.lookAtVector,\n                  viewState.projection.type,\n                  maxViewDistance\n              );\n\n    if (viewDistance === undefined) {\n        return { result: PrePlacementResult.TooFar, viewDistance };\n    }\n\n    return { result: PrePlacementResult.Ok, viewDistance };\n}\n\n/**\n * Computes the offset for a point text accordingly to text alignment (and icon, if any).\n * @param textElement The text element of which the offset will computed. It must be a point\n * label with [[layoutStyle]] and [[bounds]] already computed.\n * @param placement The relative anchor placement (may be different then original alignment).\n * @param scale The scaling factor (due to distance, etc.).\n * @param env The [[Env]] used to evaluate technique attributes.\n * @param offset The offset result.\n */\nfunction computePointTextOffset(\n    textElement: TextElement,\n    placement: TextPlacement,\n    scale: number,\n    env: Env,\n    offset: THREE.Vector2 = new THREE.Vector2()\n): THREE.Vector2 {\n    assert(textElement.type === TextElementType.PoiLabel);\n    assert(textElement.layoutStyle !== undefined);\n    assert(textElement.bounds !== undefined);\n\n    offset.x = textElement.xOffset;\n    offset.y = textElement.yOffset;\n\n    switch (placement.h) {\n        case HorizontalPlacement.Left:\n            // Already accounts for any margin that is already applied to the text element bounds.\n            offset.x -= textElement.bounds!.max.x;\n            break;\n        case HorizontalPlacement.Right:\n            // Account for any margin applied as above.\n            offset.x -= textElement.bounds!.min.x;\n            break;\n    }\n    switch (placement.v) {\n        case VerticalPlacement.Top:\n            offset.y -= textElement.bounds!.min.y;\n            break;\n        case VerticalPlacement.Center:\n            offset.y -= 0.5 * (textElement.bounds!.max.y + textElement.bounds!.min.y);\n            break;\n        case VerticalPlacement.Bottom:\n            // Accounts for vertical margin that may be applied to the text bounds.\n            offset.y -= textElement.bounds!.max.y;\n            break;\n    }\n\n    if (textElement.poiInfo !== undefined && poiIsRenderable(textElement.poiInfo)) {\n        assert(textElement.poiInfo.computedWidth !== undefined);\n        assert(textElement.poiInfo.computedHeight !== undefined);\n\n        // Apply offset moving text out of the icon\n        offset.x += textElement.poiInfo.computedWidth! * (0.5 + placement.h);\n        offset.y += textElement.poiInfo.computedHeight! * (0.5 + placement.v);\n\n        // Reverse, mirror or project offsets on different axis depending on the placement\n        // required only for alternative placements.\n        const hAlign = hPlacementFromAlignment(textElement.layoutStyle!.horizontalAlignment);\n        const vAlign = vPlacementFromAlignment(textElement.layoutStyle!.verticalAlignment);\n        if (hAlign !== placement.h || vAlign !== placement.v) {\n            // Read icon offset used.\n            const technique = textElement.poiInfo.technique;\n            let iconXOffset = getPropertyValue(technique.iconXOffset, env);\n            let iconYOffset = getPropertyValue(technique.iconYOffset, env);\n            iconXOffset = typeof iconXOffset === \"number\" ? iconXOffset : 0;\n            iconYOffset = typeof iconYOffset === \"number\" ? iconYOffset : 0;\n\n            // Now mirror the text offset relative to icon so manhattan distance is preserved, when\n            // alternative position is taken, this ensures that text-icon relative position is\n            // the same as in base alignment.\n            const hAlignDiff = hAlign - placement.h;\n            const vAlignDiff = vAlign - placement.v;\n            const relOffsetX = iconXOffset - textElement.xOffset;\n            const relOffsetY = iconYOffset - textElement.yOffset;\n            const centerBased =\n                hAlign === HorizontalPlacement.Center || vAlign === VerticalPlacement.Center;\n            if (centerBased) {\n                // Center based alternative placements.\n                offset.x += 2 * Math.abs(hAlignDiff) * relOffsetX;\n                offset.y -= 2 * vAlignDiff * Math.abs(relOffsetX);\n\n                offset.y += 2 * Math.abs(vAlignDiff) * relOffsetY;\n                offset.x -= 2 * hAlignDiff * Math.abs(relOffsetY);\n            } else {\n                // Corner alternative placements\n                offset.x += 2 * Math.min(Math.abs(hAlignDiff), 0.5) * relOffsetX;\n                offset.y -=\n                    2 *\n                    Math.sign(vAlignDiff) *\n                    Math.min(Math.abs(vAlignDiff), 0.5) *\n                    Math.abs(relOffsetX);\n\n                offset.y += 2 * Math.min(Math.abs(vAlignDiff), 0.5) * relOffsetY;\n                offset.x -=\n                    2 *\n                    Math.sign(hAlignDiff) *\n                    Math.min(Math.abs(hAlignDiff), 0.5) *\n                    Math.abs(relOffsetY);\n            }\n        }\n    }\n\n    offset.multiplyScalar(scale);\n    return offset;\n}\n\nconst tmpBox = new THREE.Box2();\nconst tmpBoxes: THREE.Box2[] = [];\nconst tmpMeasurementParams: MeasurementParameters = {};\nconst tmpCollisionBoxes: CollisionBox[] = [];\nconst tmpCollisionBox = new CollisionBox();\nconst tmpScreenPosition = new THREE.Vector2();\nconst tmpTextOffset = new THREE.Vector2();\nconst tmp2DBox = new Math2D.Box();\nconst tmpCenter = new THREE.Vector2();\nconst tmpSize = new THREE.Vector2();\n\n/**\n * The margin applied to the text bounds of every point label.\n */\nexport const persistentPointLabelTextMargin = new THREE.Vector2(2, 2);\n/**\n * Additional bounds scaling (described as percentage of full size) applied to the new labels.\n *\n * This additional scaling (margin) allows to account for slight camera position and\n * orientation changes, so new labels are placed only if there is enough space around them.\n * Such margin limits collisions with neighboring labels while doing small camera movements and\n * thus reduces labels flickering.\n */\nexport const newPointLabelTextMarginPercent = 0.1;\n\nexport enum PlacementResult {\n    Ok,\n    Rejected,\n    Invisible\n}\n\n/**\n * Places an icon on screen.\n * @param iconRenderState The icon state.\n * @param poiInfo Icon information necessary to compute its dimensions.\n * @param screenPosition Screen position of the icon.\n * @param scaleFactor Scaling factor to apply to the icon dimensions.\n * @param screenCollisions Used to check the icon visibility and collisions.\n * @param env Current map env.\n * @returns `PlacementResult.Ok` if icon can be placed, `PlacementResult.Rejected` if there's\n * a collision, `PlacementResult.Invisible` if it's not visible.\n */\nexport function placeIcon(\n    iconRenderState: RenderState,\n    poiInfo: PoiInfo,\n    screenPosition: THREE.Vector2,\n    scaleFactor: number,\n    env: Env,\n    screenCollisions: ScreenCollisions\n): PlacementResult {\n    PoiRenderer.computeIconScreenBox(poiInfo, screenPosition, scaleFactor, env, tmp2DBox);\n    if (!screenCollisions.isVisible(tmp2DBox)) {\n        return PlacementResult.Invisible;\n    }\n\n    const iconSpaceAvailable =\n        poiInfo.mayOverlap === true || !screenCollisions.isAllocated(tmp2DBox);\n\n    if (!iconSpaceAvailable) {\n        return iconRenderState.isVisible() ? PlacementResult.Rejected : PlacementResult.Invisible;\n    }\n    return PlacementResult.Ok;\n}\n\n/**\n * Place a point label text using single or multiple alternative placement anchors.\n *\n * @param labelState State of the point label to place.\n * @param screenPosition Position of the label in screen coordinates.\n * @param scale Scale factor to be applied to label dimensions.\n * @param textCanvas The text canvas where the label will be placed.\n * @param env The [[Env]] used to evaluate technique attributes.\n * @param screenCollisions Used to check collisions with other labels.\n * @param isRejected Whether the label is already rejected (e.g. because its icon was rejected). If\n * `true`, text won't be checked for collision, result will be either `PlacementResult.Invisible`\n * for newly placed (upcoming) label or `PlacementResult.Rejected` if the label was persistent.\n * @param outScreenPosition The final label screen position after applying any offsets.\n * @param multiAnchor The parameter decides if multi-anchor placement algorithm should be\n * used, be default [[false]] meaning try to place label using current alignment settings only.\n * @returns `PlacementResult.Ok` if point __label can be placed__ at the base or any optional\n * anchor point. `PlacementResult.Rejected` if there's a collision for all placements or it's\n * __persistent label with icon rejected and text visible__. Finally `PlacementResult.Invisible`\n * if it's text is not visible at any placement position or it's __new label with text or icon__\n * __rejected__.\n */\nexport function placePointLabel(\n    labelState: TextElementState,\n    screenPosition: THREE.Vector2,\n    scale: number,\n    textCanvas: TextCanvas,\n    env: Env,\n    screenCollisions: ScreenCollisions,\n    isRejected: boolean,\n    outScreenPosition: THREE.Vector3,\n    multiAnchor: boolean = false\n): PlacementResult {\n    assert(labelState.element.layoutStyle !== undefined);\n\n    const layoutStyle = labelState.element.layoutStyle!;\n\n    // For the new labels with rejected icons we don't need to go further.\n    // Make them invisible.\n    const newLabel = !labelState.visible;\n    if (isRejected && newLabel) {\n        return PlacementResult.Invisible;\n    }\n    // Check if alternative placements have been provided.\n    multiAnchor =\n        multiAnchor && layoutStyle.placements !== undefined && layoutStyle.placements.length > 1;\n    // For single placement labels or labels with icon rejected, do only current anchor testing.\n    if (!multiAnchor || isRejected) {\n        return placePointLabelAtCurrentAnchor(\n            labelState,\n            screenPosition,\n            scale,\n            textCanvas,\n            env,\n            screenCollisions,\n            isRejected,\n            outScreenPosition\n        );\n    }\n    // Otherwise test also alternative text placements.\n    else {\n        return placePointLabelChoosingAnchor(\n            labelState,\n            screenPosition,\n            scale,\n            textCanvas,\n            env,\n            screenCollisions,\n            outScreenPosition\n        );\n    }\n}\n\n/**\n * Try to place a point label text using multiple optional placements.\n *\n * @note Function should be called only for labels with icons not rejected and for text alignments\n * different then [[HorizontalAlignment.Center]] and [[VerticalAlignment.Center]].\n *\n * @param labelState State of the point label to place.\n * @param screenPosition Position of the label in screen coordinates.\n * @param scale Scale factor to be applied to label dimensions.\n * @param textCanvas The text canvas where the label will be placed.\n * @param env The [[Env]] used to evaluate technique attributes.\n * @param screenCollisions Used to check collisions with other labels.\n * @param outScreenPosition The final label screen position after applying any offsets.\n * @returns `PlacementResult.Ok` if label can be placed at the base or optional anchor point,\n * `PlacementResult.Rejected` if there's a collision for all placements, `PlacementResult.Invisible`\n * if it's not visible at any placement position.\n *\n * @internal\n * @hidden\n */\nfunction placePointLabelChoosingAnchor(\n    labelState: TextElementState,\n    screenPosition: THREE.Vector2,\n    scale: number,\n    textCanvas: TextCanvas,\n    env: Env,\n    screenCollisions: ScreenCollisions,\n    outScreenPosition: THREE.Vector3\n): PlacementResult {\n    assert(labelState.element.layoutStyle !== undefined);\n\n    const label = labelState.element;\n\n    // Store label state - persistent or new label.\n    const persistent = labelState.visible;\n\n    // Start with last alignment settings if layout state was stored or\n    // simply begin from layout defined in theme.\n    const lastPlacement = labelState.textPlacement;\n    const placements = label.layoutStyle!.placements;\n    const placementsNum = placements.length;\n    // Find current anchor placement on the optional placements list.\n    // Index of exact match.\n    const matchIdx = placements.findIndex(p => p.h === lastPlacement.h && p.v === lastPlacement.v);\n    assert(matchIdx >= 0);\n    // Will be true if all text placements are invisible.\n    let allInvisible: boolean = true;\n    // Iterate all placements starting from current one.\n    for (let i = matchIdx; i < placementsNum + matchIdx; ++i) {\n        const anchorPlacement = placements[i % placementsNum];\n\n        // Bounds may be already calculated for persistent label, force re-calculation only\n        // for alternative (new) placements.\n        const isLastPlacement = i === matchIdx && persistent;\n        // Compute label bounds, visibility or collision according to new layout settings.\n        const placementResult = placePointLabelAtAnchor(\n            labelState,\n            screenPosition,\n            anchorPlacement,\n            scale,\n            textCanvas,\n            env,\n            screenCollisions,\n            false,\n            !isLastPlacement,\n            outScreenPosition\n        );\n\n        // Store last successful (previous) placement coordinates in temp variables.\n        if (isLastPlacement) {\n            assert(label.bounds !== undefined);\n            tmpPlacementPosition.copy(outScreenPosition);\n            tmpPlacementBounds.copy(label.bounds!);\n        }\n\n        // Check the text allocation\n        if (placementResult === PlacementResult.Invisible) {\n            // Persistent label out of screen or the new label that is colliding - next iteration.\n            continue;\n        } else {\n            // This placement is visible, but surely colliding.\n            allInvisible = false;\n        }\n\n        // If text rejected (label collides), proceed to test further placements.\n        if (placementResult === PlacementResult.Rejected) {\n            continue;\n        }\n\n        // Proper placement found.\n        return PlacementResult.Ok;\n    }\n    // Revert recent screen position and bounds.\n    outScreenPosition.copy(tmpPlacementPosition);\n    label.bounds!.copy(tmpPlacementBounds);\n    // Revert back text canvas layout of the last placement.\n    // In case of label rejected this allows to fade out text in the last position.\n    applyTextPlacement(textCanvas, lastPlacement);\n\n    return allInvisible\n        ? // All text's placements out of the screen.\n          PlacementResult.Invisible\n        : persistent\n        ? // All placements are either colliding or out of screen for persistent label.\n          PlacementResult.Rejected\n        : // No placement found for the new label.\n          PlacementResult.Invisible;\n}\n\n/**\n * Places a point label on a specified text canvas using the alignment (anchor) currently set.\n *\n * @param labelState State of the point label to place.\n * @param screenPosition Position of the label in screen coordinates.\n * @param scale Scale factor to be applied to label dimensions.\n * @param textCanvas The text canvas where the label will be placed.\n * @param env The [[Env]] used to evaluate technique attributes.\n * @param screenCollisions Used to check collisions with other labels.\n * @param isRejected Whether the label is already rejected (e.g. because its icon was rejected). If\n * `true`, text won't be checked for collision, result will be either `PlacementResult.Invisible` or\n * `PlacementResult.Rejected`.\n * @param outScreenPosition The final label screen position after applying any offsets.\n * @returns `PlacementResult.Ok` if point label can be placed, `PlacementResult.Rejected` if there's\n * a collision, `PlacementResult.Invisible` if it's not visible.\n *\n * @internal\n * @hidden\n */\nfunction placePointLabelAtCurrentAnchor(\n    labelState: TextElementState,\n    screenPosition: THREE.Vector2,\n    scale: number,\n    textCanvas: TextCanvas,\n    env: Env,\n    screenCollisions: ScreenCollisions,\n    isRejected: boolean,\n    outScreenPosition: THREE.Vector3\n): PlacementResult {\n    assert(labelState.element.layoutStyle !== undefined);\n\n    // Use recently rendered (state stored) layout if available, otherwise theme based style.\n    const lastPlacement = labelState.textPlacement;\n    const result = placePointLabelAtAnchor(\n        labelState,\n        screenPosition,\n        lastPlacement,\n        scale,\n        textCanvas,\n        env,\n        screenCollisions,\n        isRejected,\n        !labelState.visible,\n        outScreenPosition\n    );\n\n    return result;\n}\n\n/**\n * Auxiliary function that tries to place a point label on a text canvas using specified alignment.\n *\n * @param labelState State of the point label to place.\n * @param screenPosition Position of the label in screen coordinates\n * @param placement Text placement relative to the label position.\n * @param scale Scale factor to be applied to label dimensions.\n * @param textCanvas The text canvas where the label will be placed.\n * @param env The [[Env]] used to evaluate technique attributes.\n * @param screenCollisions Used to check collisions with other labels.\n * @param isRejected Whether the label is already rejected (e.g. because its icon was rejected). If\n * `true`, text won't be checked for collision, result will be either `PlacementResult.Invisible` or\n * `PlacementResult.Rejected`.\n * @param forceInvalidation Set to true if text layout or other params has changed such as text\n * re-measurement is required and text buffer need to be invalidated.\n * @param outScreenPosition The final label screen position after applying any offsets.\n * @returns `PlacementResult.Ok` if point label can be placed, `PlacementResult.Rejected` if there's\n * a collision, `PlacementResult.Invisible` if it's not visible.\n *\n * @internal\n * @hidden\n */\nfunction placePointLabelAtAnchor(\n    labelState: TextElementState,\n    screenPosition: THREE.Vector2,\n    placement: TextPlacement,\n    scale: number,\n    textCanvas: TextCanvas,\n    env: Env,\n    screenCollisions: ScreenCollisions,\n    isRejected: boolean,\n    forceInvalidation: boolean,\n    outScreenPosition: THREE.Vector3\n): PlacementResult {\n    const label = labelState.element;\n    assert(label.glyphs !== undefined);\n    assert(label.layoutStyle !== undefined);\n\n    const measureText = label.bounds === undefined || forceInvalidation;\n    if (label.bounds === undefined) {\n        label.bounds = new THREE.Box2();\n    }\n\n    // Override label text layout (on TextCanvas) for measurements and text buffer creation.\n    applyTextPlacement(textCanvas, placement);\n\n    if (measureText) {\n        // Setup measurements parameters for textCanvas.measureText().\n        tmpMeasurementParams.outputCharacterBounds = undefined;\n        tmpMeasurementParams.path = undefined;\n        tmpMeasurementParams.pathOverflow = false;\n        tmpMeasurementParams.letterCaseArray = label.glyphCaseArray!;\n        // Compute label bounds according to layout settings.\n        textCanvas.measureText(label.glyphs!, label.bounds, tmpMeasurementParams);\n        // Apply additional persistent margin, keep in mind that text bounds just calculated\n        // are not (0, 0, w, h) based, so their coords usually are also non-zero.\n        // TODO: Make the margin configurable\n        label.bounds.expandByVector(persistentPointLabelTextMargin);\n    }\n\n    // Compute text offset from the anchor point\n    const textOffset = computePointTextOffset(label, placement, scale, env, tmpTextOffset);\n    textOffset.add(screenPosition);\n    tmpBox.copy(label.bounds!);\n    tmpBox.translate(textOffset);\n\n    tmpBox.getCenter(tmpCenter);\n    tmpBox.getSize(tmpSize);\n\n    tmpSize.multiplyScalar(scale);\n    tmp2DBox.set(tmpCenter.x - tmpSize.x / 2, tmpCenter.y - tmpSize.y / 2, tmpSize.x, tmpSize.y);\n\n    // Update output screen position.\n    outScreenPosition.set(textOffset.x, textOffset.y, labelState.renderDistance);\n\n    // Check the text visibility if invisible finish immediately\n    // regardless of the persistence state - no fading required.\n    if (!screenCollisions.isVisible(tmp2DBox)) {\n        return PlacementResult.Invisible;\n    }\n\n    const persistent = labelState.visible;\n    // Check if icon's label was already rejected.\n    if (isRejected) {\n        // Allows to fade out persistent label and simply ignore new one.\n        // NOTE:\n        // It might be changed if we would like to render text without icon (at border, etc.).\n        return persistent ? PlacementResult.Rejected : PlacementResult.Invisible;\n    }\n\n    if (measureText) {\n        // Up-scaled label bounds are used only for new labels and after visibility check, this is\n        // intentional to avoid processing labels out of the screen due to increased bounds, such\n        // labels would be again invisible in the next frame.\n        tmpBox.getSize(tmpSize);\n        tmpSize.multiplyScalar(scale * (1 + newPointLabelTextMarginPercent));\n        tmp2DBox.set(\n            tmpCenter.x - tmpSize.x / 2,\n            tmpCenter.y - tmpSize.y / 2,\n            tmpSize.x,\n            tmpSize.y\n        );\n    }\n\n    // Check label's text collision.\n    if (!label.textMayOverlap && screenCollisions.isAllocated(tmp2DBox)) {\n        // Allows to fade persistent and ignore new label.\n        return persistent ? PlacementResult.Rejected : PlacementResult.Invisible;\n    }\n\n    // Don't allocate space for rejected text. When zooming, this allows placement of a\n    // lower priority text element that was displaced by a higher priority one (not\n    // present in the new zoom level) before an even lower priority one takes the space.\n    // Otherwise the lowest priority text will fade in and back out.\n    // TODO: Add a unit test for this scenario.\n    if (label.textReservesSpace) {\n        screenCollisions.allocate(tmp2DBox);\n    }\n\n    // Glyphs arrangement have been changed remove text buffer object which needs to be\n    // re-created.\n    if (measureText) {\n        label.textBufferObject = undefined;\n    }\n\n    // Save current placement in label state.\n    // TextElementState creates layout snapshot solely for alternative placements which saves\n    // memory that could be wasted on unnecessary objects construction.\n    labelState.textPlacement = placement;\n\n    return PlacementResult.Ok;\n}\n\n/**\n * Applied modified text layout style to TextCanvas for further use.\n * @param textCanvas TextCanvas reference.\n * @param placement The text placement to be used.\n */\nfunction applyTextPlacement(textCanvas: TextCanvas, placement: TextPlacement) {\n    // Setup TextCanvas layout settings of the new placement as it is required for further\n    // TextBufferObject creation and measurements in addText().\n    textCanvas.textLayoutStyle.horizontalAlignment = hAlignFromPlacement(placement.h);\n    textCanvas.textLayoutStyle.verticalAlignment = vAlignFromPlacement(placement.v);\n}\n\n/**\n * Places a path label along a given path on a specified text canvas.\n * @param labelState The state of the path label to place.\n * @param textPath The text path along which the label will be placed.\n * @param screenPosition Position of the label in screen coordinates.\n * @param textCanvas The text canvas where the label will be placed.\n * @param screenCollisions Used to check collisions with other labels.\n * @returns `PlacementResult.Ok` if path label can be placed, `PlacementResult.Rejected` if there's\n * a collision or text doesn't fit into path, `PlacementResult.Invisible` if it's not visible.\n */\nexport function placePathLabel(\n    labelState: TextElementState,\n    textPath: THREE.Path,\n    screenPosition: THREE.Vector2,\n    textCanvas: TextCanvas,\n    screenCollisions: ScreenCollisions\n): PlacementResult {\n    // Recalculate the text bounds for this path label. If measurement fails, the whole\n    // label doesn't fit the path and should be discarded.\n    tmpMeasurementParams.path = textPath;\n    tmpMeasurementParams.outputCharacterBounds = tmpBoxes;\n    tmpMeasurementParams.letterCaseArray = labelState.element.glyphCaseArray!;\n\n    // TODO: HARP-7648. TextCanvas.measureText does the placement as in TextCanvas.addText but\n    // without storing the result. If the measurement succeeds, the placement work is done\n    // twice.\n    // This could be done in one step (e.g measureAndAddText). Collision test could be injected\n    // in the middle as a function.\n    if (!textCanvas.measureText(labelState.element.glyphs!, tmpBox, tmpMeasurementParams)) {\n        return PlacementResult.Rejected;\n    }\n\n    // Coarse collision check.\n    tmpCollisionBox.copy(tmpBox.translate(screenPosition));\n    if (!screenCollisions.isVisible(tmpCollisionBox)) {\n        return PlacementResult.Invisible;\n    }\n\n    let checkGlyphCollision = false;\n    let candidateBoxes: IBox[] | undefined;\n    if (!labelState.element.textMayOverlap) {\n        candidateBoxes = screenCollisions.search(tmpCollisionBox);\n        checkGlyphCollision = candidateBoxes.length > 0;\n    }\n\n    const checkGlyphVisible = !screenCollisions.isFullyVisible(tmpCollisionBox);\n\n    // Perform per-character collision checks.\n    tmpCollisionBoxes.length = tmpBoxes.length;\n    for (let i = 0; i < tmpBoxes.length; ++i) {\n        const glyphBox = tmpBoxes[i].translate(screenPosition);\n        let collisionBox = tmpCollisionBoxes[i];\n        if (collisionBox === undefined) {\n            collisionBox = new CollisionBox(glyphBox);\n            tmpCollisionBoxes[i] = collisionBox;\n        } else {\n            collisionBox.copy(glyphBox);\n        }\n        if (checkGlyphVisible && !screenCollisions.isVisible(collisionBox)) {\n            return PlacementResult.Invisible;\n        }\n\n        if (\n            checkGlyphCollision &&\n            screenCollisions.intersectsDetails(collisionBox, candidateBoxes!)\n        ) {\n            return PlacementResult.Rejected;\n        }\n    }\n    // Allocate collision info if needed.\n    if (labelState.element.textReservesSpace) {\n        const collisionBox = new DetailedCollisionBox(tmpCollisionBox, tmpCollisionBoxes.slice());\n        tmpCollisionBoxes.length = 0;\n        screenCollisions.allocate(collisionBox);\n    }\n    return PlacementResult.Ok;\n}\n\n/**\n * Check if a given path label is too small to be rendered.\n * @param textElement The text element to check.\n * @param screenProjector Used to project coordinates from world to screen space.\n * @param outScreenPoints Label path projected to screen space.\n * @returns `true` if label is too small, `false` otherwise.\n */\nexport function isPathLabelTooSmall(\n    textElement: TextElement,\n    screenProjector: ScreenProjector,\n    outScreenPoints: THREE.Vector2[]\n): boolean {\n    assert(textElement.type === TextElementType.PathLabel);\n\n    // Get the screen points that define the label's segments and create a path with\n    // them.\n    outScreenPoints.length = 0;\n    let anyPointVisible = false;\n\n    for (const pt of textElement.points as THREE.Vector3[]) {\n        // Skip invisible points at the beginning of the path.\n        const screenPoint = anyPointVisible\n            ? screenProjector.project(pt, tmpScreenPosition)\n            : screenProjector.projectOnScreen(pt, tmpScreenPosition);\n        if (screenPoint === undefined) {\n            continue;\n        }\n        anyPointVisible = true;\n\n        outScreenPoints.push(tmpScreenPosition.clone());\n    }\n\n    // TODO: (HARP-3515)\n    //      The rendering of a path label that contains just a single point that is not\n    //      visible is impossible, which is problematic with long paths.\n    //      Fix: Skip/clip the invisible points at beginning and end of the path to get\n    //      the visible part of the path.\n\n    // If not a single point is visible, skip the path\n    if (!anyPointVisible) {\n        return true;\n    }\n\n    // Check/guess if the screen box can hold a string of that length. It is important\n    // to guess that value without measuring the font first to save time.\n    const minScreenSpace = textElement.text.length * MIN_AVERAGE_CHAR_WIDTH;\n\n    tmpBox.setFromPoints(outScreenPoints);\n    const boxDiagonalSq = tmpBox.max.sub(tmpBox.min).lengthSq();\n\n    if (boxDiagonalSq < minScreenSpace * minScreenSpace) {\n        textElement.dbgPathTooSmall = true;\n        return true;\n    }\n\n    return false;\n}\n\nconst tmpOrientedBox = new OrientedBox3();\n\n/**\n * Calculates the world position of the supplied label. The label will be shifted if there is a\n * specified offsetDirection and value to shift it in.\n * @param poiLabel The label to shift\n * @param projection The projection, required to compute the correct direction offset for spherical\n * projections.\n * @param env The environment to extract the worldOffset needed to shift the icon in world space,\n * if configured in the style.\n * @param outWorldPosition Preallocated vector to store the result in\n * @returns the [[outWorldPosition]] vector.\n */\nexport function getWorldPosition(\n    poiLabel: TextElement,\n    projection: Projection,\n    env: Env,\n    outWorldPosition: THREE.Vector3\n): THREE.Vector3 {\n    const worldOffsetShiftValue = getPropertyValue(\n        (poiLabel.poiInfo?.technique as PoiTechnique)?.worldOffset,\n        env\n    );\n    outWorldPosition?.copy(poiLabel.position);\n    if (\n        worldOffsetShiftValue !== null &&\n        worldOffsetShiftValue !== undefined &&\n        poiLabel.offsetDirection !== undefined\n    ) {\n        projection.localTangentSpace(poiLabel.position, tmpOrientedBox);\n        const offsetDirectionVector = tmpOrientedBox.yAxis;\n        const offsetDirectionRad = THREE.MathUtils.degToRad(poiLabel.offsetDirection);\n        // Negate to get the normal, i.e. the vector pointing to the sky.\n        offsetDirectionVector.applyAxisAngle(tmpOrientedBox.zAxis.negate(), offsetDirectionRad);\n\n        outWorldPosition.addScaledVector(tmpOrientedBox.yAxis, worldOffsetShiftValue);\n    }\n    return outWorldPosition;\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Env, getPropertyValue, ImageTexture } from \"@here/harp-datasource-protocol\";\nimport { IconMaterial } from \"@here/harp-materials\";\nimport { MemoryUsage, TextCanvas } from \"@here/harp-text-canvas\";\nimport { assert, LoggerManager, Math2D } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\n\nimport { ImageItem } from \"../image/Image\";\nimport { MipMapGenerator } from \"../image/MipMapGenerator\";\nimport { MapView } from \"../MapView\";\nimport { ScreenCollisions } from \"../ScreenCollisions\";\nimport { PoiInfo, TextElement } from \"../text/TextElement\";\nimport { BoxBuffer } from \"./BoxBuffer\";\n\nconst logger = LoggerManager.instance.create(\"PoiRenderer\");\n\nconst INVALID_RENDER_BATCH = -1;\nconst tempPos = new THREE.Vector3(0);\n\n/**\n * Neutral color used as `vColor` attribute of [[IconMaterial]] if no `iconColor` color was\n * specified.\n */\nconst neutralColor = new THREE.Color(1, 1, 1);\n\n/**\n * Temporary color instance used by `addPoi` to pass color derived from `iconBrightness` property.\n */\nconst tmpIconColor = new THREE.Color();\n\n/**\n * The `PoiRenderBufferBatch` contains the geometry and the material for all POIs that share the\n * same icon image ([[ImageTexture]]). If the image is the same, all the objects in this batch can\n * share the same material, which makes them renderable in the same draw call, whatever the number\n * of actual objects (WebGL limits apply!).\n *\n * There is a `PoiRenderBufferBatch` for every icon in a texture atlas, since the size of the icon\n * in the atlas as well as the texture coordinates are specified in the `PoiRenderBufferBatch`.\n */\nclass PoiRenderBufferBatch {\n    // Enable trilinear filtering to reduce flickering due to distance scaling\n    static trilinear: boolean = true;\n\n    boxBuffer: BoxBuffer | undefined;\n\n    private m_material?: THREE.Material | THREE.Material[];\n\n    /**\n     * Create the `PoiRenderBufferBatch`.\n     *\n     * @param mapView The [[MapView]] instance.\n     * @param scene The three.js scene to add the POIs to.\n     * @param imageItem The icon that will have his material shared.\n     * @param renderOrder RenderOrder of the batch geometry's [[Mesh]].\n     */\n    constructor(\n        readonly mapView: MapView,\n        readonly scene: THREE.Scene,\n        readonly imageItem: ImageItem,\n        readonly renderOrder: number\n    ) {}\n\n    /**\n     * Initialize with the [[ImageTexture]]. Loads the image and sets up the icon size, the texture\n     * coordinates and material of the batch. Since image loading is done asynchronously, this\n     * batch cannot be rendered right away. MapView#update is being triggered if it loaded\n     * successfully.\n     */\n    init() {\n        if (this.boxBuffer === undefined) {\n            this.setup();\n        }\n    }\n\n    /**\n     * Clean the `PoiRenderBufferBatch`, remove all icon boxes. Called before starting a new frame.\n     */\n    reset(): void {\n        if (this.boxBuffer === undefined) {\n            this.init();\n        }\n        this.boxBuffer!.reset();\n    }\n\n    /**\n     * Update the geometry with all the added boxes during the frame.\n     */\n    update(): void {\n        if (this.boxBuffer === undefined) {\n            this.init();\n        }\n        this.boxBuffer!.updateBufferGeometry();\n    }\n\n    /**\n     * Update the info with the memory footprint caused by objects owned by the\n     * `PoiRenderBufferBatch`.\n     *\n     * @param info The info object to increment with the values from this `PoiRenderBufferBatch`.\n     */\n    updateMemoryUsage(info: MemoryUsage) {\n        if (this.boxBuffer !== undefined) {\n            this.boxBuffer.updateMemoryUsage(info);\n        }\n    }\n\n    /**\n     * Setup texture and material for the batch.\n     */\n    private setup() {\n        // Texture images should be generated with premultiplied alpha\n        const premultipliedAlpha = true;\n\n        const texture = new THREE.Texture(\n            this.imageItem.imageData as any,\n            THREE.UVMapping,\n            undefined,\n            undefined,\n            PoiRenderBufferBatch.trilinear ? THREE.LinearFilter : THREE.LinearFilter,\n            PoiRenderBufferBatch.trilinear ? THREE.LinearMipMapLinearFilter : THREE.LinearFilter,\n            THREE.RGBAFormat\n        );\n        if (PoiRenderBufferBatch.trilinear && this.imageItem.mipMaps) {\n            // Generate mipmaps for distance scaling of icon\n            texture.mipmaps = this.imageItem.mipMaps;\n            texture.image = texture.mipmaps[0];\n        }\n        texture.flipY = false;\n        texture.premultiplyAlpha = premultipliedAlpha;\n        texture.needsUpdate = true;\n\n        this.m_material = new IconMaterial({\n            map: texture\n        });\n\n        this.boxBuffer = new BoxBuffer(this.m_material, this.renderOrder);\n\n        const mesh = this.boxBuffer.mesh;\n\n        mesh.frustumCulled = false;\n\n        this.scene.add(mesh);\n\n        this.mapView.update();\n    }\n}\n\n/**\n * Contains all [[PoiRenderBufferBatch]]es. Selects (and initializes) the correct batch for a POI.\n */\nclass PoiRenderBuffer {\n    readonly batches: PoiRenderBufferBatch[] = [];\n    private readonly m_batchMap: Map<string, Map<number, number>> = new Map();\n\n    /**\n     * Create the `PoiRenderBuffer`.\n     *\n     * @param mapView The [[MapView]] to be rendered to.\n     * @param textCanvas The [[TextCanvas]] to which scenes this `PoiRenderBuffer` adds geometry to.\n     * The actual scene a [[TextElement]] is added to is specified by the renderOrder of the\n     * [[TextElement]].\n     */\n    constructor(readonly mapView: MapView, readonly textCanvas: TextCanvas) {}\n\n    /**\n     * Register the POI and prepare the [[PoiRenderBufferBatch]] for the POI at first usage.\n     *\n     * @param poiInfo Describes the POI icon.\n     */\n    registerPoi(poiInfo: PoiInfo): number {\n        const { imageItem, imageTexture, imageTextureName } = poiInfo;\n\n        if (\n            imageItem === undefined ||\n            imageTextureName === undefined ||\n            imageTexture === undefined\n        ) {\n            // No image -> invisible -> ignore\n            return INVALID_RENDER_BATCH;\n        }\n\n        const renderOrder = poiInfo.renderOrder!;\n\n        // There is a batch for every ImageDefinition, which could be a texture atlas with many\n        // ImageTextures in it.\n        const batchKey = imageTexture.image;\n        let batchSet = this.m_batchMap.get(batchKey);\n        let mappedIndex: number | undefined;\n        let bufferBatch: PoiRenderBufferBatch;\n\n        if (batchSet === undefined) {\n            batchSet = new Map<number, number>();\n            this.m_batchMap.set(batchKey, batchSet);\n        }\n\n        mappedIndex = batchSet.get(renderOrder);\n        if (mappedIndex !== undefined) {\n            return mappedIndex;\n        }\n        mappedIndex = this.batches.length;\n\n        let layer = this.textCanvas.getLayer(renderOrder);\n        if (layer === undefined) {\n            this.textCanvas.addText(\"\", tempPos, { layer: renderOrder });\n            layer = this.textCanvas.getLayer(renderOrder);\n        }\n\n        bufferBatch = new PoiRenderBufferBatch(\n            this.mapView,\n            layer!.storage.scene,\n            imageItem,\n            renderOrder\n        );\n        bufferBatch.init();\n        batchSet.set(renderOrder, mappedIndex);\n        this.batches.push(bufferBatch);\n        return mappedIndex;\n    }\n\n    /**\n     * Render a POI image at the specified location.\n     *\n     * @param poiInfo PoiInfo containing information for rendering the POI icon.\n     * @param screenBox Box to render icon into in 2D coordinates.\n     * @param viewDistance Box's distance to camera.\n     * @param opacity Opacity of icon to allow fade in/out.\n     */\n    addPoi(poiInfo: PoiInfo, screenBox: Math2D.Box, viewDistance: number, opacity: number): number {\n        const poiRegistered =\n            poiInfo.poiRenderBatch !== undefined && poiInfo.poiRenderBatch !== INVALID_RENDER_BATCH;\n        const batchIndex = poiRegistered ? poiInfo.poiRenderBatch! : this.registerPoi(poiInfo);\n        if (batchIndex === INVALID_RENDER_BATCH) {\n            return INVALID_RENDER_BATCH;\n        }\n        assert(batchIndex >= 0);\n        assert(batchIndex < this.batches.length);\n        assert(poiInfo.uvBox !== undefined);\n\n        if (this.batches[batchIndex].boxBuffer === undefined) {\n            this.batches[batchIndex].init();\n        }\n\n        let color: THREE.Color;\n        if (poiInfo.iconBrightness !== undefined) {\n            color = tmpIconColor.setScalar(poiInfo.iconBrightness);\n            if (poiInfo.iconColor !== undefined) {\n                color = tmpIconColor.multiply(poiInfo.iconColor);\n            }\n        } else if (poiInfo.iconColor !== undefined) {\n            color = poiInfo.iconColor;\n        } else {\n            color = neutralColor;\n        }\n        this.batches[batchIndex].boxBuffer!.addBox(\n            screenBox,\n            poiInfo.uvBox!,\n            color,\n            opacity,\n            viewDistance,\n            poiInfo.textElement\n        );\n\n        return batchIndex;\n    }\n\n    /**\n     * Retrieve the [[PoiRenderBufferBatch]] from the array at the specified index. May be invalid\n     * if the imageTexture could not be found\n     *\n     * @param index Index into batch array.\n     */\n    getBatch(index: number): PoiRenderBufferBatch | undefined {\n        if (index >= 0) {\n            assert(index < this.batches.length);\n            return this.batches[index];\n        }\n        // may be invalid if the imageTexture could not be found\n        return undefined;\n    }\n\n    /**\n     * Reset all batches, removing all content from the [[PoiRenderBufferBatch]]es. Called at the\n     * beginning of a frame before the POIs are placed.\n     */\n    reset(): void {\n        for (const batch of this.batches) {\n            batch.reset();\n        }\n    }\n\n    /**\n     * Update the geometry of all [[PoiRenderBufferBatch]]es. Called before rendering.\n     */\n    update(): void {\n        for (const batch of this.batches) {\n            batch.update();\n        }\n    }\n\n    /**\n     * Fill the picking results for the pixel with the given screen coordinate. If multiple\n     * [[PoiInfo]]s are found, the order of the results is unspecified.\n     *\n     * @param screenPosition Screen coordinate of picking position.\n     * @param pickCallback Callback to be called for every picked element.\n     */\n    pickTextElements(\n        screenPosition: THREE.Vector2,\n        pickCallback: (pickData: any | undefined) => void\n    ) {\n        for (const batch of this.batches) {\n            if (batch.boxBuffer === undefined) {\n                batch.init();\n            }\n            batch.boxBuffer!.pickBoxes(screenPosition, pickCallback, batch.imageItem.imageData);\n        }\n    }\n\n    /**\n     * Update the info with the memory footprint caused by objects owned by the `PoiRenderBuffer`.\n     *\n     * @param info The info object to increment with the values from this `PoiRenderBuffer`.\n     */\n    updateMemoryUsage(info: MemoryUsage) {\n        for (const batch of this.batches) {\n            if (batch.imageItem.imageData !== undefined) {\n                const imageBytes =\n                    batch.imageItem.imageData.width * batch.imageItem.imageData.height * 4;\n                info.heapSize += imageBytes;\n                info.gpuSize += imageBytes;\n            }\n            if (batch.boxBuffer !== undefined) {\n                batch.boxBuffer.updateMemoryUsage(info);\n            }\n        }\n    }\n}\n\n/**\n * Manage POI rendering. Uses a [[PoiRenderBuffer]] to actually create the geometry that is being\n * rendered.\n */\nexport class PoiRenderer {\n    /**\n     * Compute screen box for icon. It is required that `prepareRender` has been successfully called\n     * before `computeScreenBox` may be called.\n     *\n     * @param poiInfo PoiInfo containing information for rendering the POI icon.\n     * @param screenPosition Position on screen (2D).\n     * @param scale Scale to apply to icon.\n     * @param env Current zoom level.\n     * @param screenBox Box that will be used to store the result.\n     * @returns The computed screen box for the icon.\n     */\n    static computeIconScreenBox(\n        poiInfo: PoiInfo,\n        screenPosition: THREE.Vector2,\n        scale: number,\n        env: Env,\n        /* out */ screenBox: Math2D.Box = new Math2D.Box()\n    ): Math2D.Box {\n        assert(poiInfo.poiRenderBatch !== undefined);\n        assert(poiInfo.poiRenderBatch !== INVALID_RENDER_BATCH);\n\n        const width = poiInfo.computedWidth! * scale;\n        const height = poiInfo.computedHeight! * scale;\n        const technique = poiInfo.technique;\n        const iconXOffset = getPropertyValue(technique.iconXOffset, env);\n        const iconYOffset = getPropertyValue(technique.iconYOffset, env);\n\n        const centerX =\n            screenPosition.x + (typeof iconXOffset === \"number\" ? iconXOffset : 0) * scale;\n        const centerY =\n            screenPosition.y + (typeof iconYOffset === \"number\" ? iconYOffset : 0) * scale;\n\n        screenBox.x = centerX - width / 2;\n        screenBox.y = centerY - height / 2;\n        screenBox.w = width;\n        screenBox.h = height;\n\n        return screenBox;\n    }\n    // keep track of the missing textures, but only warn once\n    private static m_missingTextureName: Map<string, boolean> = new Map();\n\n    // the render buffer containing all batches, one batch per texture/material.\n    private m_renderBuffer: PoiRenderBuffer;\n\n    // temporary variable to save allocations\n    private m_tempScreenBox = new Math2D.Box();\n\n    /**\n     * Create the `PoiRenderer` for the specified [[MapView]].\n     *\n     * @param mapView The MapView to be rendered to.\n     * @param textCanvas The [[TextCanvas]] this `PoiRenderer` is associated to. POIs are added to\n     * the different layers of this [[TextCanvas]] based on renderOrder.\n     */\n    constructor(readonly mapView: MapView, readonly textCanvas: TextCanvas) {\n        this.m_renderBuffer = new PoiRenderBuffer(mapView, textCanvas);\n    }\n\n    /**\n     * Prepare the POI for rendering, and determine which `poiRenderBatch` should be used. If a\n     * `poiRenderBatch` is assigned, the POI is ready to be rendered.\n     *\n     * @param pointLabel TextElement with PoiInfo for rendering the POI icon.\n     * @param env TODO! The current zoomLevel level of [[MapView]]\n     *\n     * @returns `True` if the space is not already allocated by another object (text label or POI)\n     */\n    prepareRender(pointLabel: TextElement, env: Env): boolean {\n        const poiInfo = pointLabel.poiInfo;\n        if (poiInfo === undefined) {\n            return false;\n        }\n        if (poiInfo.poiRenderBatch === undefined) {\n            this.preparePoi(pointLabel, env);\n        }\n        return poiInfo.poiRenderBatch !== undefined;\n    }\n\n    /**\n     * Reset all batches, removing all content from the [[PoiRenderBuffer]]es. Called at the\n     * beginning of a frame before the POIs are placed.\n     */\n    reset(): void {\n        this.m_renderBuffer.reset();\n    }\n\n    /**\n     * Render the icon.\n     *\n     * @param poiInfo PoiInfo containing information for rendering the POI icon.\n     * @param screenPosition Position on screen (2D):\n     * @param screenCollisions Object handling the collision checks for screen-aligned 2D boxes.\n     * @param viewDistance Box's distance to camera.\n     * @param scale Scaling factor to apply to text and icon.\n     * @param allocateScreenSpace If `true` screen space will be allocated for the icon.\n     * @param opacity Opacity of icon to allow fade in/out.\n     */\n    renderPoi(\n        poiInfo: PoiInfo,\n        screenPosition: THREE.Vector2,\n        screenCollisions: ScreenCollisions,\n        viewDistance: number,\n        scale: number,\n        allocateScreenSpace: boolean,\n        opacity: number,\n        env: Env\n    ): void {\n        assert(poiInfo.poiRenderBatch !== undefined);\n\n        PoiRenderer.computeIconScreenBox(poiInfo, screenPosition, scale, env, this.m_tempScreenBox);\n\n        if (allocateScreenSpace) {\n            screenCollisions.allocate(this.m_tempScreenBox);\n        }\n\n        this.m_renderBuffer.addPoi(poiInfo, this.m_tempScreenBox, viewDistance, opacity);\n    }\n\n    /**\n     * Update the geometry of all [[PoiRenderBuffer]]es. Called before rendering.\n     */\n    update(): void {\n        this.m_renderBuffer.update();\n    }\n\n    /**\n     * Fill the picking results for the pixel with the given screen coordinate. If multiple\n     * [[PoiInfo]]s are found, the order of the results is unspecified.\n     *\n     * @param screenPosition Screen coordinate of picking position.\n     * @param pickCallback Callback to be called for every picked element.\n     */\n    pickTextElements(\n        screenPosition: THREE.Vector2,\n        pickCallback: (pickData: any | undefined) => void\n    ) {\n        this.m_renderBuffer.pickTextElements(screenPosition, pickCallback);\n    }\n\n    /**\n     * Update the info with the memory footprint caused by objects owned by the `PoiRenderer`.\n     *\n     * @param info The info object to increment with the values from this `PoiRenderer`.\n     */\n    getMemoryUsage(info: MemoryUsage) {\n        this.m_renderBuffer.updateMemoryUsage(info);\n    }\n\n    /**\n     * Register the POI at the [[PoiRenderBuffer]] which may require some setup, for example loading\n     * of the actual image.\n     */\n    private preparePoi(pointLabel: TextElement, env: Env): void {\n        const poiInfo = pointLabel.poiInfo;\n        if (poiInfo === undefined || !pointLabel.visible) {\n            return;\n        }\n\n        if (poiInfo.poiRenderBatch !== undefined || poiInfo.isValid === false) {\n            // Already set up, nothing to be done here.\n            return;\n        }\n\n        if (poiInfo.poiTableName !== undefined) {\n            if (this.mapView.poiManager.updatePoiFromPoiTable(pointLabel)) {\n                if (!pointLabel.visible) {\n                    // PoiTable set this POI to not visible.\n                    return;\n                }\n            } else {\n                // PoiTable has not been loaded, but is required to determine visibility.\n                return;\n            }\n        }\n\n        const imageTextureName = poiInfo.imageTextureName;\n\n        const imageTexture = this.mapView.poiManager.getImageTexture(imageTextureName);\n        if (imageTexture === undefined) {\n            // Warn about a missing texture, but only once.\n            if (PoiRenderer.m_missingTextureName.get(imageTextureName) === undefined) {\n                PoiRenderer.m_missingTextureName.set(imageTextureName, true);\n                logger.error(`preparePoi: No imageTexture with name '${imageTextureName}' found`);\n            }\n            poiInfo.isValid = false;\n            return;\n        }\n\n        const imageDefinition = imageTexture.image;\n\n        let imageItem = this.mapView.imageCache.findImageByName(imageDefinition);\n        if (imageItem === undefined) {\n            logger.error(`init: No imageItem found with name '${imageDefinition}'`);\n            poiInfo.isValid = false;\n            return;\n        }\n\n        if (!imageItem.loaded) {\n            if (imageItem.loadingPromise !== undefined) {\n                // already being loaded, will be rendered once available\n                return;\n            }\n            const imageUrl = imageItem.url;\n            const loading = this.mapView.imageCache.loadImage(imageItem);\n            if (loading instanceof Promise) {\n                loading\n                    .then(loadedImageItem => {\n                        if (loadedImageItem === undefined) {\n                            logger.error(`preparePoi: Failed to load imageItem: '${imageUrl}`);\n                            return;\n                        }\n                        this.setupPoiInfo(poiInfo, imageTexture, loadedImageItem, env);\n                    })\n                    .catch(error => {\n                        logger.error(`preparePoi: Failed to load imageItem: '${imageUrl}`, error);\n                        poiInfo.isValid = false;\n                    });\n                return;\n            } else {\n                imageItem = loading;\n            }\n        }\n\n        this.setupPoiInfo(poiInfo, imageTexture, imageItem, env);\n    }\n\n    /**\n     * Setup texture and material for the batch.\n     *\n     * @param poiInfo [[PoiInfo]] to initialize.\n     * @param imageTexture Shared [[ImageTexture]], defines used area in atlas.\n     * @param imageItem Shared [[ImageItem]], contains cached image for texture.\n     * @param env The current zoom level of [[MapView]]\n     */\n    private setupPoiInfo(\n        poiInfo: PoiInfo,\n        imageTexture: ImageTexture,\n        imageItem: ImageItem,\n        env: Env\n    ) {\n        assert(poiInfo.uvBox === undefined);\n\n        if (imageItem === undefined || imageItem.imageData === undefined) {\n            logger.error(\"setupPoiInfo: No imageItem/imageData found\");\n            // invalid render batch number\n            poiInfo.poiRenderBatch = INVALID_RENDER_BATCH;\n            poiInfo.isValid = false;\n            return;\n        }\n\n        const technique = poiInfo.technique;\n\n        const imageWidth = imageItem.imageData.width;\n        const imageHeight = imageItem.imageData.height;\n        const paddedSize = MipMapGenerator.getPaddedSize(imageWidth, imageHeight);\n        const trilinearFiltering = PoiRenderBufferBatch.trilinear && imageItem.mipMaps;\n        const paddedImageWidth = trilinearFiltering ? paddedSize.width : imageWidth;\n        const paddedImageHeight = trilinearFiltering ? paddedSize.height : imageHeight;\n\n        const iconWidth = imageTexture.width !== undefined ? imageTexture.width : imageWidth;\n        const iconHeight = imageTexture.height !== undefined ? imageTexture.height : imageHeight;\n\n        let minS = 0;\n        let maxS = 1;\n        let minT = 0;\n        let maxT = 1;\n\n        let iconScaleH = technique.iconScale !== undefined ? technique.iconScale : 1;\n        let iconScaleV = technique.iconScale !== undefined ? technique.iconScale : 1;\n\n        const width = imageTexture.width !== undefined ? imageTexture.width : imageWidth;\n        const height = imageTexture.height !== undefined ? imageTexture.height : imageHeight;\n        const xOffset = imageTexture.xOffset !== undefined ? imageTexture.xOffset : 0;\n        const yOffset = imageTexture.yOffset !== undefined ? imageTexture.yOffset : 0;\n\n        minS = xOffset / paddedImageWidth;\n        maxS = (xOffset + width) / paddedImageWidth;\n\n        const flipY = false;\n        if (flipY) {\n            minT = (imageHeight - yOffset) / paddedImageHeight;\n            maxT = (imageHeight - yOffset - height) / paddedImageHeight;\n        } else {\n            minT = yOffset / paddedImageHeight;\n            maxT = (yOffset + height) / paddedImageHeight;\n        }\n\n        // minS += 0.5 / imageWidth;\n        // maxS += 0.5 / imageWidth;\n        // minT += 0.5 / imageHeight;\n        // maxT += 0.5 / imageHeight;\n\n        // By default, iconScaleV should be equal to iconScaleH, whatever is set in the style.\n        const screenWidth = getPropertyValue(technique.screenWidth, env);\n        if (screenWidth !== undefined) {\n            iconScaleV = iconScaleH = screenWidth / iconWidth;\n        }\n\n        const screenHeight = getPropertyValue(technique.screenHeight, env);\n        if (screenHeight !== undefined) {\n            iconScaleV = screenHeight / iconHeight;\n            if (screenWidth !== undefined) {\n                iconScaleH = iconScaleV;\n            }\n        }\n\n        // compute stored values in imageTexture\n        poiInfo.computedWidth = iconWidth * iconScaleH;\n        poiInfo.computedHeight = iconHeight * iconScaleV;\n        poiInfo.uvBox = {\n            s0: minS,\n            t0: maxT,\n            s1: maxS,\n            t1: minT\n        };\n        poiInfo.imageItem = imageItem;\n        poiInfo.imageTexture = imageTexture;\n        poiInfo.poiRenderBatch = this.m_renderBuffer.registerPoi(poiInfo);\n        poiInfo.isValid = true;\n\n        assert(poiInfo.poiRenderBatch !== undefined);\n    }\n}\n","/*\n * Copyright (C) 2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nimport { ImageItem } from \"./Image\";\n\nconst isNode = typeof window === \"undefined\";\n\n/**\n * Mip map generator resizes textures to next bigger power-of-two size by adding padding\n * and creates mip map levels.\n * @internal\n */\nexport class MipMapGenerator {\n    /**\n     * Gets size of an image padded to the next bigger power-of-two size\n     * @param width Width of image\n     * @param height Height of image\n     */\n    static getPaddedSize(width: number, height: number): { width: number; height: number } {\n        return {\n            width: THREE.MathUtils.ceilPowerOfTwo(width),\n            height: THREE.MathUtils.ceilPowerOfTwo(height)\n        };\n    }\n\n    private m_paddingCanvas?: HTMLCanvasElement;\n    private m_paddingContext?: CanvasRenderingContext2D;\n    private m_resizeCanvas?: HTMLCanvasElement;\n    private m_resizeContext?: CanvasRenderingContext2D;\n\n    constructor() {\n        if (!isNode) {\n            this.m_paddingCanvas = document.createElement(\"canvas\");\n            this.m_paddingContext = this.m_paddingCanvas.getContext(\"2d\")!;\n            this.m_resizeCanvas = document.createElement(\"canvas\");\n            this.m_resizeContext = this.m_resizeCanvas.getContext(\"2d\")!;\n        }\n    }\n\n    /**\n     * Generate downsampled mip map levels from an image.\n     * If the input image is not power-of-two the image is padded to the\n     * next bigger power-of-two size.\n     * @param image Input image\n     * @returns A list of images with mip maps of the input image\n     */\n    generateTextureAtlasMipMap(image: ImageItem): ImageData[] {\n        if (isNode) {\n            throw new Error(\"MipMapGenerator only works in browser.\");\n        }\n\n        if (image.imageData === undefined) {\n            throw new Error(\"Can not generate mip maps. Image data not loaded!\");\n        }\n        const imageData = image.imageData;\n        const mipMaps: ImageData[] = [];\n\n        // Add initial texture with padding as level 0\n        const { width: paddedWidth, height: paddedHeight } = MipMapGenerator.getPaddedSize(\n            imageData.width,\n            imageData.height\n        );\n        this.copyImageWithPadding(imageData, paddedWidth, paddedHeight);\n        mipMaps.push(this.m_paddingContext!.getImageData(0, 0, paddedWidth, paddedHeight));\n\n        let width = paddedWidth * 0.5;\n        let height = paddedHeight * 0.5;\n        while (width >= 1 && height >= 1) {\n            const mipMapLevel = mipMaps.length;\n            const previousImage = mipMaps[mipMapLevel - 1];\n            // Resize previous mip map level\n            mipMaps.push(this.resizeImage(previousImage, width, height));\n            width *= 0.5;\n            height *= 0.5;\n        }\n\n        return mipMaps;\n    }\n\n    /**\n     * Copy image to a canvas and add padding if necessary.\n     * @param image Input image.\n     * @param width Width of output image\n     * @param height Width of output image\n     * @returns Canvas with image and padding.\n     */\n    private copyImageWithPadding(\n        image: ImageData | ImageBitmap,\n        width: number,\n        height: number\n    ): HTMLCanvasElement {\n        this.m_paddingCanvas!.width = width;\n        this.m_paddingCanvas!.height = height;\n\n        this.m_paddingContext!.clearRect(0, 0, width, height);\n        if (image instanceof ImageBitmap) {\n            this.m_paddingContext!.drawImage(image, 0, 0);\n        } else {\n            this.m_paddingContext!.putImageData(image, 0, 0);\n        }\n\n        // Add horizontal padding\n        if (image.width !== width) {\n            this.m_paddingContext!.drawImage(\n                this.m_paddingCanvas!,\n                image.width - 1,\n                0,\n                1,\n                image.height,\n                image.width,\n                0,\n                width - image.width,\n                image.height\n            );\n        }\n\n        // Add vertical padding\n        if (image.height !== height) {\n            this.m_paddingContext!.drawImage(\n                this.m_paddingCanvas!,\n                0,\n                image.height - 1,\n                width,\n                1,\n                0,\n                image.height,\n                width,\n                height - image.height\n            );\n        }\n\n        return this.m_paddingCanvas!;\n    }\n\n    /**\n     * Resize an image.\n     *\n     * Quality of resized image is best when\n     * image.width and image.height are even numbers and the image\n     * is resized by factor 0.5 or 2.\n     * @param image Input image\n     * @param width Width of output image\n     * @param height Height of output image\n     * @return Resized image\n     */\n    private resizeImage(image: ImageData, width: number, height: number): ImageData {\n        //  Copy image data to canvas because ImageData can't be resized directly\n        const paddedImage = this.copyImageWithPadding(image, image.width, image.height);\n\n        // Resize image to resize canvas\n        this.m_resizeCanvas!.width = width;\n        this.m_resizeCanvas!.height = height;\n        this.m_resizeContext!.clearRect(0, 0, width, height);\n        this.m_resizeContext!.drawImage(paddedImage, 0, 0, width, height);\n\n        return this.m_resizeContext!.getImageData(0, 0, width, height);\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { LoggerManager, Math2D } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\nimport { debugContext } from \"./DebugContext\";\n\ndeclare const require: any;\n\n// tslint:disable-next-line:no-var-requires\nconst RBush = require(\"rbush\");\n\nconst logger = LoggerManager.instance.create(\"ScreenCollissions\");\n\nexport interface IBox {\n    minX: number;\n    minY: number;\n    maxX: number;\n    maxY: number;\n}\n\nexport class CollisionBox extends Math2D.Box implements IBox {\n    constructor(box?: Math2D.Box | THREE.Box2 | IBox) {\n        super();\n        if (box !== undefined) {\n            this.copy(box);\n        }\n    }\n\n    copy(box: Math2D.Box | THREE.Box2 | IBox): CollisionBox {\n        if (box instanceof Math2D.Box) {\n            this.set(box.x, box.y, box.w, box.h);\n        } else if (box instanceof THREE.Box2) {\n            this.set(box.min.x, box.min.y, box.max.x - box.min.x, box.max.y - box.min.y);\n        } else {\n            this.set(box.minX, box.minY, box.maxX - box.minX, box.maxY - box.minY);\n        }\n        return this;\n    }\n    get minX(): number {\n        return this.x;\n    }\n    set minX(minX: number) {\n        this.x = minX;\n    }\n    get maxX(): number {\n        return this.x + this.w;\n    }\n    set maxX(maxX: number) {\n        this.w = maxX - this.x;\n    }\n    get minY(): number {\n        return this.y;\n    }\n    set minY(minY: number) {\n        this.y = minY;\n    }\n    get maxY(): number {\n        return this.y + this.h;\n    }\n    set maxY(maxY: number) {\n        this.h = maxY - this.y;\n    }\n}\n\n/**\n * Collision box with additional boxes defining tighter bounds for the enclosed feature\n * (e.g.glyph bounds for text).\n */\nexport class DetailedCollisionBox extends CollisionBox {\n    constructor(box: Math2D.Box | THREE.Box2 | IBox, readonly detailBoxes: CollisionBox[]) {\n        super(box);\n    }\n}\n\nexport interface LineWithBound extends IBox {\n    line: THREE.Line3;\n}\n\nexport function isLineWithBound(box: IBox): box is LineWithBound {\n    return (box as LineWithBound).line !== undefined;\n}\n\nconst tmpCollisionBox = new CollisionBox();\n\nexport class ScreenCollisions {\n    /** The screen bounding box. */\n    readonly screenBounds = new Math2D.Box();\n\n    /** Tree of allocated bounds. */\n\n    private rtree = new RBush();\n\n    /**\n     * Constructs a new ScreenCollisions object.\n     */\n    constructor() {\n        //\n    }\n\n    /**\n     * Resets the list of allocated screen bounds.\n     */\n    reset() {\n        this.rtree.clear();\n    }\n\n    /**\n     * Updates the screen bounds that are used to check if bounding boxes are visible.\n     *\n     * @param width The width of the container.\n     * @param height The height of the container.\n     */\n    update(width: number, height: number) {\n        this.screenBounds.set(width / -2, height / -2, width, height);\n        this.reset();\n    }\n\n    /**\n     * Marks the region of the screen intersecting with the given bounding box as allocated.\n     *\n     * @param bounds The bounding box in NDC scaled coordinates (i.e. top left is -width/2,\n     * -height/2)\n     */\n    allocate(bounds: Math2D.Box | CollisionBox | DetailedCollisionBox): void {\n        const bbox = !(bounds instanceof CollisionBox) ? new CollisionBox(bounds) : bounds;\n        this.rtree.insert(bbox);\n    }\n\n    /**\n     * Inserts the given bounds into the rtree.\n     *\n     * @param bounds The bounding boxes (the bounding boxes must be in the space returned from the\n     * ScreenProjector.project method).\n     */\n    allocateIBoxes(bounds: IBox[]) {\n        this.rtree.load(bounds);\n    }\n\n    /**\n     * Search for all bounds in the tree intersecting with the given box.\n     * @param box The box used for the search.\n     * @returns An array of all IBoxes intersecting with the given box.\n     */\n    search(box: CollisionBox): IBox[] {\n        return this.rtree.search(box);\n    }\n\n    /**\n     * Checks if the given bounding box is already allocated.\n     *\n     * @param bounds The bounding box in world coordinates.\n     */\n    isAllocated(bounds: Math2D.Box | CollisionBox): boolean {\n        const collisionBox = bounds instanceof CollisionBox ? bounds : tmpCollisionBox.copy(bounds);\n        const results = this.search(collisionBox);\n        return this.intersectsDetails(collisionBox, results);\n    }\n\n    /**\n     * Checks if the given screen bounds intersects with the frustum of the active camera.\n     *\n     * @param bounds The bounding box in world coordinates.\n     */\n    isVisible(bounds: Math2D.Box): boolean {\n        return this.screenBounds.intersects(bounds);\n    }\n\n    /**\n     * Checks if the given screen bounds is contained within the frustum of the active camera.\n     *\n     * @param bounds The bounding box in world coordinates.\n     */\n    isFullyVisible(bounds: Math2D.Box): boolean {\n        return this.screenBounds.containsBox(bounds);\n    }\n\n    /**\n     * Test whether a given [[CollisionBox]] intersects with any of the details in the specified\n     * [[IBox]]es.\n     *\n     * @param testBox The box to test for intersection.\n     * @param boxes The candidate boxes the test box may intersect with. It's assumed that the\n     * global bounds of these boxes intersect with the given test box.\n     * @returns `true` if any intersection found.\n     */\n    intersectsDetails(testBox: CollisionBox, boxes: IBox[]): boolean {\n        for (const box of boxes) {\n            if (box instanceof DetailedCollisionBox) {\n                for (const detailBox of box.detailBoxes) {\n                    if (detailBox.intersects(testBox)) {\n                        return true;\n                    }\n                }\n            } else if (isLineWithBound(box)) {\n                const boundedLine = box as LineWithBound;\n                if (this.intersectsLine(testBox, boundedLine)) {\n                    return true;\n                }\n            } else {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Computes the intersection between the supplied CollisionBox and the LineWithBound.\n     * @note The [[CollisionBox]] is in Screen Bounds space, whereas the line must be\n     * in Screen Coordinate space\n     */\n    private intersectsLine(bbox: CollisionBox, boundedLine: LineWithBound): boolean {\n        const line = boundedLine.line;\n\n        // Note, these aren't normalized, but it doesn't matter, we are just interested\n        // in the sign.\n        const lineXDiffTransformed = line.end.x - line.start.x;\n\n        // Sign of bottom left, bottom right, top left and top right corners.\n        let signBL: number;\n        let signBR: number;\n        let signTL: number;\n        let signTR: number;\n        if (lineXDiffTransformed !== 0) {\n            const lineYDiffTransformed = line.end.y - line.start.y;\n            const normalX = lineYDiffTransformed;\n            const normalY = -lineXDiffTransformed;\n            const D = line.start.y - (lineYDiffTransformed / lineXDiffTransformed) * line.start.x;\n\n            signBL = Math.sign(bbox.minX * normalX + (bbox.minY - D) * normalY);\n            signBR = Math.sign(bbox.maxX * normalX + (bbox.minY - D) * normalY);\n            signTL = Math.sign(bbox.minX * normalX + (bbox.maxY - D) * normalY);\n            signTR = Math.sign(bbox.maxX * normalX + (bbox.maxY - D) * normalY);\n        } else {\n            signBL = Math.sign(bbox.minX - line.start.x);\n            signBR = Math.sign(bbox.maxX - line.start.x);\n            signTL = Math.sign(bbox.minX - line.start.x);\n            signTR = Math.sign(bbox.maxX - line.start.x);\n        }\n        return signBL !== signBR || signBL !== signTL || signBL !== signTR;\n    }\n}\n\n/**\n * @hidden\n *\n * Shows requests for screen space during labelling in an HTML canvas, which should be sized like\n * the actual map canvas. It can be placed on top of the map canvas to show exactly which requests\n * for screen space were done.\n *\n * Also logs statistics.\n */\nexport class ScreenCollisionsDebug extends ScreenCollisions {\n    /** 2D rendering context. */\n    private m_renderContext: CanvasRenderingContext2D | null = null;\n    private m_renderingEnabled = false;\n    private m_numAllocations = 0;\n    private m_numSuccessfulTests = 0;\n    private m_numFailedTests = 0;\n    private m_numSuccessfulVisibilityTests = 0;\n    private m_numFailedVisibilityTests = 0;\n\n    /**\n     * Constructs a new ScreenCollisions object which renders its state to a 2D canvas.\n     */\n    constructor(debugCanvas: HTMLCanvasElement) {\n        super();\n\n        if (debugCanvas !== undefined && debugCanvas !== null) {\n            this.m_renderContext = debugCanvas.getContext(\"2d\");\n        }\n    }\n\n    /**\n     * Resets the list of allocated bounds and clears the debug canvas.\n     * @override\n     */\n    reset() {\n        super.reset();\n\n        this.m_numAllocations = 0;\n        this.m_numSuccessfulTests = 0;\n        this.m_numFailedTests = 0;\n        this.m_numSuccessfulVisibilityTests = 0;\n        this.m_numFailedVisibilityTests = 0;\n    }\n\n    /**\n     * Updates the screen bounds used to check if bounding boxes are visible.\n     *\n     * @param width The width of the container.\n     * @param height The height of the container.\n     * @override\n     */\n    update(width: number, height: number) {\n        if (this.m_renderingEnabled) {\n            logger.log(\n                // tslint:disable-next-line: max-line-length\n                `Allocations: ${this.m_numAllocations} Successful Tests: ${this.m_numSuccessfulTests} Failed Tests: ${this.m_numFailedTests}  Successful Visibility Tests: ${this.m_numSuccessfulVisibilityTests}  Failed Visibility Tests: ${this.m_numFailedVisibilityTests} `\n            );\n        }\n\n        super.update(width, height);\n\n        if (this.m_renderContext !== null) {\n            this.m_renderContext.canvas.width = width;\n            this.m_renderContext.canvas.height = height;\n        }\n\n        // activate in the browser with:\n        // window.__debugContext.setValue(\"DEBUG_SCREEN_COLLISIONS\", true)\n        this.m_renderingEnabled = debugContext.getValue(\"DEBUG_SCREEN_COLLISIONS\");\n    }\n\n    /**\n     * Marks the region of the screen intersecting with the given bounding box as allocated.\n     *\n     * @param bounds the bounding box in world coordinates.\n     * @override\n     */\n    allocate(bounds: Math2D.Box | CollisionBox): void {\n        super.allocate(bounds);\n\n        this.m_numAllocations++;\n\n        if (this.m_renderingEnabled && this.m_renderContext !== null) {\n            this.m_renderContext.strokeStyle = \"#6666ff\";\n            this.m_renderContext.strokeRect(\n                bounds.x - this.screenBounds.x,\n                this.screenBounds.y + this.screenBounds.h - bounds.y,\n                bounds.w,\n                -bounds.h\n            );\n        }\n    }\n\n    /** @override */\n    allocateIBoxes(boundsArray: IBox[]) {\n        for (const bounds of boundsArray) {\n            this.m_numAllocations++;\n\n            if (this.m_renderingEnabled && this.m_renderContext !== null) {\n                this.m_renderContext.strokeStyle = \"#aa2222\";\n                this.m_renderContext.strokeRect(\n                    bounds.minX - this.screenBounds.x,\n                    this.screenBounds.y + this.screenBounds.h - bounds.minY,\n                    bounds.maxX - bounds.minX,\n                    -(bounds.maxY - bounds.minY)\n                );\n            }\n        }\n        super.allocateIBoxes(boundsArray);\n    }\n\n    /** @override */\n    intersectsDetails(testBox: CollisionBox, boxes: IBox[]): boolean {\n        const collisionFound = super.intersectsDetails(testBox, boxes);\n        if (this.m_renderingEnabled && this.m_renderContext !== null) {\n            const padding = collisionFound ? 2 : 1;\n            this.m_renderContext.strokeStyle = collisionFound ? \"#FF0000\" : \"#00ff00\";\n            this.m_renderContext.strokeRect(\n                testBox.x - this.screenBounds.x - padding,\n                this.screenBounds.y + this.screenBounds.h - testBox.y + padding,\n                testBox.w + 2 * padding,\n                -testBox.h - 2 * padding\n            );\n        }\n\n        if (collisionFound) {\n            this.m_numFailedTests++;\n        } else {\n            this.m_numSuccessfulTests++;\n        }\n\n        return collisionFound;\n    }\n\n    /**\n     * Checks if the given screen bounds intersects with the frustum of the active camera.\n     *\n     * @param bounds The bounding box in world coordinates.\n     * @override\n     */\n    isVisible(bounds: Math2D.Box): boolean {\n        const visible = super.isVisible(bounds);\n\n        if (visible) {\n            this.m_numSuccessfulVisibilityTests++;\n        } else {\n            this.m_numFailedVisibilityTests++;\n        }\n        return visible;\n    }\n}\n","!function(t,i){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=i():\"function\"==typeof define&&define.amd?define(i):(t=t||self).RBush=i()}(this,function(){\"use strict\";function t(t,r,e,a,h){!function t(n,r,e,a,h){for(;a>e;){if(a-e>600){var o=a-e+1,s=r-e+1,l=Math.log(o),f=.5*Math.exp(2*l/3),u=.5*Math.sqrt(l*f*(o-f)/o)*(s-o/2<0?-1:1),m=Math.max(e,Math.floor(r-s*f/o+u)),c=Math.min(a,Math.floor(r+(o-s)*f/o+u));t(n,r,m,c,h)}var p=n[r],d=e,x=a;for(i(n,e,r),h(n[a],p)>0&&i(n,e,a);d<x;){for(i(n,d,x),d++,x--;h(n[d],p)<0;)d++;for(;h(n[x],p)>0;)x--}0===h(n[e],p)?i(n,e,x):i(n,++x,a),x<=r&&(e=x+1),r<=x&&(a=x-1)}}(t,r,e||0,a||t.length-1,h||n)}function i(t,i,n){var r=t[i];t[i]=t[n],t[n]=r}function n(t,i){return t<i?-1:t>i?1:0}var r=function(t){void 0===t&&(t=9),this._maxEntries=Math.max(4,t),this._minEntries=Math.max(2,Math.ceil(.4*this._maxEntries)),this.clear()};function e(t,i,n){if(!n)return i.indexOf(t);for(var r=0;r<i.length;r++)if(n(t,i[r]))return r;return-1}function a(t,i){h(t,0,t.children.length,i,t)}function h(t,i,n,r,e){e||(e=p(null)),e.minX=1/0,e.minY=1/0,e.maxX=-1/0,e.maxY=-1/0;for(var a=i;a<n;a++){var h=t.children[a];o(e,t.leaf?r(h):h)}return e}function o(t,i){return t.minX=Math.min(t.minX,i.minX),t.minY=Math.min(t.minY,i.minY),t.maxX=Math.max(t.maxX,i.maxX),t.maxY=Math.max(t.maxY,i.maxY),t}function s(t,i){return t.minX-i.minX}function l(t,i){return t.minY-i.minY}function f(t){return(t.maxX-t.minX)*(t.maxY-t.minY)}function u(t){return t.maxX-t.minX+(t.maxY-t.minY)}function m(t,i){return t.minX<=i.minX&&t.minY<=i.minY&&i.maxX<=t.maxX&&i.maxY<=t.maxY}function c(t,i){return i.minX<=t.maxX&&i.minY<=t.maxY&&i.maxX>=t.minX&&i.maxY>=t.minY}function p(t){return{children:t,height:1,leaf:!0,minX:1/0,minY:1/0,maxX:-1/0,maxY:-1/0}}function d(i,n,r,e,a){for(var h=[n,r];h.length;)if(!((r=h.pop())-(n=h.pop())<=e)){var o=n+Math.ceil((r-n)/e/2)*e;t(i,o,n,r,a),h.push(n,o,o,r)}}return r.prototype.all=function(){return this._all(this.data,[])},r.prototype.search=function(t){var i=this.data,n=[];if(!c(t,i))return n;for(var r=this.toBBox,e=[];i;){for(var a=0;a<i.children.length;a++){var h=i.children[a],o=i.leaf?r(h):h;c(t,o)&&(i.leaf?n.push(h):m(t,o)?this._all(h,n):e.push(h))}i=e.pop()}return n},r.prototype.collides=function(t){var i=this.data;if(!c(t,i))return!1;for(var n=[];i;){for(var r=0;r<i.children.length;r++){var e=i.children[r],a=i.leaf?this.toBBox(e):e;if(c(t,a)){if(i.leaf||m(t,a))return!0;n.push(e)}}i=n.pop()}return!1},r.prototype.load=function(t){if(!t||!t.length)return this;if(t.length<this._minEntries){for(var i=0;i<t.length;i++)this.insert(t[i]);return this}var n=this._build(t.slice(),0,t.length-1,0);if(this.data.children.length)if(this.data.height===n.height)this._splitRoot(this.data,n);else{if(this.data.height<n.height){var r=this.data;this.data=n,n=r}this._insert(n,this.data.height-n.height-1,!0)}else this.data=n;return this},r.prototype.insert=function(t){return t&&this._insert(t,this.data.height-1),this},r.prototype.clear=function(){return this.data=p([]),this},r.prototype.remove=function(t,i){if(!t)return this;for(var n,r,a,h=this.data,o=this.toBBox(t),s=[],l=[];h||s.length;){if(h||(h=s.pop(),r=s[s.length-1],n=l.pop(),a=!0),h.leaf){var f=e(t,h.children,i);if(-1!==f)return h.children.splice(f,1),s.push(h),this._condense(s),this}a||h.leaf||!m(h,o)?r?(n++,h=r.children[n],a=!1):h=null:(s.push(h),l.push(n),n=0,r=h,h=h.children[0])}return this},r.prototype.toBBox=function(t){return t},r.prototype.compareMinX=function(t,i){return t.minX-i.minX},r.prototype.compareMinY=function(t,i){return t.minY-i.minY},r.prototype.toJSON=function(){return this.data},r.prototype.fromJSON=function(t){return this.data=t,this},r.prototype._all=function(t,i){for(var n=[];t;)t.leaf?i.push.apply(i,t.children):n.push.apply(n,t.children),t=n.pop();return i},r.prototype._build=function(t,i,n,r){var e,h=n-i+1,o=this._maxEntries;if(h<=o)return a(e=p(t.slice(i,n+1)),this.toBBox),e;r||(r=Math.ceil(Math.log(h)/Math.log(o)),o=Math.ceil(h/Math.pow(o,r-1))),(e=p([])).leaf=!1,e.height=r;var s=Math.ceil(h/o),l=s*Math.ceil(Math.sqrt(o));d(t,i,n,l,this.compareMinX);for(var f=i;f<=n;f+=l){var u=Math.min(f+l-1,n);d(t,f,u,s,this.compareMinY);for(var m=f;m<=u;m+=s){var c=Math.min(m+s-1,u);e.children.push(this._build(t,m,c,r-1))}}return a(e,this.toBBox),e},r.prototype._chooseSubtree=function(t,i,n,r){for(;r.push(i),!i.leaf&&r.length-1!==n;){for(var e=1/0,a=1/0,h=void 0,o=0;o<i.children.length;o++){var s=i.children[o],l=f(s),u=(m=t,c=s,(Math.max(c.maxX,m.maxX)-Math.min(c.minX,m.minX))*(Math.max(c.maxY,m.maxY)-Math.min(c.minY,m.minY))-l);u<a?(a=u,e=l<e?l:e,h=s):u===a&&l<e&&(e=l,h=s)}i=h||i.children[0]}var m,c;return i},r.prototype._insert=function(t,i,n){var r=n?t:this.toBBox(t),e=[],a=this._chooseSubtree(r,this.data,i,e);for(a.children.push(t),o(a,r);i>=0&&e[i].children.length>this._maxEntries;)this._split(e,i),i--;this._adjustParentBBoxes(r,e,i)},r.prototype._split=function(t,i){var n=t[i],r=n.children.length,e=this._minEntries;this._chooseSplitAxis(n,e,r);var h=this._chooseSplitIndex(n,e,r),o=p(n.children.splice(h,n.children.length-h));o.height=n.height,o.leaf=n.leaf,a(n,this.toBBox),a(o,this.toBBox),i?t[i-1].children.push(o):this._splitRoot(n,o)},r.prototype._splitRoot=function(t,i){this.data=p([t,i]),this.data.height=t.height+1,this.data.leaf=!1,a(this.data,this.toBBox)},r.prototype._chooseSplitIndex=function(t,i,n){for(var r,e,a,o,s,l,u,m=1/0,c=1/0,p=i;p<=n-i;p++){var d=h(t,0,p,this.toBBox),x=h(t,p,n,this.toBBox),v=(e=d,a=x,o=void 0,s=void 0,l=void 0,u=void 0,o=Math.max(e.minX,a.minX),s=Math.max(e.minY,a.minY),l=Math.min(e.maxX,a.maxX),u=Math.min(e.maxY,a.maxY),Math.max(0,l-o)*Math.max(0,u-s)),M=f(d)+f(x);v<m?(m=v,r=p,c=M<c?M:c):v===m&&M<c&&(c=M,r=p)}return r||n-i},r.prototype._chooseSplitAxis=function(t,i,n){var r=t.leaf?this.compareMinX:s,e=t.leaf?this.compareMinY:l;this._allDistMargin(t,i,n,r)<this._allDistMargin(t,i,n,e)&&t.children.sort(r)},r.prototype._allDistMargin=function(t,i,n,r){t.children.sort(r);for(var e=this.toBBox,a=h(t,0,i,e),s=h(t,n-i,n,e),l=u(a)+u(s),f=i;f<n-i;f++){var m=t.children[f];o(a,t.leaf?e(m):m),l+=u(a)}for(var c=n-i-1;c>=i;c--){var p=t.children[c];o(s,t.leaf?e(p):p),l+=u(s)}return l},r.prototype._adjustParentBBoxes=function(t,i,n){for(var r=n;r>=0;r--)o(i[r],t)},r.prototype._condense=function(t){for(var i=t.length-1,n=void 0;i>=0;i--)0===t[i].children.length?i>0?(n=t[i-1].children).splice(n.indexOf(t[i]),1):this.clear():a(t[i],this.toBBox)},r});\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    ColorUtils,\n    getPropertyValue,\n    isPoiTechnique,\n    LineMarkerTechnique,\n    MapEnv,\n    PlacementToken,\n    PoiTechnique,\n    TextStyleDefinition,\n    TextTechnique,\n    Theme\n} from \"@here/harp-datasource-protocol\";\nimport {\n    DefaultTextStyle,\n    FontStyle,\n    FontUnit,\n    FontVariant,\n    HorizontalAlignment,\n    HorizontalPlacement,\n    resolvePlacementAndAlignment,\n    TextCanvas,\n    TextLayoutParameters,\n    TextLayoutStyle,\n    TextPlacement,\n    TextPlacements,\n    TextRenderParameters,\n    TextRenderStyle,\n    VerticalAlignment,\n    VerticalPlacement,\n    WrappingMode\n} from \"@here/harp-text-canvas\";\nimport { getOptionValue, LoggerManager } from \"@here/harp-utils\";\nimport { ColorCache } from \"../ColorCache\";\nimport { evaluateColorProperty } from \"../DecodedTileHelpers\";\nimport { PoiRenderer } from \"../poi/PoiRenderer\";\nimport { Tile } from \"../Tile\";\nimport { TextCanvasRenderer } from \"./TextCanvasRenderer\";\n\nconst logger = LoggerManager.instance.create(\"TextStyleCache\");\n\nconst defaultTextRenderStyle = new TextRenderStyle({\n    fontSize: {\n        unit: FontUnit.Pixel,\n        size: 32,\n        backgroundSize: 8\n    },\n    color: ColorCache.instance.getColor(\"#6d7477\"),\n    opacity: 1.0,\n    backgroundColor: ColorCache.instance.getColor(\"#f7fbfd\"),\n    backgroundOpacity: 0.5\n});\n\n// By default text layout provides no options for placement, but single alignment.\nconst defaultTextLayoutStyle = new TextLayoutStyle({\n    verticalAlignment: VerticalAlignment.Center,\n    horizontalAlignment: HorizontalAlignment.Center,\n    placements: []\n});\n\nconst DEFAULT_STYLE_NAME = \"default\";\n\n/**\n * [[TextElementsRenderer]] representation of a [[Theme]]'s TextStyle.\n */\nexport interface TextElementStyle {\n    name: string;\n    fontCatalog: string;\n    renderParams: TextRenderParameters;\n    layoutParams: TextLayoutParameters;\n    textCanvas?: TextCanvas;\n    poiRenderer?: PoiRenderer;\n}\n\nexport class TextStyleCache {\n    private m_textStyles: Map<string, TextElementStyle> = new Map();\n    private m_defaultStyle: TextElementStyle = {\n        name: DEFAULT_STYLE_NAME,\n        fontCatalog: \"\",\n        renderParams: defaultTextRenderStyle.params,\n        layoutParams: defaultTextLayoutStyle.params\n    };\n\n    constructor(private m_theme: Theme) {}\n\n    initializeDefaultTextElementStyle(defaultFontCatalogName: string) {\n        if (this.m_theme.textStyles === undefined) {\n            this.m_theme.textStyles = [];\n        }\n        const styles = this.m_theme.textStyles;\n\n        const themedDefaultStyle = styles.find(style => style.name === DEFAULT_STYLE_NAME);\n        if (themedDefaultStyle !== undefined) {\n            this.m_defaultStyle = this.createTextElementStyle(\n                themedDefaultStyle,\n                DEFAULT_STYLE_NAME\n            );\n        } else if (this.m_theme.defaultTextStyle !== undefined) {\n            this.m_defaultStyle = this.createTextElementStyle(\n                this.m_theme.defaultTextStyle,\n                DEFAULT_STYLE_NAME\n            );\n        } else if (styles.length > 0) {\n            this.m_defaultStyle = this.createTextElementStyle(styles[0], DEFAULT_STYLE_NAME);\n        }\n        this.m_defaultStyle.fontCatalog = defaultFontCatalogName;\n    }\n\n    initializeTextElementStyles(\n        defaultPoiRenderer: PoiRenderer,\n        defaultTextCanvas: TextCanvas,\n        textRenderers: TextCanvasRenderer[]\n    ) {\n        // Initialize default text style.\n        if (this.m_defaultStyle.fontCatalog !== undefined) {\n            const styledTextRenderer = textRenderers.find(\n                textRenderer => textRenderer.fontCatalog === this.m_defaultStyle.fontCatalog\n            );\n            this.m_defaultStyle.textCanvas =\n                styledTextRenderer !== undefined ? styledTextRenderer.textCanvas : undefined;\n            this.m_defaultStyle.poiRenderer =\n                styledTextRenderer !== undefined ? styledTextRenderer.poiRenderer : undefined;\n        }\n        if (this.m_defaultStyle.textCanvas === undefined) {\n            if (this.m_defaultStyle.fontCatalog !== undefined) {\n                logger.warn(\n                    `FontCatalog '${this.m_defaultStyle.fontCatalog}' set in TextStyle '${\n                        this.m_defaultStyle.name\n                    }' not found, using default fontCatalog(${\n                        defaultTextCanvas!.fontCatalog.name\n                    }).`\n                );\n            }\n            this.m_defaultStyle.textCanvas = defaultTextCanvas;\n            this.m_defaultStyle.poiRenderer = defaultPoiRenderer;\n        }\n\n        // Initialize theme text styles.\n        this.m_theme.textStyles!.forEach(element => {\n            this.m_textStyles.set(\n                element.name!,\n                this.createTextElementStyle(element, element.name!)\n            );\n        });\n        // tslint:disable-next-line:no-unused-variable\n        for (const [, style] of this.m_textStyles) {\n            if (style.textCanvas === undefined) {\n                if (style.fontCatalog !== undefined) {\n                    const styledTextRenderer = textRenderers.find(\n                        textRenderer => textRenderer.fontCatalog === style.fontCatalog\n                    );\n                    style.textCanvas =\n                        styledTextRenderer !== undefined\n                            ? styledTextRenderer.textCanvas\n                            : undefined;\n                    style.poiRenderer =\n                        styledTextRenderer !== undefined\n                            ? styledTextRenderer.poiRenderer\n                            : undefined;\n                }\n                if (style.textCanvas === undefined) {\n                    if (style.fontCatalog !== undefined) {\n                        logger.warn(\n                            `FontCatalog '${style.fontCatalog}' set in TextStyle '${\n                                style.name\n                            }' not found, using default fontCatalog(${\n                                defaultTextCanvas!.fontCatalog.name\n                            }).`\n                        );\n                    }\n                    style.textCanvas = defaultTextCanvas;\n                    style.poiRenderer = defaultPoiRenderer;\n                }\n            }\n        }\n    }\n\n    /**\n     * Retrieves a [[TextElementStyle]] for [[Theme]]'s [[TextStyle]] id.\n     */\n    getTextElementStyle(styleId?: string): TextElementStyle {\n        let result;\n        if (styleId === undefined) {\n            result = this.m_defaultStyle;\n        } else {\n            result = this.m_textStyles.get(styleId);\n            if (result === undefined) {\n                result = this.m_defaultStyle;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * Gets the appropriate [[TextRenderStyle]] to use for a label. Depends heavily on the label's\n     * [[Technique]] and the current zoomLevel.\n     */\n    createRenderStyle(\n        tile: Tile,\n        technique: TextTechnique | PoiTechnique | LineMarkerTechnique\n    ): TextRenderStyle {\n        const mapView = tile.mapView;\n        const zoomLevel = mapView.zoomLevel;\n        const discreteZoomLevel = Math.floor(zoomLevel);\n\n        // Environment with $zoom forced to integer to achieve stable interpolated values.\n        const discreteZoomEnv = new MapEnv({ $zoom: discreteZoomLevel }, mapView.env);\n\n        const defaultRenderParams = this.m_defaultStyle.renderParams;\n\n        // Sets opacity to 1.0 if default and technique attribute are undefined.\n        const defaultOpacity = getOptionValue(defaultRenderParams.opacity, 1.0);\n        // Interpolate opacity but only on discreet zoom levels (step interpolation).\n        let opacity = getPropertyValue(\n            getOptionValue(technique.opacity, defaultOpacity),\n            discreteZoomEnv\n        );\n\n        let color: THREE.Color | undefined;\n        // Store color (RGB) in cache and multiply opacity value with the color alpha channel.\n        if (technique.color !== undefined) {\n            let hexColor = evaluateColorProperty(technique.color, discreteZoomEnv);\n            if (hexColor !== undefined) {\n                if (ColorUtils.hasAlphaInHex(hexColor)) {\n                    const alpha = ColorUtils.getAlphaFromHex(hexColor);\n                    opacity = opacity * alpha;\n                    hexColor = ColorUtils.removeAlphaFromHex(hexColor);\n                }\n                color = ColorCache.instance.getColor(hexColor);\n            }\n        }\n\n        // Sets background size to 0.0 if default and technique attribute is undefined.\n        const defaultBackgroundSize = getOptionValue(\n            defaultRenderParams.fontSize!.backgroundSize,\n            0\n        );\n        const backgroundSize = getPropertyValue(\n            getOptionValue(technique.backgroundSize, defaultBackgroundSize),\n            discreteZoomEnv\n        );\n\n        const hasBackgroundDefined =\n            technique.backgroundColor !== undefined &&\n            technique.backgroundSize !== undefined &&\n            backgroundSize > 0;\n\n        // Sets background opacity to 1.0 if default and technique value is undefined while\n        // background size and color is specified, otherwise set value in default render\n        // params or 0.0 if neither set. Makes label opaque when backgroundColor and\n        // backgroundSize are set.\n        const defaultBackgroundOpacity = getOptionValue(defaultRenderParams.backgroundOpacity, 0.0);\n        let backgroundOpacity = getPropertyValue(\n            getOptionValue(\n                technique.backgroundOpacity,\n                hasBackgroundDefined ? 1.0 : defaultBackgroundOpacity\n            ),\n            discreteZoomEnv\n        );\n\n        let backgroundColor: THREE.Color | undefined;\n        // Store background color (RGB) in cache and multiply backgroundOpacity by its alpha.\n        if (technique.backgroundColor !== undefined) {\n            let hexBgColor = evaluateColorProperty(technique.backgroundColor, discreteZoomEnv);\n            if (hexBgColor !== undefined) {\n                if (ColorUtils.hasAlphaInHex(hexBgColor)) {\n                    const alpha = ColorUtils.getAlphaFromHex(hexBgColor);\n                    backgroundOpacity = backgroundOpacity * alpha;\n                    hexBgColor = ColorUtils.removeAlphaFromHex(hexBgColor);\n                }\n                backgroundColor = ColorCache.instance.getColor(hexBgColor);\n            }\n        }\n\n        const renderParams = {\n            fontName: getOptionValue(technique.fontName, defaultRenderParams.fontName),\n            fontSize: {\n                unit: FontUnit.Pixel,\n                size: getPropertyValue(\n                    getOptionValue(technique.size, defaultRenderParams.fontSize!.size),\n                    discreteZoomEnv\n                ),\n                backgroundSize\n            },\n            fontStyle:\n                technique.fontStyle === \"Regular\" ||\n                technique.fontStyle === \"Bold\" ||\n                technique.fontStyle === \"Italic\" ||\n                technique.fontStyle === \"BoldItalic\"\n                    ? FontStyle[technique.fontStyle]\n                    : defaultRenderParams.fontStyle,\n            fontVariant:\n                technique.fontVariant === \"Regular\" ||\n                technique.fontVariant === \"AllCaps\" ||\n                technique.fontVariant === \"SmallCaps\"\n                    ? FontVariant[technique.fontVariant]\n                    : defaultRenderParams.fontVariant,\n            rotation: getOptionValue(technique.rotation, defaultRenderParams.rotation),\n            color: getOptionValue(\n                color,\n                getOptionValue(defaultRenderParams.color, DefaultTextStyle.DEFAULT_COLOR)\n            ),\n            backgroundColor: getOptionValue(\n                backgroundColor,\n                getOptionValue(\n                    defaultRenderParams.backgroundColor,\n                    DefaultTextStyle.DEFAULT_BACKGROUND_COLOR\n                )\n            ),\n            opacity,\n            backgroundOpacity\n        };\n\n        const themeRenderParams = this.getTextElementStyle(technique.style).renderParams;\n        const renderStyle = new TextRenderStyle({\n            ...themeRenderParams,\n            ...renderParams\n        });\n\n        return renderStyle;\n    }\n\n    /**\n     * Create the appropriate [[TextLayoutStyle]] to use for a label. Depends heavily on the label's\n     * [[Technique]] and the current zoomLevel.\n     *\n     * @param tile The [[Tile]] to process.\n     * @param technique Label's technique.\n     */\n    createLayoutStyle(\n        tile: Tile,\n        technique: TextTechnique | PoiTechnique | LineMarkerTechnique\n    ): TextLayoutStyle {\n        const mapView = tile.mapView;\n        const floorZoomLevel = Math.floor(tile.mapView.zoomLevel);\n\n        const discreteZoomEnv = new MapEnv({ $zoom: floorZoomLevel }, mapView.env);\n\n        const defaultLayoutParams = this.m_defaultStyle.layoutParams;\n\n        const hAlignment = getPropertyValue(technique.hAlignment, discreteZoomEnv) as string | null;\n        const vAlignment = getPropertyValue(technique.vAlignment, discreteZoomEnv) as string | null;\n\n        // Text alternative placements are currently supported only for PoiTechnique.\n        const textPlacements = isPoiTechnique(technique)\n            ? (getPropertyValue((technique as PoiTechnique).placements, discreteZoomEnv) as\n                  | string\n                  | null)\n            : null;\n\n        const { horizontalAlignment, verticalAlignment, placements } = parseAlignmentAndPlacements(\n            hAlignment,\n            vAlignment,\n            textPlacements\n        );\n\n        const wrapping = getPropertyValue(technique.wrappingMode, discreteZoomEnv) as string | null;\n\n        const wrappingMode =\n            wrapping === \"None\" || wrapping === \"Character\" || wrapping === \"Word\"\n                ? WrappingMode[wrapping]\n                : defaultLayoutParams.wrappingMode;\n\n        const layoutParams = {\n            tracking:\n                getPropertyValue(technique.tracking, discreteZoomEnv) ??\n                defaultLayoutParams.tracking,\n            leading:\n                getPropertyValue(technique.leading, discreteZoomEnv) ?? defaultLayoutParams.leading,\n            maxLines:\n                getPropertyValue(technique.maxLines, discreteZoomEnv) ??\n                defaultLayoutParams.maxLines,\n            lineWidth:\n                getPropertyValue(technique.lineWidth, discreteZoomEnv) ??\n                defaultLayoutParams.lineWidth,\n            canvasRotation:\n                getPropertyValue(technique.canvasRotation, discreteZoomEnv) ??\n                defaultLayoutParams.canvasRotation,\n            lineRotation:\n                getPropertyValue(technique.lineRotation, discreteZoomEnv) ??\n                defaultLayoutParams.lineRotation,\n            wrappingMode,\n            horizontalAlignment,\n            verticalAlignment,\n            placements\n        };\n\n        const themeLayoutParams = this.getTextElementStyle(technique.style);\n        const layoutStyle = new TextLayoutStyle({\n            ...themeLayoutParams,\n            ...layoutParams\n        });\n\n        return layoutStyle;\n    }\n\n    private createTextElementStyle(\n        style: TextStyleDefinition,\n        styleName: string\n    ): TextElementStyle {\n        const { horizontalAlignment, verticalAlignment, placements } = parseAlignmentAndPlacements(\n            style.hAlignment,\n            style.vAlignment,\n            style.placements\n        );\n        return {\n            name: styleName,\n            fontCatalog: getOptionValue(style.fontCatalogName, this.m_defaultStyle.fontCatalog),\n            renderParams: {\n                fontName: style.fontName,\n                fontSize: {\n                    unit: FontUnit.Pixel,\n                    size: 32,\n                    backgroundSize: style.backgroundSize || 8\n                },\n                fontStyle:\n                    style.fontStyle === \"Regular\" ||\n                    style.fontStyle === \"Bold\" ||\n                    style.fontStyle === \"Italic\" ||\n                    style.fontStyle === \"BoldItalic\"\n                        ? FontStyle[style.fontStyle]\n                        : undefined,\n                fontVariant:\n                    style.fontVariant === \"Regular\" ||\n                    style.fontVariant === \"AllCaps\" ||\n                    style.fontVariant === \"SmallCaps\"\n                        ? FontVariant[style.fontVariant]\n                        : undefined,\n                rotation: style.rotation,\n                color:\n                    style.color !== undefined\n                        ? ColorCache.instance.getColor(style.color)\n                        : undefined,\n                backgroundColor:\n                    style.backgroundColor !== undefined\n                        ? ColorCache.instance.getColor(style.backgroundColor)\n                        : undefined,\n                opacity: style.opacity,\n                backgroundOpacity: style.backgroundOpacity\n            },\n            layoutParams: {\n                tracking: style.tracking,\n                leading: style.leading,\n                maxLines: style.maxLines,\n                lineWidth: style.lineWidth,\n                canvasRotation: style.canvasRotation,\n                lineRotation: style.lineRotation,\n                wrappingMode:\n                    style.wrappingMode === \"None\" ||\n                    style.wrappingMode === \"Character\" ||\n                    style.wrappingMode === \"Word\"\n                        ? WrappingMode[style.wrappingMode]\n                        : WrappingMode.Word,\n                verticalAlignment,\n                horizontalAlignment,\n                placements\n            }\n        };\n    }\n}\n\nfunction parseAlignmentAndPlacements(\n    hAlignment: string | null | undefined,\n    vAlignment: string | null | undefined,\n    placementsTokens: string | null | undefined\n): {\n    horizontalAlignment: HorizontalAlignment;\n    verticalAlignment: VerticalAlignment;\n    placements: TextPlacements;\n} {\n    // Currently supported only for PoiTechnique.\n    const placements: TextPlacements | undefined = placementsTokens\n        ? parseTechniquePlacements(placementsTokens)\n        : undefined;\n\n    return resolvePlacementAndAlignment(\n        parseTechniqueHAlignValue(hAlignment),\n        parseTechniqueVAlignValue(vAlignment),\n        placements\n    );\n}\n\nfunction parseTechniqueHAlignValue(hAlignment: string | undefined | null): HorizontalAlignment {\n    return hAlignment === \"Left\" || hAlignment === \"Center\" || hAlignment === \"Right\"\n        ? HorizontalAlignment[hAlignment]\n        : defaultTextLayoutStyle.horizontalAlignment;\n}\n\nfunction parseTechniqueVAlignValue(vAlignment: string | undefined | null): VerticalAlignment {\n    return vAlignment === \"Above\" || vAlignment === \"Center\" || vAlignment === \"Below\"\n        ? VerticalAlignment[vAlignment]\n        : defaultTextLayoutStyle.verticalAlignment;\n}\n\nfunction parseTechniquePlacements(placementsString: string | undefined | null): TextPlacements {\n    // Parse placement properties if available.\n    const placements: TextPlacements = [];\n    const placementsTokens = placementsString\n        ? placementsString!\n              .toUpperCase()\n              .replace(\" \", \"\")\n              .split(\",\")\n        : [];\n    placementsTokens.forEach(p => {\n        const val = parseTechniquePlacementValue(p);\n        if (val !== undefined) {\n            placements.push(val);\n        }\n    });\n    return placements;\n}\n\nfunction parseTechniquePlacementValue(p: string): TextPlacement | undefined {\n    // May be only literal of single or two characters.\n    if (p.length < 1 || p.length > 2) {\n        return undefined;\n    }\n    // If no value is specified for vertical/horizontal placement it is by default center.\n    const textPlacement: TextPlacement = {\n        h: HorizontalPlacement.Center,\n        v: VerticalPlacement.Center\n    };\n    // Firstly try to find vertical placement.\n    let modifier = p.charAt(0);\n    let found: boolean = true;\n    switch (modifier) {\n        // Top / north\n        case PlacementToken.Top:\n        case PlacementToken.North:\n            textPlacement.v = VerticalPlacement.Top;\n            break;\n        // Bottom / south\n        case PlacementToken.Bottom:\n        case PlacementToken.South:\n            textPlacement.v = VerticalPlacement.Bottom;\n            break;\n        default:\n            found = false;\n            if (p.length === 2) {\n                // For 2 characters tag both vertical/horizontal should be defined.\n                return undefined;\n            }\n    }\n    if (found && p.length === 1) {\n        return textPlacement;\n    }\n    modifier = p.length === 1 ? p.charAt(0) : p.charAt(1);\n    switch (modifier) {\n        // Right / east\n        case PlacementToken.Right:\n        case PlacementToken.East:\n            textPlacement.h = HorizontalPlacement.Right;\n            break;\n        // Left / west\n        case PlacementToken.Left:\n        case PlacementToken.West:\n            textPlacement.h = HorizontalPlacement.Left;\n            break;\n        default:\n            // Either for single character or multi-char tag, we must surrender.\n            return undefined;\n    }\n    return textPlacement;\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\n/**\n * A mesh that can store multiple versions of a geometry with differents level of detail.\n * The rendered level of detail can be adapted during runtime.\n * @internal\n * @hidden\n */\nexport class LodMesh extends THREE.Mesh {\n    private m_geometries: Array<THREE.Geometry | THREE.BufferGeometry> | undefined;\n\n    /**\n     * Creates a [[LodMesh]] with given geometries and materials\n     * @param geometries A list of geometries with different levels of detail\n     * @param material Material for the mesh\n     */\n    constructor(\n        geometries?: Array<THREE.Geometry | THREE.BufferGeometry>,\n        material?: THREE.Material | THREE.Material[] | undefined\n    ) {\n        super(undefined, material);\n\n        this.geometries = geometries;\n    }\n\n    /**\n     * Update geometries of mesh\n     */\n    set geometries(geometries: Array<THREE.Geometry | THREE.BufferGeometry> | undefined) {\n        // dispose previous geometries\n        if (this.m_geometries !== geometries) {\n            this.disposeGeometries();\n        }\n\n        this.m_geometries = geometries;\n        if (this.geometries && this.m_geometries!.length > 0) {\n            this.geometry = this.m_geometries![0];\n        }\n    }\n\n    /**\n     * Get geometries of mesh\n     */\n    get geometries() {\n        return this.m_geometries;\n    }\n\n    /**\n     * Change the rendered level of detail of the mesh\n     * @param level The level of detail (index of the geometry in the list).\n     */\n    setLevelOfDetail(level: number): void {\n        if (!this.m_geometries || this.m_geometries.length === 0) {\n            return;\n        }\n        level = THREE.MathUtils.clamp(level, 0, this.m_geometries.length - 1);\n\n        this.geometry = this.m_geometries[level];\n    }\n\n    /**\n     * Dispose all geometries of mesh\n     */\n    private disposeGeometries(): void {\n        if (this.m_geometries) {\n            for (const geometry of this.m_geometries!) {\n                geometry.dispose();\n            }\n        }\n        this.geometry.dispose();\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Vector3 } from \"three\";\n\nimport { MapView } from \"./MapView\";\nimport { MapViewUtils } from \"./Utils\";\n\n/**\n * The default value for camera movement throttling, in milliseconds.\n */\nconst DEFAULT_THROTTLING_TIMEOUT = 300;\n\n/**\n * The `CameraMovementDetector` class checks for changes in camera position and orientation, to\n * detect continuous movements without the animation mode activated in [[MapView]]. If the\n * interaction is not continuous enough, you can use a throttling timer to reduce the number of\n * callbacks.\n */\nexport class CameraMovementDetector {\n    private m_lastAttitude?: MapViewUtils.Attitude;\n    private m_lastCameraPos = new Vector3();\n    private m_newCameraPos = new Vector3();\n    private m_cameraMovedLastFrame: boolean | undefined;\n    private m_throttlingTimerId?: number = undefined;\n    private m_movementDetectorDeadline: number = 0;\n\n    /**\n     * Initializes the detector with timeout value and callbacks. [[MapView]] also provides\n     * events for client code to be notified when these cues occur.\n     *\n     * @param m_throttlingTimeout The delay, in milliseconds, between the last user interaction\n     * detected and the call to `m_movementFinishedFunc`; the default is `300`.\n     * @param m_movementStartedFunc Callback function, called when the user starts interacting.\n     * @param m_movementFinishedFunc Callback function, called when the user stops interacting.\n     */\n    constructor(\n        private m_throttlingTimeout: number | undefined,\n        private m_movementStartedFunc: (() => void) | undefined,\n        private m_movementFinishedFunc: (() => void) | undefined\n    ) {\n        if (this.m_throttlingTimeout === undefined) {\n            this.m_throttlingTimeout = DEFAULT_THROTTLING_TIMEOUT;\n        }\n    }\n\n    /**\n     * Checks if the camera has moved since the last time it was checked. The\n     * `m_movementStartedFunc` is called when a movement starts. If no movement\n     * is detected, a timer for `m_movementFinishedFunc` starts.\n     *\n     * @param mapView [[Mapview]]'s position and camera are checked for modifications.\n     */\n    checkCameraMoved(mapView: MapView, now: number): boolean {\n        const newAttitude = MapViewUtils.extractAttitude(mapView, mapView.camera);\n        const newCameraPos = mapView.camera.getWorldPosition(this.m_newCameraPos);\n\n        if (this.m_lastAttitude === undefined) {\n            this.m_lastCameraPos.copy(newCameraPos);\n            this.m_lastAttitude = newAttitude;\n            return false;\n        }\n        const cameraMoved =\n            !this.m_lastCameraPos.equals(newCameraPos) ||\n            newAttitude.yaw !== this.m_lastAttitude.yaw ||\n            newAttitude.pitch !== this.m_lastAttitude.pitch ||\n            newAttitude.roll !== this.m_lastAttitude.roll;\n\n        if (cameraMoved) {\n            this.m_lastCameraPos.copy(newCameraPos);\n            this.m_lastAttitude = newAttitude;\n        }\n\n        if (cameraMoved !== this.m_cameraMovedLastFrame) {\n            if (cameraMoved) {\n                this.movementStarted();\n            }\n            this.m_cameraMovedLastFrame = cameraMoved;\n        }\n        if (cameraMoved) {\n            // Start timer\n            this.m_movementDetectorDeadline = now + this.m_throttlingTimeout!;\n            this.startMovementFinishedTimer(now);\n        }\n\n        return this.m_cameraMovedLastFrame;\n    }\n\n    /**\n     * Reset the saved camera position. Next time checkCameraMoved is called, it will return\n     * `false`.\n     */\n    clear(mapView: MapView) {\n        const newCameraPos = mapView.camera.getWorldPosition(this.m_newCameraPos);\n        this.m_lastCameraPos.set(newCameraPos.x, newCameraPos.y, newCameraPos.z);\n\n        const newAttitude = MapViewUtils.extractAttitude(mapView, mapView.camera);\n        this.m_lastAttitude = newAttitude;\n    }\n\n    /**\n     * Force change of camera position. Next time checkCameraMoved is called, it will return `true`.\n     */\n    forceMoved() {\n        this.m_lastCameraPos.set(Number.NaN, Number.NaN, Number.NaN);\n    }\n\n    /**\n     * Returns `true` if the camera of this [[MapView]] is currently moving. In this case the\n     * `m_movementFinishedFunc` is waiting to be called after the throttling timer runs out.\n     */\n    get cameraIsMoving() {\n        return this.m_throttlingTimerId !== undefined;\n    }\n\n    /**\n     * Disposes resources and kills the throttling timer.\n     */\n    dispose() {\n        this.removeMovementFinishedTimer();\n        this.m_movementStartedFunc = undefined;\n        this.m_movementFinishedFunc = undefined;\n    }\n\n    /**\n     * Returns `true` if the camera has moved in the last frame.\n     */\n    get cameraMovedLastFrame(): boolean {\n        return this.m_cameraMovedLastFrame === true;\n    }\n\n    private movementStarted() {\n        if (this.m_movementStartedFunc !== undefined) {\n            this.m_movementStartedFunc();\n        }\n    }\n\n    private movementFinished() {\n        this.removeMovementFinishedTimer();\n        if (this.m_movementFinishedFunc !== undefined) {\n            this.m_movementFinishedFunc();\n        }\n    }\n\n    private startMovementFinishedTimer(now: number) {\n        if (this.m_throttlingTimerId === undefined) {\n            const remainingTime = Math.max(0, this.m_movementDetectorDeadline - now);\n            this.m_throttlingTimerId = setTimeout(this.onDeadlineTimer, remainingTime) as any;\n        }\n    }\n\n    private onDeadlineTimer = () => {\n        this.m_throttlingTimerId = undefined;\n        const now = performance.now();\n        if (now >= this.m_movementDetectorDeadline) {\n            this.movementFinished();\n        } else {\n            this.startMovementFinishedTimer(now);\n        }\n    };\n\n    private removeMovementFinishedTimer() {\n        if (this.m_throttlingTimerId !== undefined) {\n            clearTimeout(this.m_throttlingTimerId);\n            this.m_throttlingTimerId = undefined;\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport { IPassManager } from \"./IPassManager\";\nexport {\n    IMapAntialiasSettings,\n    IMapRenderingManager,\n    MapRenderingManager\n} from \"./MapRenderingManager\";\nexport { IPass, Pass } from \"./Pass\";\nexport { MSAARenderPass, MSAASampling } from \"./MSAARenderPass\";\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { CopyShader, MSAAMaterial } from \"@here/harp-materials\";\nimport * as THREE from \"three\";\n\nimport { Pass } from \"./Pass\";\n\n/**\n * This enum represents the sampling level to apply to a [[MSAARenderPass]] instance. At level 0,\n * only one sample is performed, which is like disabling the MSAA pass.\n */\nexport enum MSAASampling {\n    \"Level_0\",\n    \"Level_1\",\n    \"Level_2\",\n    \"Level_3\",\n    \"Level_4\",\n    \"Level_5\"\n}\n\n/**\n * [[MapView]]'s MSAA implementation. MSAA stands for Multi Sampling Anti-Aliasing, and its concept\n * is to provide a rendering engine with additional color values for each pixel, so they can include\n * the missing bits between them on a screen. WebGL already comes with a native MSAA implementation\n * with four samples. Because of its native nature, it is more efficient and one may not want to use\n * MapView's MSAA implementation when these four samples are satisfying. However in some situations\n * they are not: on low devices, MSAA can impact the framerate and we may desire to reduce the\n * number of samples at runtime. On the other hand, when the interaction stops, the engine also\n * stops rendering the map, and because a map relies on many line-like patterns, aliasing can then\n * turn very noticeable. In such static renders, the number of samples could be dramatically\n * increased on a last frame to render.\n */\nexport class MSAARenderPass extends Pass {\n    /**\n     * The sampling level determines the number of samples that will be performed per frame.\n     * Renders will happen `2 ^ samplingLevel` time(s). `samplingLevel` stands between `0` and `5`.\n     * Therefore there can be between 1 and 32 samples.\n     *\n     * @default `SamplingLevel.Level_1`\n     */\n    samplingLevel: MSAASampling = MSAASampling.Level_1;\n\n    private m_renderTarget: THREE.WebGLRenderTarget | null = null;\n    private readonly m_localCamera: THREE.OrthographicCamera = new THREE.OrthographicCamera(\n        -1,\n        1,\n        1,\n        -1,\n        0,\n        1\n    );\n    private readonly m_quadScene: THREE.Scene = new THREE.Scene();\n    private readonly m_quadUniforms: { [uniformName: string]: THREE.IUniform } =\n        CopyShader.uniforms;\n    private readonly m_quadMaterial: THREE.ShaderMaterial = new MSAAMaterial(this.m_quadUniforms);\n    private readonly m_quad: THREE.Mesh = new THREE.Mesh(\n        new THREE.PlaneBufferGeometry(2, 2),\n        this.m_quadMaterial\n    );\n\n    /**\n     * The constructor for `MSAARenderPass`. It builds an internal scene with a camera looking at a\n     * quad.\n     *\n     * @param m_scene The scene to render.\n     * @param m_camera The camera to render the scene through.\n     */\n    constructor() {\n        super();\n        this.m_quad.frustumCulled = false;\n        this.m_quadScene.add(this.m_quad);\n    }\n\n    /**\n     * Releases all used resources.\n     */\n    dispose() {\n        if (this.m_renderTarget !== null) {\n            this.m_renderTarget.dispose();\n            this.m_renderTarget = null;\n        }\n    }\n\n    /**\n     * The render function of `MSAARenderPass`. At each call of this method, and for each sample,\n     * the [[MapView]] camera provided in the `render` method is offset within the dimension of a\n     * pixel on screen. It then renders the whole scene with this offset to a local\n     * `WebGLRenderTarget` instance, via a `WebGLRenderer` instance. Finally the local camera\n     * created in the constructor shoots the quad and renders to the write buffer or to the frame\n     * buffer. The quad material's opacity is modified so the renders can accumulate in the\n     * targetted buffer.\n     *\n     * The number of samples can be modified at runtime through the enum [[SamplingLevel]].\n     *\n     * If there is no further pass, the [[Pass.renderToScreen]] flag can be set to `true` to\n     * output directly to the framebuffer.\n     *\n     * @param renderer The ThreeJS WebGLRenderer instance to render the scene with.\n     * @param scene The ThreeJS Scene instance to render the scene with.\n     * @param camera The ThreeJS Camera instance to render the scene with.\n     * @param writeBuffer A ThreeJS WebGLRenderTarget instance to render the scene to.\n     * @param readBuffer A ThreeJS WebGLRenderTarget instance to render the scene.\n     * @override\n     */\n    render(\n        renderer: THREE.WebGLRenderer,\n        scene: THREE.Scene,\n        camera: THREE.PerspectiveCamera | THREE.OrthographicCamera,\n        writeBuffer: THREE.WebGLRenderTarget | null,\n        readBuffer: THREE.WebGLRenderTarget\n    ) {\n        if (!this.enabled) {\n            return;\n        }\n\n        // Initiates the local render target with the read buffer's dimensions, if not available.\n        if (this.m_renderTarget === null) {\n            this.m_renderTarget = new THREE.WebGLRenderTarget(readBuffer.width, readBuffer.height, {\n                minFilter: THREE.LinearFilter,\n                magFilter: THREE.LinearFilter,\n                format: THREE.RGBAFormat\n            });\n            this.m_renderTarget.texture.name = \"MSAARenderPass.sample\";\n        }\n        this.m_quadUniforms.tDiffuse.value = this.m_renderTarget.texture;\n\n        const offsets = MSAARenderPass.OffsetVectors[this.samplingLevel];\n\n        const rendererClearColor = renderer.getClearColor();\n        const oldClearColor = rendererClearColor !== undefined ? rendererClearColor.getHex() : 0;\n\n        // The method `camera.setViewOffset` will be called in the next loop. In order to maintain\n        // its usability externally (like for the triple view in mosaic demo) we must cache the\n        // previous values stored in `camera.view` and re-assign them at the end of the pass.\n\n        // 1. Create a default cache object, with default dimensions the size of our read buffer.\n        const oldView = {\n            enabled: camera.view !== null && camera.view.enabled,\n            fullWidth: readBuffer.width,\n            fullHeight: readBuffer.height,\n            x: 0,\n            y: 0,\n            width: readBuffer.width,\n            height: readBuffer.height\n        };\n\n        // 2. If `camera.view` has been enabled previously, then `setViewOffset` has been called\n        // externally: copy the existing `camera.view` values in the cache. Override the cache\n        // object with the values provided externally.\n        if (oldView.enabled && camera.view !== null) {\n            oldView.fullWidth = camera.view.fullWidth;\n            oldView.fullHeight = camera.view.fullHeight;\n            oldView.x = camera.view.offsetX;\n            oldView.y = camera.view.offsetY;\n            oldView.width = camera.view.width;\n            oldView.height = camera.view.height;\n        }\n\n        const oldRenderTarget = renderer.getRenderTarget();\n        for (let i = 0; i < offsets.length; i++) {\n            // 4. Then for each sample, call `setViewOffset` with our object. This also updates the\n            // `camera.view` object in Three.js.\n            const offset = offsets[i];\n            camera.setViewOffset(\n                oldView.fullWidth,\n                oldView.fullHeight,\n                oldView.x + offset[0] / 16,\n                oldView.y + offset[1] / 16,\n                oldView.width,\n                oldView.height\n            );\n\n            // 5. Divide the opacity of the quad by the number of samples to accumulate on the\n            // target buffer, and reduce the impact of the offset on color to reduce banding. Then\n            // render.\n            const uniformCenteredDistribution = -0.5 + (i + 0.5) / offsets.length;\n            const sampleWeight = 1.0 / offsets.length + uniformCenteredDistribution / 32;\n\n            this.m_quadUniforms.opacity.value = sampleWeight;\n\n            renderer.setRenderTarget(this.m_renderTarget);\n            renderer.clear();\n            renderer.render(scene, camera);\n\n            // 6. Render the quad on top of the previous renders.\n\n            // NOTE: three.js doesn't like undefined as renderTarget, but works with `null`\n            renderer.setRenderTarget(this.renderToScreen ? null : writeBuffer);\n            if (i === 0) {\n                renderer.setClearColor(0x000000);\n                renderer.clear();\n            }\n            renderer.render(this.m_quadScene, this.m_localCamera);\n            if (i === 0 && rendererClearColor !== undefined) {\n                renderer.setClearColor(oldClearColor);\n            }\n        }\n        renderer.setRenderTarget(oldRenderTarget);\n\n        // 7. Restore `camera.view` as set externally (or not).\n        if (camera.view !== null) {\n            camera.view.enabled = oldView.enabled;\n            camera.view.offsetX = oldView.x;\n            camera.view.offsetY = oldView.y;\n        }\n    }\n\n    /**\n     * Resize the internal render target to match the new size specified.\n     *\n     * @param width New width to apply to the render target.\n     * @param height New height to apply to the render target.\n     * @override\n     */\n    setSize(width: number, height: number) {\n        if (this.m_renderTarget) {\n            this.m_renderTarget.setSize(width, height);\n        }\n    }\n\n    // tslint:disable:max-line-length\n    /**\n     * The list of offsets to apply to the camera, per sampling level, adapted from :\n     *\n     * @see https://msdn.microsoft.com/en-us/library/windows/desktop/ff476218%28v=vs.85%29.aspx?f=255&MSPPError=-2147217396\n     */\n    // tslint:enable:max-line-length\n    // tslint:disable-next-line:member-ordering\n    static readonly OffsetVectors: number[][][] = [\n        [[0, 0]],\n        [\n            [4, 4],\n            [-4, -4]\n        ],\n        [\n            [-2, -6],\n            [6, -2],\n            [-6, 2],\n            [2, 6]\n        ],\n        [\n            [1, -3],\n            [-1, 3],\n            [5, 1],\n            [-3, -5],\n            [-5, 5],\n            [-7, -1],\n            [3, 7],\n            [7, -7]\n        ],\n        [\n            [1, 1],\n            [-1, -3],\n            [-3, 2],\n            [4, -1],\n            [-5, -2],\n            [2, 5],\n            [5, 3],\n            [3, -5],\n            [-2, 6],\n            [0, -7],\n            [-4, -6],\n            [-6, 4],\n            [-8, 0],\n            [7, -4],\n            [6, 7],\n            [-7, -8]\n        ],\n        [\n            [-4, -7],\n            [-7, -5],\n            [-3, -5],\n            [-5, -4],\n            [-1, -4],\n            [-2, -2],\n            [-6, -1],\n            [-4, 0],\n            [-7, 1],\n            [-1, 2],\n            [-6, 3],\n            [-3, 3],\n            [-7, 6],\n            [-3, 6],\n            [-5, 7],\n            [-1, 7],\n            [5, -7],\n            [1, -6],\n            [6, -5],\n            [4, -4],\n            [2, -3],\n            [7, -2],\n            [1, -1],\n            [4, -1],\n            [2, 1],\n            [6, 2],\n            [0, 4],\n            [4, 4],\n            [2, 5],\n            [7, 5],\n            [5, 6],\n            [3, 7]\n        ]\n    ];\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { RequestController, WorkerServiceProtocol } from \"@here/harp-datasource-protocol\";\nimport {\n    getOptionValue,\n    IWorkerChannelMessage,\n    LoggerManager,\n    LogLevel,\n    WORKERCHANNEL_MSG_TYPE\n} from \"@here/harp-utils\";\n\nimport { WorkerLoader } from \"./workers/WorkerLoader\";\n\nimport * as THREE from \"three\";\n\nconst logger = LoggerManager.instance.create(\"ConcurrentWorkerSet\");\n\nexport function isLoggingMessage(message: IWorkerChannelMessage): message is IWorkerChannelMessage {\n    return message && typeof message.level === \"number\" && message.type === WORKERCHANNEL_MSG_TYPE;\n}\n\ninterface ReadyPromise {\n    count: number;\n    promise?: Promise<void>;\n    resolve: () => void;\n    reject: (reason: any) => void;\n    error?: any;\n}\n\ninterface RequestEntry {\n    promise: Promise<any>;\n    resolver: (error?: Error, response?: object) => void;\n}\n\nexport interface ConcurrentWorkerSetOptions {\n    /**\n     * The URL of the script for each worker to start.\n     */\n    scriptUrl: string;\n\n    /**\n     * The number of Web Workers for processing data.\n     *\n     * Defaults to CLAMP(`navigator.hardwareConcurrency` - 1, 1, 4) or [[DEFAULT_WORKER_COUNT]].\n     */\n    workerCount?: number;\n\n    /**\n     * Timeout in milliseconds, in which each worker should set initial message.\n     *\n     * @default 10 seconds, see [[DEFAULT_WORKER_INITIALIZATION_TIMEOUT]]\n     */\n    workerConnectionTimeout?: number;\n}\n\n/**\n * Interface for an item in the started worker list queue.\n */\ninterface WorkerEntry {\n    worker: Worker;\n    listener: EventListener;\n}\n\n/**\n * Interface for an item in the request queue. Stores the data to be decoded along with an\n * [[AbortController]].\n */\ninterface WorkerRequestEntry {\n    message: WorkerServiceProtocol.RequestMessage;\n    buffers?: ArrayBuffer[] | undefined;\n    requestController?: RequestController;\n}\n\n/**\n * The default number of Web Workers to use if `navigator.hardwareConcurrency` is unavailable.\n */\nconst DEFAULT_WORKER_COUNT = 2;\n\n/**\n * The default timeout for first message from worker.\n *\n * @see [[WorkerLoader.startWorker]]\n */\nexport const DEFAULT_WORKER_INITIALIZATION_TIMEOUT = 10000;\n\n/**\n * A set of concurrent Web Workers. Acts as a Communication Peer for [[WorkerService]] instances\n * running in Web Workers.\n *\n * Starts and manages a certain number of web workers and provides a means to communicate\n * with them using various communication schemes, such as:\n *  - [[addEventListener]] : receive a unidirectional messages\n *  - [[broadcastMessage]] : send unidirectional broadcast message\n *  - [[invokeRequest]] : send a request that waits for a response, with load balancing\n *  - [[postMessage]] : send a unidirectional message, with load balancing\n *\n * The request queue holds all requests before they are stuffed into the event queue, allows for\n * easy (and early) cancelling of requests. The workers now only get a single new RequestMessage\n * when they return their previous result, or if they are idle. When they are idle, they are stored\n * in m_availableWorkers.\n */\nexport class ConcurrentWorkerSet {\n    private m_workerChannelLogger = LoggerManager.instance.create(\"WorkerChannel\");\n    private readonly m_eventListeners = new Map<string, (message: any) => void>();\n    private m_workers = new Array<Worker>();\n\n    // List of idle workers that can be given the next job. It is using a LIFO scheme to reduce\n    // memory consumption in idle workers.\n    private m_availableWorkers = new Array<Worker>();\n    private m_workerPromises = new Array<Promise<WorkerEntry | undefined>>();\n    private m_workerCount: number | undefined;\n\n    private readonly m_readyPromises = new Map<string, ReadyPromise>();\n    private readonly m_requests: Map<number, RequestEntry> = new Map();\n    private m_workerRequestQueue: WorkerRequestEntry[] = [];\n\n    private m_nextMessageId: number = 0;\n    private m_stopped: boolean = true;\n\n    private m_referenceCount: number = 0;\n\n    /**\n     * Creates a new `ConcurrentWorkerSet`.\n     *\n     * Creates as many Web Workers as specified in `options.workerCount`, from the script provided\n     * in `options.scriptUrl`. If `options.workerCount` is not specified, the value specified in\n     * `navigator.hardwareConcurrency` is used instead.\n     *\n     * The worker set is implicitly started when constructed.\n     */\n    constructor(private m_options: ConcurrentWorkerSetOptions) {\n        this.start();\n    }\n\n    /**\n     * Adds an external reference and increments the internal reference counter by one.\n     *\n     * To implement a reference-count based automatic resource cleanup, use this function with\n     * [[removeReference]].\n     */\n    addReference() {\n        this.m_referenceCount += 1;\n        if (this.m_referenceCount === 1 && this.m_stopped) {\n            this.start();\n        }\n    }\n\n    /**\n     * Decrements the internal reference counter by 1.\n     *\n     * When the internal reference counter reaches 0, this function calls [[dispose]] to clear the\n     * resources.\n     *\n     * Use with [[addReference]] to implement reference-count based automatic resource cleanup.\n     */\n    removeReference() {\n        this.m_referenceCount -= 1;\n        if (this.m_referenceCount === 0) {\n            this.destroy();\n        }\n    }\n\n    /**\n     * Starts workers.\n     *\n     * Use to start workers already stopped by [[stop]] or [[destroy]] calls.\n     *\n     * Note: The worker set is implicitly started on construction - no need to call [[start]] on\n     * fresh instance.\n     *\n     * @param options optional, new worker set options\n     */\n    start(options?: ConcurrentWorkerSetOptions) {\n        if (options !== undefined) {\n            this.m_options = options;\n        }\n        if (!this.m_stopped) {\n            throw new Error(\"ConcurrentWorker set already started\");\n        }\n\n        this.m_workerCount = getOptionValue(\n            this.m_options.workerCount,\n            typeof navigator !== \"undefined\" && navigator.hardwareConcurrency !== undefined\n                ? // We need to have at least one worker\n                  THREE.MathUtils.clamp(navigator.hardwareConcurrency - 1, 1, 2)\n                : undefined,\n            DEFAULT_WORKER_COUNT\n        );\n\n        // Initialize the workers. The workers now have an ID to identify specific workers and\n        // handle their busy state.\n        const timeout = getOptionValue(\n            this.m_options.workerConnectionTimeout,\n            DEFAULT_WORKER_INITIALIZATION_TIMEOUT\n        );\n        for (let workerId = 0; workerId < this.m_workerCount; ++workerId) {\n            const workerPromise = WorkerLoader.startWorker(this.m_options.scriptUrl, timeout).then(\n                worker => {\n                    const listener = (evt: Event): void => {\n                        this.onWorkerMessage(workerId, evt as MessageEvent);\n                    };\n\n                    worker.addEventListener(\"message\", listener);\n                    this.m_workers.push(worker);\n                    this.m_availableWorkers.push(worker);\n                    return {\n                        worker,\n                        listener\n                    };\n                }\n            );\n            this.m_workerPromises.push(workerPromise);\n        }\n        this.m_stopped = false;\n    }\n\n    /**\n     * The number of workers started for this worker set. The value is `undefined` until the workers\n     * have been created.\n     */\n    get workerCount(): number | undefined {\n        return this.m_workerCount;\n    }\n\n    /**\n     * Stops workers.\n     *\n     * Waits for all pending requests to be finished and stops all workers.\n     *\n     * Use [[start]] to start this worker again.\n     *\n     * @returns `Promise` that resolves when all workers are destroyed.\n     */\n    async stop() {\n        this.m_stopped = true;\n\n        await this.waitForAllResponses().then(() => {\n            this.terminateWorkers();\n        });\n    }\n\n    /**\n     * Destroys all workers immediately.\n     *\n     * Resolves all pending request promises with a `worker destroyed` error.\n     *\n     * Use [[start]] to start this worker again.\n     */\n    destroy() {\n        this.m_stopped = true;\n\n        // respond with all pending request\n        this.m_requests.forEach(entry => {\n            entry.resolver(new Error(\"worker destroyed\"));\n        });\n        this.m_requests.clear();\n        this.m_workerRequestQueue = [];\n\n        this.terminateWorkers();\n\n        // clean other stuff\n        this.m_eventListeners.clear();\n    }\n\n    /**\n     * Waits for `service` to be initialized in all workers.\n     *\n     * Each service that starts in a worker sends an [[isInitializedMessage]] to confirm that\n     * it has started successfully. This method resolves when all workers in a set have\n     * `service` initialized.\n     *\n     * Promise is rejected if any of worker fails to start.\n     *\n     * @param serviceId The service identifier.\n     */\n    async connect(serviceId: string): Promise<void> {\n        this.ensureStarted();\n        await Promise.all(this.m_workerPromises);\n        return this.getReadyPromise(serviceId).promise as Promise<void>;\n    }\n\n    /**\n     * Registers an event listener for events that originated in a web worker, for a given\n     * `serviceId`. You can only set one event listener per `serviceId`.\n     *\n     * @param serviceId The service to listen to.\n     * @param callback The callback to invoke for matching events.\n     */\n    addEventListener(serviceId: string, callback: (message: any) => void) {\n        this.m_eventListeners.set(serviceId, callback);\n    }\n\n    /**\n     * Removes a previously set event listener for the given `serviceId`.\n     *\n     * @param serviceId The service from which to remove the event listeners.\n     */\n    removeEventListener(serviceId: string) {\n        this.m_eventListeners.delete(serviceId);\n    }\n\n    /**\n     * Invokes a request that expects a response from a random worker.\n     *\n     * Sends [[RequestMessage]] and resolves when a matching [[ResponseMessage]] is received from\n     * workers. Use this function when interfacing with \"RPC-like\" calls to services.\n     *\n     * @param serviceId The name of service, as registered with the [[WorkerClient]] instance.\n     * @param request The request to process.\n     * @param transferList An optional array of `ArrayBuffer`s to transfer to the worker context.\n     * @param requestController An optional [[RequestController]] to store state of cancelling.\n     *\n     * @returns A `Promise` that resolves with a response from the service.\n     */\n    invokeRequest<Res>(\n        serviceId: string,\n        request: WorkerServiceProtocol.ServiceRequest,\n        transferList?: ArrayBuffer[],\n        requestController?: RequestController\n    ): Promise<Res> {\n        this.ensureStarted();\n\n        const messageId = this.m_nextMessageId++;\n        let resolver: ((error?: any, response?: any) => void) | undefined;\n\n        const promise = new Promise<Res>((resolve, reject) => {\n            resolver = (error?: Error, response?: Res) => {\n                this.m_requests.delete(messageId);\n\n                if (error !== undefined) {\n                    reject(error);\n                } else {\n                    resolve(response as Res);\n                }\n            };\n        });\n        this.m_requests.set(messageId, {\n            promise,\n            resolver: resolver!\n        });\n\n        const message: WorkerServiceProtocol.RequestMessage = {\n            service: serviceId,\n            type: WorkerServiceProtocol.ServiceMessageName.Request,\n            messageId,\n            request\n        };\n        this.postRequestMessage(message, transferList, requestController);\n        return promise;\n    }\n\n    /**\n     * Invokes a request that expects responses from all workers.\n     *\n     * Send [[RequestMessage]]  to all workers and resolves when all workers have sent a matching\n     * [[ResponseMessage]]. Use this function to wait on request that need to happen on all workers\n     * before proceeding (like synchronous worker service creation).\n     *\n     * @param serviceId The name of service, as registered with the [[WorkerClient]] instance.\n     * @param request The request to process.\n     * @param transferList An optional array of `ArrayBuffer`s to transfer to the worker context.\n     *\n     * @returns Array of `Promise`s that resolves with a response from each worker (unspecified\n     * order).\n     */\n    broadcastRequest<Res>(\n        serviceId: string,\n        request:\n            | WorkerServiceProtocol.WorkerServiceManagerRequest\n            | WorkerServiceProtocol.ServiceRequest,\n        transferList?: ArrayBuffer[]\n    ): Promise<Res[]> {\n        this.ensureStarted();\n\n        const promises = [];\n        for (const worker of this.m_workers) {\n            const messageId = this.m_nextMessageId++;\n\n            let resolver: ((error?: any, response?: any) => void) | undefined;\n            const promise = new Promise<Res>((resolve, reject) => {\n                resolver = (error: Error, response: Res) => {\n                    this.m_requests.delete(messageId);\n\n                    if (error !== undefined) {\n                        reject(error);\n                    } else {\n                        resolve(response as Res);\n                    }\n                };\n            });\n            promises.push(promise);\n\n            this.m_requests.set(messageId, {\n                promise,\n                resolver: resolver!\n            });\n\n            const message: WorkerServiceProtocol.RequestMessage = {\n                service: serviceId,\n                type: WorkerServiceProtocol.ServiceMessageName.Request,\n                messageId,\n                request\n            };\n            if (transferList !== undefined) {\n                worker.postMessage(message, transferList);\n            } else {\n                worker.postMessage(message);\n            }\n        }\n\n        return Promise.all(promises);\n    }\n\n    /**\n     * Posts a message to all workers.\n     *\n     * @param message The message to send.\n     * @param buffers Optional buffers to transfer to the workers.\n     */\n    broadcastMessage(message: any, buffers?: ArrayBuffer[] | undefined) {\n        this.ensureStarted();\n\n        if (buffers !== undefined) {\n            this.m_workers.forEach(worker => worker.postMessage(message, buffers));\n        } else {\n            this.m_workers.forEach(worker => worker.postMessage(message));\n        }\n    }\n\n    /**\n     * The size of the request queue for debugging and profiling.\n     */\n    get requestQueueSize() {\n        return this.m_workerRequestQueue.length;\n    }\n\n    /**\n     * The number of workers for debugging and profiling.\n     */\n    get numWorkers() {\n        return this.m_workers.length;\n    }\n\n    /**\n     * The number of workers for debugging and profiling.\n     */\n    get numIdleWorkers() {\n        return this.m_availableWorkers.length;\n    }\n\n    /**\n     * Subclasses must call this function when a worker emits an event.\n     *\n     * @param event The event to dispatch.\n     */\n    protected eventHandler(event: any) {\n        if (typeof event.data.type !== \"string\") {\n            return; // not an event generated by us, ignore.\n        }\n\n        this.dispatchEvent(event.data.type, event);\n    }\n\n    /**\n     * Handles messages received from workers. This method is protected so that the message\n     * reception can be simulated through an extended class, to avoid relying on real workers.\n     *\n     * @param workerId The workerId of the web worker.\n     * @param event The event to dispatch.\n     */\n    private onWorkerMessage = (workerId: number, event: MessageEvent) => {\n        if (WorkerServiceProtocol.isResponseMessage(event.data)) {\n            const response = event.data;\n            if (response.messageId === null) {\n                logger.error(`[${this.m_options.scriptUrl}]: Bad ResponseMessage: no messageId`);\n                return;\n            }\n            const entry = this.m_requests.get(response.messageId);\n            if (entry === undefined) {\n                logger.error(\n                    `[${this.m_options.scriptUrl}]: Bad ResponseMessage: invalid messageId`\n                );\n                return;\n            }\n\n            if (workerId >= 0 && workerId < this.m_workers.length) {\n                const worker = this.m_workers[workerId];\n                this.m_availableWorkers.push(worker);\n                // Check if any new work has been put into the queue.\n                this.checkWorkerRequestQueue();\n            } else {\n                logger.error(`[${this.m_options.scriptUrl}]: onWorkerMessage: invalid workerId`);\n            }\n            if (response.errorMessage !== undefined) {\n                const error = new Error(response.errorMessage);\n                if (response.errorStack !== undefined) {\n                    error.stack = response.errorStack;\n                }\n                entry.resolver(error);\n            } else {\n                entry.resolver(undefined, response.response);\n            }\n        } else if (WorkerServiceProtocol.isInitializedMessage(event.data)) {\n            const readyPromise = this.getReadyPromise(event.data.service);\n            if (++readyPromise.count === this.m_workerPromises.length) {\n                readyPromise.resolve();\n            }\n        } else if (isLoggingMessage(event.data)) {\n            switch (event.data.level) {\n                case LogLevel.Trace:\n                    this.m_workerChannelLogger.trace(...event.data.message);\n                    break;\n                case LogLevel.Debug:\n                    this.m_workerChannelLogger.debug(...event.data.message);\n                    break;\n                case LogLevel.Log:\n                    this.m_workerChannelLogger.log(...event.data.message);\n                    break;\n                case LogLevel.Info:\n                    this.m_workerChannelLogger.info(...event.data.message);\n                    break;\n                case LogLevel.Warn:\n                    this.m_workerChannelLogger.warn(...event.data.message);\n                    break;\n                case LogLevel.Error:\n                    this.m_workerChannelLogger.error(...event.data.message);\n                    break;\n            }\n        } else {\n            this.eventHandler(event);\n        }\n    };\n\n    /**\n     * Posts a [[WorkerServiceProtocol.RequestMessage]] to an available worker. If no worker is\n     * available, the request is put into a queue.\n     *\n     * @param message The message to send.\n     * @param buffers Optional buffers to transfer to the worker.\n     * @param requestController An optional [[RequestController]] to store state of cancelling.\n     */\n    private postRequestMessage(\n        message: WorkerServiceProtocol.RequestMessage,\n        buffers?: ArrayBuffer[] | undefined,\n        requestController?: RequestController\n    ) {\n        this.ensureStarted();\n        if (this.m_workers.length === 0) {\n            throw new Error(\"ConcurrentWorkerSet#postMessage: no workers started\");\n        }\n\n        // Check if the requestController has received the abort signal, in which case the request\n        // is ignored.\n        if (requestController !== undefined && requestController.signal.aborted) {\n            const entry = this.m_requests.get(message.messageId);\n            if (entry === undefined) {\n                logger.error(\n                    `[${this.m_options.scriptUrl}]: Bad RequestMessage: invalid messageId`\n                );\n                return;\n            }\n\n            const err = new Error(\"Aborted\");\n            err.name = \"AbortError\";\n\n            entry.resolver(err, undefined);\n            return;\n        }\n\n        if (this.m_availableWorkers.length > 0) {\n            const worker = this.m_availableWorkers.pop()!;\n\n            if (buffers !== undefined) {\n                worker.postMessage(message, buffers);\n            } else {\n                worker.postMessage(message);\n            }\n        } else {\n            // We need a priority to keep sorting stable, so we have to add a RequestController.\n            if (requestController === undefined) {\n                requestController = new RequestController(0);\n            }\n            if (requestController.priority === 0) {\n                // If the requests do not get a priority, they should keep their sorting order.\n                requestController.priority = -this.m_nextMessageId;\n            }\n            this.m_workerRequestQueue.unshift({\n                message,\n                buffers,\n                requestController\n            });\n        }\n    }\n\n    private ensureStarted() {\n        if (this.m_stopped) {\n            throw new Error(\"ConcurrentWorkerSet stopped\");\n        }\n    }\n\n    private async waitForAllResponses(): Promise<any> {\n        const promises = new Array<Promise<void>>();\n        this.m_requests.forEach(entry => {\n            promises.push(entry.promise);\n        });\n        await Promise.all(promises);\n    }\n\n    private dispatchEvent(id: string, message: any) {\n        const callback = this.m_eventListeners.get(id);\n        if (callback === undefined) {\n            return;\n        } // unknown event, ignore.\n        callback(message);\n    }\n\n    private terminateWorkers() {\n        // terminate all workers\n        this.m_workerPromises.forEach(workerPromise => {\n            workerPromise.then(workerEntry => {\n                if (workerEntry === undefined) {\n                    return;\n                }\n                workerEntry.worker.removeEventListener(\"message\", workerEntry.listener);\n                workerEntry.worker.terminate();\n            });\n        });\n        this.m_workers = [];\n        this.m_workerPromises = [];\n        this.m_availableWorkers = [];\n        this.m_readyPromises.clear();\n    }\n\n    private getReadyPromise(id: string): ReadyPromise {\n        const readyPromise = this.m_readyPromises.get(id);\n        if (readyPromise !== undefined) {\n            return readyPromise;\n        }\n\n        const newPromise: ReadyPromise = {\n            count: 0,\n            promise: undefined,\n            resolve: () => {\n                /* placeholder */\n            },\n            reject: (error: any) => {\n                newPromise.error = error;\n            },\n            error: undefined\n        };\n\n        newPromise.promise = new Promise<void>((resolve, reject) => {\n            const that = newPromise;\n\n            if (that.error !== undefined) {\n                reject(that.error);\n            } else if (that.count === this.m_workerPromises.length) {\n                resolve();\n            }\n\n            that.resolve = resolve;\n            that.reject = reject;\n        });\n\n        this.m_readyPromises.set(id, newPromise);\n        return newPromise;\n    }\n\n    /**\n     * Check the worker request queue, if there are any queued up decoding jobs and idle workers,\n     * they will be executed with postRequestMessage. The requests in the queue are sorted before\n     * the request with the highest priority is selected for processing.\n     */\n    private checkWorkerRequestQueue() {\n        if (this.m_workerRequestQueue.length === 0 || this.m_availableWorkers.length === 0) {\n            return;\n        }\n        this.m_workerRequestQueue.sort((a: WorkerRequestEntry, b: WorkerRequestEntry) => {\n            return a.requestController!.priority - b.requestController!.priority;\n        });\n\n        // Get the request with the highest priority and send it (again).\n        while (this.m_availableWorkers.length > 0 && this.m_workerRequestQueue.length > 0) {\n            const request = this.m_workerRequestQueue.pop()!;\n            this.postRequestMessage(request.message, request.buffers, request.requestController);\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport \"@here/harp-fetch\";\n\nimport { getUrlOrigin, LoggerManager } from \"@here/harp-utils\";\nimport { isWorkerBootstrapRequest, WorkerBootstrapResponse } from \"./WorkerBootstrapDefs\";\n\nconst logger = LoggerManager.instance.create(\"WorkerLoader\");\n\n/**\n * Set of `Worker` loading and initialization helpers:\n *  - starting Worker from URL with fallback to XHR+blob [[WorkerLoader.startWorker]]\n *  - waiting for proper worker initialization, see [[WorkerLoader.waitWorkerInitialized]]\n */\nexport class WorkerLoader {\n    static directlyFallbackToBlobBasedLoading: boolean = false;\n    static sourceLoaderCache = new Map<string, Promise<string>>();\n    static dependencyUrlMapping: { [name: string]: string } = {};\n\n    /**\n     * Starts worker by first attempting load from `scriptUrl` using native `Worker` constructor.\n     * Then waits (using [[waitWorkerInitialized]]) for first message that indicates successful\n     * initialization.\n     * If `scriptUrl`'s origin is different than `baseUrl`, then in case of error falls back to\n     * [[startWorkerBlob]].\n     *\n     * We must resolve/reject promise at some time, so it is expected that any sane application will\n     * be able to load worker code in some amount of time.\n     * By default, this method timeouts after 10 seconds (configurable using `timeout` argument).\n     *\n     * This method is needed as browsers in general forbid to load worker if it's not on 'same\n     * origin' regardless of Content-Security-Policy.\n     *\n     * For blob-based fallback work, one need to ensure that Content Security Policy (CSP) allows\n     * loading web worker code from `Blob`s. By default browsers, allow 'blob:' for workers, but\n     * this may change.\n     *\n     * Following snippet setups CSP, so workers can be started from blob urls:\n     *\n     *     <head>\n     *         <meta http-equiv=\"Content-Security-Policy\" content=\"child-src blob:\">\n     *     </head>\n     *\n     * Tested on:\n     *   * Chrome 67 / Linux, Window, OSX, Android\n     *   * Firefox 60 / Linux, Windows, OSX\n     *   * Edge 41 / Windows\n     *   * Safari 11 / OSX\n     *   * Samsung Internet 7.2\n     *\n     * See\n     *  * https://benohead.com/cross-domain-cross-browser-web-workers/\n     *  * MapBox\n     *    * https://stackoverflow.com/questions/21913673/execute-web-worker-from-different-origin\n     *    * https://github.com/mapbox/mapbox-gl-js/issues/2658\n     *    * https://github.com/mapbox/mapbox-gl-js/issues/559\n     *    * https://github.com/mapbox/mapbox-gl-js/issues/6058\n     *\n     * Findings:\n     *\n     * * Chrome reports CSP by exception when constructing [[Worker]] instance.\n     * * Firefox reports CSP errors when loading in first event:\n     *   https://bugzilla.mozilla.org/show_bug.cgi?id=1241888\n     * * Firefox 62, Chrome 67 obeys `<meta http-equiv=\"Content-Security-Policy\">` with\n     *   `worker-src blob:` but doesn't obey `worker-src URL` when used\n     * * Chrome 67 doesn't obey CSP `worker-src URL` despite it's documented as supported\n     *   (https://developer.mozilla.org/docs/Web/HTTP/Headers/Content-Security-Policy/worker-src)\n     *\n     * @param scriptUrl web worker script URL\n     * @param timeout timeout in milliseconds, in which worker should set initial message\n     *    (default 10 seconds)\n     */\n    static startWorker(scriptUrl: string, timeout: number = 10000): Promise<Worker> {\n        if (scriptUrl.startsWith(\"blob:\")) {\n            return this.startWorkerImmediately(scriptUrl, timeout);\n        }\n\n        if (this.directlyFallbackToBlobBasedLoading) {\n            return this.startWorkerBlob(scriptUrl, timeout);\n        }\n        return this.startWorkerImmediately(scriptUrl, timeout).catch(error => {\n            if (typeof window !== \"undefined\") {\n                const pageUrl = window.location.href;\n                const fullScriptUrl = new URL(scriptUrl, pageUrl).href;\n                if (getUrlOrigin(fullScriptUrl) === getUrlOrigin(pageUrl)) {\n                    throw error;\n                }\n                logger.log(\n                    \"#startWorker: cross-origin worker construction failed, trying load with blob\"\n                );\n                this.directlyFallbackToBlobBasedLoading = true;\n                return WorkerLoader.startWorkerBlob(scriptUrl, timeout);\n            } else {\n                throw error;\n            }\n        });\n    }\n\n    /**\n     * Start worker, loading it immediately from `scriptUrl`. Waits (using\n     * [[waitWorkerInitialized]]) for successful worker start.\n     *\n     * @param scriptUrl web worker script URL\n     */\n    static startWorkerImmediately(scriptUrl: string, timeout: number): Promise<Worker> {\n        try {\n            const worker = new Worker(scriptUrl);\n            return this.waitWorkerInitialized(worker, timeout);\n        } catch (error) {\n            return Promise.reject(error);\n        }\n    }\n\n    /**\n     * Start worker \"via blob\" by first loading worker script code with [[fetch]], creating `Blob`\n     * and attempting to start worker from blob url. Waits (using [[waitWorkerInitialized]]) for\n     * successful worker start.\n     *\n     * @param scriptUrl web worker script URL\n     */\n    static startWorkerBlob(scriptUrl: string, timeout: number): Promise<Worker> {\n        return this.fetchScriptSourceToBlobUrl(scriptUrl).then(blobUrl => {\n            return this.startWorkerImmediately(blobUrl, timeout);\n        });\n    }\n\n    /**\n     * Fetch script source as `Blob` url.\n     *\n     * Reuses results, if there are many simultaneous requests.\n     *\n     * @param scriptUrl web worker script URL\n     * @return promise that resolves to url of a `Blob` with script source code\n     */\n    static fetchScriptSourceToBlobUrl(scriptUrl: string): Promise<string> {\n        let loadingPromise = this.sourceLoaderCache.get(scriptUrl);\n        if (loadingPromise !== undefined) {\n            return loadingPromise;\n        }\n        loadingPromise = fetch(scriptUrl)\n            .then(response => response.text())\n            .catch(error => {\n                throw new Error(\n                    `WorkerLoader#fetchScriptSourceToBlob: failed to load worker script: ${error}`\n                );\n            })\n            .then(scriptSource => {\n                this.sourceLoaderCache.delete(scriptUrl);\n                const blob = new Blob([scriptSource], { type: \"application/javascript\" });\n                return URL.createObjectURL(blob);\n            });\n        this.sourceLoaderCache.set(scriptUrl, loadingPromise);\n        return loadingPromise;\n    }\n\n    /**\n     * Waits for successful Web Worker start.\n     *\n     * Expects that worker script sends initial message.\n     *\n     * If first event is `message` then assumes that worker has been loaded sussesfully and promise\n     * resolves to `worker` object passed as argument.\n     *\n     * If first event is 'error', then it is assumed that worker failed to load and promise is\n     * rejected.\n     *\n     * (NOTE: The initial 'message' - if received - is immediately replayed using worker's\n     * `dispatchEvent`, so application code can also consume it as confirmation of successful\n     * worker initialization.\n     *\n     * We must resolve/reject promise at some time, so it is expected that any sane application will\n     * be able to load worker code in some amount of time.\n     *\n     * @param worker [[Worker]] instance to be checked\n     * @param timeout timeout in milliseconds, in which worker should set initial message\n     * @returns `Promise` that resolves to `worker` on success\n     */\n    static waitWorkerInitialized(worker: Worker, timeout: number): Promise<Worker> {\n        return new Promise<Worker>((resolve, reject) => {\n            const firstMessageCallback = (event: MessageEvent) => {\n                const message = event.data;\n                if (isWorkerBootstrapRequest(message)) {\n                    const dependencies = message.dependencies;\n                    const resolvedDependencies: string[] = [];\n                    for (const dependency of dependencies) {\n                        const resolved = this.dependencyUrlMapping[dependency];\n                        if (!resolved) {\n                            cleanup();\n                            reject(\n                                new Error(\n                                    `#waitWorkerInitialized: Unable to resolve '${dependency}'` +\n                                        ` as needed by worker script.`\n                                )\n                            );\n                            return;\n                        }\n                        resolvedDependencies.push(resolved);\n                    }\n                    const response: WorkerBootstrapResponse = {\n                        type: \"worker-bootstrap-response\",\n                        resolvedDependencies\n                    };\n                    worker.postMessage(response);\n                    return;\n                }\n\n                cleanup();\n                resolve(worker);\n\n                // We've just consumed first message from worker before client has any chance to\n                // even call `addEventListener` on it, so here after resolve, we wait next tick and\n                // replay message so user has chance to intercept it in its own handler.\n                setTimeout(() => {\n                    worker.dispatchEvent(event);\n                }, 0);\n            };\n            const errorCallback = (error: ErrorEvent) => {\n                cleanup();\n                // Error events do not carry any useful information on tested browsers, so we assume\n                // that any error before 'firstMessageCallback' as failed Worker initialization.\n                let message = \"Error during worker initialization\";\n                if (error.message) {\n                    message = message + `: ${error.message}`;\n                }\n                if (typeof error.filename === \"string\" && typeof error.lineno === \"number\") {\n                    message = message + ` in ${error.filename}:${error.lineno}`;\n                }\n                reject(new Error(message));\n            };\n            const cleanup = () => {\n                clearTimeout(timerId);\n                worker.removeEventListener(\"message\", firstMessageCallback);\n                worker.removeEventListener(\"error\", errorCallback);\n            };\n\n            worker.addEventListener(\"error\", errorCallback);\n            worker.addEventListener(\"message\", firstMessageCallback);\n            const timerId = setTimeout(() => {\n                cleanup();\n                reject(new Error(\"Timeout exceeded when waiting for first message from worker.\"));\n            }, timeout);\n        });\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport {\n    DecodedTile,\n    Definitions,\n    getProjectionName,\n    ITileDecoder,\n    OptionsMap,\n    RequestController,\n    StyleSet,\n    TileInfo,\n    WorkerDecoderProtocol,\n    WorkerServiceProtocol\n} from \"@here/harp-datasource-protocol\";\nimport { Projection, TileKey } from \"@here/harp-geoutils\";\n\nimport { ConcurrentWorkerSet } from \"./ConcurrentWorkerSet\";\n\n/**\n * Identifier of next decoder worker-service. Used to ensure uniqueness of service ids of decoders\n * dedicated to different datasources.\n */\nlet nextUniqueServiceId = 0;\n\n/**\n * Decoder based on [[ConcurrentWorkerSet]].\n *\n * Decodes tiles using workers running in separate contexts (also known as `WebWorkers`):\n * - connection establishment,\n * - sends decode requests,\n * - configuration.\n */\nexport class WorkerBasedDecoder implements ITileDecoder {\n    private serviceId: string;\n    private m_serviceCreated: boolean = false;\n\n    /**\n     * Creates a new `WorkerBasedDecoder`.\n     *\n     * @param workerSet [[ConcurrentWorkerSet]] this tiler will live in.\n     * @param decoderServiceType Service type identifier.\n     */\n    constructor(\n        private readonly workerSet: ConcurrentWorkerSet,\n        private readonly decoderServiceType: string\n    ) {\n        this.workerSet.addReference();\n        this.serviceId = `${this.decoderServiceType}-${nextUniqueServiceId++}`;\n    }\n\n    /**\n     * Dispose of dedicated tile decoder services in workers and remove reference to underlying\n     * [[ConcurrentWorkerSet]].\n     */\n    dispose() {\n        if (this.m_serviceCreated) {\n            this.workerSet\n                .broadcastRequest(WorkerServiceProtocol.WORKER_SERVICE_MANAGER_SERVICE_ID, {\n                    type: WorkerServiceProtocol.Requests.DestroyService,\n                    targetServiceId: this.serviceId\n                })\n                .catch(() => {\n                    /* Ignoring these errors as underlying workers possibly do not exist anymore. */\n                });\n        }\n\n        this.workerSet.removeReference();\n    }\n\n    /**\n     * Connects to [[WorkerServiceManager]]s in underlying [[ConcurrentWorkerSet]] and creates\n     * dedicated [[TileDecoderService]]s in all workers to serve decode requests.\n     */\n    async connect(): Promise<void> {\n        await this.workerSet.connect(WorkerServiceProtocol.WORKER_SERVICE_MANAGER_SERVICE_ID);\n        if (!this.m_serviceCreated) {\n            await this.workerSet.broadcastRequest(\n                WorkerServiceProtocol.WORKER_SERVICE_MANAGER_SERVICE_ID,\n                {\n                    type: WorkerServiceProtocol.Requests.CreateService,\n                    targetServiceType: this.decoderServiceType,\n                    targetServiceId: this.serviceId\n                }\n            );\n            this.m_serviceCreated = true;\n        }\n    }\n\n    /**\n     * Get [[Tile]] from tile decoder service in worker.\n     *\n     * Invokes [[DecodeTileRequest]] on [[TileDecoderService]] running in worker pool.\n     */\n    decodeTile(\n        data: ArrayBufferLike,\n        tileKey: TileKey,\n        projection: Projection,\n        requestController?: RequestController\n    ): Promise<DecodedTile> {\n        const tileKeyCode = tileKey.mortonCode();\n\n        const message: WorkerDecoderProtocol.DecodeTileRequest = {\n            type: WorkerDecoderProtocol.Requests.DecodeTileRequest,\n            tileKey: tileKeyCode,\n            data,\n            projection: getProjectionName(projection)\n        };\n\n        const transferList = data instanceof ArrayBuffer ? [data] : undefined;\n\n        return this.workerSet.invokeRequest(\n            this.serviceId,\n            message,\n            transferList,\n            requestController\n        );\n    }\n\n    /**\n     * Get [[TileInfo]] from tile decoder service in worker.\n     *\n     * Invokes [[TileInfoRequest]] on [[TileDecoderService]] running in worker pool.\n     */\n    getTileInfo(\n        data: ArrayBufferLike,\n        tileKey: TileKey,\n        projection: Projection,\n        requestController?: RequestController\n    ): Promise<TileInfo | undefined> {\n        const tileKeyCode = tileKey.mortonCode();\n\n        const message: WorkerDecoderProtocol.TileInfoRequest = {\n            type: WorkerDecoderProtocol.Requests.TileInfoRequest,\n            tileKey: tileKeyCode,\n            data,\n            projection: getProjectionName(projection)\n        };\n\n        const transferList = data instanceof ArrayBuffer ? [data] : undefined;\n        return this.workerSet.invokeRequest(\n            this.serviceId,\n            message,\n            transferList,\n            requestController\n        );\n    }\n\n    /**\n     * Configure tile decoder service in workers.\n     *\n     * Broadcasts [[ConfigurationMessage]] to all [[TileDecoderService]]s running in worker pool.\n     *\n     * @param styleSet  new [[StyleSet]], undefined means no change\n     * @param languages new list of languages\n     * @param options   new options, undefined options are not changed\n     */\n    configure(\n        styleSet?: StyleSet,\n        definitions?: Definitions,\n        languages?: string[],\n        options?: OptionsMap\n    ): void {\n        const message: WorkerDecoderProtocol.ConfigurationMessage = {\n            service: this.serviceId,\n            type: WorkerDecoderProtocol.DecoderMessageName.Configuration,\n            styleSet,\n            definitions,\n            options,\n            languages\n        };\n\n        this.workerSet.broadcastMessage(message);\n    }\n\n    /**\n     * The number of workers started for this decoder. The value is `undefined` until the workers\n     * have been created.\n     */\n    get workerCount(): number | undefined {\n        return this.workerSet.workerCount;\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { TilingScheme } from \"@here/harp-geoutils\";\nimport { TileKey } from \"@here/harp-geoutils/lib/tiling/TileKey\";\n\n/**\n * Status of the elevation range calculation.\n */\nexport enum CalculationStatus {\n    // Calculated approximately. A more precise result may be available later.\n    PendingApproximate,\n    // Calculation completed. The result is final, won't improve upon retrying.\n    FinalPrecise\n}\n\n/**\n * Elevation range with an optional calculation status.\n */\nexport interface ElevationRange {\n    minElevation: number;\n    maxElevation: number;\n    calculationStatus?: CalculationStatus;\n}\n\n/**\n * Source for elevation ranges per tile. The returned elevation ranges will be used in the visible\n * tile computation to calculate proper bounding boxes.\n */\nexport interface ElevationRangeSource {\n    /**\n     * Compute the elevation range for a given [[TileKey]].\n     * @param tileKey The tile for which the elevation range should be computed.\n     */\n    getElevationRange(tileKey: TileKey): ElevationRange;\n\n    /**\n     * The tiling scheme of this [[ElevationRangeSource]]. [[MapView]] will only apply the elevation\n     * ranges returned by [[getElevationRange]] that have the same [[TilingScheme]].\n     */\n    getTilingScheme(): TilingScheme;\n\n    /**\n     * Connects to the underlying data.\n     */\n    connect(): Promise<void>;\n\n    /**\n     * Returns `true` if this `ElevationRangeSource` is ready and the [[MapView]] can invoke\n     * `getElevationRange()` to start requesting data.\n     */\n    ready(): boolean;\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { MapView } from \"../MapView\";\nimport { ImageItem } from \"./Image\";\nimport { ImageCache } from \"./ImageCache\";\n\n/**\n * Cache images wrapped into [[ImageItem]]s for a [[MapView]]. An image may have multiple names in\n * a theme, the `MapViewImageCache` will take care of that. Registering multiple images with the\n * same name is invalid.\n *\n * The `MapViewImageCache` uses a global [[ImageCache]] to actually store (and generate) the\n * image data.\n */\nexport class MapViewImageCache {\n    private m_name2Url: Map<string, string> = new Map();\n    private m_url2Name: Map<string, string[]> = new Map();\n\n    /**\n     * The constructor for `MapViewImageCache`.\n     *\n     * @param mapView a [[MapView]] instance.\n     */\n    constructor(public mapView: MapView) {}\n\n    /**\n     * Register an existing image by name.\n     *\n     * @param name Name of the image from [[Theme]].\n     * @param url URL of image.\n     * @param image Optional [[ImageData]] of image.\n     */\n    registerImage(\n        name: string | undefined,\n        url: string,\n        image: ImageData | ImageBitmap | undefined\n    ): ImageItem {\n        if (name !== undefined) {\n            if (this.hasName(name)) {\n                throw new Error(\"duplicate name in cache\");\n            }\n\n            const oldNames = this.m_url2Name.get(url);\n            if (oldNames !== undefined) {\n                if (oldNames.indexOf(name) < 0) {\n                    oldNames.push(name);\n                }\n            } else {\n                this.m_url2Name.set(url, [name]);\n            }\n            this.m_name2Url.set(name, url);\n        }\n\n        const imageItem = ImageCache.instance.findImage(url);\n        if (imageItem === undefined) {\n            return ImageCache.instance.registerImage(this.mapView, url, image);\n        }\n        return imageItem;\n    }\n\n    /**\n     * Add an image and optionally start loading it. Once done, the [[ImageData]] or [[ImageBitmap]]\n     * will be stored in the [[ImageItem]].\n     *\n     * @param name Name of image from [[Theme]].\n     * @param url URL of image.\n     * @param startLoading Optional. Pass `true` to start loading the image in the background.\n     */\n    addImage(\n        name: string,\n        url: string,\n        startLoading = true\n    ): ImageItem | Promise<ImageItem | undefined> {\n        const imageItem = this.registerImage(name, url, undefined);\n        if (startLoading === true) {\n            return ImageCache.instance.loadImage(imageItem);\n        }\n\n        return imageItem;\n    }\n\n    /**\n     * Find [[ImageItem]] by its name.\n     *\n     * @param name Name of image.\n     */\n    findImageByName(name: string): ImageItem | undefined {\n        const url = this.m_name2Url.get(name);\n        if (url === undefined) {\n            return undefined;\n        }\n        return ImageCache.instance.findImage(url);\n    }\n\n    /**\n     * Find [[ImageItem]] by URL.\n     *\n     * @param url Url of image.\n     */\n    findImageByUrl(url: string): ImageItem | undefined {\n        return ImageCache.instance.findImage(url);\n    }\n\n    /**\n     * Load an [[ImageItem]]. Returns a promise or a loaded [[ImageItem]].\n     *\n     * @param imageItem ImageItem to load.\n     */\n    loadImage(imageItem: ImageItem): ImageItem | Promise<ImageItem | undefined> {\n        return ImageCache.instance.loadImage(imageItem);\n    }\n\n    /**\n     * Remove all [[ImageItem]]s from the cache. Also removes all [[ImageItem]]s that belong to this\n     * [[MapView]] from the global [[ImageCache]].\n     */\n    clear() {\n        ImageCache.instance.clear(this.mapView);\n        this.m_name2Url = new Map();\n        this.m_url2Name = new Map();\n    }\n\n    /**\n     * Returns number of image names stored in the cache.\n     */\n    get numberOfNames(): number {\n        return this.m_name2Url.size;\n    }\n\n    /**\n     * Returns number of image URLs in the cache.\n     */\n    get numberOfUrls(): number {\n        return this.m_url2Name.size;\n    }\n\n    /**\n     * Return `true` if an image with the given name is known.\n     *\n     * @param name Name of the image.\n     */\n    hasName(name: string): boolean {\n        return this.m_name2Url.get(name) !== undefined;\n    }\n\n    /**\n     * Return `true` if an image with the given URL is known.\n     * @param url URL of image.\n     */\n    hasUrl(url: string): boolean {\n        return this.m_url2Name.get(url) !== undefined;\n    }\n\n    /**\n     * Return the names under which an image with the given URL is saved.\n     */\n    findNames(url: string): string[] | undefined {\n        return this.m_url2Name.get(url);\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { LoggerManager } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\n\nimport { MapView } from \"../MapView\";\nimport { ImageItem } from \"./Image\";\nimport { MipMapGenerator } from \"./MipMapGenerator\";\n\nconst logger = LoggerManager.instance.create(\"ImageCache\");\nconst mipMapGenerator = new MipMapGenerator();\n\n// override declaration of createImageBitmap, add optional options parameter that\n// was removed in typings for TypeScript 3.1\ndeclare function createImageBitmap(\n    image: ImageBitmapSource,\n    sx: number,\n    sy: number,\n    sw: number,\n    sh: number,\n    options?: any\n): Promise<ImageBitmap>;\n\n/**\n * Combines an [[ImageItem]] with a list of [[MapViews]] that reference it.\n */\nclass ImageCacheItem {\n    /**\n     * The list of [[MapView]]s referencing the [[ImageItem]].\n     */\n    mapViews: MapView[] = [];\n\n    /**\n     * Instantiates `ImageCacheItem`.\n     *\n     * @param imageItem The [[ImageItem]] referenced by the associated [[MapView]]s instances.\n     * @param mapView An optional first [[MapView]] referencing the [[ImageItem]].\n     */\n    constructor(public imageItem: ImageItem, mapView?: MapView) {\n        if (mapView !== undefined) {\n            this.mapViews.push(mapView);\n        }\n    }\n}\n\n/**\n * `ImageCache` is a singleton, so it can be used with multiple MapViews on a single page. This\n * allows to have an image loaded only once for multiple views. THREE is doing something similar,\n * but does not allow to share images that have been loaded from a canvas (which we may need to do\n * if we use SVG images for textures).\n *\n * One application that makes our own cache necessary is the generation of our own textures from\n * data that is not an URL.\n *\n * The `ImageCache` can be improved by adding satistics for memory footprint as well.\n */\nexport class ImageCache {\n    /**\n     * Returns the singleton `instance` of the `ImageCache`.\n     */\n    static get instance(): ImageCache {\n        if (ImageCache.m_instance === undefined) {\n            ImageCache.m_instance = new ImageCache();\n        }\n        return ImageCache.m_instance;\n    }\n\n    /**\n     * Dispose the singleton object. Not normally implemented for singletons, but good for\n     * debugging.\n     */\n    static dispose(): void {\n        ImageCache.m_instance = undefined;\n    }\n\n    private static m_instance: ImageCache | undefined;\n\n    private m_images: Map<string, ImageCacheItem> = new Map();\n\n    /**\n     * Add an image definition to the global cache. Useful when the image data is already loaded.\n     *\n     * @param mapView Specifiy which [[MapView]] requests the image.\n     * @param url URL of image.\n     * @param imageData Optional [ImageData]] containing the image content.\n     */\n    registerImage(\n        mapView: MapView,\n        url: string,\n        imageData: ImageData | ImageBitmap | undefined\n    ): ImageItem {\n        let imageCacheItem = this.findImageCacheItem(url);\n        if (imageCacheItem !== undefined) {\n            if (mapView !== undefined && imageCacheItem.mapViews.indexOf(mapView) < 0) {\n                imageCacheItem.mapViews.push(mapView);\n            }\n            return imageCacheItem.imageItem;\n        }\n\n        const mapViews: MapView[] = [];\n        if (mapView !== undefined) {\n            mapViews.push(mapView);\n        }\n\n        imageCacheItem = {\n            imageItem: {\n                url,\n                imageData,\n                loaded: false\n            },\n            mapViews\n        };\n\n        this.m_images.set(url, imageCacheItem);\n\n        return imageCacheItem.imageItem;\n    }\n\n    /**\n     * Add an image definition, and optionally start loading the content.\n     *\n     * @param mapView [[MapView]] requesting the image.\n     * @param url URL of image.\n     * @param startLoading Optional flag. If `true` the image will be loaded in the background.\n     */\n    addImage(\n        mapView: MapView,\n        url: string,\n        startLoading = true\n    ): ImageItem | Promise<ImageItem | undefined> | undefined {\n        const imageItem = this.registerImage(mapView, url, undefined);\n        if (imageItem !== undefined && startLoading === true) {\n            return this.loadImage(imageItem);\n        }\n\n        return imageItem;\n    }\n\n    /**\n     * Find [[ImageItem]] for the specified URL.\n     *\n     * @param url URL of image.\n     * @returns `ImageItem` for the URL if the URL is registered, `undefined` otherwise.\n     */\n    findImage(url: string): ImageItem | undefined {\n        const imageItem = this.m_images.get(url);\n        if (imageItem !== undefined) {\n            return imageItem.imageItem;\n        }\n        return undefined;\n    }\n\n    /**\n     * Clear all [[ImageItem]]s belonging to a [[MapView]]. May remove cached items if no\n     * [[MapView]] are registered anymore.\n     *\n     * @param mapView MapView to remove all [[ImageItem]]s from.\n     */\n    clear(mapView: MapView) {\n        const itemsToRemove: string[] = [];\n\n        this.m_images.forEach(imageItem => {\n            const mapViewIndex = imageItem.mapViews.indexOf(mapView);\n            if (mapViewIndex >= 0) {\n                imageItem.mapViews.splice(mapViewIndex, 1);\n            }\n            if (imageItem.mapViews.length === 0) {\n                itemsToRemove.push(imageItem.imageItem.url);\n            }\n        });\n\n        for (const keyToDelete of itemsToRemove) {\n            this.m_images.delete(keyToDelete);\n        }\n    }\n\n    /**\n     * Clear all [[ImageItem]]s from all [[MapView]]s.\n     */\n    clearAll() {\n        this.m_images = new Map();\n    }\n\n    /**\n     * Returns the number of all cached [[ImageItem]]s.\n     */\n    get size(): number {\n        return this.m_images.size;\n    }\n\n    /**\n     * Load an [[ImageItem]]. If the loading process is already running, it returns the current\n     * promise.\n     *\n     * @param imageItem `ImageItem` containing the URL to load image from.\n     * @returns An [[ImageItem]] if the image has already been loaded, a promise otherwise.\n     */\n    loadImage(imageItem: ImageItem): ImageItem | Promise<ImageItem | undefined> {\n        if (imageItem.imageData !== undefined) {\n            return imageItem;\n        }\n\n        if (imageItem.loadingPromise !== undefined) {\n            return imageItem.loadingPromise;\n        }\n\n        const imageLoader = new THREE.ImageLoader();\n\n        imageItem.loadingPromise = new Promise(resolve => {\n            logger.debug(`Loading image: ${imageItem.url}`);\n            imageLoader.load(\n                imageItem.url,\n                image => {\n                    logger.debug(`... finished loading image: ${imageItem.url}`);\n                    this.renderImage(imageItem, image)\n                        .then(() => {\n                            imageItem.mipMaps = mipMapGenerator.generateTextureAtlasMipMap(\n                                imageItem\n                            );\n                            imageItem.loadingPromise = undefined;\n                            resolve(imageItem);\n                        })\n                        .catch(ex => {\n                            logger.error(`... loading image failed: ${imageItem.url} : ${ex}`);\n                            resolve(undefined);\n                        });\n                },\n                // Loading events no longer supported\n                undefined,\n                errorEvent => {\n                    logger.error(`... loading image failed: ${imageItem.url} : ${errorEvent}`);\n\n                    imageItem.loadingPromise = undefined;\n                    resolve(undefined);\n                }\n            );\n        });\n        return imageItem.loadingPromise;\n    }\n\n    /**\n     * Find the cached [[ImageItem]] by URL.\n     *\n     * @param url URL of image.\n     */\n    private findImageCacheItem(url: string): ImageCacheItem | undefined {\n        return this.m_images.get(url);\n    }\n\n    /**\n     * Render the `ImageItem` by using `createImageBitmap()` or by rendering the image into a\n     * [[HTMLCanvasElement]].\n     *\n     * @param imageItem [[ImageItem]] to assign image data to.\n     * @param image [[HTMLImageElement]] to\n     */\n    private renderImage(\n        imageItem: ImageItem,\n        image: HTMLImageElement\n    ): Promise<ImageData | ImageBitmap | undefined> {\n        return new Promise((resolve, reject) => {\n            // use createImageBitmap if it is available. It should be available in webworkers as\n            // well\n            if (typeof createImageBitmap === \"function\") {\n                const options: ImageBitmapOptions = {\n                    premultiplyAlpha: \"default\"\n                };\n\n                logger.debug(`Creating bitmap image: ${imageItem.url}`);\n                createImageBitmap(image, 0, 0, image.width, image.height, options)\n                    .then(imageBitmap => {\n                        logger.debug(`... finished creating bitmap image: ${imageItem.url}`);\n\n                        imageItem.loadingPromise = undefined;\n                        imageItem.imageData = imageBitmap;\n                        imageItem.loaded = true;\n                        resolve(imageBitmap);\n                    })\n                    .catch(ex => {\n                        logger.error(`... loading image failed: ${imageItem.url} : ${ex}`);\n                        resolve(undefined);\n                    });\n            } else {\n                try {\n                    if (typeof document === \"undefined\") {\n                        logger.error(\"Error: document is not available, cannot generate image\");\n                        reject(\n                            new Error(\n                                \"ImageCache#renderImage: document is not available, cannot \" +\n                                    \"render image to create texture\"\n                            )\n                        );\n                    }\n\n                    // TODO: Extract the rendering to the canvas part and make it configurable for\n                    // the client, so it does not rely on the `document`.\n\n                    // use the image, e.g. draw part of it on a canvas\n                    const canvas = document.createElement(\"canvas\");\n                    canvas.width = image.width;\n                    canvas.height = image.height;\n\n                    const context = canvas.getContext(\"2d\");\n                    if (context !== null) {\n                        logger.debug(\n                            // tslint:disable-next-line: max-line-length\n                            `... finished creating bitmap image in canvas: ${imageItem.url} ${image}`\n                        );\n                        context.drawImage(\n                            image,\n                            0,\n                            0,\n                            image.width,\n                            image.height,\n                            0,\n                            0,\n                            canvas.width,\n                            canvas.height\n                        );\n                        const imageData = context.getImageData(0, 0, image.width, image.height);\n                        imageItem.imageData = imageData;\n                        imageItem.loaded = true;\n                        resolve(imageData);\n                    } else {\n                        logger.error(`renderImage: no context found`);\n                        reject(new Error(`ImageCache#renderImage: no context found`));\n                    }\n                } catch (ex) {\n                    logger.error(`renderImage failed: ${ex}`);\n                    imageItem.imageData = undefined;\n                    imageItem.loaded = true;\n                    reject(new Error(`ImageCache#renderImage failed: ${ex}`));\n                }\n            }\n        });\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Theme } from \"@here/harp-datasource-protocol\";\nimport { HighPrecisionLineMaterial } from \"@here/harp-materials\";\nimport { assert, MathUtils } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\nimport { MapView } from \"./MapView\";\n\n/**\n * Manages the fog display in [[MapView]].\n */\nexport class MapViewFog {\n    private m_enabled: boolean = true;\n    private m_fog: THREE.Fog = new THREE.Fog(0x000000); // Default color asked by DefinitelyTyped.\n    private m_fogIsDefined: boolean = false;\n    private m_cachedTheme: Theme = { styles: {} };\n\n    /**\n     * Constructs a `MapViewFog` instance.\n     *\n     * @param m_scene The scene used in [[MapView]] that contains the map objects.\n     */\n    constructor(private m_scene: THREE.Scene) {}\n\n    /**\n     * Allows for disabling the fog, even if it is defined in the theme. Use this property for\n     * custom views like the demo app's debug camera. However, if the theme does not define a\n     * fog, enabling this property here has no effect.\n     *\n     * @param value A boolean that specifies whether the fog should be enabled or disabled.\n     */\n    set enabled(enableFog: boolean) {\n        this.m_enabled = enableFog;\n        if (enableFog && this.m_fogIsDefined && this.m_scene.fog === null) {\n            this.add();\n        } else if (!enableFog && this.m_scene.fog !== null) {\n            this.remove();\n        }\n    }\n\n    /**\n     * Returns the current fog status, enabled or disabled.\n     */\n    get enabled(): boolean {\n        return this.m_enabled;\n    }\n\n    /**\n     * Sets the fog depending on the [[Theme]] instance provided. This function is called when a\n     * theme is loaded. Fog is added only if the theme contains a fog definition with a:\n     * - `color` property, used to set the fog color.\n     * - `startRatio` property, used to set the start distance of the fog as a ratio of the far\n     * clipping plane distance.\n     *\n     * @param theme A [[Theme]] instance.\n     */\n    reset(theme: Theme) {\n        this.m_cachedTheme = theme;\n        if (\n            theme !== undefined &&\n            theme.fog !== undefined &&\n            theme.fog.color !== undefined &&\n            theme.fog.startRatio !== undefined\n        ) {\n            this.m_fogIsDefined = true;\n            this.m_fog.color.set(theme.fog.color);\n            if (this.m_enabled && this.m_scene.fog === null) {\n                this.add();\n            }\n        } else {\n            this.m_fogIsDefined = false;\n            if (this.m_scene.fog !== null) {\n                this.remove();\n            }\n        }\n    }\n\n    /**\n     * Updates the fog at runtime, depending on the camera.\n     *\n     * @param camera An instance of a `THREE.Camera` with a `far` property.\n     */\n    update(mapView: MapView, viewDistance?: number) {\n        if (\n            this.m_scene.fog !== null &&\n            this.m_cachedTheme !== undefined &&\n            this.m_cachedTheme.fog &&\n            this.m_cachedTheme.fog.startRatio !== undefined &&\n            (mapView.camera.far !== undefined || viewDistance !== undefined)\n        ) {\n            // If maximum visibility range is available use it instead of camera.far distance,\n            // this makes fog independent from dynamic camera planes and keeps consistent\n            // distance based \"melting\" (fog) effect during a tilt.\n            const viewRange = viewDistance !== undefined ? viewDistance : mapView.camera.far;\n            // TODO: We may move below constants to theme Fog definition\n            // Density of the fog when viewing straight along the horizon line.\n            const horizontalDensity = 1.0;\n            // Theoretical density of the fog when viewing straight from top to down.\n            const verticalDensity = 0.0;\n            // The fraction of the maximum viewing distance along the eye vector\n            // to start applying the fog.\n            const startRatio = this.m_cachedTheme.fog.startRatio;\n            // The fraction of maximum viewing range at which fog fully covers geometry.\n            const endRatio = 1.0;\n            assert(startRatio <= endRatio);\n            const t = Math.abs(Math.cos(mapView.tilt));\n            const density = MathUtils.smoothStep(horizontalDensity, verticalDensity, t);\n            this.m_fog.near = MathUtils.lerp(viewRange * startRatio, viewRange, 1.0 - density);\n            this.m_fog.far = MathUtils.lerp(viewRange * endRatio, viewRange, density);\n            this.m_fog.near = Math.min(this.m_fog.near, mapView.camera.far);\n            this.m_fog.far = Math.min(this.m_fog.far, mapView.camera.far);\n        }\n    }\n\n    /**\n     * Handles fog addition.\n     */\n    private add() {\n        // When the fog is changed, ThreeJS takes care of recompiling its built-in materials...\n        this.m_scene.fog = this.m_fog;\n        // ...except the `RawShaderMaterial`, on purpose, so it needs to be updated from the app.\n        this.setFogInRawShaderMaterials(true);\n    }\n\n    /**\n     * Handles fog removal.\n     */\n    private remove() {\n        // When the fog is changed, ThreeJS takes care of recompiling its built-in materials...\n        this.m_scene.fog = null;\n        // ...except the `RawShaderMaterial`, on purpose, so it needs to be updated from the app.\n        this.setFogInRawShaderMaterials(false);\n    }\n\n    /**\n     * ThreeJS lets users manage the `RawShaderMaterial` themselves, so they need to be modified\n     * explicitly.\n     *\n     * @see https://github.com/mrdoob/three.js/blob/dev/src/renderers/webgl/WebGLProgram.js#L298\n     */\n    private setFogInRawShaderMaterials(enableFog: boolean) {\n        this.m_scene.traverse(object => {\n            if (!(object instanceof THREE.Mesh)) {\n                return;\n            }\n            if (!(object.material instanceof THREE.Material)) {\n                return;\n            }\n            // HighPrecisionLineMaterial does not support fog\n            if (object.material instanceof HighPrecisionLineMaterial) {\n                return;\n            }\n            // We may skip redundant updates.\n            if (object.material.fog === enableFog) {\n                return;\n            }\n            object.material.fog = enableFog;\n            // Fog properties can't be easily changed at runtime (once the material\n            // is rendered at least once) and thus requires building of new shader\n            // program - force material update.\n            object.material.needsUpdate = true;\n        });\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    AttributeMap,\n    composeTechniqueTextureName,\n    DecodedTile,\n    getFeatureId,\n    getPropertyValue,\n    ImageTexture,\n    IndexedTechnique,\n    IndexedTechniqueParams,\n    isLineMarkerTechnique,\n    isPoiTechnique,\n    LineMarkerTechnique,\n    PoiGeometry,\n    PoiTechnique\n} from \"@here/harp-datasource-protocol\";\nimport { ContextualArabicConverter } from \"@here/harp-text-canvas\";\nimport { assert, assertExists, LoggerManager } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\nimport { ColorCache } from \"../ColorCache\";\nimport { MapView } from \"../MapView\";\nimport { TextElement } from \"../text/TextElement\";\nimport { DEFAULT_TEXT_DISTANCE_SCALE } from \"../text/TextElementsRenderer\";\nimport { Tile } from \"../Tile\";\nimport { PoiTable } from \"./PoiTableManager\";\n\nconst logger = LoggerManager.instance.create(\"PoiManager\");\n\n/**\n * Interface for the [[ImageTexture]]s that are defined in the atlas.\n */\ninterface ImageTextureDef {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n    pixelRatio?: number;\n}\n\n/**\n * POI manager class, responsible for loading the [[PoiGeometry]] objects from the [[DecodedTile]],\n * and preparing them for rendering. Also loads and manages the texture atlases for the icons.\n */\nexport class PoiManager {\n    // Keep track of the missing POI table names, but only warn once.\n    private static m_missingPoiTableName: Map<string, boolean> = new Map();\n    private static m_missingPoiName: Map<string, boolean> = new Map();\n\n    /**\n     * Warn about a missing POI table name, but only once.\n     * @param poiTableName POI mapping table name.\n     * @param poiTable POI table instance.\n     */\n    private static notifyMissingPoiTable(\n        poiTableName: string,\n        poiTable: PoiTable | undefined\n    ): void {\n        if (poiTableName === undefined) {\n            poiTableName = \"undefined\";\n        }\n        if (PoiManager.m_missingPoiTableName.get(poiTableName) === undefined) {\n            PoiManager.m_missingPoiTableName.set(poiTableName, true);\n            if (poiTable !== undefined && !poiTable.loadedOk) {\n                logger.error(`updatePoiFromPoiTable: Could not load POI table '${poiTableName}'!`);\n            } else {\n                logger.error(\n                    `updatePoiFromPoiTable: No POI table with name '${poiTableName}' found!`\n                );\n            }\n        }\n    }\n\n    /**\n     * Warn about a missing POI name, but only once.\n     * @param poiName name of POI.\n     * @param poiTableName POI mapping table name.\n     */\n    private static notifyMissingPoi(poiName: string, poiTableName: string): void {\n        if (poiName === undefined) {\n            poiName = \"undefined\";\n        }\n        const key: string = `${poiTableName}[${poiName}]`;\n        if (PoiManager.m_missingPoiName.get(key) === undefined) {\n            PoiManager.m_missingPoiName.set(key, true);\n            logger.warn(\n                `updatePoiFromPoiTable: ` +\n                    `Cannot find POI info for '${poiName}' in table '${poiTableName}'.`\n            );\n        }\n    }\n\n    private m_imageTextures: Map<string, ImageTexture> = new Map();\n    private m_poiShieldGroups: Map<string, number> = new Map();\n\n    /**\n     * The constructor of the `PoiManager`.\n     *\n     * @param mapView The [[MapView]] instance that should display the POIs.\n     */\n    constructor(readonly mapView: MapView) {}\n\n    /**\n     * Add all POIs from a decoded tile and store them as [[TextElement]]s in the [[Tile]].\n     *\n     * Also handles LineMarkers, which is a recurring marker along a line (road).\n     *\n     * @param tile Tile to add POIs to.\n     * @param decodedTile DecodedTile containing the raw [[PoiGeometry]] objects describing the\n     *  POIs.\n     */\n    addPois(tile: Tile, decodedTile: DecodedTile): void {\n        const poiGeometries = assertExists(decodedTile.poiGeometries);\n        const worldOffsetX = tile.computeWorldOffsetX();\n\n        for (const poiGeometry of poiGeometries) {\n            assert(poiGeometry.technique !== undefined);\n            const techniqueIndex = assertExists(poiGeometry.technique);\n            const technique = decodedTile.techniques[techniqueIndex] as IndexedTechnique;\n\n            if (\n                technique._kindState === false ||\n                (!isLineMarkerTechnique(technique) && !isPoiTechnique(technique))\n            ) {\n                continue;\n            }\n\n            // The POI may be in the data, and there may be a Technique, but the technique may\n            // specify to not show it.\n            if (technique.showOnMap === false) {\n                continue;\n            }\n\n            const positions = new THREE.BufferAttribute(\n                new Float32Array(poiGeometry.positions.buffer),\n                poiGeometry.positions.itemCount\n            );\n\n            if (isLineMarkerTechnique(technique) && positions.count > 0) {\n                this.addLineMarker(tile, poiGeometry, technique, positions, worldOffsetX);\n            } else if (isPoiTechnique(technique)) {\n                this.addPoi(tile, poiGeometry, technique, positions, worldOffsetX);\n            }\n        }\n    }\n\n    /**\n     * Load the texture atlas that defines the segments of the texture that should be used for\n     * specific icons. Creates an [[ImageTexture]] for every element in the atlas, such that it can\n     * be addressed in the theme file.\n     *\n     * @param imageName Name of the image from the theme (NOT the url!).\n     * @param atlas URL of the JSON file defining the texture atlas.\n     */\n    addTextureAtlas(imageName: string, atlas: string) {\n        fetch(atlas)\n            .then(response => {\n                if (!response.ok) {\n                    throw new Error(\n                        `addTextureAtlas: Cannot load textureAtlas: ${response.statusText}`\n                    );\n                }\n\n                return response.json();\n            })\n            .then((jsonAtlas: any | undefined) => {\n                if (jsonAtlas === undefined) {\n                    logger.info(`addTextureAtlas: TextureAtlas empty: ${atlas}`);\n                    return;\n                }\n\n                try {\n                    logger.debug(\n                        `addTextureAtlas: Loading textureAtlas '${atlas}' for image '${imageName}'`\n                    );\n                    for (const textureName of Object.getOwnPropertyNames(jsonAtlas)) {\n                        const imageTextureDef = jsonAtlas[textureName] as ImageTextureDef;\n\n                        const imageTexture: ImageTexture = {\n                            name: textureName,\n                            image: imageName,\n                            xOffset: imageTextureDef.x,\n                            yOffset: imageTextureDef.y,\n                            width: imageTextureDef.width,\n                            height: imageTextureDef.height\n                        };\n\n                        this.addImageTexture(imageTexture);\n                    }\n                } catch (ex) {\n                    logger.error(\n                        `addTextureAtlas: Failed to load textureAtlas ` + `'${atlas}' : ${ex}`\n                    );\n                }\n                this.mapView.update();\n            })\n\n            .catch((reason: any) => {\n                logger.error(`addTextureAtlas: Failed to load textureAtlas '${atlas}' : ${reason}`);\n            });\n    }\n\n    /**\n     * Add an [[ImageTexture]] such that it is available as a named entity for techniques in theme\n     * files.\n     *\n     * @param imageTexture [[ImageTexture]] that should be available for POIs.\n     */\n    addImageTexture(imageTexture: ImageTexture) {\n        if (imageTexture.name === undefined) {\n            logger.error(\"addImageTexture: Name required\", imageTexture);\n            return;\n        }\n        if (this.m_imageTextures.get(imageTexture.name) !== undefined) {\n            logger.warn(\n                `addImageTexture: Name already used: ${imageTexture.name}` + ` (overriding it)`\n            );\n        }\n\n        this.m_imageTextures.set(imageTexture.name, imageTexture);\n    }\n\n    /**\n     * Return the [[ImageTexture]] registered under the specified name.\n     *\n     * @param name Name of the [[ImageTexture]].\n     */\n    getImageTexture(name: string): ImageTexture | undefined {\n        return this.m_imageTextures.get(name);\n    }\n\n    /**\n     * Update the [[TextElement]] with the information taken from the [[PoiTable]] which is\n     * referenced in the [[PoiInfo]] of the pointLabel.\n     *\n     * If the requested [[PoiTable]] is not available yet, the function returns `false`.\n     * If the [[PoiTable]] is not defined, or if the references POI has no entry in\n     * the [[PoiTable]], no action is taken, and the function returns `false`.\n     *\n     * If the [[PoiTable]] has been processed, it returns `true`, indicating that this function\n     * doesn't have to be called again.\n     *\n     * @param pointLabel The [[TextElement]] to update.\n     *\n     * @returns `true` if the [[PoiTable]] has been processed, and the function does not have to be\n     *          called again.\n     */\n    updatePoiFromPoiTable(pointLabel: TextElement): boolean {\n        const poiInfo = pointLabel.poiInfo;\n        // PoiTable requires poiName to be defined otherwise mapping via PoiTable is\n        // not possible, such as table key is not defined.\n        if (\n            poiInfo === undefined ||\n            poiInfo.poiTableName === undefined ||\n            poiInfo.poiName === undefined\n        ) {\n            return true;\n        }\n\n        // Try to acquire PoiTable\n        const poiTableName = poiInfo.poiTableName;\n        const poiTable = this.mapView.poiTableManager.getPoiTable(poiTableName);\n\n        // Check if PoiTable is found, but its still loading.\n        if (poiTable !== undefined && poiTable.isLoading) {\n            // The PoiTable is still loading, we have to try again.\n            return false;\n        }\n\n        // Remove poiTableName to mark this POI as processed.\n        poiInfo.poiTableName = undefined;\n\n        // PoiTable not found or can not be loaded.\n        if (poiTable === undefined || !poiTable.loadedOk) {\n            PoiManager.notifyMissingPoiTable(poiTableName, poiTable);\n            return true;\n        }\n\n        // Try to acquire PoiTableEntry.\n        const poiName = poiInfo.poiName;\n        const poiTableEntry = poiTable.getEntry(poiName);\n        if (poiTableEntry === undefined) {\n            PoiManager.notifyMissingPoi(poiName, poiTableName);\n            return true;\n        }\n\n        if (poiTableEntry.iconName !== undefined && poiTableEntry.iconName.length > 0) {\n            poiInfo.imageTextureName = composeTechniqueTextureName(\n                poiTableEntry.iconName,\n                poiInfo.technique\n            );\n        }\n\n        pointLabel.visible =\n            poiTableEntry.visible !== undefined ? poiTableEntry.visible : pointLabel.visible;\n        pointLabel.priority =\n            poiTableEntry.priority !== undefined ? poiTableEntry.priority : pointLabel.priority;\n        poiInfo.iconMinZoomLevel =\n            poiTableEntry.iconMinLevel !== undefined\n                ? poiTableEntry.iconMinLevel\n                : poiInfo.iconMinZoomLevel;\n        poiInfo.iconMaxZoomLevel =\n            poiTableEntry.iconMaxLevel !== undefined\n                ? poiTableEntry.iconMaxLevel\n                : poiInfo.iconMaxZoomLevel;\n        poiInfo.textMinZoomLevel =\n            poiTableEntry.textMinLevel !== undefined\n                ? poiTableEntry.textMinLevel\n                : poiInfo.textMinZoomLevel;\n        poiInfo.textMaxZoomLevel =\n            poiTableEntry.textMaxLevel !== undefined\n                ? poiTableEntry.textMaxLevel\n                : poiInfo.textMaxZoomLevel;\n\n        pointLabel.updateMinMaxZoomLevelsFromPoiInfo();\n\n        return true;\n    }\n\n    /**\n     * Clear internal state. Applicable when switching themes.\n     */\n    clear() {\n        this.m_imageTextures.clear();\n        this.m_poiShieldGroups.clear();\n    }\n\n    /**\n     * Add the LineMarker as a POI with a series of positions. Make sure that the LineMarkers\n     * having the same visual all get their `shieldGroupIndex` set appropriately, so it can be taken\n     * care of later that not too many of them are rendered (obey `minDistance` attribute).\n     */\n    private addLineMarker(\n        tile: Tile,\n        poiGeometry: PoiGeometry,\n        technique: LineMarkerTechnique & IndexedTechniqueParams,\n        positions: THREE.BufferAttribute,\n        worldOffsetX: number\n    ) {\n        const env = this.mapView.env;\n\n        let imageTextureName: string | undefined =\n            technique.imageTexture !== undefined\n                ? composeTechniqueTextureName(\n                      getPropertyValue(technique.imageTexture, env),\n                      technique\n                  )\n                : undefined;\n\n        let text: string = \"\";\n        let userData: AttributeMap | undefined;\n        let featureId: number | undefined;\n\n        if (poiGeometry.stringCatalog !== undefined) {\n            assert(poiGeometry.texts.length > 0);\n            text = poiGeometry.stringCatalog[poiGeometry.texts[0]] || \"\";\n            if (poiGeometry.objInfos !== undefined) {\n                userData = poiGeometry.objInfos[0];\n                featureId = getFeatureId(userData);\n            }\n\n            if (poiGeometry.imageTextures !== undefined) {\n                assert(poiGeometry.imageTextures.length > 0);\n                imageTextureName = poiGeometry.stringCatalog[poiGeometry.imageTextures[0]];\n            }\n        }\n\n        // let the combined image texture name (name of image in atlas, not the URL) and\n        // text of the shield be the group key, at worst scenario it may be:\n        // \"undefined-\"\n        const groupKey = String(imageTextureName) + \"-\" + text;\n        let shieldGroupIndex = this.m_poiShieldGroups.get(groupKey);\n        if (shieldGroupIndex === undefined) {\n            shieldGroupIndex = this.m_poiShieldGroups.size;\n            this.m_poiShieldGroups.set(groupKey, shieldGroupIndex);\n        }\n\n        // Debugging help to identify the group of a shield :\n        // text = groupKey + \": \" + text;\n\n        const positionArray: THREE.Vector3[] = [];\n        for (let i = 0; i < positions.count; i += 3) {\n            const x = positions.getX(i) + worldOffsetX;\n            const y = positions.getY(i);\n            const z = positions.getZ(i);\n            positionArray.push(new THREE.Vector3(x, y, z));\n        }\n        const textElement = this.checkCreateTextElement(\n            tile,\n            text,\n            technique,\n            imageTextureName,\n            undefined, // TBD for road shields\n            undefined,\n            shieldGroupIndex,\n            featureId,\n            positionArray,\n            undefined,\n            undefined,\n            undefined,\n            userData\n        );\n\n        // If the poi icon is rendered, the label that shows text should also be rendered.\n        // The distance rule of the icon should apply, not the one for text (only) labels.\n        textElement.ignoreDistance = false;\n        tile.addTextElement(textElement);\n    }\n\n    /**\n     * Create and add POI [[TextElement]]s to tile with a series of positions.\n     */\n    private addPoi(\n        tile: Tile,\n        poiGeometry: PoiGeometry,\n        technique: PoiTechnique & IndexedTechniqueParams,\n        positions: THREE.BufferAttribute,\n        worldOffsetX: number\n    ) {\n        if (poiGeometry.stringCatalog === undefined) {\n            return;\n        }\n\n        const env = tile.mapView.env;\n\n        const techniqueTextureName: string | undefined =\n            technique.imageTexture !== undefined\n                ? composeTechniqueTextureName(\n                      getPropertyValue(technique.imageTexture, env),\n                      technique\n                  )\n                : undefined;\n\n        const poiTechnique = technique as PoiTechnique;\n        const poiTableName = poiTechnique.poiTable;\n        let poiName = poiTechnique.poiName;\n\n        for (let i = 0; i < positions.count; ++i) {\n            const x = positions.getX(i) + worldOffsetX;\n            const y = positions.getY(i);\n            const z = positions.getZ(i);\n\n            assert(poiGeometry.texts.length > i);\n            let imageTextureName = techniqueTextureName;\n            const text: string = poiGeometry.stringCatalog[poiGeometry.texts[i]] || \"\";\n            const userData =\n                poiGeometry.objInfos !== undefined ? poiGeometry.objInfos[i] : undefined;\n            const featureId = getFeatureId(userData);\n            const offsetDirection =\n                poiGeometry.offsetDirections === undefined ? 0 : poiGeometry.offsetDirections[i];\n            if (poiGeometry.imageTextures !== undefined && poiGeometry.imageTextures[i] >= 0) {\n                assert(poiGeometry.imageTextures.length > i);\n                imageTextureName = poiGeometry.stringCatalog[poiGeometry.imageTextures[i]];\n            }\n            if (poiTableName !== undefined) {\n                // The POI name to be used is taken from the data, since it will\n                // specify the name of the texture to use.\n\n                // The POI name in the technique may override the POI name from the\n                // data.\n                poiName =\n                    poiTechnique.poiName === undefined ? imageTextureName : poiTechnique.poiName;\n\n                imageTextureName = undefined;\n            }\n\n            const textElement = this.checkCreateTextElement(\n                tile,\n                text,\n                technique,\n                imageTextureName,\n                poiTableName,\n                poiName,\n                0,\n                featureId,\n                x,\n                y,\n                z,\n                offsetDirection,\n                userData\n            );\n\n            tile.addTextElement(textElement);\n        }\n    }\n\n    /**\n     * Create the [[TextElement]] for a POI. Even if the POI has no text, it is required that there\n     * is a [[TextElement]], since POIs are hooked onto [[TextElement]]s for sorting.(Sorted by\n     * priority attribute).\n     */\n    private checkCreateTextElement(\n        tile: Tile,\n        text: string,\n        technique: (PoiTechnique | LineMarkerTechnique) & IndexedTechniqueParams,\n        imageTextureName: string | undefined,\n        poiTableName: string | undefined,\n        poiName: string | undefined,\n        shieldGroupIndex: number,\n        featureId: number | undefined,\n        x: number | THREE.Vector3[],\n        y: number | undefined,\n        z: number | undefined,\n        offsetDirection?: number,\n        userData?: {}\n    ): TextElement {\n        const priority = technique.priority !== undefined ? technique.priority : 0;\n        const positions = Array.isArray(x) ? (x as THREE.Vector3[]) : new THREE.Vector3(x, y, z);\n\n        // The current zoomlevel of mapview. Since this method is called for all tiles in the\n        // VisibleTileSet we can be sure that the current zoomlevel matches the zoomlevel where\n        // the tile should be shown.\n        const env = this.mapView.env;\n        const fadeNear =\n            technique.fadeNear !== undefined\n                ? getPropertyValue(technique.fadeNear, env)\n                : technique.fadeNear;\n        const fadeFar =\n            technique.fadeFar !== undefined\n                ? getPropertyValue(technique.fadeFar, env)\n                : technique.fadeFar;\n        const xOffset = getPropertyValue(technique.xOffset, env);\n        const yOffset = getPropertyValue(technique.yOffset, env);\n\n        const textElement: TextElement = new TextElement(\n            ContextualArabicConverter.instance.convert(text),\n            positions,\n            tile.textStyleCache.getRenderStyle(technique),\n            tile.textStyleCache.getLayoutStyle(technique),\n            getPropertyValue(priority, env),\n            xOffset !== undefined ? xOffset : 0.0,\n            yOffset !== undefined ? yOffset : 0.0,\n            featureId,\n            technique.style,\n            fadeNear,\n            fadeFar,\n            tile.offset,\n            offsetDirection\n        );\n\n        textElement.mayOverlap = technique.textMayOverlap === true;\n        textElement.reserveSpace = technique.textReserveSpace !== false;\n        textElement.alwaysOnTop = technique.alwaysOnTop === true;\n        textElement.userData = userData;\n\n        // imageTextureName may be undefined if a poiTable is used.\n        if (imageTextureName === undefined && poiTableName !== undefined) {\n            imageTextureName = \"\";\n        } else if (imageTextureName !== undefined && poiTableName !== undefined) {\n            logger.warn(\n                \"Possible duplicate POI icon definition via imageTextureName and poiTable!\"\n            );\n        }\n\n        if (imageTextureName !== undefined) {\n            const textIsOptional = technique.textIsOptional === true;\n            const iconIsOptional = technique.iconIsOptional !== false;\n            const renderTextDuringMovements = !(technique.renderTextDuringMovements === false);\n            const iconMayOverlap =\n                technique.iconMayOverlap === undefined\n                    ? textElement.textMayOverlap\n                    : technique.iconMayOverlap === true;\n            const iconReserveSpace =\n                technique.iconReserveSpace === undefined\n                    ? textElement.textReservesSpace\n                    : technique.iconReserveSpace !== false;\n\n            const iconColorRaw = technique.iconColor\n                ? getPropertyValue(technique.iconColor, env)\n                : null;\n            const iconColor =\n                iconColorRaw !== null ? ColorCache.instance.getColor(iconColorRaw) : undefined;\n\n            textElement.poiInfo = {\n                technique,\n                imageTextureName,\n                poiTableName,\n                poiName,\n                shieldGroupIndex,\n                textElement,\n                textIsOptional,\n                iconIsOptional,\n                renderTextDuringMovements,\n                mayOverlap: iconMayOverlap,\n                reserveSpace: iconReserveSpace,\n                featureId,\n                iconBrightness: technique.iconBrightness,\n                iconColor,\n                iconMinZoomLevel: technique.iconMinZoomLevel,\n                iconMaxZoomLevel: technique.iconMaxZoomLevel,\n                textMinZoomLevel: technique.textMinZoomLevel,\n                textMaxZoomLevel: technique.textMaxZoomLevel\n            };\n            textElement.updateMinMaxZoomLevelsFromPoiInfo();\n        } else {\n            // Select the smaller/larger one of the two min/max values, because the TextElement\n            // is a container for both.\n            if (textElement.minZoomLevel === undefined) {\n                textElement.minZoomLevel = technique.textMinZoomLevel;\n            }\n\n            if (textElement.maxZoomLevel === undefined) {\n                textElement.maxZoomLevel = technique.textMaxZoomLevel;\n            }\n        }\n\n        textElement.distanceScale =\n            technique.distanceScale !== undefined\n                ? technique.distanceScale\n                : DEFAULT_TEXT_DISTANCE_SCALE;\n\n        // tslint:disable-next-line: deprecation\n        textElement.kind = technique.kind;\n        return textElement;\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport {\n    PoiStackMode,\n    PoiTableDef,\n    PoiTableEntryDef,\n    PoiTableRef,\n    Theme\n} from \"@here/harp-datasource-protocol\";\nimport { LoggerManager } from \"@here/harp-utils\";\n\nimport { MapView } from \"../MapView\";\n\nconst logger = LoggerManager.instance.create(\"PoiTable\");\n\n/**\n * Class to store and maintain individual POI information for the [[PoiTable]].\n */\nclass PoiTableEntry implements PoiTableEntryDef {\n    /**\n     * Verify that the JSON description of the POI table entry is valid.\n     *\n     * @param jsonEntry JSON description of the POI table entry.\n     *\n     * @returns `true` if the `jsonEntry` is valid.\n     */\n    static verifyJSON(jsonEntry: PoiTableEntryDef): boolean {\n        let isOK =\n            typeof jsonEntry.name === \"string\" &&\n            jsonEntry.name.length > 0 &&\n            (jsonEntry.altNames === undefined || Array.isArray(jsonEntry.altNames)) &&\n            (jsonEntry.stackMode === undefined ||\n                jsonEntry.stackMode === \"yes\" ||\n                jsonEntry.stackMode === \"no\" ||\n                jsonEntry.stackMode === \"parent\") &&\n            (jsonEntry.visible === undefined || typeof jsonEntry.visible === \"boolean\") &&\n            (jsonEntry.priority === undefined || typeof jsonEntry.priority === \"number\") &&\n            (jsonEntry.iconMinLevel === undefined || typeof jsonEntry.iconMinLevel === \"number\") &&\n            (jsonEntry.iconMaxLevel === undefined || typeof jsonEntry.iconMaxLevel === \"number\") &&\n            (jsonEntry.textMinLevel === undefined || typeof jsonEntry.textMinLevel === \"number\") &&\n            (jsonEntry.textMaxLevel === undefined || typeof jsonEntry.textMaxLevel === \"number\");\n\n        if (isOK && jsonEntry.altNames !== undefined) {\n            const altNames = jsonEntry.altNames as string[];\n            for (const str in altNames) {\n                if (typeof str !== \"string\") {\n                    isOK = false;\n                    break;\n                }\n            }\n        }\n\n        return isOK;\n    }\n\n    /** Default name of the POI as the key for looking it up. */\n    name?: string;\n    /** Alternative names of the POI. */\n    altNames?: string[];\n    /** Visibility of the POI. If `false`, the POI will not be rendered. */\n    visible?: boolean;\n    /** Name of the icon, defined in the the texture atlases. */\n    iconName?: string;\n    /** Stacking mode of the POI. For future use. */\n    stackMode?: PoiStackMode;\n    /**\n     * Priority of the POI to select the visible set in case there are more POIs than can be\n     * handled.\n     */\n    priority?: number;\n    /** Minimum zoom level to render the icon on. */\n    iconMinLevel?: number;\n    /** Maximum zoom level to render the icon on. */\n    iconMaxLevel?: number;\n    /** Minimum zoom level to render the text label on. */\n    textMinLevel?: number;\n    /** Maximum zoom level to render the text label on. */\n    textMaxLevel?: number;\n\n    /**\n     * Setup the [[PoiTableEntry]] from the JSON description. It is assumed that the jsonEntry has\n     * been verified with [[PoiTableEntry#verifyJSON]].\n     *\n     * @param jsonEntry JSON description of the POI table entry. Expected to have been verified with\n     *          [[PoiTableEntry#verifyJSON]].\n     */\n    setup(jsonEntry: PoiTableEntryDef) {\n        this.name = jsonEntry.name;\n        this.altNames = jsonEntry.altNames;\n        this.iconName = jsonEntry.iconName;\n        this.visible = jsonEntry.visible;\n        this.priority = jsonEntry.priority;\n        this.iconMinLevel = jsonEntry.iconMinLevel;\n        this.iconMaxLevel = jsonEntry.iconMaxLevel;\n        this.textMinLevel = jsonEntry.textMinLevel;\n        this.textMaxLevel = jsonEntry.textMaxLevel;\n\n        switch (jsonEntry.stackMode) {\n            case \"yes\":\n                this.stackMode = PoiStackMode.Show;\n                break;\n            case \"no\":\n                this.stackMode = PoiStackMode.Hide;\n                break;\n            case \"parent\":\n                this.stackMode = PoiStackMode.ShowParent;\n                break;\n            default:\n        }\n    }\n}\n\n/**\n * The `PoiTable` stores individual information for each POI type. If a [[TextElement]] has a\n * reference to a PoiTable (if TextElement.poiInfo.poiTableName is set), information for the\n * TextElement and its icon are read from the PoiTable.\n *\n * The key to look up the POI is taken from the data, in case of OSM data with TileZen data, the\n * `poiNameField` is set to `kind`, which makes the content of the field `kind` in the data the key\n * to look up the POIs in the [[PoiTable]].\n *\n * On the side of the [[PoiTable]], the key to look up the PoiTableEntry is either the property\n * \"name\" of the [[PoiTableEntry]] (which should be unique), or the alternative list of names\n * `altNames`, where each value should also be unique. If the property `useAltNamesForKey` is set to\n * `true`, the `altNames` will be used.\n */\nexport class PoiTable {\n    /**\n     * Stores the list of [[PoiTableEntry]]s.\n     */\n    private readonly poiList: PoiTableEntry[] = new Array();\n    /**\n     * Dictionary to look up for [[PoiTableEntry]] quickly. The dictionary is either created for\n     * the `name` property of the [[PoiTableEntry]], which will identify POI, or for all of\n     * alternative the names defined in `altNames` of [[PoiTableEntry]] JSON object.\n     * Value assigned to key it is the index to [[poiList]] array which contain actual\n     * [[PoiTabelEntry]] objects.\n     */\n    private readonly poiDict: Map<string, number> = new Map();\n    private m_isLoading = false;\n    private m_loadedOk: boolean | undefined = undefined;\n\n    /**\n     * Creates an instance of PoiTable.\n     *\n     * @param {string} name Name of the `PoiTable`. Must be unique.\n     * @param {boolean} useAltNamesForKey Pass `true` to use the contents of the property `altNames`\n     *          to find a [[PoiTableEntry]] in the table.\n     */\n    constructor(readonly name: string, readonly useAltNamesForKey: boolean) {}\n\n    /**\n     * Returns `true` if the table is currently being loaded, `false` otherwise.\n     *\n     * @readonly\n     */\n    get isLoading(): boolean {\n        return this.m_isLoading;\n    }\n\n    /**\n     * Returns `true` if the table has been loaded correctly, `false` otherwise.\n     *\n     * @readonly\n     */\n    get loadedOk(): boolean {\n        return this.m_loadedOk === true;\n    }\n\n    /**\n     * Gets [[PoiTableEntry]] for poi name specified.\n     *\n     * @param poiName poi name or one of its alternative names if [[useAltNamesForKey]] is\n     * set to `true`.\n     * @returns [[PoiTableEntry]] object or undefined if name was not found in dictionary.\n     */\n    getEntry(poiName: string): PoiTableEntry | undefined {\n        const entryIdx: number | undefined = this.poiDict.get(poiName);\n        if (entryIdx !== undefined) {\n            if (entryIdx < this.poiList.length) {\n                return this.poiList[entryIdx];\n            } else {\n                throw new Error(\"Poi table entry index out of stored list!\");\n            }\n        }\n        return undefined;\n    }\n\n    /**\n     * Start to load the PoiTable from the specified URL. Can only be called once per table.\n     *\n     * @param {string} poiTableUrl URL that points to the JSON file.\n     *\n     * @returns {Promise<boolean>} Promise is being resolved once the JSON file has been fetched and\n     *          the `PoiTable` has been set up.\n     */\n    async load(poiTableUrl: string): Promise<boolean> {\n        if (this.m_loadedOk !== undefined) {\n            // Only load once.\n            return true;\n        }\n\n        this.m_loadedOk = false;\n\n        const response = await fetch(poiTableUrl);\n\n        if (!response.ok) {\n            throw new Error(\n                `load: Cannot load POI table at ${poiTableUrl}:` + ` ${response.statusText}`\n            );\n        }\n\n        const jsonPoiTable = (await response.json()) as PoiTableDef;\n        if (jsonPoiTable === undefined) {\n            logger.info(`load: TextureAtlas empty: ${poiTableUrl}`);\n            return true;\n        }\n\n        this.startLoading();\n\n        try {\n            logger.debug(`load: Loading POI table '${poiTableUrl}' for table '${this.name}'`);\n\n            if (jsonPoiTable.poiList !== undefined && Array.isArray(jsonPoiTable.poiList)) {\n                for (const tableEntry of jsonPoiTable.poiList) {\n                    if (PoiTableEntry.verifyJSON(tableEntry)) {\n                        const newPoiEntry = new PoiTableEntry();\n                        newPoiEntry.setup(tableEntry);\n                        const entryIdx = this.poiList.push(newPoiEntry) - 1;\n\n                        if (!this.useAltNamesForKey) {\n                            // Use actual name of entry as the key\n                            if (newPoiEntry.name === undefined) {\n                                logger.warn(\n                                    `load: Invalid entry in POI table '${poiTableUrl}' : ` +\n                                        `. No name set in entry: ${tableEntry}.`\n                                );\n                            } else {\n                                this.poiDict.set(newPoiEntry.name, entryIdx);\n                            }\n                        } else {\n                            if (\n                                newPoiEntry.altNames !== undefined &&\n                                newPoiEntry.altNames.length > 0\n                            ) {\n                                // Use the list of alternative names as keys.\n                                for (const altName of newPoiEntry.altNames) {\n                                    this.poiDict.set(altName, entryIdx);\n                                }\n                            } else {\n                                logger.debug(\n                                    `load: Invalid entry in POI table '${poiTableUrl}' : ` +\n                                        `No alternative names set in entry: ${JSON.stringify(\n                                            tableEntry\n                                        )}.`\n                                );\n                            }\n                        }\n                    } else {\n                        logger.warn(\n                            `load: Invalid entry in POI table '${poiTableUrl}' : ${JSON.stringify(\n                                tableEntry\n                            )}`\n                        );\n                    }\n                }\n            }\n            this.m_loadedOk = true;\n            this.finishedLoading();\n        } catch (ex) {\n            logger.error(`load: Failed to load POI table ` + `'${poiTableUrl}' : ${ex}`);\n            this.m_loadedOk = false;\n            this.finishedLoading();\n            return false;\n        }\n        return true;\n    }\n\n    private startLoading() {\n        this.m_isLoading = true;\n    }\n\n    private finishedLoading() {\n        this.m_isLoading = false;\n    }\n}\n\n/**\n * The `PoiTableManager` manages the list of [[PoiTables]] that can be defined in the [[Theme]]\n * file.\n */\nexport class PoiTableManager {\n    private m_isLoading = false;\n    private m_poiTables: Map<string, PoiTable> = new Map();\n\n    /**\n     * Creates an instance of PoiTableManager.\n     * @param {MapView} mapView Owning [[MapView]].\n     */\n    constructor(readonly mapView: MapView) {}\n\n    /**\n     * Load the [[PoiTable]]s that are stored in the [[MapView]]s [[Theme]]. Note that duplicate\n     * names of [[PoiTable]]s in the [[Theme]] will lead to inaccessible [[PoiTable]]s.\n     *\n     * @param {Theme} theme [[Theme]] containing all [[PoiTable]]s to load.\n     *\n     * @returns {Promise<void>} Resolved once all the [[PoiTable]]s in the [[Theme]] have been\n     *          loaded.\n     */\n    async loadPoiTables(theme: Theme): Promise<void> {\n        const finished = new Promise<void>(resolve => {\n            this.clear();\n\n            // Add the POI tables defined in the theme.\n            if (theme.poiTables !== undefined) {\n                this.startLoading();\n\n                // Gather promises to signal the success of having loaded them all\n                const loadPromises: Array<Promise<boolean>> = new Array();\n\n                theme.poiTables.forEach((poiTableRef: PoiTableRef) => {\n                    if (\n                        poiTableRef !== undefined &&\n                        poiTableRef.name !== undefined &&\n                        typeof poiTableRef.name === \"string\"\n                    ) {\n                        const poiTable = new PoiTable(\n                            poiTableRef.name,\n                            poiTableRef.useAltNamesForKey !== false\n                        );\n                        if (poiTableRef.url !== undefined && typeof poiTableRef.url === \"string\") {\n                            this.addTable(poiTable);\n                            loadPromises.push(poiTable.load(poiTableRef.url));\n                        } else {\n                            logger.error(`POI table definition has no valid url: ${poiTableRef}`);\n                        }\n                    } else {\n                        logger.error(`POI table definition has no valid name: ${poiTableRef}`);\n                    }\n                });\n\n                if (loadPromises.length > 0) {\n                    Promise.all(loadPromises).finally(() => {\n                        this.finishLoading();\n                        resolve();\n                    });\n                } else {\n                    this.finishLoading();\n                    resolve();\n                }\n            } else {\n                this.finishLoading();\n                resolve();\n            }\n        });\n\n        return finished;\n    }\n\n    /**\n     * Clear the list of [[PoiTable]]s.\n     */\n    clear() {\n        this.m_poiTables = new Map();\n    }\n\n    /**\n     * Return the map of [[PoiTable]]s.\n     */\n    get poiTables(): Map<string, PoiTable> {\n        return this.m_poiTables;\n    }\n\n    /**\n     * Manually add a [[PoiTable]]. Normally, the [[PoiTables]]s are specified in the [[Theme]].\n     * Ensure that the name is unique.\n     */\n    addTable(poiTable: PoiTable) {\n        this.m_poiTables.set(poiTable.name, poiTable);\n    }\n\n    /**\n     * Retrieve a [[PoiTable]] by name.\n     *\n     * @param {(string | undefined)} poiTableName Name of the [[PoiTable]].\n     *\n     * @returns {(PoiTable | undefined)} The found [[poiTable]] if it could be found, `undefined`\n     *          otherwise.\n     */\n    getPoiTable(poiTableName: string | undefined): PoiTable | undefined {\n        return poiTableName === undefined ? undefined : this.m_poiTables.get(poiTableName);\n    }\n\n    /**\n     * Return `true` if the [[PoiTable]]s have finished loading.\n     *\n     * @readonly\n     */\n    get finishedLoading(): boolean {\n        return !this.m_isLoading;\n    }\n\n    private startLoading() {\n        this.m_isLoading = true;\n    }\n\n    private finishLoading() {\n        this.m_isLoading = false;\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nimport {\n    Definitions,\n    StandardGeometryKind,\n    StyleSet,\n    Technique,\n    Theme\n} from \"@here/harp-datasource-protocol\";\nimport { MapEnv, StyleSetEvaluator } from \"@here/harp-datasource-protocol/index-decoder\";\nimport {\n    GeoCoordinates,\n    MercatorConstants,\n    polarTilingScheme,\n    TileKey,\n    TilingScheme,\n    TransverseMercatorUtils\n} from \"@here/harp-geoutils\";\n\nimport { DataSource, DataSourceOptions } from \"./DataSource\";\nimport { createMaterial } from \"./DecodedTileHelpers\";\nimport { MapObjectAdapter } from \"./MapObjectAdapter\";\nimport { Tile } from \"./Tile\";\n\nexport interface PolarTileDataSourceOptions extends DataSourceOptions {\n    /**\n     * Optional level offset of regular tiles from reference datasource to align tiles to.\n     * Default is -1.\n     */\n    geometryLevelOffset?: number;\n\n    /**\n     * Enable debug display for generated tiles.\n     * Default is false.\n     */\n    debugTiles?: boolean;\n}\n\ninterface TechniqueEntry {\n    technique: Technique;\n    material: THREE.Material;\n}\n\n/**\n * [[DataSource]] providing geometry for poles\n */\nexport class PolarTileDataSource extends DataSource {\n    private m_tilingScheme: TilingScheme = polarTilingScheme;\n    private m_maxLatitude = THREE.MathUtils.radToDeg(MercatorConstants.MAXIMUM_LATITUDE);\n    private m_geometryLevelOffset: number;\n    private m_debugTiles: boolean;\n\n    private m_styleSetEvaluator?: StyleSetEvaluator;\n    private m_northPoleEntry?: TechniqueEntry;\n    private m_southPoleEntry?: TechniqueEntry;\n\n    constructor({\n        name = \"polar\",\n        styleSetName,\n        minDataLevel,\n        maxDataLevel,\n        minDisplayLevel,\n        maxDisplayLevel,\n        storageLevelOffset = -2,\n        geometryLevelOffset = 1,\n        debugTiles = false\n    }: PolarTileDataSourceOptions) {\n        super({\n            name,\n            styleSetName,\n            minDataLevel,\n            maxDataLevel,\n            minDisplayLevel,\n            maxDisplayLevel,\n            storageLevelOffset\n        });\n\n        this.m_geometryLevelOffset = geometryLevelOffset;\n        this.m_debugTiles = debugTiles;\n        this.cacheable = false;\n    }\n\n    /** @override */\n    dispose() {\n        if (this.m_northPoleEntry) {\n            this.m_northPoleEntry.material.dispose();\n            delete this.m_northPoleEntry;\n        }\n        if (this.m_southPoleEntry) {\n            this.m_southPoleEntry.material.dispose();\n            delete this.m_southPoleEntry;\n        }\n        if (this.m_styleSetEvaluator) {\n            delete this.m_styleSetEvaluator;\n        }\n    }\n\n    createTechiqueEntry(kind: string): TechniqueEntry | undefined {\n        if (!this.m_styleSetEvaluator) {\n            return undefined;\n        }\n        const env = new MapEnv({\n            $geometryType: \"polygon\",\n            $layer: \"earth\",\n            kind\n        });\n        const techniques = this.m_styleSetEvaluator.getMatchingTechniques(env);\n\n        if (techniques.length === 0) {\n            return undefined;\n        }\n        const technique = techniques[0];\n        const material = createMaterial({ technique, env: this.mapView.env });\n        if (!material) {\n            return undefined;\n        }\n        return { material, technique };\n    }\n\n    /** @override */\n    setStyleSet(styleSet?: StyleSet, definitions?: Definitions, languages?: string[]): void {\n        this.dispose();\n\n        if (styleSet !== undefined) {\n            this.m_styleSetEvaluator = new StyleSetEvaluator(styleSet, definitions);\n\n            this.m_northPoleEntry = this.createTechiqueEntry(\"north_pole\");\n            this.m_southPoleEntry = this.createTechiqueEntry(\"south_pole\");\n        }\n\n        this.mapView.markTilesDirty(this);\n    }\n\n    /** @override */\n    setTheme(theme: Theme, languages?: string[]): void {\n        const styleSet =\n            (this.styleSetName !== undefined && theme.styles && theme.styles[this.styleSetName]) ||\n            [];\n\n        this.setStyleSet(styleSet, theme.definitions, languages);\n    }\n\n    /** @override */\n    canGetTile(zoomLevel: number, tileKey: TileKey): boolean {\n        if (zoomLevel !== tileKey.level || tileKey.level < 1) {\n            return false;\n        }\n\n        const { north, south } = this.m_tilingScheme.getGeoBox(tileKey);\n\n        return north > this.m_maxLatitude || south < -this.m_maxLatitude;\n    }\n\n    /** @override */\n    shouldSubdivide(zoomLevel: number, tileKey: TileKey): boolean {\n        if (zoomLevel <= tileKey.level) {\n            return false;\n        }\n\n        const { north, south } = this.m_tilingScheme.getGeoBox(tileKey);\n\n        return north > this.m_maxLatitude || south < -this.m_maxLatitude;\n    }\n\n    /** @override */\n    getTilingScheme(): TilingScheme {\n        return this.m_tilingScheme;\n    }\n\n    /** @override */\n    getTile(tileKey: TileKey): Tile {\n        const tile = new Tile(this, tileKey);\n\n        this.createTileGeometry(tile);\n\n        return tile;\n    }\n\n    get geometryLevelOffset(): number {\n        return this.m_geometryLevelOffset;\n    }\n\n    set geometryLevelOffset(geometryLevelOffset: number) {\n        this.m_geometryLevelOffset = geometryLevelOffset;\n    }\n\n    private intersectEdge(latitude: number, a: GeoCoordinates, b: GeoCoordinates): GeoCoordinates {\n        const latA = a.latitude;\n        const latB = b.latitude;\n\n        let lonA = a.longitude;\n        let lonB = b.longitude;\n\n        if (Math.abs(latA) === 90) {\n            lonA = lonB;\n        }\n        if (Math.abs(latB) === 90) {\n            lonB = lonA;\n        }\n        const deltaLat = latB - latA;\n        const deltaLon = lonB - lonA;\n        const scale = (latitude - latA) / deltaLat;\n\n        return new GeoCoordinates(latitude, lonA + deltaLon * scale, 0);\n    }\n\n    private createTileGeometry(tile: Tile): void {\n        const { north, south } = tile.geoBox;\n\n        const isNorthPole = north > 0 && south >= 0;\n        const techniqueEntry = isNorthPole ? this.m_northPoleEntry : this.m_southPoleEntry;\n        if (techniqueEntry === undefined) {\n            tile.forceHasGeometry(true);\n            return;\n        }\n\n        const srcProjection = this.m_tilingScheme.projection;\n        const dstProjection = this.projection;\n\n        const maxLat = this.m_maxLatitude;\n        const poleLat = isNorthPole ? maxLat : -maxLat;\n\n        const box = this.m_tilingScheme.boundingBoxGenerator.getWorldBox(tile.tileKey);\n\n        const pBL = srcProjection.unprojectPoint(new THREE.Vector3(box.min.x, box.min.y, 0));\n        const pBR = srcProjection.unprojectPoint(new THREE.Vector3(box.max.x, box.min.y, 0));\n        const pTR = srcProjection.unprojectPoint(new THREE.Vector3(box.max.x, box.max.y, 0));\n        const pTL = srcProjection.unprojectPoint(new THREE.Vector3(box.min.x, box.max.y, 0));\n\n        let points: GeoCoordinates[];\n        let needsGeometryCut = false;\n\n        // special case where tile contains half of the hemisphere\n        if (tile.tileKey.level === 1) {\n            const isLeftHalf = box.min.x === 0;\n\n            const poleX = isLeftHalf ? box.max.x : box.min.x;\n            const poleY = (box.max.y + box.min.y) / 2;\n            const pPole = srcProjection.unprojectPoint(new THREE.Vector3(poleX, poleY, 0));\n\n            // coordinates are not used, needed for right position\n            const pXX = isLeftHalf ? pBL : pBR;\n\n            points = isNorthPole\n                ? isLeftHalf\n                    ? [pPole, pTR, pXX, pBR]\n                    : [pPole, pBL, pXX, pTL]\n                : isLeftHalf\n                ? [pPole, pBR, pXX, pTR]\n                : [pPole, pTL, pXX, pBL];\n\n            needsGeometryCut = true;\n        } else {\n            // ccw for north, cw for south\n            points = isNorthPole ? [pBL, pBR, pTR, pTL] : [pBL, pTL, pTR, pBR];\n\n            const lats = points.map(p => p.latitude);\n            const lmax = Math.max(...lats);\n            const lmin = Math.min(...lats);\n\n            const isAllPointsOut = isNorthPole ? lmax < poleLat : lmin > poleLat;\n            if (isAllPointsOut) {\n                return;\n            }\n\n            const isSomePointsOut = isNorthPole ? lmin < poleLat : lmax > poleLat;\n            needsGeometryCut = isSomePointsOut;\n\n            if (needsGeometryCut) {\n                const nearest = lats.indexOf(isNorthPole ? lmax : lmin);\n                if (nearest !== 0) {\n                    for (let i = 0; i < nearest; i++) {\n                        points.push(points.shift() as GeoCoordinates);\n                    }\n                }\n            }\n        }\n\n        if (needsGeometryCut) {\n            const centerX = (box.min.x + box.max.x) / 2;\n            const centerY = (box.min.y + box.max.y) / 2;\n            const center = srcProjection.unprojectPoint(new THREE.Vector3(centerX, centerY, 0));\n\n            TransverseMercatorUtils.alignLongitude(points, center);\n\n            // points aligned as follows:\n            // a - nearest to the pole, always in\n            // b - next to nearest\n            // c - farthes from the pole, always out\n            // d - prev from nearest\n            const a = points[0];\n            const b = points[1];\n            const c = points[2];\n            const d = points[3];\n\n            const inPointB = Math.abs(b.latitude) >= maxLat;\n            const inPointD = Math.abs(d.latitude) >= maxLat;\n\n            const cutStart = inPointB\n                ? this.intersectEdge(poleLat, b, c)\n                : this.intersectEdge(poleLat, a, b);\n\n            const cutEnd = inPointD\n                ? this.intersectEdge(poleLat, d, c)\n                : this.intersectEdge(poleLat, a, d);\n\n            points.splice(inPointB ? 2 : 1, 4, cutStart);\n\n            const level = tile.tileKey.level - this.storageLevelOffset + this.m_geometryLevelOffset;\n            // tslint:disable-next-line:no-bitwise\n            const subdivisions = 1 << Math.max(0, level);\n            const step = 360 / subdivisions;\n\n            const cutIndexStart = Math.floor((cutStart.longitude + 180) / step);\n            const cutIndexEnd = Math.ceil((cutEnd.longitude + 180) / step);\n\n            for (let i = cutIndexStart + 1; i < cutIndexEnd; i++) {\n                points.push(new GeoCoordinates(poleLat, i * step - 180, 0));\n            }\n\n            points.push(cutEnd);\n            if (inPointD) {\n                points.push(d);\n            }\n        }\n\n        const g = new THREE.Geometry();\n\n        for (const point of points) {\n            const projected = dstProjection.projectPoint(point, new THREE.Vector3());\n            g.vertices.push(projected.sub(tile.center));\n        }\n\n        for (let i = 1; i < points.length - 1; i++) {\n            g.faces.push(isNorthPole ? new THREE.Face3(0, i, i + 1) : new THREE.Face3(0, i + 1, i));\n        }\n\n        const geometry = new THREE.BufferGeometry();\n        geometry.fromGeometry(g);\n        g.dispose();\n\n        const mesh = new THREE.Mesh(geometry, techniqueEntry.material);\n        mesh.userData = {\n            dataSource: this.name,\n            tileKey: tile.tileKey\n        };\n\n        if (this.m_debugTiles) {\n            const color = Math.round(Math.abs(Math.sin(11 * tile.tileKey.mortonCode())) * 0xffffff);\n            mesh.material = new THREE.MeshBasicMaterial({ color, transparent: true, opacity: 0.5 });\n\n            tile.objects.push(\n                new THREE.Mesh(geometry, new THREE.MeshBasicMaterial({ color, wireframe: true }))\n            );\n        }\n\n        MapObjectAdapter.create(mesh, {\n            technique: techniqueEntry.technique,\n            kind: [isNorthPole ? StandardGeometryKind.Water : StandardGeometryKind.Background]\n        });\n\n        tile.objects.push(mesh);\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CubemapSky } from \"@here/harp-datasource-protocol\";\nimport { LoggerManager } from \"@here/harp-utils\";\nimport { CubeTexture, CubeTextureLoader, Texture } from \"three\";\n\nconst logger = LoggerManager.instance.create(\"SkyCubemapTexture\");\n\n/**\n * Number of faces that form a [[SkyCubemapTexture]].\n */\nexport const SKY_CUBEMAP_FACE_COUNT = 6;\n\n/**\n * Maps the faceId to the expected position in the threejs faces array.\n */\nexport enum SkyCubemapFaceId {\n    \"positiveX\",\n    \"negativeX\",\n    \"positiveY\",\n    \"negativeY\",\n    \"positiveZ\",\n    \"negativeZ\"\n}\n\n/**\n * Class that handles loading all 6 faces of a [[CubeTexture]], to be used with [[SkyBackground]].\n */\nexport class SkyCubemapTexture {\n    private m_skybox: CubeTexture;\n\n    /**\n     * Constructs a new `SkyCubemapTexture`.\n     *\n     * @param sky Initial [[CubemapSky]] configuration.\n     */\n    constructor(sky: CubemapSky) {\n        const faces = this.createCubemapFaceArray(sky);\n        this.m_skybox =\n            faces !== undefined ? new CubeTextureLoader().load(faces) : new CubeTexture();\n    }\n\n    /**\n     * Disposes allocated resources.\n     */\n    dispose() {\n        this.m_skybox.dispose();\n    }\n\n    /**\n     * `SkyCubemapTexture`'s texture resource.\n     */\n    get texture(): Texture {\n        return this.m_skybox;\n    }\n\n    /**\n     * Updates the `SkyCubemapTexture` with new parameters.\n     *\n     * @param params New [[CubemapSky]] configuration.\n     */\n    updateTexture(sky: CubemapSky) {\n        const faces = this.createCubemapFaceArray(sky);\n        if (faces === undefined) {\n            return;\n        }\n        this.m_skybox = new CubeTextureLoader().load(faces);\n    }\n\n    private createCubemapFaceArray(sky: CubemapSky): string[] | undefined {\n        const faces: Array<string | undefined> = [\n            undefined,\n            undefined,\n            undefined,\n            undefined,\n            undefined,\n            undefined\n        ];\n        for (let i = 0; i < SKY_CUBEMAP_FACE_COUNT; ++i) {\n            const face: string | undefined = (sky as any)[SkyCubemapFaceId[i]];\n            if (face === undefined) {\n                logger.error(`Face \"${SkyCubemapFaceId[i]}\" was not defined.`);\n                return;\n            }\n            faces[i] = face;\n        }\n\n        return faces as string[];\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { isJsonExpr } from \"@here/harp-datasource-protocol\";\nimport {\n    Definitions,\n    FlatTheme,\n    isActualSelectorDefinition,\n    isBoxedDefinition,\n    isJsonExprReference,\n    isLiteralDefinition,\n    ResolvedStyleDeclaration,\n    ResolvedStyleSet,\n    StyleDeclaration,\n    Styles,\n    StyleSet,\n    Theme\n} from \"@here/harp-datasource-protocol/lib/Theme\";\nimport {\n    cloneDeep,\n    composeUriResolvers,\n    ContextLogger,\n    getAppBaseUrl,\n    getOptionValue,\n    IContextLogger,\n    ISimpleChannel,\n    RelativeUriResolver,\n    resolveReferenceUri,\n    UriResolver\n} from \"@here/harp-utils\";\nimport { SkyCubemapFaceId, SKY_CUBEMAP_FACE_COUNT } from \"./SkyCubemapTexture\";\n\nimport \"@here/harp-fetch\";\n\nexport const DEFAULT_MAX_THEME_INTHERITANCE_DEPTH = 4;\n\n/**\n * Options to customize [[Theme]] loading process.\n *\n * @see [[ThemeLoader.load]]\n */\nexport interface ThemeLoadOptions {\n    /**\n     * Whether to resolve `ref` expressions in `definition` and `styles` elements.\n     *\n     * @default `false`, as datasources resolve definitions in [[StyleSetEvaluator]].\n     */\n    resolveDefinitions?: boolean;\n\n    /**\n     * Resolve the URIs to resources like fonts, icons, ...\n     * If true, [[uriResolver]] will be used to resolve the URI\n     * @default true\n     */\n    resolveResourceUris?: boolean;\n\n    /**\n     * Resolve the URIs of inherited themes (using `extends` feature).\n     * If true, [[uriResolver]] will be used to resolve the URI\n     * @default true\n     */\n    resolveIncludeUris?: boolean;\n\n    /**\n     * An `AbortSignal` object instance; allows you to communicate with a loading process\n     * (including fetch requests) request and abort it if desired via an `AbortController`.\n     *\n     * Modeled after Web APIs `fetch`s `init.signal`.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/AbortController\n     */\n    signal?: AbortSignal;\n\n    /**\n     * Maximum recursion depth when resolving base themes through [[[Theme]]s `extends` property.\n     *\n     * @default [[DEFAULT_MAX_THEME_INTHERITANCE_DEPTH]]\n     */\n    maxInheritanceDepth?: number;\n\n    /**\n     * Custom logging channel on which diagnostics and warnings will be reported.\n     *\n     * If not specified, [[ThemeLoader.load]] will log to `console`.\n     */\n    logger?: ISimpleChannel;\n\n    /**\n     * Resolve asset `URI`s referenced in `Theme` assets using this resolver.\n     */\n    uriResolver?: UriResolver;\n}\n\n/**\n * Loads and validates a theme from URL objects.\n */\nexport class ThemeLoader {\n    /**\n     * Loads a [[Theme]] from a remote resource, provided as a URL that points to a\n     * JSON-encoded theme.\n     *\n     * By default, resolves following features of theme:\n     *\n     *  -  `extends` - loads and merges all inherited themes (see [[resolveBaseTheme]])\n     *  -  `ref` - resolves all `ref` instances to their values defined in `definitions` section\n     *     of theme (see [[resolveThemeReferences]])\n     *\n     * Relative URIs of reference resources are resolved to full URL using the document's base URL\n     * (see [[resolveUrls]]).\n     *\n     * Custom URIs (of theme itself and of resources referenced by theme) may be resolved with by\n     * providing [[UriResolver]] using [[ThemeLoadOptions.uriResolver]] option.\n     *\n     * @param theme [[Theme]] instance or theme URL to the theme.\n     * @param options Optional, a [[ThemeLoadOptions]] objects containing any custom settings for\n     *    this load request.\n     */\n    static async load(\n        theme: string | Theme | FlatTheme,\n        options?: ThemeLoadOptions\n    ): Promise<Theme> {\n        options = options || {};\n        if (typeof theme === \"string\") {\n            const uriResolver = options.uriResolver;\n            const themeUrl = uriResolver !== undefined ? uriResolver.resolveUri(theme) : theme;\n            const response = await fetch(themeUrl, { signal: options.signal });\n            if (!response.ok) {\n                throw new Error(`ThemeLoader#load: cannot load theme: ${response.statusText}`);\n            }\n            theme = (await response.json()) as Theme;\n            theme.url = resolveReferenceUri(getAppBaseUrl(), themeUrl);\n            theme = this.resolveUrls(theme, options);\n        } else if (theme.url === undefined) {\n            // assume that theme url is same as baseUrl\n            theme.url = getAppBaseUrl();\n            theme = this.resolveUrls(theme, options);\n        } else {\n            theme = this.convertFlatTheme(theme);\n        }\n\n        if (theme === null || theme === undefined) {\n            throw new Error(\"ThemeLoader#load: loaded resource is not valid JSON\");\n        }\n\n        ThemeLoader.checkTechniqueSupport(theme);\n\n        const resolveDefinitions = getOptionValue<boolean>(options.resolveDefinitions, false);\n        theme = await ThemeLoader.resolveBaseThemes(theme, options);\n        if (resolveDefinitions) {\n            const contextLoader = new ContextLogger(\n                options.logger || console,\n                `when processing Theme ${theme.url}:`\n            );\n            ThemeLoader.resolveThemeReferences(theme, contextLoader);\n        }\n        return theme;\n    }\n\n    /**\n     * Checks if `theme` instance is completely loaded, meaning that `extends` property is resolved.\n     *\n     * @param theme\n     */\n    static isThemeLoaded(theme: Theme | FlatTheme): boolean {\n        return theme.extends === undefined;\n    }\n\n    /**\n     * @deprecated Please use `ThemeLoader.load`\n     *\n     * Loads a [[Theme]] from a remote resource, provided as a URL that points to a JSON-encoded\n     * theme.\n     *\n     * @param themeUrl The URL to the theme.\n     *\n     */\n    static async loadAsync(themeUrl: string): Promise<Theme> {\n        return ThemeLoader.load(themeUrl);\n    }\n\n    /**\n     * Resolves all [[Theme]]'s relatives URLs to full URL using the [[Theme]]'s URL\n     * (see: https://www.w3.org/TR/WD-html40-970917/htmlweb.html#h-5.1.2).\n     *\n     * This method mutates original `theme` instance.\n     *\n     * @param theme The [[Theme]] to resolve.\n     */\n    private static resolveUrls(theme: Theme | FlatTheme, options?: ThemeLoadOptions): Theme {\n        // Ensure that all resources referenced in theme by relative URIs are in fact relative to\n        // theme.\n        theme = ThemeLoader.convertFlatTheme(theme);\n        if (theme.url === undefined) {\n            return theme;\n        }\n\n        const childUrlResolver = composeUriResolvers(\n            options?.uriResolver,\n            new RelativeUriResolver(theme.url)\n        );\n\n        const resolveIncludes = options === undefined || !(options.resolveIncludeUris === false);\n        if (theme.extends && resolveIncludes) {\n            theme.extends = (Array.isArray(theme.extends) ? theme.extends : [theme.extends]).map(\n                baseTheme => {\n                    if (typeof baseTheme === \"string\") {\n                        return childUrlResolver.resolveUri(baseTheme);\n                    } else {\n                        if (baseTheme.url !== undefined) {\n                            return baseTheme;\n                        } else {\n                            baseTheme.url = theme.url;\n                            return this.resolveUrls(baseTheme, options);\n                        }\n                    }\n                }\n            );\n        }\n\n        if (!ThemeLoader.convertFlatTheme(theme)) {\n            return theme;\n        }\n\n        const resolveResources = options === undefined || !(options.resolveResourceUris === false);\n        if (resolveResources) {\n            ThemeLoader.resolveResources(theme, childUrlResolver);\n        }\n\n        return theme;\n    }\n\n    private static checkTechniqueSupport(theme: Theme) {\n        if (theme.styles !== undefined) {\n            for (const styleSetName in theme.styles) {\n                if (!theme.styles.hasOwnProperty(styleSetName)) {\n                    continue;\n                }\n                for (const style of theme.styles[styleSetName]) {\n                    switch ((style as any).technique) {\n                        // TODO: Re-enable this once \"dashed-line\" is deprecated.\n                        /* case \"dashed-line\":\n                            console.warn(\n                                `Using deprecated \"dashed-line\" technique.\n                                Use \"solid-line\" technique instead`\n                            ); */\n                        default:\n                            break;\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Expand all `ref` expressions in [[Theme]] basing on `definitions`.\n     *\n     * This method mutates original `theme` instance.\n     */\n    private static resolveThemeReferences(theme: Theme, contextLogger: IContextLogger): Theme {\n        if (theme.definitions !== undefined) {\n            contextLogger.pushAttr(\"definitions\");\n            /**\n             * First, try to resolve all internal references in definitions, so if we may save few\n             * CPU cycles if some definition is used many times in actual style sets.\n             */\n            for (const definitionName in theme.definitions) {\n                if (!theme.definitions.hasOwnProperty(definitionName)) {\n                    continue;\n                }\n\n                const def = theme.definitions[definitionName];\n                if (isActualSelectorDefinition(def)) {\n                    contextLogger.pushAttr(definitionName);\n                    const resolvedDef = ThemeLoader.resolveStyle(\n                        def,\n                        theme.definitions,\n                        contextLogger\n                    );\n                    contextLogger.pop();\n                    if (resolvedDef === undefined) {\n                        contextLogger.pushAttr(definitionName);\n                        contextLogger.warn(\"skipping invalid style in definition\");\n                        contextLogger.pop();\n                        delete theme.definitions[definitionName];\n                    } else {\n                        theme.definitions[definitionName] = resolvedDef;\n                    }\n                }\n            }\n            contextLogger.pop();\n        }\n        if (theme.styles !== undefined) {\n            for (const styleSetName in theme.styles) {\n                if (!theme.styles.hasOwnProperty(styleSetName)) {\n                    continue;\n                }\n                contextLogger.pushAttr(\"styles\");\n                contextLogger.pushAttr(styleSetName);\n\n                theme.styles[styleSetName] = ThemeLoader.resolveStyleSet(\n                    theme.styles[styleSetName],\n                    theme.definitions,\n                    contextLogger\n                );\n                contextLogger.pop();\n                contextLogger.pop();\n            }\n        }\n        return theme;\n    }\n\n    /**\n     * Expand all `ref` in [[StyleSet]] basing on `definitions`.\n     */\n    private static resolveStyleSet(\n        styleSet: StyleSet,\n        definitions: Definitions | undefined,\n        contextLogger: IContextLogger\n    ): ResolvedStyleSet {\n        const result: ResolvedStyleSet = [];\n\n        for (let index = 0; index < styleSet.length; ++index) {\n            const currentStyle = styleSet[index];\n            contextLogger.pushIndex(index);\n            const resolvedStyle = ThemeLoader.resolveStyle(\n                currentStyle,\n                definitions,\n                contextLogger\n            );\n            if (resolvedStyle !== undefined) {\n                result.push(resolvedStyle);\n            } else {\n                contextLogger.warn(\"invalid style, ignored\");\n            }\n            contextLogger.pop();\n        }\n        return result;\n    }\n\n    /**\n     * Expand all `ref` in [[Style]] instance basing on `definitions`.\n     */\n    private static resolveStyle(\n        style: StyleDeclaration,\n        definitions: Definitions | undefined,\n        contextLogger: IContextLogger\n    ): ResolvedStyleDeclaration | undefined {\n        if (isJsonExprReference(style)) {\n            // expand and instantiate references to style definitions.\n\n            const def = definitions && definitions[style[1]];\n\n            if (!def) {\n                contextLogger.warn(`invalid reference '${style[1]}' - not found`);\n                return undefined;\n            }\n            if (!isActualSelectorDefinition(def)) {\n                contextLogger.warn(`invalid reference '${style[1]}' - expected style definition`);\n                return undefined;\n            }\n\n            // instantiate the style\n            style = cloneDeep(def);\n        }\n        style = style as ResolvedStyleDeclaration;\n\n        if (Array.isArray(style.when)) {\n            contextLogger.pushAttr(\"when\");\n            const resolvedWhen = this.resolveExpressionReferences(\n                style.when,\n                definitions,\n                contextLogger\n            );\n            contextLogger.pop();\n            if (resolvedWhen === undefined) {\n                return undefined;\n            }\n            style.when = resolvedWhen;\n        }\n\n        if (style.attr !== undefined) {\n            const attr = style.attr as any;\n\n            contextLogger.pushAttr(\"attr\");\n            for (const prop in attr) {\n                if (!attr.hasOwnProperty(prop)) {\n                    continue;\n                }\n\n                const value = attr[prop];\n\n                if (!Array.isArray(value)) {\n                    continue; // nothing to do\n                }\n\n                contextLogger.pushAttr(prop);\n                const resolvedValue = this.resolveExpressionReferences(\n                    value,\n                    definitions,\n                    contextLogger\n                );\n                contextLogger.pop();\n\n                if (resolvedValue !== undefined) {\n                    attr[prop] = resolvedValue;\n                } else {\n                    delete attr[prop];\n                }\n            }\n            contextLogger.pop();\n        }\n        return style;\n    }\n\n    /**\n     * Resolve `[ref, ...]` in expressions.\n     *\n     * Returns `undefined` some reference was invalid (missing or wrong type).\n     */\n    private static resolveExpressionReferences<T>(\n        value: T,\n        definitions: Definitions | undefined,\n        contextLogger: IContextLogger\n    ): T | undefined {\n        let failed = false;\n        function resolveInternal(node: any) {\n            if (isJsonExprReference(node)) {\n                const defName = node[1];\n                const def = definitions && definitions[defName];\n                if (def === undefined) {\n                    contextLogger.warn(`invalid reference '${defName}' - not found`);\n                    failed = true;\n                    return undefined;\n                }\n                if (isLiteralDefinition(def) || isJsonExpr(def)) {\n                    return def;\n                }\n                if (isBoxedDefinition(def)) {\n                    return def.value;\n                }\n                contextLogger.warn(`invalid reference '${defName}' - expected value definition`);\n                failed = true;\n                return undefined;\n            } else if (Array.isArray(node)) {\n                const result = [...node];\n                for (let i = 1; i < result.length; ++i) {\n                    result[i] = resolveInternal(result[i]);\n                }\n                return result;\n            } else {\n                return node;\n            }\n        }\n        const r = resolveInternal(value);\n        if (failed) {\n            return undefined;\n        }\n        return r;\n    }\n\n    /**\n     * Realize `extends` clause by merging `theme` with its base [[Theme]].\n     *\n     * @param theme [Theme] object\n     * @param options Optional, a [[ThemeLoadOptions]] objects containing any custom settings for\n     *    this load request.\n     */\n    private static async resolveBaseThemes(\n        theme: Theme,\n        options?: ThemeLoadOptions\n    ): Promise<Theme> {\n        options = options || {};\n        if (theme.extends === undefined) {\n            return theme;\n        }\n\n        const maxInheritanceDepth = getOptionValue(\n            options.maxInheritanceDepth,\n            DEFAULT_MAX_THEME_INTHERITANCE_DEPTH\n        );\n        if (maxInheritanceDepth <= 0) {\n            throw new Error(`maxInheritanceDepth reached when attempting to load base theme`);\n        }\n\n        const baseThemes = !Array.isArray(theme.extends) ? [theme.extends] : theme.extends;\n        delete theme.extends;\n        let baseThemesMerged: Theme = {};\n        for (const baseTheme of baseThemes) {\n            const actualBaseTheme = await ThemeLoader.load(baseTheme, {\n                ...options,\n                resolveDefinitions: false,\n                maxInheritanceDepth: maxInheritanceDepth - 1\n            });\n\n            baseThemesMerged = ThemeLoader.mergeThemes(actualBaseTheme, baseThemesMerged);\n        }\n        return ThemeLoader.mergeThemes(theme, baseThemesMerged);\n    }\n\n    private static mergeThemes(theme: Theme, baseTheme: Theme): Theme {\n        const definitions = { ...baseTheme.definitions, ...theme.definitions };\n\n        let styles!: Styles;\n\n        if (baseTheme.styles && theme.styles) {\n            const currentStyleSets = Object.keys(baseTheme.styles);\n            const incomingStyleSets = Object.keys(theme.styles);\n\n            styles = {};\n\n            currentStyleSets.forEach(styleSetName => {\n                const index = incomingStyleSets.indexOf(styleSetName);\n\n                if (index !== -1) {\n                    // merge the current and incoming styleset\n                    // and add the result to `styles`.\n                    styles[styleSetName] = [\n                        ...baseTheme.styles![styleSetName],\n                        ...theme.styles![styleSetName]\n                    ];\n                    // remove the styleset from the incoming list\n                    incomingStyleSets.splice(index, 1);\n                } else {\n                    // copy the existing style set to `styles`.\n                    styles[styleSetName] = baseTheme.styles![styleSetName];\n                }\n            });\n\n            // add the remaining stylesets to styles.\n            incomingStyleSets.forEach(p => {\n                styles[p] = theme.styles![p];\n            });\n        } else if (baseTheme.styles) {\n            styles = { ...baseTheme.styles };\n        } else if (theme.styles) {\n            styles = { ...theme.styles };\n        }\n        return { ...baseTheme, ...theme, definitions, styles };\n    }\n\n    private static convertFlatTheme(theme: Theme | FlatTheme): Theme {\n        if (Array.isArray(theme.styles)) {\n            // Convert the flat theme to a standard theme.\n            const styles: Styles = {};\n            theme.styles.forEach(style => {\n                if (isJsonExpr(style)) {\n                    throw new Error(\"invalid usage of theme reference\");\n                }\n                const styleSetName = style.styleSet;\n                if (styleSetName === undefined) {\n                    throw new Error(\"missing reference to style set\");\n                }\n                if (!styles[styleSetName]) {\n                    styles[styleSetName] = [];\n                }\n                styles[styleSetName].push(style);\n            });\n            theme.styles = styles;\n        }\n        return theme as Theme;\n    }\n\n    private static resolveResources(theme: Theme, childUrlResolver: UriResolver) {\n        if (theme.sky && theme.sky.type === \"cubemap\") {\n            for (let i = 0; i < SKY_CUBEMAP_FACE_COUNT; ++i) {\n                const faceUrl: string | undefined = (theme.sky as any)[SkyCubemapFaceId[i]];\n                if (faceUrl !== undefined) {\n                    (theme.sky as any)[SkyCubemapFaceId[i]] = childUrlResolver.resolveUri(faceUrl);\n                }\n            }\n        }\n        if (theme.images) {\n            for (const name of Object.keys(theme.images)) {\n                const image = theme.images[name];\n                image.url = childUrlResolver.resolveUri(image.url);\n                if (image.atlas !== undefined) {\n                    image.atlas = childUrlResolver.resolveUri(image.atlas);\n                }\n            }\n        }\n        if (theme.fontCatalogs) {\n            for (const font of theme.fontCatalogs) {\n                font.url = childUrlResolver.resolveUri(font.url);\n            }\n        }\n        if (theme.poiTables) {\n            for (const poiTable of theme.poiTables) {\n                poiTable.url = childUrlResolver.resolveUri(poiTable.url);\n            }\n        }\n\n        if (theme.styles !== undefined) {\n            for (const styleSetName in theme.styles) {\n                if (!theme.styles.hasOwnProperty(styleSetName)) {\n                    continue;\n                }\n                const styleSet = theme.styles[styleSetName] as ResolvedStyleDeclaration[];\n                for (const style of styleSet) {\n                    if (!style.attr) {\n                        continue;\n                    }\n                    [\"map\", \"normalMap\", \"displacementMap\", \"roughnessMap\"].forEach(\n                        texturePropertyName => {\n                            const textureProperty = (style.attr! as any)[texturePropertyName];\n                            if (textureProperty && typeof textureProperty === \"string\") {\n                                (style.attr! as any)[\n                                    texturePropertyName\n                                ] = childUrlResolver.resolveUri(textureProperty);\n                            }\n                        }\n                    );\n                }\n            }\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { ViewRanges } from \"@here/harp-datasource-protocol/lib/ViewRanges\";\nimport {\n    GeoCoordinates,\n    Projection,\n    ProjectionType,\n    TileKey,\n    TileKeyUtils,\n    TilingScheme\n} from \"@here/harp-geoutils\";\nimport { LRUCache } from \"@here/harp-lrucache\";\nimport { assert, MathUtils } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\nimport { BackgroundDataSource } from \"./BackgroundDataSource\";\nimport { ClipPlanesEvaluator } from \"./ClipPlanesEvaluator\";\nimport { DataSource } from \"./DataSource\";\nimport { ElevationRangeSource } from \"./ElevationRangeSource\";\nimport { FrustumIntersection, TileKeyEntry } from \"./FrustumIntersection\";\nimport { TileGeometryManager } from \"./geometry/TileGeometryManager\";\nimport { Tile } from \"./Tile\";\nimport { TileOffsetUtils } from \"./Utils\";\n\n/**\n * Way the memory consumption of a tile is computed. Either in number of tiles, or in MegaBytes. If\n * it is in MB, an estimation is used.\n */\nexport enum ResourceComputationType {\n    EstimationInMb = 0,\n    NumberOfTiles\n}\n\n// Direction in quad tree to search: up -> shallower levels, down -> deeper levels.\nenum SearchDirection {\n    NONE,\n    UP,\n    DOWN,\n    BOTH\n}\n\n/**\n * Limited set of [[MapViewOptions]] used for [[VisibleTileSet]].\n */\nexport interface VisibleTileSetOptions {\n    /**\n     * The projection of the view.\n     */\n    projection: Projection;\n\n    /**\n     * User-defined camera clipping planes evaluator.\n     */\n    clipPlanesEvaluator: ClipPlanesEvaluator;\n\n    /**\n     * Limit of tiles that can be visible per datasource.\n     */\n    maxVisibleDataSourceTiles: number;\n\n    /**\n     * In addition to the simple frustum culling also do additional checks with [[MapTileCuller]].\n     */\n    extendedFrustumCulling: boolean;\n\n    /**\n     * Missing Typedoc\n     */\n    tileCacheSize: number;\n\n    /**\n     * Missing Typedoc\n     */\n    resourceComputationType: ResourceComputationType;\n\n    /**\n     * Number of levels to go up when searching for fallback tiles.\n     */\n    quadTreeSearchDistanceUp: number;\n\n    /**\n     * Number of levels to go down when searching for fallback tiles.\n     */\n    quadTreeSearchDistanceDown: number;\n}\n\nconst MB_FACTOR = 1.0 / (1024.0 * 1024.0);\n\ntype TileCacheId = string;\n\n/**\n * Wrapper for LRU cache that encapsulates tiles caching for any [[DataSource]] used.\n *\n * Provides LRU based caching mechanism where each tile is identified by its tile key\n * (morton code) and data source name.\n * Tiles are kept in the cache based on last recently used policy, cached tile may be evicted\n * only when cache reaches full saturation and tile is no longer visible.\n * @note Currently cached entries (tiles) are identified by unique tile code (morton code) and\n * data source name, thus it is required that each [[DataSource]] used should have unique\n * name, but implementation could be improved to omit this limitation.\n */\nclass DataSourceCache {\n    /**\n     * Creates unique tile key for caching based on morton code, tile offset and its data source.\n     *\n     * @param mortonCode The tile morton code.\n     * @param offset The tile offset.\n     * @param dataSource The [[DataSource]] from which tile was loaded.\n     */\n    static getKey(mortonCode: number, offset: number, dataSource: DataSource): TileCacheId {\n        return `${dataSource.name}_${mortonCode}_${offset}`;\n    }\n\n    /**\n     * Create unique tile identifier for caching, based on tile object passed in.\n     *\n     * @param tile The tile for which key is generated.\n     */\n    static getKeyForTile(tile: Tile): TileCacheId {\n        return DataSourceCache.getKey(tile.tileKey.mortonCode(), tile.offset, tile.dataSource);\n    }\n\n    private readonly m_tileCache: LRUCache<TileCacheId, Tile>;\n    private readonly m_disposedTiles: Tile[] = [];\n    private m_resourceComputationType: ResourceComputationType;\n\n    constructor(\n        cacheSize: number,\n        rct: ResourceComputationType = ResourceComputationType.EstimationInMb\n    ) {\n        this.m_resourceComputationType = rct;\n        this.m_tileCache = new LRUCache<string, Tile>(cacheSize, (tile: Tile) => {\n            if (this.m_resourceComputationType === ResourceComputationType.EstimationInMb) {\n                // Default is size in MB.\n                return tile.memoryUsage * MB_FACTOR;\n            } else {\n                return 1;\n            }\n        });\n        this.m_tileCache.evictionCallback = (_, tile) => {\n            if (tile.tileLoader !== undefined) {\n                // Cancel downloads as early as possible.\n                tile.tileLoader.cancel();\n            }\n            this.m_disposedTiles.push(tile);\n        };\n        this.m_tileCache.canEvict = (_, tile) => {\n            // Tiles can be evicted that weren't requested in the last frame.\n            return !tile.isVisible;\n        };\n    }\n\n    /**\n     * Get information how cached tiles affects cache space available.\n     *\n     * The way how cache evaluates the __resources size__ have a big influence on entire\n     * caching mechanism, if [[resourceComputationType]] is set to:\n     * [[ResourceComputationType.EstimationInMb]] then each tiles contributes to cache size\n     * differently depending on the memory consumed, on other side\n     * [[ResourceComputationType.NumberOfTiles]] says each tile occupies single slot in cache,\n     * so its real memory consumed does not matter affect caching behavior. Of course in\n     * the second scenario cache may grow significantly in terms of memory usage and thus it\n     * is out of control.\n     *\n     * @return [[ResourceComputationType]] enum that describes if resources are counted by\n     * space occupied in memory or just by number of them.\n     */\n    get resourceComputationType(): ResourceComputationType {\n        return this.m_resourceComputationType;\n    }\n\n    /**\n     * Get the cache capacity measured as number if megabytes or number of entries.\n     *\n     * The total cached tiles size determines cache saturation, if it reaches the capacity value\n     * then the resources becomes evicted (released) starting from the oldest (the latest used).\n     *\n     * @see size.\n     * @see resourceComputationType.\n     */\n    get capacity(): number {\n        return this.m_tileCache.capacity;\n    }\n\n    /**\n     * Get total cache size described as number of megabytes consumed or number of tiles stored.\n     *\n     * @see capacity.\n     * @see resourceComputationType.\n     */\n    get size(): number {\n        return this.m_tileCache.size;\n    }\n\n    /**\n     * Set cache capacity and the algorithm used for cache size calculation.\n     *\n     * @see capacity.\n     * @see resourceComputationType.\n     * @param size The new capacity declared in megabytes or number of entires.\n     * @param rct The enum value that determines how size and capacity are evaluated.\n     */\n    setCapacity(size: number, rct: ResourceComputationType) {\n        this.m_resourceComputationType = rct;\n        this.m_tileCache.setCapacityAndMeasure(size, (tile: Tile) => {\n            if (this.m_resourceComputationType === ResourceComputationType.EstimationInMb) {\n                // Default is size in MB.\n                return tile.memoryUsage * MB_FACTOR;\n            } else {\n                return 1;\n            }\n        });\n    }\n\n    /**\n     * Get tile cached or __undefined__ if tile is not yet in cache.\n     *\n     * @param mortonCode An unique tile morton code.\n     * @param offset Tile offset.\n     * @param dataSource A [[DataSource]] the tile comes from.\n     */\n    get(mortonCode: number, offset: number, dataSource: DataSource): Tile | undefined {\n        return this.m_tileCache.get(DataSourceCache.getKey(mortonCode, offset, dataSource));\n    }\n\n    /**\n     * Add new tile to the cache.\n     *\n     * @param mortonCode En unique tile code (morton code).\n     * @param offset The tile offset.\n     * @param dataSource A [[DataSource]] the tile comes from.\n     * @param tile The tile reference.\n     */\n    set(mortonCode: number, offset: number, dataSource: DataSource, tile: Tile) {\n        this.m_tileCache.set(DataSourceCache.getKey(mortonCode, offset, dataSource), tile);\n    }\n\n    /**\n     * Delete tile from cache.\n     *\n     * @note This method will not call eviction callback.\n     * @param tile The tile reference to be removed from cache.\n     */\n    delete(tile: Tile) {\n        const tileKey = DataSourceCache.getKeyForTile(tile);\n        this.deleteByKey(tileKey);\n    }\n\n    /**\n     * Delete tile using its unique identifier.\n     *\n     * @note Tile identifier its constructed using information about tile code (morton code) and its\n     * [[DataSource]].\n     * @note This is explicit removal thus eviction callback will not be processed.\n     * @see DataSourceCache.getKey.\n     * @param tileKey The unique tile identifier.\n     */\n    deleteByKey(tileKey: TileCacheId) {\n        this.m_tileCache.delete(tileKey);\n    }\n\n    /**\n     * Dispose all tiles releasing their internal data.\n     */\n    disposeTiles() {\n        this.m_disposedTiles.forEach(tile => {\n            tile.dispose();\n        });\n\n        this.m_disposedTiles.length = 0;\n    }\n\n    /**\n     * Shrink cache to its allowed capacity.\n     *\n     * This method should be called each time after operations are performed on the cache entries,\n     * in order to keep cache size consistent. It informs caching mechanism to invalidate memory\n     * consumed by its entries and check if cache is overgrown, is such case some tiles will be\n     * evicted.\n     */\n    shrinkToCapacity() {\n        this.m_tileCache.shrinkToCapacity();\n    }\n\n    /**\n     * Evict all cached tiles implicitly even without checking if still in use.\n     */\n    evictAll() {\n        this.m_tileCache.evictAll();\n    }\n\n    /**\n     * Evict selected tiles implicitly.\n     *\n     * @param selector The callback used to determine if tile should be evicted.\n     */\n    evictSelected(selector: (tile: Tile, key: TileCacheId) => boolean) {\n        this.m_tileCache.evictSelected(selector);\n    }\n\n    /**\n     * Call functor (callback) on each tile store in cache.\n     *\n     * Optionally you may specify from which [[DataSource]] tiles should be processed.\n     * This limits the tiles visited to a sub-set originating from single [[DataSource]].\n     * @param callback The function to be called for each visited tile.\n     * @param inDataSource The optional [[DataSource]] to which tiles should belong.\n     */\n    forEach(callback: (tile: Tile, key: TileCacheId) => void, inDataSource?: DataSource): void {\n        this.m_tileCache.forEach((entry: Tile, key: TileCacheId) => {\n            if (inDataSource === undefined || entry.dataSource === inDataSource) {\n                callback(entry, key);\n            }\n        });\n    }\n}\n\n/**\n * List of visible tiles for a [[DataSource]].\n */\nexport interface DataSourceTileList {\n    /**\n     * The datasource that was producing the tiles.\n     */\n    dataSource: DataSource;\n\n    /**\n     * The current [[MapView]] zoom level.\n     */\n    zoomLevel: number;\n\n    /**\n     * The storage level of the visibleTiles.\n     * Note: renderedTiles might contain tiles from different levels.\n     */\n    storageLevel: number;\n\n    /**\n     * True if all [[visibleTiles]] are loaded.\n     */\n    allVisibleTileLoaded: boolean;\n\n    /**\n     * The number of tiles which are still loading.\n     */\n    numTilesLoading: number;\n\n    /**\n     * List of tiles we want to render (i.e. the tiles computed from the zoom level and view\n     * frustum). However some might not be renderable yet (e.g. loading). See [[renderedTiles]] for\n     * the actual list of tiles that the user will see.\n     */\n    visibleTiles: Tile[];\n\n    /**\n     * Map of tiles that will be rendered, key is the the combination of tile key and offset, see\n     * [[getKeyForTileKeyAndOffset]]. This includes tiles that are not in the [[visibleTiles]]\n     * list but that are used as fallbacks b/c they are still in the cache.\n     */\n    renderedTiles: Map<number, Tile>;\n}\n\n/**\n * Manages visible [[Tile]]s for [[MapView]].\n *\n * Responsible for election of rendered tiles:\n *  - quad-tree traversal\n *  - frustum culling\n *  - sorting tiles by relevance (visible area) to prioritize load\n *  - limiting number of visible tiles\n *  - caching tiles\n *  - searching cache to replace visible but yet empty tiles with already loaded siblings in nearby\n *    zoom levels\n */\nexport class VisibleTileSet {\n    dataSourceTileList: DataSourceTileList[] = [];\n    allVisibleTilesLoaded: boolean = false;\n    options: VisibleTileSetOptions;\n\n    private readonly m_cameraOverride = new THREE.PerspectiveCamera();\n    private m_dataSourceCache: DataSourceCache;\n    private m_viewRange: ViewRanges = { near: 0.1, far: Infinity, minimum: 0.1, maximum: Infinity };\n    // Maps morton codes to a given Tile, used to find overlapping Tiles. We only need to have this\n    // for a single TilingScheme, i.e. that of the BackgroundDataSource.\n    private m_coveringMap = new Map<number, Tile>();\n\n    private m_resourceComputationType: ResourceComputationType =\n        ResourceComputationType.EstimationInMb;\n\n    constructor(\n        private readonly m_frustumIntersection: FrustumIntersection,\n        private readonly m_tileGeometryManager: TileGeometryManager,\n        options: VisibleTileSetOptions\n    ) {\n        this.options = options;\n        this.m_resourceComputationType =\n            options.resourceComputationType === undefined\n                ? ResourceComputationType.EstimationInMb\n                : options.resourceComputationType;\n        this.m_dataSourceCache = new DataSourceCache(\n            this.options.tileCacheSize,\n            this.m_resourceComputationType\n        );\n    }\n\n    /**\n     * Returns cache size.\n     */\n    getDataSourceCacheSize(): number {\n        return this.options.tileCacheSize;\n    }\n\n    /**\n     * Sets cache size.\n     *\n     * @param size cache size\n     * @param computationType Optional value specifying the way a [[Tile]]s cache usage is computed,\n     *      either based on size in MB (mega bytes) or in number of tiles. Defaults to\n     *      `ResourceComputationType.EstimationInMb`.\n     */\n    setDataSourceCacheSize(\n        size: number,\n        computationType: ResourceComputationType = ResourceComputationType.EstimationInMb\n    ): void {\n        this.options.tileCacheSize = size;\n        // This effectively invalidates DataSourceCache\n        this.resourceComputationType = computationType;\n    }\n\n    /**\n     * Retrieves maximum number of visible tiles.\n     */\n    getNumberOfVisibleTiles() {\n        return this.options.maxVisibleDataSourceTiles;\n    }\n\n    /**\n     * Sets maximum number of visible tiles.\n     *\n     * @param size size of visible tiles array\n     */\n    setNumberOfVisibleTiles(size: number) {\n        this.options.maxVisibleDataSourceTiles = size;\n    }\n\n    /**\n     * The way the cache usage is computed, either based on size in MB (mega bytes) or in number of\n     * tiles.\n     */\n    get resourceComputationType(): ResourceComputationType {\n        return this.m_resourceComputationType;\n    }\n\n    /**\n     * Sets the way tile cache is managing its elements.\n     *\n     * Cache may be either keeping number of elements stored or the memory consumed by them.\n     *\n     * @param computationType Type of algorith used in cache for checking full saturation,\n     * may be counting number of elements or memory consumed by them.\n     */\n    set resourceComputationType(computationType: ResourceComputationType) {\n        this.m_resourceComputationType = computationType;\n        this.m_dataSourceCache.setCapacity(this.options.tileCacheSize, computationType);\n    }\n\n    /**\n     * Evaluate frustum near/far clip planes and visibility ranges.\n     */\n    updateClipPlanes(maxElevation?: number, minElevation?: number): ViewRanges {\n        if (maxElevation !== undefined) {\n            this.options.clipPlanesEvaluator.maxElevation = maxElevation;\n        }\n        if (minElevation !== undefined) {\n            this.options.clipPlanesEvaluator.minElevation = minElevation;\n        }\n        const { camera, projection, elevationProvider } = this.m_frustumIntersection.mapView;\n        this.m_viewRange = this.options.clipPlanesEvaluator.evaluateClipPlanes(\n            camera,\n            projection,\n            elevationProvider\n        );\n        return this.m_viewRange;\n    }\n\n    /**\n     * Calculates a new set of visible tiles.\n     * @param storageLevel The camera storage level, see [[MapView.storageLevel]].\n     * @param zoomLevel The camera zoom level.\n     * @param dataSources The data sources for which the visible tiles will be calculated.\n     * @param elevationRangeSource Source of elevation range data if any.\n     * @returns view ranges and their status since last update (changed or not).\n     */\n    updateRenderList(\n        storageLevel: number,\n        zoomLevel: number,\n        dataSources: DataSource[],\n        elevationRangeSource?: ElevationRangeSource\n    ): { viewRanges: ViewRanges; viewRangesChanged: boolean } {\n        let allVisibleTilesLoaded: boolean = true;\n\n        const visibleTileKeysResult = this.getVisibleTileKeysForDataSources(\n            zoomLevel,\n            dataSources,\n            elevationRangeSource\n        );\n        this.dataSourceTileList = [];\n        this.m_coveringMap.clear();\n        for (const { dataSource, visibleTileKeys } of visibleTileKeysResult.tileKeys) {\n            // Sort by distance to camera, now the tiles that are further away are at the end\n            // of the list.\n            //\n            // Sort is unstable if distance is equal, which happens a lot when looking top-down.\n            // Unstable sorting makes label placement unstable at tile borders, leading to\n            // flickering.\n            visibleTileKeys.sort((a: TileKeyEntry, b: TileKeyEntry) => {\n                const distanceDiff = a.distance - b.distance;\n\n                // Take care or numerical precision issues\n                const minDiff = (a.distance + b.distance) * 0.000001;\n\n                return Math.abs(distanceDiff) < minDiff\n                    ? a.tileKey.mortonCode() - b.tileKey.mortonCode()\n                    : distanceDiff;\n            });\n\n            const actuallyVisibleTiles: Tile[] = [];\n            let allDataSourceTilesLoaded = true;\n            let numTilesLoading = 0;\n            // Create actual tiles only for the allowed number of visible tiles\n            const dataZoomLevel = dataSource.getDataZoomLevel(zoomLevel);\n            for (\n                let i = 0;\n                i < visibleTileKeys.length &&\n                actuallyVisibleTiles.length < this.options.maxVisibleDataSourceTiles;\n                i++\n            ) {\n                const tileEntry = visibleTileKeys[i];\n\n                const tile = this.getTile(dataSource, tileEntry.tileKey, tileEntry.offset);\n                if (tile === undefined) {\n                    continue;\n                }\n\n                allDataSourceTilesLoaded = allDataSourceTilesLoaded && tile.allGeometryLoaded;\n                if (!tile.allGeometryLoaded) {\n                    numTilesLoading++;\n                } else {\n                    tile.numFramesVisible++;\n                    // If this tile's data source is \"covering\" then other tiles beneath it have\n                    // their rendering skipped, see [[Tile.willRender]].\n                    this.skipOverlappedTiles(dataSource, tile);\n\n                    if (tile.frameNumVisible < 0) {\n                        // Store the fist frame the tile became visible.\n                        tile.frameNumVisible = dataSource.mapView.frameNumber;\n                    }\n                }\n                // Update the visible area of the tile. This is used for those tiles that are\n                // currently loaded and are waiting to be decoded to sort the jobs by area.\n                tile.visibleArea = tileEntry.area;\n                tile.elevationRange = tileEntry;\n\n                actuallyVisibleTiles.push(tile);\n            }\n\n            this.m_tileGeometryManager.updateTiles(actuallyVisibleTiles);\n\n            this.dataSourceTileList.push({\n                dataSource,\n                storageLevel,\n                zoomLevel: dataZoomLevel,\n                allVisibleTileLoaded: allDataSourceTilesLoaded,\n                numTilesLoading,\n                visibleTiles: actuallyVisibleTiles,\n                renderedTiles: new Map<number, Tile>()\n            });\n            allVisibleTilesLoaded = allVisibleTilesLoaded && allDataSourceTilesLoaded;\n        }\n\n        this.allVisibleTilesLoaded =\n            allVisibleTilesLoaded && visibleTileKeysResult.allBoundingBoxesFinal;\n\n        this.populateRenderedTiles();\n\n        this.forEachCachedTile(tile => {\n            // Remove all tiles that are still being loaded, but are no longer visible. They have to\n            // be reloaded when they become visible again. Hopefully, they are still in the browser\n            // cache by then.\n            if (!tile.isVisible && tile.tileLoader !== undefined && !tile.tileLoader.isFinished) {\n                // The internal TileLoader is cancelled automatically when the Tile is disposed.\n                this.disposeTile(tile);\n            }\n        });\n\n        this.m_dataSourceCache.shrinkToCapacity();\n\n        let minElevation: number | undefined;\n        let maxElevation: number | undefined;\n        this.dataSourceTileList.forEach(renderListEntry => {\n            // Calculate min/max elevation from every data source tiles,\n            // data sources without elevationRangeSource will contribute to\n            // values with zero levels for both elevations.\n            const tiles = renderListEntry.renderedTiles;\n            tiles.forEach(tile => {\n                tile.update(renderListEntry.zoomLevel);\n                minElevation = MathUtils.min2(minElevation, tile.geoBox.minAltitude);\n                maxElevation = MathUtils.max2(maxElevation, tile.geoBox.maxAltitude);\n            });\n        });\n\n        if (minElevation === undefined) {\n            minElevation = 0;\n        }\n        if (maxElevation === undefined) {\n            maxElevation = 0;\n        }\n        // If clip planes evaluator depends on the tiles elevation re-calculate\n        // frustum planes and update the camera near/far plane distances.\n        let viewRangesChanged: boolean = false;\n        const oldViewRanges = this.m_viewRange;\n        const newViewRanges = this.updateClipPlanes(maxElevation, minElevation);\n        viewRangesChanged = viewRangesEqual(newViewRanges, oldViewRanges) === false;\n\n        return {\n            viewRanges: newViewRanges,\n            viewRangesChanged\n        };\n    }\n\n    /**\n     * Gets the tile corresponding to the given data source, key and offset, creating it if\n     * necessary.\n     *\n     * @param dataSource The data source the tile belongs to.\n     * @param tileKey The key identifying the tile.\n     * @param offset Tile offset.\n     * @return The tile if it was found or created, undefined otherwise.\n     */\n    getTile(dataSource: DataSource, tileKey: TileKey, offset: number = 0): Tile | undefined {\n        const cacheOnly = false;\n        return this.getTileImpl(dataSource, tileKey, offset, cacheOnly);\n    }\n\n    /**\n     * Gets the tile corresponding to the given data source, key and offset from the cache.\n     *\n     * @param dataSource The data source the tile belongs to.\n     * @param tileKey The key identifying the tile.\n     * @param offset Tile offset.\n     * @return The tile if found in cache, undefined otherwise.\n     */\n    getCachedTile(dataSource: DataSource, tileKey: TileKey, offset: number = 0): Tile | undefined {\n        assert(dataSource.cacheable);\n        const cacheOnly = true;\n        return this.getTileImpl(dataSource, tileKey, offset, cacheOnly);\n    }\n\n    /**\n     * Gets the tile corresponding to the given data source, key and offset from the rendered tiles.\n     *\n     * @param dataSource The data source the tile belongs to.\n     * @param tileKey The key identifying the tile.\n     * @param offset Tile offset.\n     * @return The tile if found among the rendered tiles, undefined otherwise.\n     */\n    getRenderedTile(\n        dataSource: DataSource,\n        tileKey: TileKey,\n        offset: number = 0\n    ): Tile | undefined {\n        const dataSourceVisibleTileList = this.dataSourceTileList.find(list => {\n            return list.dataSource === dataSource;\n        });\n\n        if (dataSourceVisibleTileList === undefined) {\n            return undefined;\n        }\n\n        return dataSourceVisibleTileList.renderedTiles.get(\n            TileOffsetUtils.getKeyForTileKeyAndOffset(tileKey, offset)\n        );\n    }\n\n    /**\n     * Gets the tile corresponding to the given data source and location from the rendered tiles.\n     *\n     * @param dataSource The data source the tile belongs to.\n     * @param geoPoint The geolocation included within the tile.\n     * @return The tile if found among the rendered tiles, undefined otherwise.\n     */\n    getRenderedTileAtLocation(\n        dataSource: DataSource,\n        geoPoint: GeoCoordinates,\n        offset: number = 0\n    ): Tile | undefined {\n        const dataSourceVisibleTileList = this.dataSourceTileList.find(list => {\n            return list.dataSource === dataSource;\n        });\n\n        if (dataSourceVisibleTileList === undefined) {\n            return undefined;\n        }\n\n        const tilingScheme = dataSource.getTilingScheme();\n        const visibleLevel = dataSourceVisibleTileList.zoomLevel;\n        const visibleTileKey = tilingScheme.getTileKey(geoPoint, visibleLevel);\n\n        if (!visibleTileKey) {\n            return undefined;\n        }\n\n        let tile = dataSourceVisibleTileList.renderedTiles.get(\n            TileOffsetUtils.getKeyForTileKeyAndOffset(visibleTileKey, offset)\n        );\n\n        if (tile !== undefined) {\n            return tile;\n        }\n\n        const { searchLevelsUp, searchLevelsDown } = this.getSearchDirection(\n            dataSource,\n            visibleLevel\n        );\n\n        let parentTileKey = visibleTileKey;\n        for (let levelOffset = 1; levelOffset <= searchLevelsUp; ++levelOffset) {\n            parentTileKey = parentTileKey.parent();\n\n            tile = dataSourceVisibleTileList.renderedTiles.get(\n                TileOffsetUtils.getKeyForTileKeyAndOffset(parentTileKey, offset)\n            );\n            if (tile !== undefined) {\n                return tile;\n            }\n        }\n\n        const worldPoint = tilingScheme.projection.projectPoint(geoPoint);\n\n        for (let levelOffset = 1; levelOffset <= searchLevelsDown; ++levelOffset) {\n            const childLevel = visibleLevel + levelOffset;\n            const childTileKey = TileKeyUtils.worldCoordinatesToTileKey(\n                tilingScheme,\n                worldPoint,\n                childLevel\n            );\n            if (childTileKey) {\n                tile = dataSourceVisibleTileList.renderedTiles.get(\n                    TileOffsetUtils.getKeyForTileKeyAndOffset(childTileKey, offset)\n                );\n\n                if (tile !== undefined) {\n                    return tile;\n                }\n            }\n        }\n        return undefined;\n    }\n\n    /**\n     * Removes all internal bookkeeping entries and cache related to specified datasource.\n     *\n     * Called by [[MapView]] when [[DataSource]] has been removed from [[MapView]].\n     */\n    removeDataSource(dataSource: DataSource) {\n        this.clearTileCache(dataSource);\n        this.dataSourceTileList = this.dataSourceTileList.filter(\n            tileList => tileList.dataSource !== dataSource\n        );\n    }\n\n    /**\n     * Clear the tile cache.\n     *\n     * Remove the [[Tile]] objects created by cacheable [[DataSource]]. If a [[DataSource]] name is\n     * provided, this method restricts the eviction the [[DataSource]] with the given name.\n     *\n     * @param dataSourceName The name of the [[DataSource]].\n     */\n    clearTileCache(dataSource?: DataSource) {\n        if (dataSource !== undefined) {\n            this.m_dataSourceCache.evictSelected((tile: Tile, _) => {\n                return tile.dataSource === dataSource;\n            });\n        } else {\n            this.m_dataSourceCache.evictAll();\n        }\n    }\n\n    /**\n     * Visit each tile in visible, rendered, and cached sets.\n     *\n     *  * Visible and temporarily rendered tiles will be marked for update and retained.\n     *  * Cached but not rendered/visible will be evicted.\n     *\n     * @param dataSource If passed, only the tiles from this [[DataSource]] instance are processed.\n     *     If `undefined`, tiles from all [[DataSource]]s are processed.\n     */\n    markTilesDirty(dataSource?: DataSource) {\n        if (dataSource === undefined) {\n            this.dataSourceTileList.forEach(renderListEntry => {\n                this.markDataSourceTilesDirty(renderListEntry);\n            });\n        } else {\n            const renderListEntry = this.dataSourceTileList.find(e => e.dataSource === dataSource);\n            if (renderListEntry === undefined) {\n                return;\n            }\n            this.markDataSourceTilesDirty(renderListEntry);\n        }\n    }\n\n    /**\n     * Dispose tiles that are marked for removal by [[LRUCache]] algorithm.\n     */\n    disposePendingTiles() {\n        this.m_dataSourceCache.disposeTiles();\n    }\n\n    /**\n     * Process callback function [[fun]] with each visible tile in set.\n     *\n     * @param fun The callback function to be called.\n     */\n    forEachVisibleTile(fun: (tile: Tile) => void): void {\n        for (const listEntry of this.dataSourceTileList) {\n            listEntry.renderedTiles.forEach(fun);\n        }\n    }\n\n    /**\n     * Process callback function [[fun]] with each tile in the cache.\n     *\n     * Optional [[dataSource]] parameter limits processing to the tiles that belongs to\n     * DataSource passed in.\n     *\n     * @param fun The callback function to be called.\n     * @param dataSource The optional DataSource reference for tiles selection.\n     */\n    forEachCachedTile(fun: (tile: Tile) => void, dataSource?: DataSource): void {\n        this.m_dataSourceCache.forEach((tile, _) => fun(tile), dataSource);\n    }\n\n    /**\n     * Dispose a `Tile` from cache, 'dispose()' is also called on the tile to free its resources.\n     */\n    disposeTile(tile: Tile): void {\n        // TODO: Consider using evict here!\n        this.m_dataSourceCache.delete(tile);\n        tile.dispose();\n    }\n\n    /**\n     * Skips rendering of tiles that are overlapped. The overlapping [[Tile]] comes from a\n     * [[DataSource]] which is fully covering, i.e. there it is fully opaque.\n     **/\n    private skipOverlappedTiles(dataSource: DataSource, tile: Tile) {\n        if (this.options.projection.type === ProjectionType.Spherical) {\n            // HARP-7899, currently the globe has no background planes in the tiles (it relies on\n            // the BackgroundDataSource), because the LOD mismatches, hence disabling for globe.\n            return;\n        }\n        if (dataSource.isFullyCovering()) {\n            const key = tile.uniqueKey;\n            const entry = this.m_coveringMap.get(key);\n            if (entry === undefined) {\n                // We need to reset the flag so that if the covering datasource is disabled, that\n                // the tiles beneath then start to render.\n                tile.skipRendering = false;\n                this.m_coveringMap.set(key, tile);\n            } else {\n                // Skip the [[Tile]] if either the stored entry or the tile to consider is from the\n                // [[BackgroundDataSource]]\n                if (entry.dataSource instanceof BackgroundDataSource) {\n                    entry.skipRendering = true;\n                } else if (dataSource instanceof BackgroundDataSource) {\n                    tile.skipRendering = true;\n                }\n            }\n        }\n    }\n\n    // Returns the search direction and the number of levels up / down that can be searched.\n    private getSearchDirection(\n        dataSource: DataSource,\n        visibleLevel: number\n    ): { searchDirection: SearchDirection; searchLevelsUp: number; searchLevelsDown: number } {\n        const searchLevelsUp = Math.min(\n            this.options.quadTreeSearchDistanceUp,\n            Math.max(0, visibleLevel - dataSource.minDataLevel)\n        );\n        const searchLevelsDown = Math.min(\n            this.options.quadTreeSearchDistanceDown,\n            Math.max(0, dataSource.maxDataLevel - visibleLevel)\n        );\n        const searchDirection =\n            searchLevelsDown > 0 && searchLevelsUp > 0\n                ? SearchDirection.BOTH\n                : searchLevelsDown > 0\n                ? SearchDirection.DOWN\n                : searchLevelsUp > 0\n                ? SearchDirection.UP\n                : SearchDirection.NONE;\n        return { searchDirection, searchLevelsUp, searchLevelsDown };\n    }\n\n    /**\n     * Populates the list of tiles to render, see \"renderedTiles\". Tiles that are loaded and which\n     * are an exact match are added straight to the list, tiles that are still loading are replaced\n     * with tiles in the cache that are either a parent or child of the requested tile. This helps\n     * to prevent flickering when zooming in / out. The distance to search is based on the options\n     * [[quadTreeSearchDistanceDown]] and [[quadTreeSearchDistanceUp]].\n     *\n     * Each [[DataSource]] can also switch this behaviour on / off using the\n     * [[allowOverlappingTiles]] flag.\n     *\n     */\n    private populateRenderedTiles() {\n        this.dataSourceTileList.forEach(renderListEntry => {\n            const renderedTiles = renderListEntry.renderedTiles;\n\n            // Tiles for which we need to fall(back/forward) to.\n            const incompleteTiles: number[] = [];\n\n            // Populate the list of tiles which can be shown (\"renderedTiles\"), and the list of\n            // tiles that are incomplete, and for which we search for an alternative\n            // (\"incompleteTiles\").\n            renderListEntry.visibleTiles.forEach(tile => {\n                tile.levelOffset = 0;\n                if (tile.hasGeometry) {\n                    renderedTiles.set(tile.uniqueKey, tile);\n                } else {\n                    // if dataSource supports cache and it was existing before this render\n                    // then enable searching for loaded tiles in cache\n                    incompleteTiles.push(tile.uniqueKey);\n                }\n            });\n\n            const dataSource = renderListEntry.dataSource;\n            if (incompleteTiles.length === 0 || dataSource.allowOverlappingTiles === false) {\n                // Either all tiles are loaded or the datasource doesn't support using cached tiles\n                // from other levels.\n                return;\n            }\n\n            const dataZoomLevel = renderListEntry.zoomLevel;\n            const { searchDirection } = this.getSearchDirection(dataSource, dataZoomLevel);\n\n            // Minor optimization for the fallback search, only check parent tiles once, otherwise\n            // the recursive algorithm checks all parent tiles multiple times, the key is the code\n            // of the tile that is checked and the value is whether a parent was found or not.\n            const checkedTiles = new Map<number, boolean>();\n            // Iterate over incomplete (not loaded tiles) and find their parents or children that\n            // are in cache that can be rendered temporarily until tile is loaded. Note, we favour\n            // falling back to parent tiles rather than children.\n            for (const tileKeyCode of incompleteTiles) {\n                if (\n                    searchDirection === SearchDirection.BOTH ||\n                    searchDirection === SearchDirection.UP\n                ) {\n                    if (\n                        this.findUp(\n                            tileKeyCode,\n                            dataZoomLevel,\n                            renderedTiles,\n                            checkedTiles,\n                            dataSource\n                        )\n                    ) {\n                        // Continue to next entry so we don't search down.\n                        continue;\n                    }\n                }\n\n                if (\n                    searchDirection === SearchDirection.BOTH ||\n                    searchDirection === SearchDirection.DOWN\n                ) {\n                    this.findDown(tileKeyCode, dataZoomLevel, renderedTiles, dataSource);\n                }\n            }\n        });\n    }\n\n    private findDown(\n        tileKeyCode: number,\n        dataZoomLevel: number,\n        renderedTiles: Map<number, Tile>,\n        dataSource: DataSource\n    ) {\n        const { offset, mortonCode } = TileOffsetUtils.extractOffsetAndMortonKeyFromKey(\n            tileKeyCode\n        );\n        const tileKey = TileKey.fromMortonCode(mortonCode);\n\n        const tilingScheme = dataSource.getTilingScheme();\n        for (const childTileKey of tilingScheme.getSubTileKeys(tileKey)) {\n            const childTileCode = TileOffsetUtils.getKeyForTileKeyAndOffset(childTileKey, offset);\n            const childTile = this.m_dataSourceCache.get(\n                childTileKey.mortonCode(),\n                offset,\n                dataSource\n            );\n\n            const nextLevelDiff = Math.abs(childTileKey.level - dataZoomLevel);\n            if (childTile !== undefined && childTile.hasGeometry) {\n                // childTile has geometry, so can be reused as fallback\n                renderedTiles.set(childTileCode, childTile);\n                childTile.levelOffset = nextLevelDiff;\n                continue;\n            }\n\n            // Recurse down until the max distance is reached.\n            if (nextLevelDiff < this.options.quadTreeSearchDistanceDown) {\n                this.findDown(childTileCode, dataZoomLevel, renderedTiles, dataSource);\n            }\n        }\n    }\n\n    /**\n     * Returns true if a tile was found in the cache which is a parent\n     * @param tileKeyCode Morton code of the current tile that should be searched for.\n     * @param dataZoomLevel The current data zoom level of tiles that are to be displayed.\n     * @param renderedTiles The list of tiles that are shown to the user.\n     * @param checkedTiles Used to map a given code to a boolean which tells us if an ancestor is\n     * displayed or not.\n     * @param dataSource The provider of tiles.\n     * @returns Whether a parent tile exists.\n     */\n    private findUp(\n        tileKeyCode: number,\n        dataZoomLevel: number,\n        renderedTiles: Map<number, Tile>,\n        checkedTiles: Map<number, boolean>,\n        dataSource: DataSource\n    ): boolean {\n        const parentCode = TileOffsetUtils.getParentKeyFromKey(tileKeyCode);\n        // Check if another sibling has already added the parent.\n        if (renderedTiles.get(parentCode) !== undefined) {\n            return true;\n        }\n        const exists = checkedTiles.get(parentCode)!;\n        if (exists !== undefined) {\n            return exists;\n        }\n\n        const { offset, mortonCode } = TileOffsetUtils.extractOffsetAndMortonKeyFromKey(parentCode);\n        const parentTile = this.m_dataSourceCache.get(mortonCode, offset, dataSource);\n        const parentTileKey = parentTile ? parentTile.tileKey : TileKey.fromMortonCode(mortonCode);\n        const nextLevelDiff = Math.abs(dataZoomLevel - parentTileKey.level);\n        if (parentTile !== undefined && parentTile.hasGeometry) {\n            checkedTiles.set(parentCode, true);\n            // parentTile has geometry, so can be reused as fallback\n            renderedTiles.set(parentCode, parentTile);\n\n            // We want to have parent tiles as -ve, hence the minus.\n            parentTile.levelOffset = -nextLevelDiff;\n\n            return true;\n        } else {\n            checkedTiles.set(parentCode, false);\n        }\n\n        // Recurse up until the max distance is reached or we go to the parent of all parents.\n        if (nextLevelDiff < this.options.quadTreeSearchDistanceUp && parentTileKey.level !== 0) {\n            const foundUp = this.findUp(\n                parentCode,\n                dataZoomLevel,\n                renderedTiles,\n                checkedTiles,\n                dataSource\n            );\n            // If there was a tile upstream found, then add it to the list, so we can\n            // early skip checkedTiles.\n            checkedTiles.set(parentCode, foundUp);\n            if (foundUp) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private getTileImpl(\n        dataSource: DataSource,\n        tileKey: TileKey,\n        offset: number,\n        cacheOnly: boolean\n    ): Tile | undefined {\n        function updateTile(tileToUpdate?: Tile) {\n            if (tileToUpdate === undefined) {\n                return;\n            }\n            // Keep the tile from being removed from the cache.\n            tileToUpdate.frameNumLastRequested = dataSource.mapView.frameNumber;\n        }\n\n        if (!dataSource.cacheable && !cacheOnly) {\n            const resultTile = dataSource.getTile(tileKey);\n            updateTile(resultTile);\n            return resultTile;\n        }\n\n        const tileCache = this.m_dataSourceCache;\n        let tile = tileCache.get(tileKey.mortonCode(), offset, dataSource);\n\n        if (tile !== undefined && tile.offset === offset) {\n            updateTile(tile);\n            return tile;\n        }\n\n        if (cacheOnly) {\n            return undefined;\n        }\n\n        tile = dataSource.getTile(tileKey);\n        // TODO: Update all tile information including area, min/max elevation from TileKeyEntry\n        if (tile !== undefined) {\n            tile.offset = offset;\n            updateTile(tile);\n            tileCache.set(tileKey.mortonCode(), offset, dataSource, tile);\n            this.m_tileGeometryManager.initTile(tile);\n        }\n        return tile;\n    }\n\n    private markDataSourceTilesDirty(renderListEntry: DataSourceTileList) {\n        const dataSourceCache = this.m_dataSourceCache;\n        const retainedTiles: Set<TileCacheId> = new Set();\n\n        function markTileDirty(tile: Tile, tileGeometryManager: TileGeometryManager) {\n            const tileKey = DataSourceCache.getKeyForTile(tile);\n            if (!retainedTiles.has(tileKey)) {\n                retainedTiles.add(tileKey);\n                if (tile.tileGeometryLoader !== undefined) {\n                    tile.tileGeometryLoader.reset();\n                }\n\n                // Prevent label rendering issues when the style set is changing. Prevent Text\n                // element rendering that depends on cleaned font catalog data.\n                tile.clearTextElements();\n\n                tile.load();\n            }\n        }\n\n        renderListEntry.visibleTiles.forEach(tile => {\n            markTileDirty(tile, this.m_tileGeometryManager);\n        });\n        renderListEntry.renderedTiles.forEach(tile => {\n            markTileDirty(tile, this.m_tileGeometryManager);\n        });\n\n        dataSourceCache.forEach((tile, key) => {\n            if (!retainedTiles.has(key)) {\n                dataSourceCache.deleteByKey(key);\n                tile.dispose();\n            }\n        }, renderListEntry.dataSource);\n    }\n\n    // Computes the visible tile keys for each supplied data source.\n    private getVisibleTileKeysForDataSources(\n        zoomLevel: number,\n        dataSources: DataSource[],\n        elevationRangeSource: ElevationRangeSource | undefined\n    ): {\n        tileKeys: Array<{ dataSource: DataSource; visibleTileKeys: TileKeyEntry[] }>;\n        allBoundingBoxesFinal: boolean;\n    } {\n        const tileKeys = Array<{ dataSource: DataSource; visibleTileKeys: TileKeyEntry[] }>();\n        let allBoundingBoxesFinal: boolean = true;\n\n        if (dataSources.length === 0) {\n            return { tileKeys, allBoundingBoxesFinal };\n        }\n\n        const dataSourceBuckets = new Map<TilingScheme, DataSource[]>();\n        dataSources.forEach(dataSource => {\n            const tilingScheme = dataSource.getTilingScheme();\n            const bucket = dataSourceBuckets.get(tilingScheme);\n            if (bucket === undefined) {\n                dataSourceBuckets.set(tilingScheme, [dataSource]);\n            } else {\n                bucket.push(dataSource);\n            }\n        });\n\n        // If elevation is to be taken into account extend view frustum:\n        // (near ~0, far: maxVisibilityRange) that allows to consider tiles that\n        // are far below ground plane and high enough to intersect the frustum.\n        if (elevationRangeSource !== undefined) {\n            this.m_cameraOverride.copy(this.m_frustumIntersection.camera);\n            this.m_cameraOverride.near = Math.min(\n                this.m_cameraOverride.near,\n                this.m_viewRange.minimum\n            );\n            this.m_cameraOverride.far = Math.max(\n                this.m_cameraOverride.far,\n                this.m_viewRange.maximum\n            );\n            this.m_cameraOverride.updateProjectionMatrix();\n            this.m_frustumIntersection.updateFrustum(this.m_cameraOverride.projectionMatrix);\n        } else {\n            this.m_frustumIntersection.updateFrustum();\n        }\n\n        // For each bucket of data sources with same tiling scheme, calculate frustum intersection\n        // once using the maximum display level.\n        for (const [tilingScheme, bucket] of dataSourceBuckets) {\n            const zoomLevels = bucket.map(dataSource => dataSource.getDataZoomLevel(zoomLevel));\n            const result = this.m_frustumIntersection.compute(\n                tilingScheme,\n                elevationRangeSource,\n                zoomLevels,\n                bucket\n            );\n\n            allBoundingBoxesFinal = allBoundingBoxesFinal && result.calculationFinal;\n\n            for (const dataSource of bucket) {\n                // For each data source check what tiles from the intersection should be rendered\n                // at this zoom level.\n                const visibleTileKeys: TileKeyEntry[] = [];\n                const dataZoomLevel = dataSource.getDataZoomLevel(zoomLevel);\n                for (const tileKeyEntry of result.tileKeyEntries.get(dataZoomLevel)!.values()) {\n                    if (dataSource.canGetTile(dataZoomLevel, tileKeyEntry.tileKey)) {\n                        visibleTileKeys.push(tileKeyEntry);\n                    }\n                }\n                tileKeys.push({ dataSource, visibleTileKeys });\n            }\n        }\n\n        return { tileKeys, allBoundingBoxesFinal };\n    }\n}\n\nfunction viewRangesEqual(a: ViewRanges, b: ViewRanges) {\n    return (\n        a.far === b.far && a.maximum === b.maximum && a.minimum === b.minimum && a.near === b.near\n    );\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { ITiler } from \"@here/harp-datasource-protocol\";\nimport { ConcurrentWorkerSet } from \"./ConcurrentWorkerSet\";\nimport { WorkerBasedTiler } from \"./WorkerBasedTiler\";\n\n/**\n * Default concurrent tiler helper.\n *\n * A convenient singleton that maintains a separate [[ConcurrentWorkerSet]] for each bundle\n * requested. Provides easy access to [[WorkerBasedTiler]]s for data sources.\n */\nexport class ConcurrentTilerFacade {\n    /**\n     * The URL containing a script to fall back (default) to when looking for worker sets\n     * and tilers.\n     */\n    static defaultScriptUrl: string = \"./decoder.bundle.js\";\n\n    /**\n     * The default number of workers.\n     */\n    static defaultWorkerCount: number = 1;\n\n    /**\n     * Returns a [[WorkerBasedTiler]] instance.\n     *\n     * @param tilerServiceType The name of the tiler service type.\n     * @param scriptUrl The optional URL with the workers' script.\n     * @param workerCount The number of web workers to use.\n     */\n    static getTiler(tilerServiceType: string, scriptUrl?: string, workerCount?: number): ITiler {\n        const workerSet = this.getWorkerSet(scriptUrl, workerCount);\n\n        return new WorkerBasedTiler(workerSet, tilerServiceType);\n    }\n\n    /**\n     * Returns a [[ConcurrentWorkerSet]] instance based on the script URL specified.\n     *\n     * @param scriptUrl The optional URL with the workers' script. If not specified,\n     * the function uses [[defaultScriptUrl]] instead.\n     * @param workerCount The number of web workers to use.\n     */\n    static getWorkerSet(scriptUrl?: string, workerCount?: number): ConcurrentWorkerSet {\n        if (scriptUrl === undefined) {\n            scriptUrl = this.defaultScriptUrl;\n        }\n\n        let workerSet = this.workerSets[scriptUrl];\n        if (workerSet === undefined) {\n            workerSet = new ConcurrentWorkerSet({\n                scriptUrl,\n                workerCount: workerCount === undefined ? this.defaultWorkerCount : workerCount\n            });\n            this.workerSets[scriptUrl] = workerSet;\n        }\n        return workerSet;\n    }\n\n    /**\n     * Destroys a [[ConcurrentWorkerSet]] instance.\n     *\n     * @param scriptUrl The worker script URL that was used to create the [[ConcurrentWorkerSet]].\n     */\n    static destroyWorkerSet(scriptUrl: string) {\n        const workerSet = this.workerSets[scriptUrl];\n        if (workerSet !== undefined) {\n            workerSet.destroy();\n            delete this.workerSets[scriptUrl];\n        }\n    }\n\n    /**\n     * Destroys all managed [[ConcurrentWorkerSet]]s.\n     */\n    static destroy() {\n        Object.keys(this.workerSets).forEach(name => {\n            this.workerSets[name].destroy();\n        });\n        this.workerSets = {};\n    }\n\n    /**\n     * The [[ConcurrentWorkerSet]] instances which are stored by the script URL.\n     */\n    private static workerSets: {\n        [bundleUrl: string]: ConcurrentWorkerSet;\n    } = {};\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    GeoJson,\n    ITiler,\n    WorkerServiceProtocol,\n    WorkerTilerProtocol\n} from \"@here/harp-datasource-protocol\";\nimport { TileKey } from \"@here/harp-geoutils\";\nimport { ConcurrentWorkerSet } from \"./ConcurrentWorkerSet\";\n\n/**\n * Identifier of next tiler worker-service. Used to ensure uniqueness of service ids of tilers\n * dedicated to different datasources.\n */\nlet nextUniqueServiceId = 0;\n\n/**\n * Tiler based on [[ConcurrentWorkerSet]].\n *\n * Tiles payloads using workers running in separate contexts (also known as `WebWorkers`):\n * - connection establishment,\n * - sends tile requests,\n * - configuration.\n */\nexport class WorkerBasedTiler implements ITiler {\n    private serviceId: string;\n    private m_serviceCreated: boolean = false;\n\n    /**\n     * Creates a new `WorkerBasedTiler`.\n     *\n     * @param workerSet [[ConcurrentWorkerSet]] this tiler will live in.\n     * @param tilerServiceType Service type identifier.\n     */\n    constructor(\n        private readonly workerSet: ConcurrentWorkerSet,\n        private readonly tilerServiceType: string\n    ) {\n        this.workerSet.addReference();\n        this.serviceId = `${this.tilerServiceType}-${nextUniqueServiceId++}`;\n    }\n\n    /**\n     * Dispose of dedicated tiler services in workers and remove reference to underlying\n     * [[ConcurrentWorkerSet]].\n     */\n    dispose() {\n        if (this.m_serviceCreated) {\n            this.workerSet\n                .broadcastRequest(WorkerServiceProtocol.WORKER_SERVICE_MANAGER_SERVICE_ID, {\n                    type: WorkerServiceProtocol.Requests.DestroyService,\n                    targetServiceId: this.serviceId\n                })\n                .catch(() => {\n                    /* Ignoring these errors as underlying workers possibly do not exist anymore. */\n                });\n        }\n\n        this.workerSet.removeReference();\n    }\n\n    /**\n     * Connects to [[WorkerServiceManager]]s in underlying [[ConcurrentWorkerSet]] and creates\n     * dedicated [[TilerService]]s in all workers to serve tiling requests.\n     */\n    async connect(): Promise<void> {\n        await this.workerSet.connect(WorkerServiceProtocol.WORKER_SERVICE_MANAGER_SERVICE_ID);\n        if (!this.m_serviceCreated) {\n            await this.workerSet.broadcastRequest(\n                WorkerServiceProtocol.WORKER_SERVICE_MANAGER_SERVICE_ID,\n                {\n                    type: WorkerServiceProtocol.Requests.CreateService,\n                    targetServiceType: this.tilerServiceType,\n                    targetServiceId: this.serviceId\n                }\n            );\n\n            this.m_serviceCreated = true;\n        }\n    }\n\n    /**\n     * Register index in the tiler. Indexes registered in the tiler can be later used to retrieved\n     * tiled payloads using `getTile`.\n     *\n     * @param indexId Index identifier.\n     * @param input Url to the index payload, or direct GeoJSON.\n     */\n    registerIndex(indexId: string, input: URL | GeoJson): Promise<void> {\n        const message: WorkerTilerProtocol.RegisterIndexRequest = {\n            type: WorkerTilerProtocol.Requests.RegisterIndex,\n            id: indexId,\n            input: input instanceof URL ? input.href : (input as GeoJson)\n        };\n        return this.workerSet.invokeRequest(this.serviceId, message);\n    }\n\n    /**\n     * Update index in the tiler. Indexes registered in the tiler can be later used to retrieved\n     * tiled payloads using `getTile`.\n     *\n     * @param indexId Index identifier.\n     * @param input Url to the index payload, or direct GeoJSON.\n     */\n    updateIndex(indexId: string, input: URL | GeoJson): Promise<void> {\n        const message: WorkerTilerProtocol.UpdateIndexRequest = {\n            type: WorkerTilerProtocol.Requests.UpdateIndex,\n            id: indexId,\n            input: input instanceof URL ? input.href : (input as GeoJson)\n        };\n        return this.workerSet.invokeRequest(this.serviceId, message);\n    }\n\n    /**\n     * Retrieves a tile for a previously registered index.\n     *\n     * @param indexId Index identifier.\n     * @param tileKey The [[TileKey]] that identifies the tile.\n     */\n    getTile(indexId: string, tileKey: TileKey): Promise<{}> {\n        const tileKeyCode = tileKey.mortonCode();\n        const message: WorkerTilerProtocol.TileRequest = {\n            type: WorkerTilerProtocol.Requests.TileRequest,\n            index: indexId,\n            tileKey: tileKeyCode\n        };\n        return this.workerSet.invokeRequest(this.serviceId, message);\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeoBox } from \"@here/harp-geoutils\";\nimport { getOptionValue, ILogger, LoggerManager } from \"@here/harp-utils\";\nimport { CopyrightInfo } from \"./CopyrightInfo\";\nimport { CopyrightProvider } from \"./CopyrightProvider\";\n\ndeclare const require: any;\n\n// tslint:disable-next-line:no-var-requires\nconst RBush = require(\"rbush\");\n\n/**\n * Schema of [Map Tile API copyright\n * endpoint](https://developer.here.com/documentation/map-tile/topics/resource-copyright.html) JSON\n * response.\n */\nexport interface AreaCopyrightInfo {\n    /**\n     * Minimum zoom level for the specified copyright label.\n     */\n    minLevel?: number;\n\n    /**\n     * Maximum zoom level for the specified copyright label.\n     */\n    maxLevel?: number;\n\n    /**\n     * Copyright text to display after the copyright symbol on the map.\n     */\n    label: string;\n\n    /**\n     * Verbose copyright text of the label to display by mouse over label or info menu entry.\n     */\n    alt?: string;\n\n    /**\n     * The bounding boxes define areas where specific copyrights are valid. A bounding box is\n     * defined by bottom (latitude), left (longitude) and top (latitude), right (longitude).\n     *\n     * The default copyright has no boxes element and covers all other areas.\n     */\n    boxes?: Array<[number, number, number, number]>;\n}\n\n/**\n * Schema of [Map Tile API copyright\n * endpoint](https://developer.here.com/documentation/map-tile/topics/resource-copyright.html) JSON\n * response.\n */\nexport interface CopyrightCoverageResponse {\n    [scheme: string]: AreaCopyrightInfo[];\n}\n\n/**\n * Base class to provide copyrights based on copyright coverage information, defined by geographical\n * bounding boxes and relevant zoom level ranges.\n */\nexport abstract class CopyrightCoverageProvider implements CopyrightProvider {\n    /** Logger instance. */\n    protected readonly logger: ILogger = LoggerManager.instance.create(\"CopyrightCoverageProvider\");\n\n    private m_cachedTreePromise: Promise<any> | undefined;\n\n    /** Asynchronously retrieves copyright coverage data. */\n    abstract async getCopyrightCoverageData(): Promise<AreaCopyrightInfo[]>;\n\n    /** @inheritdoc */\n    getTree(): Promise<any> {\n        if (this.m_cachedTreePromise !== undefined) {\n            return this.m_cachedTreePromise;\n        }\n\n        this.m_cachedTreePromise = this.getCopyrightCoverageData()\n            .then(coverageInfo => this.initRBush(coverageInfo))\n            .catch(error => {\n                this.logger.error(error);\n                return new RBush();\n            });\n\n        return this.m_cachedTreePromise;\n    }\n\n    /** @inheritdoc */\n    async getCopyrights(geoBox: GeoBox, level: number): Promise<CopyrightInfo[]> {\n        const tree = await this.getTree();\n\n        const result: CopyrightInfo[] = [];\n\n        const matchingEntries: AreaCopyrightInfo[] = tree.search({\n            minX: geoBox.west,\n            minY: geoBox.south,\n            maxX: geoBox.east,\n            maxY: geoBox.north\n        });\n\n        for (const entry of matchingEntries) {\n            const minLevel = getOptionValue(entry.minLevel, 0);\n            const maxLevel = getOptionValue(entry.maxLevel, Infinity);\n\n            if (level >= minLevel && level <= maxLevel) {\n                if (result.find(item => item.id === entry.label) === undefined) {\n                    result.push({ id: entry.label });\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Initializes RBush.\n     *\n     * @param entries Entries for tree.\n     * @returns RBush instance.\n     */\n    initRBush(entries: AreaCopyrightInfo[]): any {\n        const tree = new RBush();\n\n        if (!entries) {\n            this.logger.warn(\"No copyright coverage data provided\");\n            return tree;\n        }\n\n        for (const entry of entries) {\n            const { minLevel, maxLevel, label, alt } = entry;\n\n            if (!entry.boxes) {\n                tree.insert({\n                    minX: -180,\n                    minY: -90,\n                    maxX: 180,\n                    maxY: 180,\n                    minLevel,\n                    maxLevel,\n                    label,\n                    alt\n                });\n            } else {\n                for (const box of entry.boxes) {\n                    const [minY, minX, maxY, maxX] = box;\n                    tree.insert({\n                        minX,\n                        minY,\n                        maxX,\n                        maxY,\n                        minLevel,\n                        maxLevel,\n                        label,\n                        alt\n                    });\n                }\n            }\n        }\n\n        return tree;\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from \"./src/TransferManager\";\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nimport { GeometryType } from \"@here/harp-datasource-protocol\";\nimport { reconstructLineWidth } from \"@here/harp-lines\";\nimport { assert, LoggerManager } from \"@here/harp-utils\";\n\nconst logger = LoggerManager.instance.create(\"TileGeometry\");\n\n/**\n * Interface to access lines. Allows read access for some important attributes.\n */\nexport interface ILineAccessor {\n    /**\n     * Hint for the original type of geometry.\n     */\n    geometryType: GeometryType;\n\n    /**\n     * Get the color from materials.\n     */\n    color: THREE.Color | undefined | Array<THREE.Color | undefined>;\n\n    /**\n     * Get the width. May have to be reconstructed from triangulated line mesh.\n     */\n    width: number | undefined;\n\n    /**\n     * Render order.\n     */\n    renderOrder: number;\n\n    /**\n     * Helper for function `isLineAccessor`.\n     *\n     * @returns `true` if it is a line accessor.\n     */\n    isLineAccessor(): boolean;\n\n    /**\n     * Clear the object from the mesh.\n     */\n    clear(): void;\n\n    /**\n     * Get vertices from the object.\n     */\n    getVertices(): Float32Array | undefined;\n}\n\n/**\n * Helper function to check if an accessor is of type `ILineAccessor`.\n *\n * @param arg `true` if `arg` is `ILineAccessor`.\n */\nexport function isLineAccessor(arg: any): arg is ILineAccessor {\n    /**\n     * Get vertices from the object.\n     *\n     * @param mode Specifies which part of the vertices should be returned.\n     */\n\n    return typeof arg.isLineAccessor === \"function\" && arg.isLineAccessor() === true;\n}\n\n/**\n * Accessor for unspecified 3D objects, like landmarks.\n */\nexport interface IObject3dAccessor {\n    /**\n     * Hint for the original type of geometry.\n     */\n    geometryType: GeometryType;\n\n    /**\n     * Get the color from materials.\n     */\n    color: THREE.Color | undefined | Array<THREE.Color | undefined>;\n\n    /**\n     * Render order.\n     */\n    renderOrder: number;\n\n    /**\n     * Helper for function `isObject3dAccessor`.\n     *\n     * @returns `true` if it is a line accessor.\n     */\n    isObject3dAccessor(): boolean;\n\n    /**\n     * Clear the object from the mesh.\n     */\n    clear(): void;\n\n    getVertices(): Float32Array | undefined;\n}\n\n/**\n * Helper function to check if an accessor is of type `IObject3dAccessor`.\n *\n * @param arg `true` if `arg` is `IObject3dAccessor`.\n */\nexport function isObject3dAccessor(arg: any): arg is IObject3dAccessor {\n    return typeof arg.isObject3dAccessor === \"function\" && arg.isObject3dAccessor() === true;\n}\n\n/**\n * Basic interface for geometry accessors.\n */\nexport interface IGeometryAccessor {\n    /**\n     * Get the number of primitives (vertices of triangles).\n     *\n     * @returns Number of primitives.\n     */\n    getCount(): number;\n\n    /**\n     * Set range of primitives in this object related to one or more buffers.\n     *\n     * @param start Start index in buffers.\n     * @param end End index in buffers (+1).\n     */\n    setRange(start: number, end: number): void;\n}\n\n/**\n * Geometry accessor for both indexed and nonindexed `BufferedGeometry`.\n */\nexport abstract class BufferedGeometryAccessorBase implements IGeometryAccessor {\n    protected start: number = -1;\n    protected end: number = -1;\n    protected startCapSize: number = 0;\n    protected endCapSize: number = 0;\n    protected position: THREE.BufferAttribute;\n    protected itemSize: number;\n\n    constructor(\n        readonly object: THREE.Mesh,\n        readonly geometryType: GeometryType,\n        protected readonly bufferGeometry: THREE.BufferGeometry\n    ) {\n        assert(!!object);\n\n        if (bufferGeometry.type !== \"BufferGeometry\") {\n            logger.error(\n                \"IndexedBufferedGeometryAccessor#constructor: BufferGeometry has wrong \" + \"type\"\n            );\n        }\n        assert(\n            bufferGeometry.type === \"BufferGeometry\",\n            \"IndexedBufferedGeometryAccessor#constructor: BufferGeometry has wrong type\"\n        );\n\n        // we know its a BufferAttribute because it is a BufferGeometry\n        this.position = this.bufferGeometry.getAttribute(\"position\") as THREE.BufferAttribute;\n        this.itemSize = this.position.itemSize;\n\n        if (!this.position) {\n            logger.warn(\n                \"BufferedGeometryAccessor#constructor: BufferGeometry has no position \" +\n                    \"attribute\"\n            );\n        }\n\n        if (this.position.array.constructor !== Float32Array) {\n            logger.warn(\n                \"BufferedGeometryAccessor#constructor: BufferGeometry.position: \" +\n                    \"unsupported ArrayBuffer\"\n            );\n        }\n    }\n\n    /**\n     * Get the number of accessible geometries in this buffer.\n     *\n     * @returns Number of primitives in this geometry.\n     */\n    getCount(): number {\n        return this.position.count;\n    }\n\n    /**\n     * Get `renderOrder` of object.\n     *\n     * @returns `renderOrder` of the object.\n     */\n    get renderOrder(): number {\n        return this.object.renderOrder;\n    }\n\n    setRange(start: number, end: number, startCapSize: number = 0, endCapSize: number = 0) {\n        assert(start >= 0);\n        assert(end >= 0);\n        assert(start <= end);\n        this.start = start;\n        this.end = end;\n        this.startCapSize = startCapSize;\n        this.endCapSize = endCapSize;\n    }\n\n    /**\n     * Get one or more colors from materials.\n     */\n    get color(): THREE.Color | undefined | Array<THREE.Color | undefined> {\n        /**\n         * TODO: Get color(s) from vertex colors\n         */\n        const getColor = (material: THREE.Material) => {\n            const meshMaterial = material as THREE.MeshBasicMaterial;\n            if (\n                meshMaterial.type === \"MeshBasicMaterial\" ||\n                meshMaterial.type === \"MeshStandardMaterial\"\n            ) {\n                return meshMaterial.color;\n            } else if (meshMaterial.type === \"RawShaderMaterial\") {\n                const rawShaderMaterial = material as THREE.RawShaderMaterial;\n\n                if (rawShaderMaterial.name === \"SolidLineMaterial\") {\n                    return rawShaderMaterial.uniforms.diffuse.value as THREE.Color;\n                }\n\n                logger.warn(\n                    \"BufferedGeometryAccessor#color: unknown shader material name\",\n                    rawShaderMaterial.name\n                );\n            } else {\n                logger.warn(\n                    \"BufferedGeometryAccessor#color: unknown material type\",\n                    meshMaterial.type\n                );\n            }\n\n            return undefined;\n        };\n\n        if (Array.isArray(this.object.material)) {\n            const results = new Array<THREE.Color | undefined>();\n            const materials = this.object.material as THREE.Material[];\n\n            for (const material of materials) {\n                results.push(getColor(material));\n            }\n\n            return results;\n        } else {\n            return getColor(this.object.material);\n        }\n    }\n}\n\n/**\n * Abstract base class of an accessor for nonindexed geometry.\n */\nexport abstract class BufferedGeometryAccessor extends BufferedGeometryAccessorBase {\n    /**\n     * Create an object of type `BufferedGeometryAccessor`\n     *\n     * @param object - mesh object\n     * @param geometryType - type of geometry to be used\n     * @param bufferGeometry - which buffer geometry to use\n     * @param stride - geometry stride length\n     */\n    constructor(\n        readonly object: THREE.Mesh,\n        readonly geometryType: GeometryType,\n        protected readonly bufferGeometry: THREE.BufferGeometry,\n        protected stride: number\n    ) {\n        super(object, geometryType, bufferGeometry);\n    }\n\n    clear(): void {\n        assert(this.checkSetUp(), \"BufferedGeometryAccessor not setup\");\n\n        const positionsArray = this.position.array as number[];\n\n        const start = this.start * this.itemSize;\n        const end = this.end * this.itemSize;\n\n        for (let i = start; i < end; i++) {\n            positionsArray[i] = 0;\n        }\n\n        this.position.needsUpdate = true;\n    }\n\n    getVertices(): Float32Array | undefined {\n        assert(this.checkSetUp(), \"BufferedGeometryAccessor not setup\");\n\n        const start = this.start;\n        const end = this.end;\n\n        return (this.position.array as Float32Array).subarray(\n            start * this.itemSize,\n            end * this.itemSize\n        );\n    }\n\n    protected checkSetUp(): boolean {\n        return (\n            this.position !== undefined &&\n            this.start !== undefined &&\n            this.end !== undefined &&\n            this.start >= 0 &&\n            this.end <= this.position.count &&\n            this.start <= this.end\n        );\n    }\n}\n\n/**\n * Accessor for nonindexed line geometry.\n */\nexport class BufferedGeometryLineAccessor extends BufferedGeometryAccessor\n    implements ILineAccessor {\n    constructor(\n        readonly object: THREE.Mesh,\n        readonly geometryType: GeometryType,\n        readonly bufferGeometry: THREE.BufferGeometry\n    ) {\n        super(object, geometryType, bufferGeometry, 3);\n    }\n\n    isLineAccessor(): boolean {\n        return true;\n    }\n\n    get width(): number | undefined {\n        //TODO: There is no implementation of such a line, yet...\n        assert(this.checkSetUp(), \"RoBufferedGeometryLineAccessor not setup\");\n        return undefined;\n    }\n}\n\n/**\n * Accessor for nonindexed unspecified (`Object3D`) geometry.\n */\nexport class BufferedGeometryObject3dAccessor extends BufferedGeometryAccessor\n    implements IObject3dAccessor {\n    constructor(\n        readonly object: THREE.Mesh,\n        readonly geometryType: GeometryType,\n        readonly bufferGeometry: THREE.BufferGeometry\n    ) {\n        super(object, geometryType, bufferGeometry, 1);\n    }\n\n    isObject3dAccessor(): boolean {\n        return true;\n    }\n\n    /** @override */\n    getVertices(): Float32Array | undefined {\n        return super.getVertices();\n    }\n}\n\n/**\n * Abstract base class of indexed geometry.\n */\nexport abstract class IndexedBufferedGeometryAccessor extends BufferedGeometryAccessorBase {\n    indices: number[];\n\n    /**\n     * Creates an abstract class `IndexedBufferedGeometryAccessor`.\n     *\n     * @param object - mesh to be used\n     * @param geometryType - type of geometry\n     * @param bufferGeometry - geometry used\n     * @param start\n     * @param end\n     */\n    constructor(\n        readonly object: THREE.Mesh,\n        readonly geometryType: GeometryType,\n        protected readonly bufferGeometry: THREE.BufferGeometry,\n        // tslint:disable-next-line:no-unused-variable\n        start?: number,\n        // tslint:disable-next-line:no-unused-variable\n        end?: number\n    ) {\n        super(object, geometryType, bufferGeometry);\n\n        this.indices =\n            this.bufferGeometry.index !== null\n                ? (this.bufferGeometry.index.array as number[])\n                : ((undefined as any) as number[]);\n\n        if (!this.indices) {\n            logger.warn(\n                \"IndexedBufferedGeometryAccessor#constructor: BufferGeometry has no \" + \"index\"\n            );\n            assert(!!this.indices);\n        } else {\n            if (!(this.indices instanceof Uint32Array)) {\n                logger.warn(\n                    \"IndexedBufferedGeometryAccessor#constructor: BufferGeometry index \" +\n                        \"has wrong type\"\n                );\n                assert(this.indices instanceof Uint32Array);\n            }\n        }\n    }\n\n    /**\n     * Returns number of primitives, which is not known in this base class, so we return the number\n     * of indices.\n     *\n     * @returns The number of indices in the geometry.\n     * @override\n     */\n    getCount(): number {\n        return this.indices.length;\n    }\n\n    protected checkSetUp(): boolean {\n        return (\n            !!this.indices &&\n            this.start !== undefined &&\n            this.end !== undefined &&\n            this.start >= 0 &&\n            this.end <= this.indices.length &&\n            this.start <= this.end\n        );\n    }\n}\n\n/**\n * Accessor for lines in an indexed geometry.\n */\nexport class IndexedBufferedGeometryLineAccessor extends IndexedBufferedGeometryAccessor\n    implements ILineAccessor {\n    constructor(\n        readonly object: THREE.Mesh,\n        readonly geometryType: GeometryType,\n        readonly bufferGeometry: THREE.BufferGeometry\n    ) {\n        super(object, geometryType, bufferGeometry, 3);\n    }\n\n    isLineAccessor(): boolean {\n        return true;\n    }\n\n    /**\n     * Reconstructs line width from triangulated geometry.\n     *\n     * @returns Line width.\n     */\n    get width(): number | undefined {\n        assert(this.checkSetUp(), \"RoIndexedBufferedGeometryLineAccessor not setup\");\n\n        if (this.geometryType === GeometryType.ExtrudedLine) {\n            const start = this.start + this.startCapSize;\n            const positionArray = this.position.array as Float32Array;\n            return reconstructLineWidth(positionArray, start);\n        }\n\n        return undefined;\n    }\n\n    clear(): void {\n        assert(this.checkSetUp(), \"RoIndexedBufferedGeometryLineAccessor not setup\");\n\n        const start = this.start;\n        const end = this.end;\n\n        for (let i = start; i < end; i++) {\n            this.indices[i] = 0;\n        }\n\n        if (this.bufferGeometry.index !== null) {\n            this.bufferGeometry.index.needsUpdate = true;\n        }\n    }\n\n    getVertices(): Float32Array | undefined {\n        assert(this.checkSetUp(), \"RoIndexedBufferedGeometryLineAccessor not setup\");\n\n        const itemSize = this.itemSize;\n\n        const start = this.start;\n        const end = this.end;\n\n        const result = new Float32Array((end - start) * itemSize);\n        const positionArray = this.position.array;\n\n        if (itemSize === 2) {\n            for (let i = start, j = 0; i < end; i++, j += itemSize) {\n                const index = this.indices[i];\n                result[j + 0] = positionArray[index * itemSize + 0];\n                result[j + 1] = positionArray[index * itemSize + 1];\n            }\n        }\n        if (itemSize === 3) {\n            for (let i = start, j = 0; i < end; i++, j += itemSize) {\n                const index = this.indices[i];\n                result[j + 0] = positionArray[index * itemSize + 0];\n                result[j + 1] = positionArray[index * itemSize + 1];\n                result[j + 2] = positionArray[index * itemSize + 2];\n            }\n        } else {\n            for (let i = start, j = 0; i < end; i++, j++) {\n                const index = this.indices[i];\n                for (let k = 0; k < itemSize; k++) {\n                    result[j * itemSize + k] = positionArray[index * itemSize + k];\n                }\n            }\n        }\n\n        return result;\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nconst UNIT_Z = new THREE.Vector3(0, 0, 1);\nconst POINTS = [0, 1, 2, 1, 3, 2];\nconst BEVEL_POINTS = [0, 1, 3, 3, 1, 2, 0, 3, 4, 5, 4, 3];\n\nconst SECTORS_IN_CIRCLE = 8;\nconst STEP = Math.PI / SECTORS_IN_CIRCLE;\n\n/**\n * Adds a half-circle geometry to original line\n *\n * @param x The line end X (used as circle center X)\n * @param y The line end Y (used as circle center Y)\n * @param lineAngle The cap incline angle\n * @param radius The cap (circle) radius\n * @param vertices The input vertex buffer (cap vertices are added there)\n * @param indices The input index buffer (cap indices are is added there)\n */\nfunction addCircle(\n    x: number,\n    y: number,\n    lineAngle: number,\n    radius: number,\n    vertices: number[],\n    indices: number[]\n) {\n    const baseVertex = vertices.length / 3;\n\n    // Add cap center to vertices directly (it doesn't need rotation)\n    vertices.push(x, y, 0);\n\n    for (let i = 0; i < SECTORS_IN_CIRCLE + 1; ++i) {\n        const angle = STEP * i + Math.PI / 2 + lineAngle; // Start angle is -90deg\n        vertices.push(x + radius * Math.cos(angle), y + radius * Math.sin(angle), 0);\n\n        indices.push(\n            baseVertex,\n            baseVertex + i + 1,\n            baseVertex + ((i + 1) % (SECTORS_IN_CIRCLE + 1)) + 1\n        );\n    }\n}\n\n/**\n * Returns the number of points in circle used for caps.\n *\n * @param lineWidth Width of line.\n */\n// tslint:disable-next-line:no-unused-variable\nexport function numCirclePoints(lineWidth: number): number {\n    return SECTORS_IN_CIRCLE + 1;\n}\n\n/**\n * Create a triangle mesh from the given polyline.\n *\n * @param points Sequence of (x,y,z) coordinates.\n * @param width The width of the extruded line.\n * @param vertices The output vertex buffer.\n * @param indices The output index buffer.\n * @param startWithCircle `true` if the line should start will a circle.\n * @param endWithCircle `true` if the line should end with a circle.\n */\nexport function triangulateLine(\n    points: ArrayLike<number>,\n    width: number,\n    vertices: number[],\n    indices: number[],\n    startWithCircle = true,\n    endWithCircle = startWithCircle\n) {\n    if (points.length < 3) {\n        return;\n    }\n\n    // This vector is used for computing cap angle\n    const angleVec = new THREE.Vector2();\n\n    if (startWithCircle) {\n        // Define lineAngle as (direction - origin) vector angle to X axis\n        const lineAngle =\n            points.length !== 3\n                ? angleVec.set(points[3] - points[0], points[4] - points[1]).angle()\n                : 0;\n\n        addCircle(points[0], points[1], lineAngle, width, vertices, indices);\n    }\n\n    const baseVertex = vertices.length / 3;\n\n    // bt = Bitangent (i.e. extrusion vector)\n    const prevBt = new THREE.Vector3();\n    const p = new THREE.Vector3(); // current point\n    const n = new THREE.Vector3(); // next point\n    const bt = new THREE.Vector3();\n    const averageBt = new THREE.Vector3();\n    const p0 = new THREE.Vector3();\n    const p1 = new THREE.Vector3();\n    const p2 = new THREE.Vector3();\n    const p3 = new THREE.Vector3();\n\n    const N = points.length / 3;\n\n    let vertexOffset = 0;\n    for (let i = 0; i < N; ++i) {\n        let useBevel = false;\n        p.set(points[i * 3], points[i * 3 + 1], points[i * 3 + 2]);\n\n        if (i + 1 < N) {\n            n.set(points[(i + 1) * 3], points[(i + 1) * 3 + 1], points[(i + 1) * 3 + 2]);\n\n            bt.copy(n)\n                .sub(p)\n                .normalize()\n                .cross(UNIT_Z);\n\n            averageBt.copy(bt);\n\n            if (i > 0) {\n                averageBt.add(prevBt).multiplyScalar(1.0 - 0.5 * bt.dot(prevBt));\n\n                useBevel = prevBt.angleTo(bt) > Math.PI / 2;\n\n                if (useBevel) {\n                    const inclineWidth = width / Math.cos(bt.angleTo(prevBt) / 2);\n\n                    p0.copy(bt)\n                        .add(prevBt)\n                        .normalize()\n                        .multiplyScalar(-inclineWidth)\n                        .add(p);\n\n                    p1.copy(prevBt)\n                        .multiplyScalar(width)\n                        .add(p);\n\n                    // p2 is used for \"miter\" connections\n                    p2.copy(bt)\n                        .add(prevBt)\n                        .normalize()\n                        .multiplyScalar(inclineWidth)\n                        .add(p);\n\n                    p3.copy(bt)\n                        .multiplyScalar(width)\n                        .add(p);\n                }\n            }\n\n            if (useBevel) {\n                vertices.push(\n                    p0.x,\n                    p0.y,\n                    p0.z,\n                    p1.x,\n                    p1.y,\n                    p1.z,\n                    p2.x,\n                    p2.y,\n                    p2.z,\n                    p3.x,\n                    p3.y,\n                    p3.z\n                );\n            } else {\n                p0.copy(averageBt)\n                    .multiplyScalar(-width)\n                    .add(p);\n\n                p1.copy(averageBt)\n                    .multiplyScalar(width)\n                    .add(p);\n\n                vertices.push(p0.x, p0.y, p0.z, p1.x, p1.y, p1.z);\n            }\n\n            prevBt.copy(bt);\n        } else {\n            p0.copy(prevBt)\n                .multiplyScalar(-width)\n                .add(p);\n\n            p1.copy(prevBt)\n                .multiplyScalar(width)\n                .add(p);\n\n            vertices.push(p0.x, p0.y, p0.z, p1.x, p1.y, p1.z);\n        }\n\n        if (i !== N - 1) {\n            (useBevel ? BEVEL_POINTS : POINTS).forEach(o =>\n                indices.push(baseVertex + vertexOffset + o)\n            );\n            vertexOffset += useBevel ? 4 : 2;\n        }\n    }\n\n    if (endWithCircle) {\n        const lineAngle =\n            points.length !== 2\n                ? angleVec\n                      .set(\n                          points[(N - 3) * 3] - points[(N - 2) * 3],\n                          points[(N - 3) * 3 + 1] - points[(N - 2) * 3 + 1]\n                      )\n                      .angle()\n                : Math.PI;\n\n        addCircle(\n            points[(N - 2) * 3],\n            points[(N - 2) * 3 + 1],\n            lineAngle,\n            width,\n            vertices,\n            indices\n        );\n    }\n}\n\n/**\n * Reconstruct the original points of a line from the vertices of the triangulated line.\n *\n * @param inBuffer Buffer with vertices.\n * @param startOffset Start index, will differ from `0` if the line has caps.\n * @returns Buffer containing the original points of the triangulated line.\n */\nexport function reconstructLine(inBuffer: Float32Array, startOffset: number): Float32Array {\n    const outBuffer = new Float32Array(inBuffer.length / 2);\n\n    for (let i = startOffset * 3, i2 = i * 2; i < outBuffer.length; i += 3, i2 += 6) {\n        outBuffer[i] = inBuffer[i2] + (inBuffer[i2 + 3] - inBuffer[i2]) * 0.5;\n        outBuffer[i + 1] = inBuffer[i2 + 1] + (inBuffer[i2 + 3 + 1] - inBuffer[i2 + 1]) * 0.5;\n        outBuffer[i + 2] = inBuffer[i2 + 2] + (inBuffer[i2 + 3 + 2] - inBuffer[i2 + 2]) * 0.5;\n    }\n    return outBuffer;\n}\n\n/**\n * Extract the line width from a triangulated line.\n *\n * @param inBuffer Array of vertex elements of a triangulated line.\n * @param startIndex Start index, will differ from `0` if the line has caps.\n */\nexport function reconstructLineWidth(inBuffer: Float32Array, startIndex: number): number {\n    const xd = inBuffer[startIndex * 2 + 3] - inBuffer[startIndex * 2];\n    const yd = inBuffer[startIndex * 2 + 3 + 1] - inBuffer[startIndex * 2 + 1];\n    const zd = inBuffer[startIndex * 2 + 3 + 2] - inBuffer[startIndex * 2 + 2];\n\n    return Math.sqrt(xd * xd + yd * yd + zd * zd) * 0.5;\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { HighPrecisionLineMaterial } from \"@here/harp-materials\";\n\nimport * as THREE from \"three\";\nimport { HighPrecisionUtils } from \"./HighPrecisionUtils\";\n\n/**\n * Declare interface for `HighPrecisionObject` which describes additional functionality to render\n * high-precision vertices.\n */\nexport interface HighPrecisionObject extends THREE.Object3D {\n    /**\n     * Allow direct access to [[BufferGeometry]] without cast.\n     */\n    bufferGeometry: THREE.BufferGeometry;\n\n    /**\n     * Allow direct access to [[ShaderMaterial]] without cast.\n     */\n    shaderMaterial: THREE.ShaderMaterial;\n\n    /**\n     * Inversed World Matrix.\n     */\n    matrixWorldInverse: THREE.Matrix4;\n\n    /**\n     * Sets up attributes for position (one attribute for major 32 bits position \"halve\", and one\n     * attribute for lower 32 bits).\n     */\n    setPositions(positions: number[] | THREE.Vector3[]): void;\n\n    /**\n     * Prepare the objects \"`onBeforeRender()`\" callback to generate proper high-precision camera\n     * position.\n     */\n    setupForRendering(): void;\n}\n\n/**\n * Class used to render high-precision wireframe lines.\n */\nexport class HighPrecisionWireFrameLine extends THREE.Line implements HighPrecisionObject {\n    matrixWorldInverse: THREE.Matrix4;\n\n    /**\n     * Creates a `HighPrecisionWireFrameLine` object.\n     *\n     * @param geometry [[BufferGeometry]] used to render this object.\n     * @param material [[HighPrecisionLineMaterial]] used to render this object.\n     *     instances.\n     * @param positions Array of 2D/3D positions.\n     * @param color Color of the rendered line.\n     * @param opacity Opacity of the rendered line.\n     */\n    constructor(\n        geometry?: THREE.BufferGeometry,\n        material?: HighPrecisionLineMaterial,\n        positions?: number[] | THREE.Vector3[],\n        color?: THREE.Color,\n        opacity?: number\n    ) {\n        super(geometry === undefined ? new THREE.BufferGeometry() : geometry, material);\n\n        if (material === undefined) {\n            material = new HighPrecisionLineMaterial({\n                color: color ? color : HighPrecisionLineMaterial.DEFAULT_COLOR,\n                opacity: opacity !== undefined ? opacity : HighPrecisionLineMaterial.DEFAULT_OPACITY\n            });\n        }\n\n        this.matrixWorldInverse = new THREE.Matrix4();\n\n        if (positions) {\n            this.setPositions(positions);\n        }\n    }\n\n    get bufferGeometry(): THREE.BufferGeometry {\n        return this.geometry as THREE.BufferGeometry;\n    }\n\n    get shaderMaterial(): THREE.ShaderMaterial {\n        return this.material as THREE.ShaderMaterial;\n    }\n\n    setPositions(positions: number[] | THREE.Vector3[]): void {\n        HighPrecisionUtils.setPositions(this, positions);\n    }\n\n    setupForRendering(): void {\n        this.onBeforeRender = (\n            _renderer: THREE.WebGLRenderer,\n            _scene: THREE.Scene,\n            camera: THREE.Camera,\n            _geometry: THREE.Geometry | THREE.BufferGeometry,\n            _material: THREE.Material,\n            _group: THREE.Group\n        ) => {\n            HighPrecisionUtils.updateHpUniforms(this, camera, this.shaderMaterial);\n        };\n    }\n\n    updateMatrixWorld(force: boolean) {\n        const doUpdateMatrixWorldInverse = this.matrixWorldNeedsUpdate || force;\n\n        super.updateMatrixWorld(force);\n\n        if (doUpdateMatrixWorldInverse) {\n            this.matrixWorldInverse.getInverse(this.matrixWorld);\n        }\n    }\n}\n\n/**\n * Class used to render high-precision lines.\n */\nexport class HighPrecisionLine extends THREE.Mesh implements HighPrecisionObject {\n    matrixWorldInverse: THREE.Matrix4;\n\n    /**\n     * Creates a `HighPrecisionLine` object.\n     *\n     * @param geometry [[BufferGeometry]] used to render this object.\n     * @param material [[HighPrecisionLineMaterial]] used to render this object.\n     *     instances.\n     * @param positions Array of 2D/3D positions.\n     * @param color Color of the rendered line.\n     * @param opacity Opacity of the rendered line.\n     */\n    constructor(\n        geometry?: THREE.BufferGeometry,\n        material?: HighPrecisionLineMaterial,\n        positions?: number[] | THREE.Vector3[],\n        color?: THREE.Color,\n        opacity?: number\n    ) {\n        super(geometry === undefined ? new THREE.BufferGeometry() : geometry, material);\n\n        if (material === undefined) {\n            material = new HighPrecisionLineMaterial({\n                color: color ? color : HighPrecisionLineMaterial.DEFAULT_COLOR,\n                opacity: opacity !== undefined ? opacity : HighPrecisionLineMaterial.DEFAULT_OPACITY\n            });\n        }\n\n        this.matrixWorldInverse = new THREE.Matrix4();\n\n        if (positions) {\n            this.setPositions(positions);\n        }\n    }\n\n    get bufferGeometry(): THREE.BufferGeometry {\n        return this.geometry as THREE.BufferGeometry;\n    }\n\n    get shaderMaterial(): THREE.ShaderMaterial {\n        return this.material as THREE.ShaderMaterial;\n    }\n\n    setPositions(positions: number[] | THREE.Vector3[]): void {\n        HighPrecisionUtils.setPositions(this, positions);\n    }\n\n    setupForRendering(): void {\n        this.onBeforeRender = (\n            _renderer: THREE.WebGLRenderer,\n            _scene: THREE.Scene,\n            camera: THREE.Camera,\n            _geometry: THREE.Geometry | THREE.BufferGeometry,\n            _material: THREE.Material,\n            _group: THREE.Group\n        ) => {\n            HighPrecisionUtils.updateHpUniforms(this, camera, this.shaderMaterial);\n        };\n    }\n\n    updateMatrixWorld(force: boolean) {\n        const doUpdateMatrixWorldInverse = this.matrixWorldNeedsUpdate || force;\n\n        super.updateMatrixWorld(force);\n\n        if (doUpdateMatrixWorldInverse) {\n            this.matrixWorldInverse.getInverse(this.matrixWorld);\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport \"@here/harp-fetch\";\n\nimport {\n    DecodedTile,\n    ITileDecoder,\n    RequestController,\n    TileInfo\n} from \"@here/harp-datasource-protocol\";\nimport { TileKey } from \"@here/harp-geoutils\";\nimport { DataSource, TileLoaderState } from \"@here/harp-mapview\";\nimport { LoggerManager } from \"@here/harp-utils\";\n\nimport { DataProvider } from \"./DataProvider\";\n\n/**\n * Logger to write to console etc.\n */\nconst logger = LoggerManager.instance.create(\"TileLoader\");\n\n/**\n * The [[TileLoader]] manages the different states of loading and decoding for a [[Tile]]. Used by\n * the [[TileDataSource]].\n */\nexport class TileLoader {\n    /**\n     * Current state of `TileLoader`.\n     */\n    state: TileLoaderState = TileLoaderState.Initialized;\n\n    /**\n     * Error object if loading or decoding failed.\n     */\n    error?: Error;\n\n    /**\n     * The binary data in form of [[ArrayBufferLike]], or any object.\n     */\n    payload?: ArrayBufferLike | {};\n\n    /**\n     * The result of decoding the `payload`: The [[DecodedTile]].\n     */\n    decodedTile?: DecodedTile;\n\n    /**\n     * The abort controller notifying the [[DataProvider]] to cancel loading.\n     */\n    protected loadAbortController = new AbortController();\n\n    /**\n     * The  notifying the [[ITileDecoder]] to cancel decoding.\n     */\n    protected requestController?: RequestController;\n\n    /**\n     * The promise which is resolved when loading and decoding have finished.\n     */\n    protected donePromise?: Promise<TileLoaderState>;\n\n    /**\n     * The internal function that is called when loading and decoding have finished successfully.\n     */\n    protected resolveDonePromise?: (state: TileLoaderState) => void;\n\n    /**\n     * The internal function that is called when loading and decoding failed.\n     */\n    protected rejectedDonePromise?: (state: TileLoaderState) => void;\n\n    /**\n     * Set up loading of a single [[Tile]].\n     *\n     * @param dataSource The [[DataSource]] the tile belongs to.\n     * @param tileKey The quadtree address of a [[Tile]].\n     * @param dataProvider The [[DataProvider]] that retrieves the binary tile data.\n     * @param tileDecoder The [[ITileDecoder]] that decodes the binary tile to a [[DecodeTile]].\n     * @param priority The priority given to the loading job. Highest number will be served first.\n     */\n    constructor(\n        protected dataSource: DataSource,\n        protected tileKey: TileKey,\n        protected dataProvider: DataProvider,\n        protected tileDecoder: ITileDecoder,\n        public priority: number\n    ) {}\n\n    /**\n     * Start loading and/or proceed through the various states of loading of this tile.\n     *\n     * @returns A promise which resolves the [[TileLoaderState]].\n     */\n    loadAndDecode(): Promise<TileLoaderState> {\n        switch (this.state) {\n            case TileLoaderState.Loading:\n            case TileLoaderState.Loaded:\n            case TileLoaderState.Decoding:\n                // tile is already loading\n                return this.donePromise!;\n\n            case TileLoaderState.Ready:\n            case TileLoaderState.Failed:\n            case TileLoaderState.Initialized:\n            case TileLoaderState.Canceled:\n                // restart loading\n                this.startLoading();\n                return this.donePromise!;\n        }\n    }\n\n    /**\n     * Return the current state in form of a promise. Caller can then wait for the promise to be\n     * resolved.\n     *\n     * @returns A promise which resolves the current [[TileLoaderState]].\n     */\n    waitSettled(): Promise<TileLoaderState> {\n        if (!this.donePromise) {\n            return Promise.resolve(this.state);\n        }\n        return this.donePromise;\n    }\n\n    /**\n     * Cancel loading of the [[Tile]].\n     * Cancellation token is notified, an internal state is cleaned up.\n     */\n    cancel() {\n        switch (this.state) {\n            case TileLoaderState.Loading:\n                this.loadAbortController.abort();\n                this.loadAbortController = new AbortController();\n                break;\n\n            case TileLoaderState.Decoding:\n                if (this.requestController) {\n                    this.requestController.abort();\n                    this.requestController = undefined;\n                }\n                break;\n        }\n\n        this.onDone(TileLoaderState.Canceled);\n    }\n\n    /**\n     * Return `true` if [[Tile]] is still loading, `false` otherwise.\n     */\n    get isFinished(): boolean {\n        return (\n            this.state === TileLoaderState.Ready ||\n            this.state === TileLoaderState.Canceled ||\n            this.state === TileLoaderState.Failed\n        );\n    }\n\n    /**\n     * Update the priority of this [[Tile]]'s priority. Is effective to sort the decoding requests\n     * in the request queue (used during heavy load).\n     */\n    updatePriority(priority: number): void {\n        this.priority = priority;\n        if (this.requestController !== undefined) {\n            this.requestController.priority = priority;\n        }\n    }\n\n    /**\n     * Start loading. Only call if loading did not start yet.\n     */\n    protected startLoading() {\n        const myLoadCancellationToken = this.loadAbortController.signal;\n        this.dataProvider\n            .getTile(this.tileKey, myLoadCancellationToken)\n            .then(payload => {\n                if (myLoadCancellationToken.aborted) {\n                    // safety belt if getTile doesn't really support cancellation tokens\n                    const err = new Error(\"Aborted\");\n                    err.name = \"AbortError\";\n                    throw err;\n                }\n                this.onLoaded(payload);\n            })\n            .catch(error => {\n                // Handle abort messages from fetch and also our own.\n                if (error.name === \"AbortError\" || error.message === \"AbortError: Aborted\") {\n                    return;\n                }\n                this.onError(error);\n            });\n\n        if (this.donePromise === undefined) {\n            this.donePromise = new Promise<TileLoaderState>((resolve, reject) => {\n                this.resolveDonePromise = resolve;\n                this.rejectedDonePromise = reject;\n            });\n        }\n        this.state = TileLoaderState.Loading;\n    }\n\n    /**\n     * Called when binary data has been loaded. The loading state is now progressing to decoding.\n     *\n     * @param payload Binary data in form of [[ArrayBufferLike]], or any object.\n     */\n    protected onLoaded(payload: ArrayBufferLike | {}) {\n        this.state = TileLoaderState.Loaded;\n        this.payload = payload;\n\n        const byteLength = (payload as ArrayBufferLike).byteLength;\n        if (\n            byteLength === 0 ||\n            (payload.constructor === Object && Object.keys(payload).length === 0)\n        ) {\n            // Object is empty\n            this.onDone(TileLoaderState.Ready);\n            return;\n        }\n\n        // TBD: we might suspend decode if tile is not visible ... ?\n        this.startDecodeTile();\n    }\n\n    /**\n     * Start decoding the payload.\n     */\n    protected startDecodeTile() {\n        const payload = this.payload;\n        if (payload === undefined) {\n            logger.error(\"TileLoader#startDecodeTile: Cannot decode without payload\");\n            return;\n        }\n\n        this.state = TileLoaderState.Decoding;\n        this.payload = undefined;\n\n        // Save our cancellation point, so we can be reliably cancelled by any subsequent decode\n        // attempts\n        const requestController = new RequestController(this.priority);\n        this.requestController = requestController;\n\n        const dataSource = this.dataSource;\n        this.tileDecoder\n            .decodeTile(payload, this.tileKey, dataSource.projection, requestController)\n            .then(decodedTile => {\n                if (requestController.signal.aborted) {\n                    // our flow is cancelled, silently return\n                    return;\n                }\n\n                this.onDecoded(decodedTile);\n            })\n            .catch(error => {\n                // Handle abort messages from fetch and also our own.\n                if (error.name === \"AbortError\" || error.message === \"AbortError: Aborted\") {\n                    // our flow is cancelled, silently return\n                    return;\n                }\n                this.onError(error);\n            });\n    }\n\n    /**\n     * Called when the decoding is finished, and the [[DecodedTile]] has been created.\n     *\n     * @param decodedTile The [[DecodedTile]].\n     */\n    protected onDecoded(decodedTile: DecodedTile) {\n        this.decodedTile = decodedTile;\n        this.onDone(TileLoaderState.Ready);\n    }\n\n    /**\n     * Cancel the decoding process.\n     */\n    protected cancelDecoding() {\n        if (this.requestController !== undefined) {\n            // we should cancel any decodes already in progress!\n            this.requestController.abort();\n            this.requestController = undefined;\n        }\n    }\n\n    /**\n     * Called when loading and decoding has finished successfully. Resolves loading promise if the\n     * state is Ready, otherwise it rejects the promise with the supplied state.\n     *\n     * @param doneState The latest state of loading.\n     */\n    protected onDone(doneState: TileLoaderState) {\n        if (this.resolveDonePromise && doneState === TileLoaderState.Ready) {\n            this.resolveDonePromise(doneState);\n        } else if (this.rejectedDonePromise) {\n            this.rejectedDonePromise(doneState);\n        }\n        this.resolveDonePromise = undefined;\n        this.rejectedDonePromise = undefined;\n        this.donePromise = undefined;\n        this.state = doneState;\n    }\n\n    /**\n     * Called when loading or decoding has finished with an error.\n     *\n     * @param error Error object describing the failing.\n     */\n    protected onError(error: Error) {\n        if (this.state === TileLoaderState.Canceled) {\n            // If we're canceled, we should simply ignore any state transitions and errors from\n            // underlying load/decode ops.\n            return;\n        }\n        const dataSource = this.dataSource;\n        logger.error(\n            `[${dataSource.name}]: failed to load tile ${this.tileKey.mortonCode()}`,\n            error\n        );\n\n        this.error = error;\n\n        this.onDone(TileLoaderState.Failed);\n    }\n}\n\n/**\n * Subclass of [[TileLoader]] which is used by [[TileDataSource]] to load the [[TileInfo]] meta\n * data, not the tile data itself.\n */\nexport class TileInfoLoader extends TileLoader {\n    tileInfo?: TileInfo;\n\n    /** @override */\n    protected startDecodeTile() {\n        const payload = this.payload;\n        if (payload === undefined) {\n            logger.error(\"TileInfoLoader#startDecodeTile: Cannot decode without payload\");\n            return;\n        }\n\n        this.state = TileLoaderState.Decoding;\n        this.payload = undefined;\n\n        // Save our cancellation point, so we can be reliably cancelled by any subsequent decode\n        // attempts\n        const requestController = new RequestController(this.priority);\n        this.requestController = requestController;\n\n        const dataSource = this.dataSource;\n        this.tileDecoder\n            .getTileInfo(payload, this.tileKey, dataSource.projection, requestController)\n            .then(tileInfo => {\n                if (requestController.signal.aborted) {\n                    // our flow is cancelled, silently return\n                    return;\n                }\n                this.tileInfo = tileInfo;\n\n                this.onDone(TileLoaderState.Ready);\n            })\n            .catch(error => {\n                // Handle abort messages from fetch and also our own.\n                if (error.name === \"AbortError\" || error.message === \"AbortError: Aborted\") {\n                    // our flow is cancelled, silently return\n                    return;\n                }\n                this.onError(error);\n            });\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport \"@here/harp-fetch\";\nimport { TileKey, TilingScheme } from \"@here/harp-geoutils\";\nimport { DataProvider } from \"@here/harp-mapview-decoder\";\nimport { ITransferManager, TransferManager } from \"@here/harp-transfer-manager\";\nimport { LoggerManager } from \"@here/harp-utils\";\n\nconst logger = LoggerManager.instance.create(\"OmvRestClient\");\n\n// tslint:disable:max-line-length\nexport enum APIFormat {\n    /**\n     * Use the REST API format of HERE Vector Tiles Server component version 1.\n     *\n     * Documentation:\n     *  https://developer.here.com/documentation/vector-tiles-api/dev_guide/index.html\n     *\n     * Usage:\n     *\n     *     <OmvRestClientParams.baseUrl>/<zoom>/<X>/<Y>/omv\n     *\n     * If [[OmvRestClientParams.authenticationToken]] is provided, it will be added as HTTP header:\n     *\n     *     Authorization: Bearer $authenticationToken\n     *\n     * Format definition:\n     * `//http|s://<base-url>/{API version}/{layers}/{projection}/{z}/{x}/{y}/{format}`\n     *\n     * Default authentication method used: [[AuthenticationTypeBearer]].\n     */\n    HereV1,\n\n    /**\n     * Use the REST API format of Mapbox Vector Tile API v4.\n     *\n     * Usage:\n     * `<OmvRestClientParams.baseUrl>/<zoom>/<X>/<Y>.mvt?access_token=<OmvRestClientParams.authenticationCode>`\n     *\n     * Format definition:\n     * `http|s://<base-url>/v4/{map_id}/{z}/{x}/{y}{@2x}.{format}?[style]&access_token={access_token}`\n     *\n     * Sample URL:\n     * `http://a.tiles.mapbox.com/v4/mapbox.mapbox-streets-v7/14/4823/6160.mvt?access_token=your-mapbox-access-token`\n     *\n     * Default authentication method used: [[AuthenticationTypeAccessToken]].\n     */\n    MapboxV4,\n\n    /**\n     * Use the REST API format of XYZ Vector Tile API in MVT format.\n     *\n     * Usage:\n     * `<OmvRestClientParams.baseUrl>/tiles/omsbase/256/<zoom>/<X>/<Y>.mvt?access_token=<OmvRestClientParams.authenticationCode>`\n     *\n     * Format definition:\n     * `http|s://<base-url>/tiles/{layers}/{z}/{x}/{y}/{format}?access_token={access_token}`\n     *\n     * Sample URL:\n     * `https://xyz.api.here.com/tiles/osmbase/256/all/16/19293/24641.mvt?access_token=your-xyz-access-token`\n     *\n     * Default authentication method used: [[AuthenticationTypeAccessToken]].\n     */\n    XYZMVT,\n\n    /**\n     * Use the REST API format of XYZ Vector Tile API in JSON format.\n     *\n     * Usage:\n     * `<OmvRestClientParams.baseUrl>/tiles/omsbase/256/<zoom>/<X>/<Y>.mvt?access_token=<OmvRestClientParams.authenticationCode>`\n     *\n     * Format definition:\n     * `http|s://<base-url>/tiles/{layers}/{z}/{x}/{y}/{format}?access_token={access_token}`\n     *\n     * Sample URL:\n     * `https://xyz.api.here.com/tiles/osmbase/256/all/16/19293/24641.json?access_token=your-xyz-api-key`\n     *\n     * Default authentication method used: [[AuthenticationTypeAccessToken]].\n     */\n    XYZJson,\n\n    /**\n     * Use the REST API format of XYZ Vector Tile API in OMV format.\n     *\n     * Usage:\n     * `<OmvRestClientParams.baseUrl>/tiles/herebase.02/<zoom>/<X>/<Y>/omv?access_token=<OmvRestClientParams.authenticationCode>`\n     *\n     * Format definition:\n     * `http|s://<base-url>/tiles/herebase.02/{z}/{x}/{y}/{format}?access_token={access_token}`\n     *\n     * Sample URL:\n     * `https://xyz.api.here.com/tiles/herebase.02/14/2649/6338/omv?access_token=your-xyz-access-token`\n     *\n     * Default authentication method used: [[AuthenticationTypeAccessToken]].\n     */\n    XYZOMV,\n\n    /**\n     * Use the REST API format of Tomtoms Vector Tile API v1.\n     *\n     * Usage:\n     * `<OmvRestClientParams.baseUrl>/<zoom>/<X>/<Y>.pbf?key=<OmvRestClientParams.authenticationCode>`\n     *\n     * Format definition:\n     * `<http|https>://<baseURL>/map/<versionNumber>/tile/<layer>/<style>/<zoom>/<X>/<Y>.<format>?key=<apiKey>[&view=<view>][&language=<language>]`\n     *\n     * Sample URL:\n     * `http://api.tomtom.com/map/1/tile/basic/main/0/0/0.pbf?key=<apiKey>`\n     *\n     * Default authentication method used: [[AuthenticationTypeTomTomV1]].\n     */\n    TomtomV1,\n\n    /**\n     * Use the REST API format of XYZ Space Vector Tile API in OMV format.\n     *\n     * Usage:\n     * `<OmvRestClientParams.baseUrl>/hub/spaces/<space-id>/tile/web/<zoom>_<X>_<Y>.mvt?access_token=<OmvRestClientParams.authenticationCode>`\n     *\n     * Format definition:\n     * `http|s://<base-url>/hub/spaces/{spaceId}/tile/web/{z}_{x}_{y}.mvt?access_token={access_token}`\n     *\n     * Sample URL:\n     * `https://xyz.api.here.com/hub/spaces/your-space-id/tile/web/{z}_{x}_{y}.mvt?access_token=your-access-token`\n     *\n     * Default authentication method used: [[AuthenticationTypeAccessToken]].\n     */\n    XYZSpace\n}\n// tslint:enable:max-line-length\n\n/**\n * Authentication token/code provider used by [[OmvRestClient]] before each call to currently valid\n * authentication code/token.\n */\nexport type AuthenticationCodeProvider = () => Promise<string>;\n\nexport enum AuthenticationMethod {\n    QueryString,\n    AuthorizationHeader\n}\n\nexport interface AuthenticationMethodInfo {\n    method: AuthenticationMethod;\n    name?: string;\n}\n\n/**\n * Authentication method, where token will be provided as HTTP Header:\n *\n *    Authorization: Bearer $authenticationToken\n */\nexport const AuthenticationTypeBearer: AuthenticationMethodInfo = {\n    method: AuthenticationMethod.AuthorizationHeader,\n    name: \"Bearer\"\n};\n\n/**\n * TomTomV1 API compatible authorization method, where token will be provided as HTTP Header:\n *\n *    Authorization: Bearer $authenticationToken\n */\nexport const AuthenticationTypeTomTomV1: AuthenticationMethodInfo = {\n    method: AuthenticationMethod.QueryString,\n    name: \"key\"\n};\n\nexport const AuthenticationTypeAccessToken: AuthenticationMethodInfo = {\n    method: AuthenticationMethod.QueryString,\n    name: \"access_token\"\n};\n\nexport interface OmvRestClientParameters {\n    /**\n     * `URL` pattern used to fetch tile files.\n     *\n     * `URL` with special keywords replaced to retrieve specific tile:\n     *  - `{z}` - zoom level of tile, @see [[TileKey.level]]\n     *  - `{x}` - horizontal coordinate of tile (column number), @see [[TileKey.column]]\n     *  - `{y}` - vertical coordinate of Tile (row number), @see [[TileKey.row]]\n     *\n     * Examples of `url` patterns:\n     * ```\n     *   https://my-base-url.com/vector-tiles/{z}/{x}/{y}.mvt\n     *   https://xyz.api.here.com/tiles/herebase.02/{z}/{x}/{y}/omv\n     *   https://xyz.api.here.com/tiles/osmbase/512/all/{z}/{x}/{y}.mvt\n     * ```\n     *\n     * Note: To add authentication headers and/or query params, use [[authMethod]], [[urlParams]]\n     * properties or embed token directly in `url`.\n     *\n     * Complete examples:\n     * ```\n     * // XYZ OSM with authentication using query param\n     * {\n     *     url: \"https://xyz.api.here.com/tiles/osmbase/512/all/{z}/{x}/{y}.mvt\",\n     *     urlParams: {\n     *           access_token: accessToken\n     *     },\n     * }\n     * // HERE Vector Tile with authentication using bearer token retrieved by callback\n     * {\n     *     url: \"https://vector.hereapi.com/v2/vectortiles/base/mc/{z}/{x}/{y}/omv\",\n     *     authenticationMethod: AuthenticationTypeBearer,\n     *     authenticationCode: () => getBearerToken()\n     * }\n     * ```\n     */\n    url?: string;\n\n    /**\n     * The base URL of the REST Tile Service.\n     * @see [[APIFormat]] for the definition of `baseUrl`.\n     */\n    baseUrl?: string;\n\n    /**\n     * Authentication code used for the different APIs.\n     *\n     * When [[AuthenticationCodeProvider]] is is used as value, the provider is called before each\n     * to get currently valid authentication code/token.\n     *\n     * @see [[APIFormat]] for the query parameter this is used with.\n     */\n    authenticationCode?: string | AuthenticationCodeProvider;\n\n    /**\n     * Specifies [[AuthMethod]] to be used when requesting tiles.\n     *\n     * Defaults for each [[APIFormat]] are documented with each format type.\n     */\n    authenticationMethod?: AuthenticationMethodInfo;\n\n    /**\n     * The REST API format to use for the tile path generation, will default to the HERE Vector Tile\n     * API.\n     */\n    apiFormat?: APIFormat;\n\n    /**\n     * Tiling scheme is used in some of the APIs, not implemented yet.\n     */\n    tilingScheme?: TilingScheme;\n\n    /**\n     * Transfer Manager to use; creates an own instance if none passed.\n     */\n    downloadManager?: ITransferManager;\n\n    /**\n     * Function to retrieve the Bearer Token\n     *\n     * @deprecated Please use [[authenticationCode]].\n     */\n    getBearerToken?: () => Promise<string>;\n\n    /**\n     * Array of query parameters to be appended at the end of the url.\n     * It is empty by default.\n     */\n    urlParams?: { [key: string]: string };\n}\n\n/**\n * REST client supporting getting protobuf OMV Tile from REST-based servers.\n */\nexport class OmvRestClient implements DataProvider {\n    private readonly downloadManager: ITransferManager;\n    private readonly urlParams: { [key: string]: string };\n\n    constructor(readonly params: OmvRestClientParameters) {\n        this.downloadManager =\n            params.downloadManager === undefined\n                ? TransferManager.instance()\n                : params.downloadManager;\n        this.urlParams = params.urlParams === undefined ? {} : params.urlParams;\n    }\n\n    /** Overriding abstract method, in this case doing nothing. */\n    async connect(): Promise<void> {\n        // not needed\n    }\n\n    /** Overriding abstract method, in this case always returning `true`. */\n    ready(): boolean {\n        return true;\n    }\n\n    /**\n     * Asynchronously fetches a tile from this restful server.\n     *\n     * **Note:** If the tile doesn't exist, a successful response with a `404` status code is\n     * returned.\n     *\n     * @example\n     * ```typescript\n     * const response = layer.getTile(tileKey);\n     * if (!response.ok) {\n     *     // a network error happened\n     *     console.error(\"Unable to download tile\", response.statusText);\n     *     return;\n     * }\n     * if (response.status === 404) {\n     *     // 404 -, no data exists at the given tile. Do nothing.\n     *     return;\n     * }\n     *\n     * // the response is ok and contains data, access it e.g. as arrayBuffer:\n     * const payload = await response.arrayBuffer();\n     * ```\n     *\n     * @param tileKey The tile key of the tile.\n     * @param tileRequestInit Optional request options to be passed to fetch when downloading a\n     * tile.\n     * @returns A `Promise` of the HTTP response that contains the payload of the requested tile.\n     */\n    async getTile(\n        tileKey: TileKey,\n        abortSignal?: AbortSignal | undefined\n    ): Promise<ArrayBufferLike | {}> {\n        const init: RequestInit = { signal: abortSignal };\n\n        let tileUrl = this.dataUrl(tileKey);\n\n        const authenticationCode = await this.getActualAuthenticationCode();\n\n        tileUrl = this.applyAuthCode(tileUrl, init, authenticationCode);\n        tileUrl = this.addQueryParams(tileUrl, this.urlParams);\n\n        if (this.params.apiFormat === APIFormat.XYZJson) {\n            return this.downloadManager.downloadJson(tileUrl, init);\n        }\n\n        return this.downloadManager.downloadArrayBuffer(tileUrl, init);\n    }\n\n    /**\n     * Get actual authentication code/token for this request according to configuration.\n     */\n    private async getActualAuthenticationCode() {\n        if (typeof this.params.authenticationCode === \"string\") {\n            return this.params.authenticationCode;\n        } else if (this.params.authenticationCode !== undefined) {\n            return this.params.authenticationCode();\n            // tslint:disable-next-line: deprecation\n        } else if (this.params.getBearerToken !== undefined) {\n            // tslint:disable-next-line: deprecation\n            return this.params.getBearerToken();\n        } else {\n            return undefined;\n        }\n    }\n\n    /**\n     * Get default authnentication method basing on apiFormat and other params.\n     */\n    private getDefaultAuthMethod() {\n        // tslint:disable-next-line: deprecation\n        if (this.params.getBearerToken !== undefined) {\n            return AuthenticationTypeBearer;\n        }\n\n        switch (this.params.apiFormat) {\n            case APIFormat.HereV1:\n                return AuthenticationTypeBearer;\n            case APIFormat.MapboxV4:\n            case APIFormat.XYZOMV:\n            case APIFormat.XYZMVT:\n            case APIFormat.XYZSpace:\n            case APIFormat.XYZJson:\n                return AuthenticationTypeAccessToken;\n            case APIFormat.TomtomV1:\n                return AuthenticationTypeTomTomV1;\n            default:\n                logger.warn(\n                    `#getDefaultAuthMethod: Not supported API format: ${this.params.apiFormat}`\n                );\n                return undefined;\n        }\n    }\n\n    /**\n     * Apply athentication code/token using configured (or default) authentication method.\n     *\n     * @param url\n     * @param init request extra data\n     * @param authenticationCode authentication/token to be applied\n     * @return new url to be used\n     */\n    private applyAuthCode(url: string, init: RequestInit, authenticationCode: string | undefined) {\n        if (authenticationCode === undefined) {\n            return url;\n        }\n        const authMethod = this.params.authenticationMethod || this.getDefaultAuthMethod();\n        if (authMethod === undefined) {\n            return url;\n        }\n\n        if (authMethod.method === AuthenticationMethod.AuthorizationHeader) {\n            if (init.headers === undefined) {\n                init.headers = new Headers();\n            }\n            const authType = authMethod.name || \"Bearer\";\n            (init.headers as Headers).append(\"Authorization\", `${authType} ${authenticationCode}`);\n        } else if (authMethod.method === AuthenticationMethod.QueryString) {\n            const attrName: string = authMethod.name || \"access_token\";\n            const authParams: { [key: string]: string } = {};\n            authParams[attrName] = authenticationCode;\n            url = this.addQueryParams(url, authParams);\n        }\n        return url;\n    }\n\n    /**\n     * Get actual tile URL depending on configured API format.\n     */\n    private dataUrl(tileKey: TileKey): string {\n        if (this.params.url !== undefined) {\n            return this.params.url\n                .replace(\"{x}\", String(tileKey.column))\n                .replace(\"{y}\", String(tileKey.row))\n                .replace(\"{z}\", String(tileKey.level));\n        }\n        let path = [`/${tileKey.level}`, tileKey.column, tileKey.row].join(\n            this.params.apiFormat === APIFormat.XYZSpace ||\n                this.params.apiFormat === APIFormat.XYZJson\n                ? \"_\"\n                : \"/\"\n        );\n        switch (this.params.apiFormat) {\n            case APIFormat.HereV1:\n            case APIFormat.XYZOMV:\n                path += \"/omv\";\n                break;\n            case APIFormat.MapboxV4:\n                path += \".mvt\";\n                break;\n            case APIFormat.XYZMVT:\n                path += \".mvt\";\n                break;\n            case APIFormat.XYZJson:\n                break;\n            case APIFormat.XYZSpace:\n                path += \".mvt\";\n                break;\n            case APIFormat.TomtomV1:\n                path += \".pbf\";\n                break;\n            default:\n                logger.warn(`Not supported API format: ${this.params.apiFormat}`);\n                break;\n        }\n\n        return this.params.baseUrl + path;\n    }\n\n    private addQueryParams(url: string, queryParams: { [key: string]: string }): string {\n        let queryString = \"\";\n        let concatinator = url.indexOf(\"?\") !== -1 ? \"&\" : \"?\";\n        Object.getOwnPropertyNames(queryParams).forEach(property => {\n            const prop = property as keyof typeof queryParams;\n            queryString += concatinator + prop + \"=\" + queryParams[prop];\n            if (concatinator === \"?\") {\n                concatinator = \"&\";\n            }\n        });\n        return url + queryString;\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// tslint:disable-next-line:no-implicit-dependencies\nimport { Theme } from \"@here/harp-datasource-protocol\";\nimport { GeoCoordinates } from \"@here/harp-geoutils\";\nimport { MapView, MapViewEventNames, MapViewUtils } from \"@here/harp-mapview\";\nimport { APIFormat, AuthenticationMethod, OmvDataSource } from \"@here/harp-omv-datasource\";\nimport { apikey, copyrightInfo } from \"../../@here/harp-examples/config\";\n\n// tslint:disable-next-line:no-var-requires\nconst theme = require(\"../resources/theme.json\");\n\nimport \"../css/index.css\";\n\nconst s3Base = \"https://www.harp.gl/docs/\";\n\n//Update initial links to s3 base\ndocument.querySelector<HTMLAnchorElement>(\".examples-link\")!.href = s3Base + \"master/examples/\";\ndocument.querySelector<HTMLAnchorElement>(\".docs-link\")!.href = s3Base + \"master/doc/\";\ndocument.querySelector<HTMLAnchorElement>(\"#docs-nav\")!.href = s3Base + \"master/doc/\";\ndocument.querySelector<HTMLAnchorElement>(\"#examples-nav\")!.href = s3Base + \"master/examples/\";\ndocument.querySelector<HTMLAnchorElement>(\"#docs-nav-mobile\")!.href = s3Base + \"master/doc/\";\n\n//Update year\n(document.getElementById(\"year\") as HTMLDivElement).innerText = `${new Date().getFullYear()}`;\n\nconst releases = [\n    {\n        date: \"latest\",\n        hash: \"master\",\n        version: \"latest-dev\"\n    }\n];\nconst dropdown = document.querySelector(\"select[name=versions]\") as HTMLSelectElement;\n\nfetch(\"./releases.json\")\n    .then(res => res.json())\n    .then(res => {\n        releases.push(...res);\n        releases.forEach(release => {\n            const option = document.createElement(\"option\");\n            option.innerText = release.version;\n            dropdown.appendChild(option);\n        });\n\n        dropdown.onchange = () => {\n            const selected = dropdown.querySelector<HTMLOptionElement>(\"option:checked\")!;\n            const release = releases.find(x => x.version === selected.innerText);\n            if (!release) {\n                return;\n            }\n            const hash = release.hash;\n            const version = release.version;\n\n            //Update examples button and link\n            document.querySelector<HTMLAnchorElement>(\".examples-link\")!.href =\n                s3Base + hash + \"/examples/\";\n            document.querySelector<HTMLAnchorElement>(\".examples-link\")!.innerText =\n                \"Examples\" + (hash !== \"master\" ? ` (${version})` : \"\");\n\n            //Update docs button and link\n            document.querySelector<HTMLAnchorElement>(\".docs-link\")!.href = s3Base + hash + \"/doc/\";\n            document.querySelector<HTMLAnchorElement>(\".docs-link\")!.innerText =\n                \"Documentation\" + (hash !== \"master\" ? ` (${version})` : \"\");\n        };\n    })\n    .catch(() => {\n        //In case network request to build information fails, add master link\n        const option = document.createElement(\"option\");\n        option.innerText = \"master\";\n        dropdown.appendChild(option);\n    });\n\nfunction main() {\n    const canvas = document.getElementById(\"map\") as HTMLCanvasElement;\n    const map = new MapView({\n        canvas,\n        decoderUrl: \"decoder.bundle.js\",\n        theme: (theme as unknown) as Theme,\n        maxVisibleDataSourceTiles: 40,\n        enableMixedLod: false,\n        tileCacheSize: 100\n    });\n    map.animatedExtrusionHandler.enabled = false;\n\n    const omvDataSource = new OmvDataSource({\n        baseUrl: \"https://vector.hereapi.com/v2/vectortiles/base/mc\",\n        apiFormat: APIFormat.XYZOMV,\n        styleSetName: \"tilezen\",\n        authenticationCode: apikey,\n        authenticationMethod: {\n            method: AuthenticationMethod.QueryString,\n            name: \"apikey\"\n        },\n        copyrightInfo\n    });\n    map.addDataSource(omvDataSource);\n\n    map.resize(window.innerWidth, 500);\n    window.addEventListener(\"resize\", () => map.resize(window.innerWidth, 500));\n\n    const zoomLevel = MapViewUtils.calculateZoomLevelFromDistance(map, 1400);\n    const Boston = new GeoCoordinates(42.361145, -71.057083);\n    const options = { target: Boston, zoomLevel, tilt: 34.3, heading: 135 };\n    map.lookAt(options);\n\n    map.addEventListener(MapViewEventNames.FrameComplete, () => {\n        canvas.style.opacity = \"1\";\n\n        map.addEventListener(MapViewEventNames.Render, () =>\n            map.lookAt({ heading: map.heading + 0.1 })\n        );\n        setTimeout(() => {\n            map.beginAnimation();\n        }, 0.5);\n    });\n}\n\nmain();\n","/*\n * Copyright (C) 2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Represents an object that carry [[GeoBox]] extents like interface.\n */\nexport interface GeoBoxExtentLike {\n    /**\n     * Latitude span in degrees.\n     */\n    readonly latitudeSpan: number;\n\n    /**\n     * Longitude span in degrees\n     */\n    readonly longitudeSpan: number;\n}\n\n/**\n * Type guard to assert that `object` conforms to [[GeoBoxExtentLike]] interface.\n */\nexport function isGeoBoxExtentLike(obj: any): obj is GeoBoxExtentLike {\n    return (\n        obj &&\n        typeof obj === \"object\" &&\n        typeof obj.latitudeSpan === \"number\" &&\n        typeof obj.longitudeSpan === \"number\"\n    );\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeoBox } from \"../coordinates/GeoBox\";\nimport { GeoCoordinates } from \"../coordinates/GeoCoordinates\";\nimport { GeoCoordinatesLike } from \"../coordinates/GeoCoordinatesLike\";\nimport { Box3Like, isBox3Like } from \"../math/Box3Like\";\nimport { MathUtils } from \"../math/MathUtils\";\nimport { isOrientedBox3Like, OrientedBox3Like } from \"../math/OrientedBox3Like\";\nimport { Vector3Like } from \"../math/Vector3Like\";\nimport { Projection, ProjectionType } from \"./Projection\";\n\nimport * as THREE from \"three\";\n\nclass IdentityProjection extends Projection {\n    /** @override */\n    readonly type: ProjectionType = ProjectionType.Planar;\n\n    /** @override */\n    getScaleFactor(_worldPoint: Vector3Like): number {\n        return 1;\n    }\n\n    /** @override */\n    worldExtent<WorldBoundingBox extends Box3Like>(\n        minAltitude: number,\n        maxAltitude: number,\n        result?: WorldBoundingBox\n    ): WorldBoundingBox {\n        if (!result) {\n            result = (new THREE.Box3() as Box3Like) as WorldBoundingBox;\n        }\n        result.min.x = -Math.PI;\n        result.min.y = -Math.PI * 0.5;\n        result.min.z = minAltitude;\n        result.max.x = Math.PI;\n        result.max.y = Math.PI * 0.5;\n        result.max.z = maxAltitude;\n        return result;\n    }\n\n    /** @override */\n    projectPoint<WorldCoordinates extends Vector3Like>(\n        geoPoint: GeoCoordinatesLike,\n        result?: WorldCoordinates\n    ): WorldCoordinates {\n        if (!result) {\n            // tslint:disable-next-line:no-object-literal-type-assertion\n            result = { x: 0, y: 0, z: 0 } as WorldCoordinates;\n        }\n        result.x = THREE.MathUtils.degToRad(geoPoint.longitude);\n        result.y = THREE.MathUtils.degToRad(geoPoint.latitude);\n        result.z = geoPoint.altitude || 0;\n        return result;\n    }\n\n    /** @override */\n    unprojectPoint(worldPoint: Vector3Like): GeoCoordinates {\n        const geoPoint = GeoCoordinates.fromRadians(worldPoint.y, worldPoint.x, worldPoint.z);\n        return geoPoint;\n    }\n\n    /** @override */\n    unprojectAltitude(worldPoint: Vector3Like): number {\n        return worldPoint.z;\n    }\n\n    /** @override */\n    projectBox<WorldBoundingBox extends Box3Like | OrientedBox3Like>(\n        geoBox: GeoBox,\n        result?: WorldBoundingBox\n    ): WorldBoundingBox {\n        if (!result) {\n            result = (new THREE.Box3() as Box3Like) as WorldBoundingBox;\n        }\n        const min = this.projectPoint(\n            new GeoCoordinates(geoBox.south, geoBox.west, geoBox.minAltitude)\n        );\n        const max = this.projectPoint(\n            new GeoCoordinates(geoBox.north, geoBox.east, geoBox.maxAltitude)\n        );\n        if (isBox3Like(result)) {\n            result.min.x = min.x;\n            result.min.y = min.y;\n            result.min.z = min.z;\n            result.max.x = max.x;\n            result.max.y = max.y;\n            result.max.z = max.z;\n        } else if (isOrientedBox3Like(result)) {\n            MathUtils.newVector3(1, 0, 0, result.xAxis);\n            MathUtils.newVector3(0, 1, 0, result.yAxis);\n            MathUtils.newVector3(0, 0, 1, result.zAxis);\n            result.position.x = (min.x + max.x) * 0.5;\n            result.position.y = (min.y + max.y) * 0.5;\n            result.position.z = (min.z + max.z) * 0.5;\n            result.extents.x = (max.x - min.x) * 0.5;\n            result.extents.y = (max.y - min.y) * 0.5;\n            result.extents.z = Math.max(Number.EPSILON, (max.z - min.z) * 0.5);\n        }\n        return result;\n    }\n\n    /** @override */\n    unprojectBox(worldBox: Box3Like): GeoBox {\n        const minGeo = this.unprojectPoint(worldBox.min);\n        const maxGeo = this.unprojectPoint(worldBox.max);\n        return GeoBox.fromCoordinates(minGeo, maxGeo);\n    }\n\n    /** @override */\n    groundDistance(worldPoint: Vector3Like): number {\n        return worldPoint.z;\n    }\n\n    /** @override */\n    scalePointToSurface(worldPoint: Vector3Like): Vector3Like {\n        worldPoint.z = 0;\n        return worldPoint;\n    }\n\n    /** @override */\n    surfaceNormal(_worldPoint: Vector3Like, normal?: Vector3Like) {\n        if (normal === undefined) {\n            normal = { x: 0, y: 0, z: 1 };\n        } else {\n            normal.x = 0;\n            normal.y = 0;\n            normal.z = 1;\n        }\n        return normal;\n    }\n}\n\n/**\n * Identity [[Projection]] used to convert geo coordinates to unit coordinates and vice versa.\n */\nexport const identityProjection: Projection = new IdentityProjection(1);\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeoBox } from \"../coordinates/GeoBox\";\nimport { GeoCoordinates } from \"../coordinates/GeoCoordinates\";\nimport { GeoCoordinatesLike, isGeoCoordinatesLike } from \"../coordinates/GeoCoordinatesLike\";\nimport { Box3Like, isBox3Like } from \"../math/Box3Like\";\nimport { MathUtils } from \"../math/MathUtils\";\nimport { isOrientedBox3Like, OrientedBox3Like } from \"../math/OrientedBox3Like\";\nimport { TransformLike } from \"../math/TransformLike\";\nimport { Vector3Like } from \"../math/Vector3Like\";\nimport { EarthConstants } from \"./EarthConstants\";\nimport { mercatorProjection, webMercatorProjection } from \"./MercatorProjection\";\nimport { Projection, ProjectionType } from \"./Projection\";\n\nimport * as THREE from \"three\";\n\n/**\n * Transforms the given vector using the provided basis.\n */\nfunction apply(\n    xAxis: Vector3Like,\n    yAxis: Vector3Like,\n    zAxis: Vector3Like,\n    v: Vector3Like\n): Vector3Like {\n    const x = xAxis.x * v.x + yAxis.x * v.y + zAxis.x * v.z;\n    const y = xAxis.y * v.x + yAxis.y * v.y + zAxis.y * v.z;\n    const z = xAxis.z * v.x + yAxis.z * v.y + zAxis.z * v.z;\n    v.x = x;\n    v.y = y;\n    v.z = z;\n    return v;\n}\n\n/**\n * Returns the quadrants for the given longitude. The quadrant is defined as:\n *  - quadrant(+Math.PI * -1.0) = 0\n *  - quadrant(+Math.PI * -0.5) = 1\n *  - quadrant(+Math.PI *  0.0) = 2\n *  - quadrant(+Math.PI *  0.5) = 3\n *  - quadrant(+Math.PI *  1.0) = 4\n *\n * @param longitude The longitude in radians.\n */\nfunction getLongitudeQuadrant(longitude: number) {\n    const oneOverPI = 1 / Math.PI;\n    const quadrantIndex = Math.floor(2 * (longitude * oneOverPI + 1));\n    return THREE.MathUtils.clamp(quadrantIndex, 0, 4);\n}\n\nfunction lengthOfVector3(worldPoint: Vector3Like): number {\n    const d = Math.sqrt(\n        worldPoint.x * worldPoint.x + worldPoint.y * worldPoint.y + worldPoint.z * worldPoint.z\n    );\n    return d;\n}\n\n/**\n * Creates a Box3 enclosing the geobox.\n *\n * @param geoBox Ghe given geobox\n * @param worldBox The resulting axis aligned bounding box.\n */\nfunction makeBox3<Bounds extends Box3Like>(\n    geoBox: GeoBox,\n    worldBox: Bounds,\n    unitScale: number\n): Bounds {\n    const halfEquatorialRadius = (unitScale + (geoBox.maxAltitude || 0)) * 0.5;\n\n    const minLongitude = THREE.MathUtils.degToRad(geoBox.west);\n    const maxLongitude = THREE.MathUtils.degToRad(geoBox.east);\n\n    const minLongitudeQuadrant = getLongitudeQuadrant(minLongitude);\n    const maxLongitudeQuadrant = getLongitudeQuadrant(maxLongitude);\n\n    let xMin = Math.cos(minLongitude);\n    let xMax = xMin;\n    let yMin = Math.sin(minLongitude);\n    let yMax = yMin;\n\n    for (\n        let quadrantIndex = minLongitudeQuadrant + 1;\n        quadrantIndex <= maxLongitudeQuadrant;\n        quadrantIndex++\n    ) {\n        // tslint:disable-next-line: no-bitwise\n        const x = ((quadrantIndex + 1) & 1) * ((quadrantIndex & 2) - 1);\n        xMin = Math.min(x, xMin);\n        xMax = Math.max(x, xMax);\n\n        // tslint:disable-next-line: no-bitwise\n        const y = (quadrantIndex & 1) * ((quadrantIndex & 2) - 1);\n        yMin = Math.min(y, yMin);\n        yMax = Math.max(y, yMax);\n    }\n\n    const cosMaxLongitude = Math.cos(maxLongitude);\n    xMin = Math.min(cosMaxLongitude, xMin);\n    xMax = Math.max(cosMaxLongitude, xMax);\n\n    const sinMaxLongitude = Math.sin(maxLongitude);\n    yMin = Math.min(sinMaxLongitude, yMin);\n    yMax = Math.max(sinMaxLongitude, yMax);\n\n    const xCenter = (xMax + xMin) * halfEquatorialRadius;\n    const xExtent = (xMax - xMin) * halfEquatorialRadius;\n\n    const yCenter = (yMax + yMin) * halfEquatorialRadius;\n    const yExtent = (yMax - yMin) * halfEquatorialRadius;\n\n    // Calculate Z boundaries.\n    const minLatitude = THREE.MathUtils.degToRad(geoBox.south);\n    const maxLatutide = THREE.MathUtils.degToRad(geoBox.north);\n\n    const zMax = Math.sin(maxLatutide);\n    const zMin = Math.sin(minLatitude);\n\n    const zCenter = (zMax + zMin) * halfEquatorialRadius;\n    const zExtent = (zMax - zMin) * halfEquatorialRadius;\n\n    worldBox.min.x = xCenter - xExtent;\n    worldBox.min.y = yCenter - yExtent;\n    worldBox.min.z = zCenter - zExtent;\n    worldBox.max.x = xCenter + xExtent;\n    worldBox.max.y = yCenter + yExtent;\n    worldBox.max.z = zCenter + zExtent;\n\n    return worldBox;\n}\n\n/**\n * Computes the spherical projection of the given geo coordinates.\n *\n * @param geoPoint The geo coordinates.\n * @param worldpoint The resulting world coordinates.\n */\nfunction project<WorldCoordinates extends Vector3Like>(\n    geoPoint: GeoCoordinatesLike,\n    worldpoint: WorldCoordinates,\n    unitScale: number\n): typeof worldpoint {\n    const radius = unitScale + (geoPoint.altitude || 0);\n    const latitude = THREE.MathUtils.degToRad(geoPoint.latitude);\n    const longitude = THREE.MathUtils.degToRad(geoPoint.longitude);\n    const cosLatitude = Math.cos(latitude);\n    worldpoint.x = radius * cosLatitude * Math.cos(longitude);\n    worldpoint.y = radius * cosLatitude * Math.sin(longitude);\n    worldpoint.z = radius * Math.sin(latitude);\n    return worldpoint;\n}\n\nclass SphereProjection extends Projection {\n    /** @override */\n    readonly type: ProjectionType = ProjectionType.Spherical;\n\n    /** @override */\n    worldExtent<Bounds extends Box3Like>(\n        _minElevation: number,\n        maxElevation: number,\n        result: Bounds = (new THREE.Box3() as Box3Like) as Bounds\n    ): Bounds {\n        const radius = this.unitScale + maxElevation;\n        result.min.x = -radius;\n        result.min.y = -radius;\n        result.min.z = -radius;\n        result.max.x = radius;\n        result.max.y = radius;\n        result.max.z = radius;\n        return result;\n    }\n\n    /** @override */\n    projectPoint<WorldCoordinates extends Vector3Like>(\n        geoPoint: GeoCoordinatesLike,\n        result: WorldCoordinates = MathUtils.newVector3(0, 0, 0) as WorldCoordinates\n    ): WorldCoordinates {\n        return project(geoPoint, result, this.unitScale);\n    }\n\n    /** @override */\n    unprojectPoint(point: Vector3Like): GeoCoordinates {\n        const parallelRadiusSq = point.x * point.x + point.y * point.y;\n        const parallelRadius = Math.sqrt(parallelRadiusSq);\n        const v = point.z / parallelRadius;\n\n        if (isNaN(v)) {\n            return GeoCoordinates.fromRadians(0, 0, -this.unitScale);\n        }\n\n        const radius = Math.sqrt(parallelRadiusSq + point.z * point.z);\n\n        return GeoCoordinates.fromRadians(\n            Math.atan(v),\n            Math.atan2(point.y, point.x),\n            radius - this.unitScale\n        );\n    }\n\n    /** @override */\n    unprojectAltitude(point: Vector3Like): number {\n        const parallelRadiusSq = point.x * point.x + point.y * point.y + point.z * point.z;\n        return Math.sqrt(parallelRadiusSq) - EarthConstants.EQUATORIAL_RADIUS;\n    }\n\n    /** @override */\n    projectBox<Bounds extends Box3Like | OrientedBox3Like>(\n        geoBox: GeoBox,\n        result: Bounds = (new THREE.Box3() as Box3Like) as Bounds\n    ): Bounds {\n        if (isBox3Like(result)) {\n            return makeBox3(geoBox, result, this.unitScale);\n        } else if (isOrientedBox3Like(result)) {\n            if (geoBox.longitudeSpan >= 90) {\n                const bounds = makeBox3(geoBox, new THREE.Box3() as Box3Like, this.unitScale);\n                MathUtils.newVector3(1, 0, 0, result.xAxis);\n                MathUtils.newVector3(0, 1, 0, result.yAxis);\n                MathUtils.newVector3(0, 0, 1, result.zAxis);\n                result.position.x = (bounds.max.x + bounds.min.x) * 0.5;\n                result.position.y = (bounds.max.y + bounds.min.y) * 0.5;\n                result.position.z = (bounds.max.z + bounds.min.z) * 0.5;\n                result.extents.x = (bounds.max.x - bounds.min.x) * 0.5;\n                result.extents.y = (bounds.max.y - bounds.min.y) * 0.5;\n                result.extents.z = (bounds.max.z - bounds.min.z) * 0.5;\n                return result;\n            }\n\n            const { south, west, north, east, center: mid } = geoBox;\n            const midX = mid.longitude;\n            const midY = mid.latitude;\n            const cosSouth = Math.cos(THREE.MathUtils.degToRad(south));\n            const sinSouth = Math.sin(THREE.MathUtils.degToRad(south));\n            const cosWest = Math.cos(THREE.MathUtils.degToRad(west));\n            const sinWest = Math.sin(THREE.MathUtils.degToRad(west));\n            const cosNorth = Math.cos(THREE.MathUtils.degToRad(north));\n            const sinNorth = Math.sin(THREE.MathUtils.degToRad(north));\n            const cosEast = Math.cos(THREE.MathUtils.degToRad(east));\n            const sinEast = Math.sin(THREE.MathUtils.degToRad(east));\n            const cosMidX = Math.cos(THREE.MathUtils.degToRad(midX));\n            const sinMidX = Math.sin(THREE.MathUtils.degToRad(midX));\n            const cosMidY = Math.cos(THREE.MathUtils.degToRad(midY));\n            const sinMidY = Math.sin(THREE.MathUtils.degToRad(midY));\n\n            // Build the orientation of the OBB using the normal vector and its partial derivates.\n\n            // the sperical coordinates of the mid point of the geobox.\n            MathUtils.newVector3(cosMidX * cosMidY, sinMidX * cosMidY, sinMidY, result.zAxis);\n\n            // the partial derivates of the normal vector.\n            MathUtils.newVector3(-sinMidX, cosMidX, 0, result.xAxis);\n            MathUtils.newVector3(-cosMidX * sinMidY, -sinMidX * sinMidY, cosMidY, result.yAxis);\n\n            let width: number;\n            let minY: number;\n            let maxY: number;\n\n            if (south >= 0) {\n                // abs(dot(southWest - southEast, xAxis))\n                width = Math.abs(\n                    cosSouth * (cosMidX * (sinWest - sinEast) + sinMidX * (cosEast - cosWest))\n                );\n\n                // dot(south, yAxis)\n                minY = cosMidY * sinSouth - sinMidY * cosSouth;\n\n                // dot(northEast, zAxis)\n                maxY =\n                    cosMidY * sinNorth -\n                    sinMidY * cosNorth * (cosMidX * cosEast + sinMidX * sinEast);\n            } else {\n                if (north <= 0) {\n                    // abs(dot(northWest - northEast, xAxis))\n                    width = Math.abs(\n                        cosNorth * (cosMidX * (sinWest - sinEast) + sinMidX * (cosEast - cosWest))\n                    );\n\n                    // dot(north, yAxis)\n                    maxY = cosMidY * sinNorth - sinMidY * cosNorth;\n                } else {\n                    // abs(dot(west - east, xAxis))\n                    width = Math.abs(cosMidX * (sinWest - sinEast) + sinMidX * (cosEast - cosWest));\n\n                    // dot(northEast, yAxis)\n                    maxY =\n                        cosMidY * sinNorth -\n                        sinMidY * cosNorth * (sinMidX * sinEast + cosMidX * cosEast);\n                }\n\n                // dot(southEast, yAxis)\n                minY =\n                    cosMidY * sinSouth -\n                    sinMidY * cosSouth * (cosMidX * cosEast + sinMidX * sinEast);\n            }\n\n            const rMax = (this.unitScale + (geoBox.maxAltitude || 0)) * 0.5;\n            const rMin = (this.unitScale + (geoBox.minAltitude || 0)) * 0.5;\n\n            // min(dot(southEast, zAxis), dot(northEast, zAxis))\n\n            const d = cosMidY * (cosMidX * cosEast + sinMidX * sinEast);\n\n            const minZ = Math.min(\n                cosNorth * d + sinNorth * sinMidY,\n                cosSouth * d + sinSouth * sinMidY\n            );\n\n            MathUtils.newVector3(\n                width * rMax,\n                (maxY - minY) * rMax,\n                rMax - minZ * rMin,\n                result.extents\n            );\n\n            MathUtils.newVector3(0, (minY + maxY) * rMax, rMax + rMax, result.position);\n\n            apply(result.xAxis, result.yAxis, result.zAxis, result.position);\n\n            result.position.x = result.position.x - result.zAxis.x * result.extents.z;\n            result.position.y = result.position.y - result.zAxis.y * result.extents.z;\n            result.position.z = result.position.z - result.zAxis.z * result.extents.z;\n\n            return result;\n        }\n\n        throw new Error(\"Invalid bounding box\");\n    }\n\n    /** @override */\n    unprojectBox(_worldBox: Box3Like): GeoBox {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    /** @override */\n    getScaleFactor(_worldPoint: Vector3Like): number {\n        return 1;\n    }\n\n    /** @override */\n    groundDistance(worldPoint: Vector3Like): number {\n        return lengthOfVector3(worldPoint) - this.unitScale;\n    }\n\n    /** @override */\n    scalePointToSurface(worldPoint: Vector3Like): Vector3Like {\n        const scale = this.unitScale / (lengthOfVector3(worldPoint) || 1);\n        worldPoint.x *= scale;\n        worldPoint.y *= scale;\n        worldPoint.z *= scale;\n        return worldPoint;\n    }\n\n    /** @override */\n    surfaceNormal(worldPoint: Vector3Like, normal?: Vector3Like) {\n        if (normal === undefined) {\n            normal = { x: 0, y: 0, z: 0 };\n        }\n        const scale = 1 / (lengthOfVector3(worldPoint) || 1);\n        normal.x = worldPoint.x * scale;\n        normal.y = worldPoint.y * scale;\n        normal.z = worldPoint.z * scale;\n        return normal;\n    }\n\n    /** @override */\n    reprojectPoint(\n        sourceProjection: Projection,\n        worldPos: Vector3Like,\n        result?: Vector3Like\n    ): Vector3Like {\n        if (sourceProjection === mercatorProjection || sourceProjection === webMercatorProjection) {\n            const { x, y, z } = worldPos;\n            const r = this.unitScale;\n            const mx = x / r - Math.PI;\n            const my = y / r - Math.PI;\n            const w = Math.exp(my);\n            const d = w * w;\n            const gx = (2 * w) / (d + 1);\n            const gy = (d - 1) / (d + 1);\n            const scale = r + z;\n\n            if (result === undefined) {\n                // tslint:disable-next-line: no-object-literal-type-assertion\n                result = {} as Vector3Like;\n            }\n\n            result.x = Math.cos(mx) * gx * scale;\n            result.y = Math.sin(mx) * gx * scale;\n            result.z = gy * scale;\n\n            if (sourceProjection === webMercatorProjection) {\n                result.z = -result.z;\n            }\n\n            return result;\n        }\n\n        return super.reprojectPoint(sourceProjection, worldPos, result!);\n    }\n\n    /** @override */\n    localTangentSpace(\n        point: GeoCoordinatesLike | Vector3Like,\n        result: TransformLike\n    ): TransformLike {\n        let geoPoint: GeoCoordinatesLike;\n        if (isGeoCoordinatesLike(point)) {\n            this.projectPoint(point, result.position);\n            geoPoint = point;\n        } else {\n            MathUtils.copyVector3(point, result.position);\n            geoPoint = this.unprojectPoint(point);\n        }\n\n        const latitude = THREE.MathUtils.degToRad(geoPoint.latitude);\n        const longitude = THREE.MathUtils.degToRad(geoPoint.longitude);\n\n        const cosLongitude = Math.cos(longitude);\n        const sinLongitude = Math.sin(longitude);\n        const cosLatitude = Math.cos(latitude);\n        const sinLatitude = Math.sin(latitude);\n\n        MathUtils.newVector3(\n            cosLongitude * cosLatitude,\n            sinLongitude * cosLatitude,\n            sinLatitude,\n            result.zAxis\n        );\n\n        MathUtils.newVector3(-sinLongitude, cosLongitude, 0, result.xAxis);\n\n        MathUtils.newVector3(\n            -cosLongitude * sinLatitude,\n            -sinLongitude * sinLatitude,\n            cosLatitude,\n            result.yAxis\n        );\n        return result;\n    }\n}\n\nexport const sphereProjection: Projection = new SphereProjection(EarthConstants.EQUATORIAL_RADIUS);\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeoBox } from \"../coordinates/GeoBox\";\nimport { TileKey } from \"./TileKey\";\nimport { TilingScheme } from \"./TilingScheme\";\n\n/**\n * A class used to represent a quadtree.\n */\nexport class QuadTree {\n    /**\n     * Constructs a new `QuadTree` for the given [[TilingScheme]].\n     *\n     * Example:\n     * ```typescript\n     * const quadTree = new QuadTree(hereTilingScheme);\n     * const geoBox = quadTree.getGeoBox(tileKey);\n     * console.log(geoBox.center);\n     * ```\n     *\n     * @param tilingScheme The TilingScheme used by this `QuadTree`.\n     */\n    constructor(readonly tilingScheme: TilingScheme) {}\n\n    /**\n     * Visits this `QuadTree` and invoke the given accept method with the current [[TileKey]] and\n     * its bounding box in geo coordinates.\n     *\n     * Example:\n     * ```typescript\n     * const geoPos = new GeoCoordinates(latitude, longitude);\n     * const quadTree = new QuadTree(hereTilingScheme);\n     * quadTree.visit((tileKey, geoBox) => {\n     *     if (geoBox.contains(geoPos)) {\n     *         console.log(\"tile\", tileKey, \"contains\", geoPos);\n     *         return tileKey.level < 14; // stop visiting the quadtree if the level is >= 14.\n     *     }\n     *     return false; // stop visiting the quadtree,\n     *                   // the tile's geoBox doesn't contain the given coordinates.\n     * });\n     * ```\n     *\n     * @param accept A function that takes a [[TileKey]] and its bounding box in geo coordinates and\n     * returns `true` if the visit of the `QuadTree` should continue; otherwise `false`.\n     */\n    visit(accept: (tileKey: TileKey, geoBox: GeoBox) => boolean) {\n        this.visitTileKey(TileKey.fromRowColumnLevel(0, 0, 0), accept);\n    }\n\n    /**\n     * Visits the subtree starting from the given tile.\n     *\n     * @param tileKey The root of the subtree that should be visited.\n     * @param accept A function that takes a [[TileKey]] and its bounding box in geo coordinates and\n     * returns `true` if the visit of the `QuadTree` should continue; otherwise `false`.\n     */\n    visitTileKey(tileKey: TileKey, accept: (tileKey: TileKey, geoBox: GeoBox) => boolean) {\n        const geoBox = this.tilingScheme.getGeoBox(tileKey);\n\n        if (!accept(tileKey, geoBox)) {\n            return;\n        }\n\n        for (const subTileKey of this.tilingScheme.getSubTileKeys(tileKey)) {\n            this.visitTileKey(subTileKey, accept);\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { normalizedEquirectangularProjection } from \"../projection/EquirectangularProjection\";\nimport { halfQuadTreeSubdivisionScheme } from \"./HalfQuadTreeSubdivisionScheme\";\nimport { TilingScheme } from \"./TilingScheme\";\n\n/**\n * [[TilingScheme]] used by most of the data published by HERE.\n *\n * The `hereTilingScheme` features a half quadtree subdivision scheme and an equirectangular\n * projection.\n */\nexport const hereTilingScheme = new TilingScheme(\n    halfQuadTreeSubdivisionScheme,\n    normalizedEquirectangularProjection\n);\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { webMercatorProjection } from \"../projection/MercatorProjection\";\nimport { quadTreeSubdivisionScheme } from \"./QuadTreeSubdivisionScheme\";\nimport { TilingScheme } from \"./TilingScheme\";\n\n/**\n * A [[TilingScheme]] featuring quadtree subdivision scheme and web Mercator projection.\n */\nexport const webMercatorTilingScheme = new TilingScheme(\n    quadTreeSubdivisionScheme,\n    webMercatorProjection\n);\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { mercatorProjection } from \"../projection/MercatorProjection\";\nimport { quadTreeSubdivisionScheme } from \"./QuadTreeSubdivisionScheme\";\nimport { TilingScheme } from \"./TilingScheme\";\n\n/**\n * The [[TilingScheme]] used by the HERE web tiles.\n *\n * The `mercatorTilingScheme` features a quadtree subdivision scheme and a Mercator projection.\n */\nexport const mercatorTilingScheme = new TilingScheme(quadTreeSubdivisionScheme, mercatorProjection);\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { transverseMercatorProjection } from \"../projection/TransverseMercatorProjection\";\nimport { quadTreeSubdivisionScheme } from \"./QuadTreeSubdivisionScheme\";\nimport { TilingScheme } from \"./TilingScheme\";\n\n/**\n * A [[TilingScheme]] featuring quadtree subdivision scheme and\n * transverse Mercator projection.\n */\nexport const polarTilingScheme = new TilingScheme(\n    quadTreeSubdivisionScheme,\n    transverseMercatorProjection\n);\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Interface representing a Vector3.\n */\nexport interface Vector3Like {\n    /**\n     * The X position.\n     */\n    x: number;\n\n    /**\n     * The Y position.\n     */\n    y: number;\n\n    /**\n     * The Z position.\n     */\n    z: number;\n}\n\nexport function isVector3Like(v: any): v is Vector3Like {\n    return v && typeof v.x === \"number\" && typeof v.y === \"number\" && typeof v.z === \"number\";\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Vector3Like } from \"./Vector3Like\";\n\n/**\n * The interface [[TransformLike]] is used to represent transforms with\n * only translation and rotation.\n */\nexport interface TransformLike {\n    /**\n     * The position of this transform.\n     */\n    readonly position: Vector3Like;\n\n    /**\n     * The x-axis of this transform.\n     */\n    readonly xAxis: Vector3Like;\n\n    /**\n     * The y-axis of this transform.\n     */\n    readonly yAxis: Vector3Like;\n\n    /**\n     * The z-axis of this transform.\n     */\n    readonly zAxis: Vector3Like;\n}\n\n/**\n * Returns true if the given object implements the interface [[TransformLike]].\n *\n * @param object The object.\n */\nexport function isTransformLike(object: {}): object is TransformLike {\n    const transform = object as Partial<TransformLike>;\n    return (\n        transform.position !== undefined &&\n        transform.xAxis !== undefined &&\n        transform.yAxis !== undefined &&\n        transform.zAxis !== undefined\n    );\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Frustum, Matrix4, Plane, Ray, Vector3 } from \"three\";\nimport { OrientedBox3Like } from \"./OrientedBox3Like\";\n\nfunction intersectsSlab(\n    rayDir: Vector3,\n    p: Vector3,\n    axis: Vector3,\n    extent: number,\n    t: { min: number; max: number }\n): boolean {\n    const epsilon = 1e-20;\n    const e = axis.dot(p);\n    const f = axis.dot(rayDir);\n    if (Math.abs(f) < epsilon) {\n        // ray parallel to near/far slab lines.\n        return Math.abs(e) <= extent;\n    }\n\n    // ray intersects near/far slab lines.\n    const finv = 1 / f;\n    const t1 = (e + extent) * finv;\n    const t2 = (e - extent) * finv;\n    if (t1 > t2) {\n        // t1 is far intersect, t2 is near.\n        if (t2 > t.min) {\n            t.min = t2;\n        }\n        if (t1 < t.max) {\n            t.max = t1;\n        }\n    } else {\n        // t1 is near intersect, t2 is far.\n        if (t1 > t.min) {\n            t.min = t1;\n        }\n        if (t2 < t.max) {\n            t.max = t2;\n        }\n    }\n    return t.min <= t.max && t.max >= 0;\n}\n\nconst tmpVec = new Vector3();\nconst tmpT = { min: -Infinity, max: Infinity };\n\nexport class OrientedBox3 implements OrientedBox3Like {\n    /**\n     * The position of the center of this `OrientedBox3`.\n     */\n    readonly position = new Vector3();\n\n    /**\n     * The x-axis of this `OrientedBox3`.\n     */\n    readonly xAxis = new Vector3(1, 0, 0);\n\n    /**\n     * The y-axis of this `OrientedBox3`.\n     */\n    readonly yAxis = new Vector3(0, 1, 0);\n\n    /**\n     * The z-axis of this `OrientedBox3`.\n     */\n    readonly zAxis = new Vector3(0, 0, 1);\n\n    /**\n     * The extents of this `OrientedBox3`.\n     */\n    readonly extents = new Vector3();\n\n    /**\n     * Creates a new `OrientedBox3`.\n     */\n    constructor();\n\n    /**\n     * Creates a new `OrientedBox3` with the given position, orientation and extents.\n     *\n     * @param position The position of the center of the `OrientedBox3`.\n     * @param rotationMatrix The rotation of the `OrientedBox3`.\n     * @param extents The extents of the `OrientedBox3`.\n     */\n    constructor(position: Vector3, rotationMatrix: Matrix4, extents: Vector3);\n\n    /**\n     * Creates a new `OrientedBox3`.\n     *\n     * @hideconstructor\n     */\n    constructor(position?: Vector3, rotationMatrix?: Matrix4, extents?: Vector3) {\n        if (position !== undefined) {\n            this.position.copy(position);\n        }\n\n        if (rotationMatrix !== undefined) {\n            rotationMatrix.extractBasis(this.xAxis, this.yAxis, this.zAxis);\n        }\n\n        if (extents !== undefined) {\n            this.extents.copy(extents);\n        }\n    }\n\n    /**\n     * Create a copy of this [[OrientedBoundingBox]].\n     */\n    clone(): OrientedBox3 {\n        const newBox = new OrientedBox3();\n        newBox.copy(this);\n        return newBox;\n    }\n\n    /**\n     * Copies the values of `other` to this [[OrientedBox3]].\n     * @param other The other [[OrientedBox3]] to copy.\n     */\n    copy(other: OrientedBox3) {\n        this.position.copy(other.position);\n        this.xAxis.copy(other.xAxis);\n        this.yAxis.copy(other.yAxis);\n        this.zAxis.copy(other.zAxis);\n        this.extents.copy(other.extents);\n    }\n\n    /**\n     * Gets the center position of this [[OrientedBox3]].\n     *\n     * @param center The returned center position.\n     */\n    getCenter(center = new Vector3()): Vector3 {\n        return center.copy(this.position);\n    }\n\n    /**\n     * Gets the size of this [[OrientedBox3]].\n     *\n     * @param size The returned size.\n     */\n    getSize(size = new Vector3()): Vector3 {\n        return size.copy(this.extents).multiplyScalar(2);\n    }\n\n    /**\n     * Gets the orientation matrix of this `OrientedBox3`.\n     * @param matrix The output orientation matrix.\n     */\n    getRotationMatrix(matrix: Matrix4 = new Matrix4()): Matrix4 {\n        return matrix.makeBasis(this.xAxis, this.yAxis, this.zAxis);\n    }\n\n    /**\n     * Checks intersection with the given `THREE.Frustum` or array of `THREE.Plane`s.\n     *\n     * @param frustumOrPlanes Frustum or array of planes.\n     */\n    intersects(frustumOrPlanes: Plane[] | Frustum): boolean {\n        const planes: Plane[] = Array.isArray(frustumOrPlanes)\n            ? frustumOrPlanes\n            : frustumOrPlanes.planes;\n\n        for (const plane of planes) {\n            const r =\n                Math.abs(plane.normal.dot(this.xAxis) * this.extents.x) +\n                Math.abs(plane.normal.dot(this.yAxis) * this.extents.y) +\n                Math.abs(plane.normal.dot(this.zAxis) * this.extents.z);\n\n            const d = plane.distanceToPoint(this.position);\n\n            if (d + r < 0) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Checks intersection with the given ray.\n     *\n     * @param ray The ray to test.\n     * @returns distance from ray origin to intersection point if it exist, undefined otherwise.\n     */\n    intersectsRay(ray: Ray): number | undefined {\n        // Slabs intersection algorithm.\n        tmpT.min = -Infinity;\n        tmpT.max = Infinity;\n        tmpVec.copy(this.position).sub(ray.origin);\n        if (!intersectsSlab(ray.direction, tmpVec, this.xAxis, this.extents.x, tmpT)) {\n            return undefined;\n        }\n        if (!intersectsSlab(ray.direction, tmpVec, this.yAxis, this.extents.y, tmpT)) {\n            return undefined;\n        }\n        if (!intersectsSlab(ray.direction, tmpVec, this.zAxis, this.extents.z, tmpT)) {\n            return undefined;\n        }\n\n        return tmpT.min > 0 ? tmpT.min : tmpT.max;\n    }\n\n    /**\n     * Returns true if this [[OrientedBox3]] contains the given point.\n     *\n     * @param point A valid point.\n     */\n    contains(point: Vector3): boolean {\n        const dx = point.x - this.position.x;\n        const dy = point.y - this.position.y;\n        const dz = point.z - this.position.z;\n        const x = Math.abs(dx * this.xAxis.x + dy * this.xAxis.y + dz * this.xAxis.z);\n        const y = Math.abs(dx * this.yAxis.x + dy * this.yAxis.y + dz * this.yAxis.z);\n        const z = Math.abs(dx * this.zAxis.x + dy * this.zAxis.y + dz * this.zAxis.z);\n        if (x > this.extents.x || y > this.extents.y || z > this.extents.z) {\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Returns the distance from this [[OrientedBox3]] and the given `point`.\n     *\n     * @param point A point.\n     */\n    distanceToPoint(point: Vector3): number {\n        return Math.sqrt(this.distanceToPointSquared(point));\n    }\n\n    /**\n     * Returns the squared distance from this [[OrientedBox3]] and the given `point`.\n     *\n     * @param point A point.\n     */\n    distanceToPointSquared(point: Vector3): number {\n        const d = new Vector3();\n        d.subVectors(point, this.position);\n\n        const lengths = [d.dot(this.xAxis), d.dot(this.yAxis), d.dot(this.zAxis)];\n\n        let result = 0;\n\n        for (let i = 0; i < 3; ++i) {\n            const length = lengths[i];\n            const extent = this.extents.getComponent(i);\n            if (length < -extent) {\n                const dd = extent + length;\n                result += dd * dd;\n            } else if (length > extent) {\n                const dd = length - extent;\n                result += dd * dd;\n            }\n        }\n\n        return result;\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\nimport { enforceBlending } from \"./Utils\";\n\nconst vertexShader: string = `\nuniform float size;\n\nvoid main() {\n    vec3 transformed = vec3(position);\n    vec4 mvPosition = modelViewMatrix * vec4(transformed, 1.0);\n\n    gl_Position = projectionMatrix * mvPosition;\n    gl_PointSize = size;\n}\n`;\n\nconst fragmentShader: string = `\nuniform vec3 diffuse;\nuniform float opacity;\n\nvoid main() {\n    float alpha = opacity;\n\n    float radius = 0.5;\n    vec2 coords = gl_PointCoord.xy - vec2(0.5);\n    float len = length(coords);\n    float falloff = fwidth(len);\n    float threshold = 1.0 - smoothstep(radius - falloff, radius, len);\n    alpha *= threshold;\n\n    gl_FragColor = vec4(diffuse, alpha);\n}`;\n\n/**\n * Parameters used when constructing a new [[HighPrecisionPointMaterial]].\n */\nexport interface CirclePointsMaterialParameters extends THREE.ShaderMaterialParameters {\n    /**\n     * Point size.\n     */\n    size?: number;\n\n    /**\n     * Point color.\n     */\n    color?: THREE.Color;\n}\n\n/**\n * Material designed to render circle points. Note that it is always transparent since the circle\n * shape is created with an alpha channel to benefit an antialising that a mere `discard` could\n * not bring.\n */\nexport class CirclePointsMaterial extends THREE.ShaderMaterial {\n    static readonly DEFAULT_CIRCLE_SIZE = 1;\n\n    private m_color: THREE.Color;\n    private m_opacity: number;\n\n    /**\n     * Constructs a new `CirclePointsMaterial`.\n     *\n     * @param parameters The constructor's parameters.\n     */\n    constructor(parameters: CirclePointsMaterialParameters = {}) {\n        const { size, color, opacity, ...shaderParams } = parameters;\n        shaderParams.name = \"CirclePointsMaterial\";\n        shaderParams.vertexShader = vertexShader;\n        shaderParams.fragmentShader = fragmentShader;\n        shaderParams.uniforms = {\n            size: new THREE.Uniform(CirclePointsMaterial.DEFAULT_CIRCLE_SIZE),\n            diffuse: new THREE.Uniform(new THREE.Color()),\n            opacity: new THREE.Uniform(1.0)\n        };\n        shaderParams.depthTest = false;\n        shaderParams.extensions = {\n            ...shaderParams.extensions,\n            derivatives: true\n        };\n\n        super(shaderParams);\n        // Blending needs to always be enabled to support smooth edges\n        enforceBlending(this);\n\n        this.type = \"CirclePointsMaterial\";\n        this.m_color = this.uniforms.diffuse.value;\n        this.m_opacity = this.uniforms.opacity.value;\n\n        if (size !== undefined) {\n            this.size = size;\n        }\n        if (color !== undefined) {\n            this.color = color;\n        }\n        if (opacity !== undefined) {\n            this.opacity = opacity;\n        }\n    }\n\n    /**\n     * Gets the circle screen size.\n     */\n    get size(): number {\n        return this.uniforms.size.value;\n    }\n\n    /**\n     * Sets the circle screen size.\n     */\n    set size(size: number) {\n        this.uniforms.size.value = size;\n    }\n\n    /**\n     * Get circle opacity.\n     */\n    get opacity(): number {\n        return this.m_opacity;\n    }\n\n    /**\n     * Set circle opacity.\n     */\n    set opacity(opacity: number) {\n        this.m_opacity = opacity;\n\n        // Base constructor may set opacity before uniform being created.\n        if (this.uniforms && this.uniforms.opacity) {\n            this.uniforms.opacity.value = opacity;\n        }\n    }\n\n    /**\n     * Gets the diffuse.\n     */\n    get color(): THREE.Color {\n        return this.m_color;\n    }\n\n    /**\n     * Sets the diffuse.\n     */\n    set color(color: THREE.Color) {\n        this.m_color.set(color);\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from \"./lib/GroupedPriorityList\";\nexport * from \"./lib/Logger\";\nexport * from \"./lib/Math2D\";\nexport * from \"./lib/MathUtils\";\nexport * from \"./lib/Mixins\";\nexport * from \"./lib/assert\";\nexport * from \"./lib/CachedResource\";\nexport * from \"./lib/ContextLogger\";\nexport * from \"./lib/PerformanceTimer\";\nexport * from \"./lib/ObjectUtils\";\nexport * from \"./lib/OptionsUtils\";\nexport * from \"./lib/UriResolver\";\nexport * from \"./lib/UrlUtils\";\nexport * from \"./lib/Functions\";\nexport * from \"./lib/SampleBilinear\";\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * A `PriorityListElement` has a priority to assist in sorting. The idea is that the items in a\n * grouped priority list will not modify their priority during processing to such an amount, that\n * they will change into another group. Smaller lists are smaller to sort, and in case of resource\n * limitation (maximum number of rendered objects reached), not all items have to be sorted at all.\n */\nexport interface PriorityListElement {\n    /**\n     * The integer value of this priority is used to group objects of \"same\" priority.\n     */\n    priority: number;\n}\n\n/**\n * The `PriorityListGroup` contains a list of [[PriorityListElement]]s that all have the same\n * (integer) priority.\n */\nexport class PriorityListGroup<T extends PriorityListElement> {\n    constructor(readonly priority: number, public elements: T[] = new Array()) {}\n\n    /**\n     * Create and return a deep copy of the `PriorityListGroup<T>`.\n     *\n     * @returns A clone of the `PriorityListGroup<T>`.\n     */\n    clone(): PriorityListGroup<T> {\n        return new PriorityListGroup<T>(this.priority, this.elements.slice());\n    }\n\n    /**\n     * Removes an element from the group.\n     * @param element The element to remove.\n     * @returns true if the element was removed, false if it was not found in the group.\n     */\n    remove(element: T): boolean {\n        const foundIndex = this.elements.indexOf(element);\n        if (foundIndex === -1) {\n            return false;\n        }\n        this.elements.splice(foundIndex, 1);\n        return true;\n    }\n}\n\n/**\n * The `PriorityListGroupMap` is a map to map the (integer) priority to a [[PriorityListGroup]].\n */\nexport type PriorityListGroupMap<T extends PriorityListElement> = Map<number, PriorityListGroup<T>>;\n\n/**\n * The `GroupedPriorityList` contains a [[PriorityListGroupMap]] to manage a larger number of items\n * in priority groups.\n */\nexport class GroupedPriorityList<T extends PriorityListElement> {\n    readonly groups: PriorityListGroupMap<T> = new Map();\n    /**\n     * Add an element to the `GroupedPriorityList`. Selects group based on the elements priority.\n     *\n     * @param element Element to be added.\n     */\n    add(element: T): void {\n        this.getGroup(element.priority).elements.push(element);\n    }\n\n    /**\n     * Remove an element from the `GroupedPriorityList`.\n     *\n     * Note: It is required that the priority is the same as it was when the element has been added.\n     * Otherwise, the removal will fail.\n     *\n     * @param element Element to be removed.\n     * @returns `True` if the element was removed, `false` otherwise.\n     */\n    remove(element: T): boolean {\n        const group = this.findGroup(element.priority);\n        if (group !== undefined && group.remove(element)) {\n            if (group.elements.length === 0) {\n                this.groups.delete(group.priority);\n            }\n\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Remove all internal [[PriorityListGroup]]s.\n     */\n    clear(): void {\n        this.groups.clear();\n    }\n\n    /**\n     * Merge another [[GroupedPriorityList]] into this one.\n     *\n     * @param other Other group to merge.\n     */\n    merge(other: GroupedPriorityList<T>): GroupedPriorityList<T> {\n        for (const otherGroup of other.groups) {\n            const group = this.findGroup(otherGroup[1].priority);\n            if (group === undefined) {\n                this.groups.set(Math.floor(otherGroup[1].priority), otherGroup[1].clone());\n                continue;\n            }\n            group.elements = group.elements.concat(otherGroup[1].elements);\n        }\n        return this;\n    }\n\n    clone(): GroupedPriorityList<T> {\n        const clone = new GroupedPriorityList<T>();\n        for (const [priority, group] of this.groups) {\n            clone.groups.set(priority, group.clone());\n        }\n        return clone;\n    }\n\n    /**\n     * Apply function to all elements in this `GroupedPriorityList`.\n     *\n     * @param {(element: T) => void} fun Function to apply.\n     */\n    forEach(fun: (element: T) => void): void {\n        for (const group of this.groups) {\n            group[1].elements.forEach(fun);\n        }\n    }\n\n    /**\n     * Count the number of elements in this `GroupedPriorityList`.\n     */\n    count(): number {\n        let n = 0;\n        for (const group of this.groups) {\n            n += group[1].elements.length;\n        }\n        return n;\n    }\n\n    /**\n     * Get group of elements that have the same (integer) priority.\n     *\n     * @param priority The priority to retrieve all elements from.\n     */\n    private findGroup(priority: number): PriorityListGroup<T> | undefined {\n        const normalizedPriority = Math.floor(priority);\n        const group = this.groups.get(normalizedPriority);\n        return group;\n    }\n\n    /**\n     * Get group of elements that have the same (integer) priority.\n     *\n     * @param priority The priority to retrieve all elements from.\n     */\n    private getGroup(priority: number): PriorityListGroup<T> {\n        let group = this.findGroup(priority);\n\n        if (group === undefined) {\n            const normalizedPriority = Math.floor(priority);\n            group = new PriorityListGroup<T>(normalizedPriority);\n            this.groups.set(group.priority, group);\n        }\n\n        return group;\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from \"./ConsoleChannel\";\nexport * from \"./IChannel\";\nexport * from \"./ILogger\";\nexport * from \"./Logger\";\nexport * from \"./LoggerManager\";\nexport * from \"./MultiChannel\";\nexport * from \"./WorkerChannel\";\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { ILoggerManager } from \"./ILoggerManager\";\nimport { LoggerManagerImpl } from \"./LoggerManagerImpl\";\n\n/**\n * The LoggerManager class implements a singleton object that handles logging.\n *\n * Example:\n *\n * ```typescript\n *\n * const logger = LoggerManager.instance.create(\"MyFontLoaderClass\");\n * if (missingFonts.length > 0) {\n *     logger.error(\"These fonts can not be loaded: \", missingFonts);\n * } else {\n *     logger.log(\"All fonts have been loaded.\");\n * }\n * ```\n */\nexport class LoggerManager {\n    private static m_instance: ILoggerManager;\n\n    static get instance(): ILoggerManager {\n        return this.m_instance || (this.m_instance = new LoggerManagerImpl());\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { ConsoleChannel } from \"./ConsoleChannel\";\nimport { IChannel } from \"./IChannel\";\nimport { ILogger, LoggerOptions, LogLevel } from \"./ILogger\";\nimport { ILoggerManager } from \"./ILoggerManager\";\nimport { Logger } from \"./Logger\";\nimport { WorkerChannel } from \"./WorkerChannel\";\n\n/**\n * LoggerManagerImpl is the class for the singleton instance of the logger manager.\n * It handles channels and loggers.\n */\n\nexport class LoggerManagerImpl implements ILoggerManager {\n    channel: IChannel;\n    private readonly m_loggers: ILogger[] = [];\n    private m_levelSetForAll?: LogLevel;\n\n    constructor() {\n        this.channel =\n            typeof self === \"undefined\" || typeof self.document !== \"undefined\"\n                ? new ConsoleChannel()\n                : new WorkerChannel();\n    }\n\n    getLoggerNames(): string[] {\n        return this.m_loggers.map(logger => logger.name);\n    }\n\n    getLogger(name: string): ILogger | undefined {\n        return this.m_loggers.find(logger => logger.name === name);\n    }\n\n    create(loggerName: string, options: LoggerOptions = {}): ILogger {\n        if (\n            this.m_levelSetForAll !== undefined &&\n            (options.level === undefined || options.level < this.m_levelSetForAll)\n        ) {\n            options.level = this.m_levelSetForAll;\n        }\n        const logger = new Logger(loggerName, this.channel, options);\n        this.m_loggers.push(logger);\n        return logger;\n    }\n\n    dispose(logger: ILogger) {\n        const found = this.m_loggers.indexOf(logger);\n        if (found < 0) {\n            throw new Error(`Cannot unregister \"${logger}\" : no such logger registered.`);\n        }\n        this.m_loggers.splice(found, 1);\n    }\n\n    updateAll(options: LoggerOptions) {\n        for (const logger of this.m_loggers) {\n            logger.update(options);\n        }\n    }\n\n    update(loggerName: string, config: LoggerOptions) {\n        for (const logger of this.m_loggers) {\n            if (logger.name === loggerName) {\n                logger.update(config);\n            }\n        }\n    }\n\n    enableAll(enabled: boolean) {\n        for (const logger of this.m_loggers) {\n            logger.enabled = enabled;\n        }\n    }\n\n    enable(loggerName: string, value: boolean) {\n        this.update(loggerName, { enabled: value });\n    }\n\n    setLogLevelForAll(level: LogLevel) {\n        this.m_levelSetForAll = level;\n        for (const logger of this.m_loggers) {\n            logger.level = level;\n        }\n    }\n\n    setLogLevel(loggerName: string, level: LogLevel) {\n        this.update(loggerName, { level });\n    }\n\n    setChannel(channel: IChannel) {\n        this.channel = channel;\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { IChannel } from \"./IChannel\";\n\n/**\n * Class allowing mixing several channels.\n */\nexport class MultiChannel implements IChannel {\n    private readonly channels: IChannel[] = [];\n    constructor(...channels: IChannel[]) {\n        this.channels = channels;\n    }\n\n    error(message?: any, ...optionalParams: any[]) {\n        for (const channel of this.channels) {\n            channel.error(message, ...optionalParams);\n        }\n    }\n\n    debug(message?: any, ...optionalParams: any[]) {\n        for (const channel of this.channels) {\n            channel.debug(message, ...optionalParams);\n        }\n    }\n\n    info(message?: any, ...optionalParams: any[]) {\n        for (const channel of this.channels) {\n            channel.info(message, ...optionalParams);\n        }\n    }\n\n    log(message?: any, ...optionalParams: any[]) {\n        for (const channel of this.channels) {\n            channel.log(message, ...optionalParams);\n        }\n    }\n\n    trace(message?: any, ...optionalParams: any[]) {\n        for (const channel of this.channels) {\n            channel.trace(message, ...optionalParams);\n        }\n    }\n\n    warn(message?: any, ...optionalParams: any[]) {\n        for (const channel of this.channels) {\n            channel.warn(message, ...optionalParams);\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport namespace Math2D {\n    /**\n     * Alternative 2D box object with less memory impact (four numbers instead of two min/max\n     * objects with two numbers each). Should be faster.\n     */\n    export class Box {\n        /**\n         * Alternative 2D box object with less memory impact (four numbers instead of two min/max\n         * objects with two numbers each). Should be faster.\n         *\n         * @param x New X value.\n         * @param y New y value.\n         * @param w New w value.\n         * @param h New h value.\n         */\n        constructor(public x = 0, public y = 0, public w = 0, public h = 0) {}\n\n        /**\n         * Set new values to all properties of the box.\n         *\n         * @param x New X value.\n         * @param y New y value.\n         * @param w New w value.\n         * @param h New h value.\n         */\n        set(x: number, y: number, w: number, h: number) {\n            this.x = x;\n            this.y = y;\n            this.w = w;\n            this.h = h;\n        }\n\n        /**\n         * Test box for inclusion of point.\n         *\n         * @param x X coordinate of point.\n         * @param y Y coordinate of point.\n         */\n        contains(x: number, y: number): boolean {\n            return this.x <= x && this.x + this.w >= x && this.y <= y && this.y + this.h >= y;\n        }\n\n        /**\n         * Test box for inclusion of another box.\n         *\n         * @param other Box 2 to test for inclusion.\n         */\n        containsBox(other: Box): boolean {\n            const xmax = other.x + other.w;\n            const ymax = other.y + other.h;\n            return (\n                this.contains(other.x, other.y) &&\n                this.contains(xmax, other.y) &&\n                this.contains(other.x, ymax) &&\n                this.contains(xmax, ymax)\n            );\n        }\n\n        /**\n         * Test two boxes for intersection.\n         *\n         * @param other Box 2 to test for intersection.\n         */\n        intersects(other: Box): boolean {\n            return (\n                this.x <= other.x + other.w &&\n                this.x + this.w >= other.x &&\n                this.y <= other.y + other.h &&\n                this.y + this.h >= other.y\n            );\n        }\n    }\n\n    /**\n     * Box to store UV coordinates.\n     */\n    export interface UvBox {\n        s0: number;\n        t0: number;\n        s1: number;\n        t1: number;\n    }\n\n    /**\n     * Compute squared distance between two 2D points `a` and `b`.\n     *\n     * @param ax Point a.x\n     * @param ay Point a.y\n     * @param bx Point b.x\n     * @param by Point b.y\n     * @returns Squared distance between the two points\n     */\n    export function distSquared(ax: number, ay: number, bx: number, by: number): number {\n        return (ax - bx) * (ax - bx) + (ay - by) * (ay - by);\n    }\n\n    /**\n     * Computes the squared length of a line.\n     *\n     * @param line An array of that forms a line via [x,y,z,x,y,z,...] tuples.\n     */\n    export function computeSquaredLineLength(line: number[]): number {\n        let squaredLineLength: number = 0;\n\n        const length = line.length - 4;\n        for (let i = 0; i < length; i += 3) {\n            const xDiff = line[i + 3] - line[i];\n            const yDiff = line[i + 4] - line[i + 1];\n            squaredLineLength += xDiff * xDiff + yDiff * yDiff;\n        }\n        return squaredLineLength;\n    }\n\n    /**\n     * Compute squared distance between a 2D point and a 2D line segment.\n     *\n     * @param px Test point X\n     * @param py Test point y\n     * @param l0x Line segment start X\n     * @param l0y Line segment start Y\n     * @param l1x Line segment end X\n     * @param l1y Line segment end Y\n     * @returns Squared distance between point and line segment\n     */\n    export function distToSegmentSquared(\n        px: number,\n        py: number,\n        l0x: number,\n        l0y: number,\n        l1x: number,\n        l1y: number\n    ): number {\n        const lineLengthSuared = distSquared(l0x, l0y, l1x, l1y);\n        if (lineLengthSuared === 0) {\n            return distSquared(px, py, l0x, l0y);\n        }\n        let t = ((px - l0x) * (l1x - l0x) + (py - l0y) * (l1y - l0y)) / lineLengthSuared;\n        t = Math.max(0, Math.min(1, t));\n        return distSquared(px, py, l0x + t * (l1x - l0x), l0y + t * (l1y - l0y));\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport namespace MathUtils {\n    /**\n     * Ensures that input value fits in a given range.\n     *\n     * @param value The value to be clamped.\n     * @param min Minimum value.\n     * @param max Maximum value.\n     *\n     * @returns Clamped value.\n     */\n    export function clamp(value: number, min: number, max: number): number {\n        return value < min ? min : value > max ? max : value;\n    }\n\n    /**\n     * Returns a linear interpolation between the values of edge0 and edge1 based on the factor.\n     *\n     * Given two known points the linear interpolant between these points may be presented as\n     * straight line. This means that for given factor change the resulting change of return\n     * value is always const.\n     * @see https://en.wikipedia.org/wiki/Linear_interpolation\n     *\n     * @param edge0\n     * @param edge1\n     * @param factor Interpolation factor that ranges between: 0 <= x <= 1.\n     */\n    export function lerp(edge0: number, edge1: number, factor: number): number {\n        return edge0 * (1 - factor) + edge1 * factor;\n    }\n\n    /**\n     * Returns a smooth interpolation between the values edge0 and edge1 based on the interpolation\n     * factor x. `0 <= x <= 1`.\n     * @see https://en.wikipedia.org/wiki/Smoothstep\n     *\n     * @param edge0\n     * @param edge1\n     * @param x\n     */\n    export function smoothStep(edge0: number, edge1: number, x: number) {\n        // Scale, bias and saturate x to 0..1 range\n        x = clamp((x - edge0) / (edge1 - edge0), 0.0, 1.0);\n        // Evaluate polynomial\n        return x * x * (3 - 2 * x);\n    }\n\n    /**\n     * Returns a smooth interpolation between the values edge0 and edge1 based on the interpolation\n     * factor x. `0 <= x <= 1`.\n     *\n     * Improved version by Ken Perlin, which has zero 1st- and 2nd-order derivatives at `x = 0` and\n     * `x = 1`:\n     *\n     * @see https://en.wikipedia.org/wiki/Smoothstep\n     *\n     * @param edge0\n     * @param edge1\n     * @param x\n     */\n    export function smootherStep(edge0: number, edge1: number, x: number) {\n        // Scale, and clamp x to 0..1 range\n        x = clamp((x - edge0) / (edge1 - edge0), 0.0, 1.0);\n        // Evaluate polynomial\n        return x * x * x * (x * (x * 6 - 15) + 10);\n    }\n\n    /**\n     * Maps a number from one range to another.\n     *\n     * @param val The incoming value to be converted.\n     * @param inMin Lower bound of the value's current range.\n     * @param inMax Upper bound of the value's current range.\n     * @param outMin Lower bound of the value's target range.\n     * @param outMax Upper bound of the value's target range.\n     */\n    export function map(val: number, inMin: number, inMax: number, outMin: number, outMax: number) {\n        return ((val - inMin) * (outMax - outMin)) / (inMax - inMin) + outMin;\n    }\n\n    /**\n     * Returns the smaller of the two given numbers. Both numbers may be undefined, in which case\n     * the result is undefined. If only one of the numbers is undefined, the other number is\n     * returned.\n     *\n     * @param a First number.\n     * @param b Second number.\n     */\n    export function min2(a: number | undefined, b: number | undefined): number | undefined {\n        let result: number | undefined;\n\n        if (a !== undefined) {\n            result = a;\n        }\n        if (b !== undefined) {\n            result = result === undefined ? b : Math.min(result, b);\n        }\n\n        return result;\n    }\n\n    /**\n     * Returns the larger of the two given numbers. Both numbers may be undefined, in which case\n     * the result is undefined. If only one of the numbers is undefined, the other number is\n     * returned.\n     *\n     * @param a First number.\n     * @param b Second number.\n     */\n    export function max2(a: number | undefined, b: number | undefined): number | undefined {\n        let result: number | undefined;\n\n        if (a !== undefined) {\n            result = a;\n        }\n        if (b !== undefined) {\n            result = result === undefined ? b : Math.max(result, b);\n        }\n\n        return result;\n    }\n\n    /**\n     * Checks if the value of a given number is inside an upper or lower bound. The bounds may be\n     * undefined, in which case their value is ignored.\n     *\n     * @param value Value to check.\n     * @param lowerBound The lower bound to check the value against.\n     * @param upperBound The upper bound to check the value against.\n     *\n     * @returns `true` if value is inside the bounds or if the bounds are `undefined`, `false`\n     *          otherwise.\n     */\n    export function isClamped(\n        value: number,\n        lowerBound: number | undefined,\n        upperBound: number | undefined\n    ): boolean {\n        if (lowerBound !== undefined && value < lowerBound) {\n            return false;\n        }\n        if (upperBound !== undefined && value > upperBound) {\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Smoothly interpolates between two values using cubic formula\n     *\n     * @param startValue\n     * @param endValue\n     * @param time\n     * @returns Result of the interpolation within the range of `[startValue, endValue]`\n     */\n    export function easeInOutCubic(startValue: number, endValue: number, time: number): number {\n        const timeValue =\n            time < 0.5 ? 4 * time * time * time : (time - 1) * (2 * time - 2) * (2 * time - 2) + 1;\n        return startValue + (endValue - startValue) * timeValue;\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Copy methods and properties from one prototype into another.\n *\n * @see https://www.typescriptlang.org/docs/handbook/mixins.html\n *\n * @param derivedCtor Class to mix methods and properties into.\n * @param baseCtors Class to take all methods and properties from.\n */\nexport function applyMixins(derivedCtor: any, baseCtors: any[]) {\n    baseCtors.forEach(baseCtor => {\n        Object.getOwnPropertyNames(baseCtor.prototype).forEach(name => {\n            derivedCtor.prototype[name] = baseCtor.prototype[name];\n        });\n    });\n}\n\n/**\n * Copy methods from one prototype into another.\n *\n * @see https://www.typescriptlang.org/docs/handbook/mixins.html\n *\n * @param derivedCtor Class to mix methods into.\n * @param baseCtors Class to take all methods from.\n */\nexport function applyMixinsWithoutProperties(derivedCtor: any, baseCtors: any[]) {\n    baseCtors.forEach(baseCtor => {\n        Object.getOwnPropertyNames(baseCtor.prototype).forEach(name => {\n            const descriptor = Object.getOwnPropertyDescriptor(baseCtor.prototype, name);\n            if (\n                descriptor !== undefined &&\n                descriptor.get === undefined &&\n                name !== \"constructor\"\n            ) {\n                derivedCtor.prototype[name] = baseCtor.prototype[name];\n            }\n        });\n    });\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\ndeclare const process: any;\n\n// cache value, because access to process.env.NODE_ENV is SLOW!\nconst isProduction = process.env.NODE_ENV === \"production\";\n\n//TODO: Make assertHandler configurable\n\n/**\n * Implementation of assert as a development help\n *\n * Note - this is deliberately a global function so that minimizers remove the\n * entire call when building for production.\n *\n * @hidden\n * @param condition Condition to match, if false, throws an Error(message)\n * @param message Optional message, defaults to \"ASSERTION failed\"\n */\nexport function assert(condition: boolean, message?: string): void {\n    if (!isProduction) {\n        if (!condition) {\n            throw new Error(message !== undefined ? message : \"ASSERTION failed\");\n        }\n    }\n}\n\nexport function assertExists<T>(element: T | undefined, message?: string): T {\n    if (!isProduction) {\n        if (element === undefined || element === null) {\n            throw new Error(\n                message !== undefined ? message : \"ASSERTION failed: Element is undefined or null\"\n            );\n        }\n    }\n    return element!;\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Refinement of `console` interface only for important information i.e `info`, `warn` and `errors`.\n */\nexport interface ISimpleChannel {\n    info(message?: any, ...optionalParams: any[]): void;\n    warn(message?: any, ...optionalParams: any[]): void;\n    error(message?: any, ...optionalParams: any[]): void;\n}\n\n/**\n * Extension of [[ISimpleChannel]] to support contextual logging by adding stack of prefixes.\n */\nexport interface IContextLogger extends ISimpleChannel {\n    /**\n     * Push \"attribute-like\" context.\n     */\n    pushAttr(name: string): void;\n\n    /**\n     * Push \"index-like\" context.\n     *\n     * Following log messages will be prefixed with `[index]`.\n     */\n    pushIndex(index: string | number): void;\n\n    /**\n     * Remove current context from top of stack.\n     */\n    pop(): void;\n}\n\n/**\n * Context-aware logger that decorates log message with stack-based prefix, emits `headerMessage`\n * before first actual log message.\n */\nexport class ContextLogger implements IContextLogger {\n    private readonly context: string[] = [];\n    private m_headerLogged = false;\n\n    /**\n     * Construct a context-aware logger that logs to `m_logger`.\n     */\n    constructor(readonly m_logger: ISimpleChannel, readonly headerMessage: string) {}\n\n    /**\n     * Push \"attribute-like\" context.\n     *\n     * Following log messages will be prefixed with `name` or `.name` depending on current context.\n     */\n    pushAttr(name: string) {\n        this.context.push(`${this.context.length > 0 ? \".\" : \"\"}${name}`);\n    }\n\n    /**\n     * Push \"index-like\" context.\n     *\n     * Following log messages will be prefixed with `[index]`.\n     */\n    pushIndex(index: string | number) {\n        this.context.push(`[${index}]`);\n    }\n\n    pop() {\n        this.context.pop();\n    }\n\n    // They, are public member functions it's just tslint who doesn't understand this.\n\n    // tslint:disable:member-ordering\n    warn = this.createLogMethod(\"warn\");\n    info = this.createLogMethod(\"info\");\n    error = this.createLogMethod(\"error\");\n    // tslint:enable:member-ordering\n\n    private createLogMethod(severity: \"warn\" | \"info\" | \"error\") {\n        return (message: string, ...rest: any[]) => {\n            if (!this.m_headerLogged) {\n                this.m_logger.info(this.headerMessage);\n                this.m_headerLogged = true;\n            }\n            this.m_logger[severity](`${this.context.join(\"\")}: ${message}`, ...rest);\n        };\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/* tslint:disable:max-line-length */\n/**\n * See:\n * https://developers.google.com/web/updates/2012/08/When-milliseconds-are-not-enough-performance-now\n */\n/* tslint:ensable:max-line-length */\n\nexport class PerformanceTimer {\n    /**\n     * Returns timestamp in milliseconds since page load.\n     *\n     * If the [[DOMHighResTimeStamp]] is supported, the resolution is up to 5 microseconds,\n     * otherwise it is in milliseconds. Timespans are computed by taking the difference between two\n     * samples.\n     *\n     * Example:\n     * ```typescript\n     * const now = PerformanceTimer.now();\n     * // call some expensive function for which you want to check the duration.\n     * const end = PerformanceTimer.now();\n     * const elapsedTime = end - now;\n     * ```\n     */\n    static now(): number {\n        return PerformanceTimer.nowFunc();\n    }\n\n    // tslint:disable-next-line:no-unused-variable\n    private static readonly instance = new PerformanceTimer();\n\n    private static readonly nowFunc: () => number = PerformanceTimer.getNowFunc();\n\n    private static getNowFunc() {\n        if (typeof performance !== \"undefined\" && typeof performance.now !== \"undefined\") {\n            return () => performance.now();\n        }\n\n        // fall back to Date.getTime()\n        return () => {\n            return new Date().getTime();\n        };\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Deep clone of object.\n *\n * Like `JSON.parse(JSON.stringify(obj))`, but supports basic javascript types (string, number,\n * object), `Date` and `RegExp`s and cycles.\n *\n * Throws error if enounters object with `prototype` assuming that in general class instances\n * cannot be reliably cloned by generic algorithm.\n */\nexport function cloneDeep<T>(obj: T): T {\n    const cache: Map<object, object> = new Map();\n    function cloneInternal(src: any): any {\n        if (src === null) {\n            return null;\n        } else if (typeof src === \"object\") {\n            const cached = cache.get(src);\n            if (cached !== undefined) {\n                return cached;\n            }\n\n            if (Array.isArray(src)) {\n                const result: any[] = [];\n                cache.set(src, result);\n                result.length = src.length;\n                for (let i = 0; i < result.length; ++i) {\n                    result[i] = cloneInternal(src[i]);\n                }\n                return result;\n            } else if (src instanceof Date) {\n                const result = new Date(src.getTime());\n                cache.set(src, result);\n                return result;\n            } else if (src instanceof RegExp) {\n                const result = new RegExp(src.source, src.flags);\n                cache.set(src, result);\n                return result;\n            } else if (src.constructor !== Object) {\n                throw new Error(\"cloneDeep doesn't support objects with custom prototypes\");\n            } else {\n                const result: typeof src = {};\n                cache.set(src, result);\n                for (const key in src) {\n                    if (src.hasOwnProperty(key)) {\n                        result[key] = cloneInternal(src[key]);\n                    }\n                }\n                return result;\n            }\n        } else {\n            // string, number, boolean, undefined and functions are returned as is\n            return src;\n        }\n    }\n\n    const r = cloneInternal(obj);\n    cache.clear();\n    return r;\n}\n\n/**\n * Pick `props` from `object.\n *\n * Runtime version of `Pick<T,K>`.\n */\nexport function pick<T extends object, K extends keyof T>(object: T, props: K[]): Pick<T, K> {\n    const result: any = {};\n    for (const propName of props) {\n        if (object.hasOwnProperty(propName)) {\n            result[propName] = object[propName];\n        }\n    }\n    return result;\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Get first defined value.\n *\n * Specialized \"replacement\" for `a || b || c` used frequently to get value from various sources\n * (defaults, configs  constants).\n * In contrast to `||`, this function provides proper typing for usual use cases (constant as last\n * argument) and correct treatment of `null` and `undefined`.\n *\n * If last parameter is \"defined\" then return type is `T`, otherwise return type is `T | undefined`.\n *\n * Usage example:\n *\n *     interface Config {\n *         x?: number;\n *     }\n *     const someConfig: Config = {};\n *     const val: number | undefined = undefined;\n *     const DEFAULT = 5;\n *     const x = getOptionValue(val, someConfig.x, DEFAULT);\n *         // typeof x === 'number' because DEFAULT is defined\n *     const y = getOptionValue(val, someConfig.x);\n *         // typeof y === 'number | undefined' because someConfig.x is possibly undefined\n */\n// specialized overloads with last param defined params overload\nexport function getOptionValue<T>(a: T): T;\nexport function getOptionValue<T>(a: T | undefined, b: T): T;\nexport function getOptionValue<T>(a: T | undefined, b: T | undefined, c: T): T;\nexport function getOptionValue<T>(a: T | undefined, b: T | undefined, c: T | undefined, d: T): T;\nexport function getOptionValue<T>(...values: Array<T | undefined>): T | undefined;\n\nexport function getOptionValue<T>(...values: Array<T | undefined>): T | undefined {\n    for (const candidate of values) {\n        if (candidate !== undefined && candidate !== null) {\n            return candidate;\n        }\n    }\n    return undefined;\n}\n\n/**\n * Merge options into existing parameters object.\n *\n * Convenience helper with _similar_ semantics as:\n *\n *     const finalParams1 = { ...defaults, ... options };\n *     const finalParams2 = Object.assign({}, defaults, options);\n *\n * This function doesn't copy _extra_ properties of `options` that doesn't exist in `defaults`.\n * `defaults` is used as _parameters_ template.\n *\n * This doc uses following notion of `option` and `parameter` terms:\n * * `parameter` is a variable, or 'almost constant' of procedure/function/algorith/object\n *    * `parameter` usually have sensible and usually used default\n *    * `parameter` is always defined (no `undefined`, `null` or `?` in type)\n *    * `parameter` can be overriden by specyfying `option` with same name\n * * `option` means value that may be passed optionally, overrides `parameter` value with same name\n *\n * Usage:\n *\n *     interface FooParams {\n *         useTextures: boolean;\n *         opacity: number;\n *     }\n *\n *     const FOO_DEFAULTS: FooParams = {\n *         useTextures: true,\n *         opacity: 0.8\n *     };\n *\n *     type FooOptions = Partial<FooParams>;\n *\n *     function doSomething(options: FooOptions) {\n *         const params = mergeWithOptions(FOO_DEFAULTS, options);\n *             // typeof params === FooParams\n *             // params.opacity = 0.5\n *             // params.useTextures = true\n *             // params.someOtherOptionFromOtherApi is not defined\n *     }\n *     const opt = {opacity: 0.5, someOtherOptionFromOtherApi: 'aaa'};\n *     doSomething(opt);\n *\n * Rationale:\n *   * both `Object.assign` and spread operator copy extra options\n *   * `Object.assign` & `spread operator` may copy `undefined` and `null`s if they really exist\n *     in options object\n *\n * @param parameters parmeters template object holding all expected parameters\n * @param options options object\n * @returns new object with `parameters` overriden by values from `options`\n */\nexport function mergeWithOptions<T extends object>(parameters: T, options?: Partial<T>): T {\n    // NOTE: `as object` needed due to TypeScript bug:\n    //       https://github.com/Microsoft/TypeScript/issues/14409\n    // tslint:disable-next-line:no-object-literal-type-assertion\n    const result = { ...(parameters as object) } as T;\n    if (options === undefined || options === null) {\n        return result;\n    }\n    for (const prop in parameters) {\n        if (parameters.hasOwnProperty(prop)) {\n            const optionValue = options[prop];\n            if (optionValue !== undefined && optionValue !== null) {\n                result[prop] = optionValue as any;\n            }\n        }\n    }\n    return result;\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { resolveReferenceUri } from \"./UrlUtils\";\n\n/**\n * Custom, app-specific URI resolver interface.\n */\nexport interface UriResolver {\n    /**\n     * Attempt to resolve `URI` to `URL`.\n     *\n     * If given resolver doesn't know about this specific kind of `URI`, it should return string as\n     * received.\n     *\n     * @param input `URI`\n     * @returns actual `URL` if this handler knows how locate given `uri` or original `uri`\n     */\n    resolveUri(uri: string): string;\n}\n\nexport interface PrefixUriResolverDefinition {\n    [prefix: string]: string;\n}\n\n/**\n * Basic, import-map like [[UriResolver]].\n *\n * Resolves `uris` basing on exact or prefix match of `key` from `definitions`.\n *\n * In definitions, `key` is matched against input uri with following strategy:\n *  - `key` without trailing `/` -> `key` and input `uri` must be identical\n *  - `key` with trailing `/`, -> `key` is treated as \"package prefix\", so `uri` must start with\n *    `key`\n *\n * Example:\n * ```\n * {\n *     \"local://poiMasterList\": \"/assets/poiMasterList.json\"\n *        // will match only 'local://poiMasterList' and resolve `/assets/poiMasterList.json`\n *     \"local://icons/\": \"/assets/icons/\"\n *        // will match only 'local://icons/ANYPATH' (and similar) and resolve to\n *        // `/assets/icons/ANYPATH\n * }\n * ```\n * Inspired by [`WICG` import maps proposal](https://github.com/WICG/import-maps#the-import-map).\n */\nexport class PrefixMapUriResolver implements UriResolver {\n    constructor(readonly definitions: PrefixUriResolverDefinition) {}\n\n    resolveUri(uri: string) {\n        return Object.keys(this.definitions).reduce((r, key) => {\n            if (key.endsWith(\"/\") && r.startsWith(key)) {\n                const newPrefix = this.definitions[key];\n                return newPrefix + r.substr(key.length);\n            } else if (r === key) {\n                return this.definitions[key];\n            }\n            return r;\n        }, uri);\n    }\n}\n\n/**\n * [UriResolver] that resolve relative `uri`s against to parent resource `uri`.\n */\nexport class RelativeUriResolver implements UriResolver {\n    constructor(readonly parentUri: string) {}\n\n    resolveUri(uri: string) {\n        return resolveReferenceUri(this.parentUri, uri);\n    }\n}\n\n/**\n * Compose URI resolvers.\n *\n * Creates new [[UriResolver]] that applies resolvers in orders or arguments.\n *\n * Example:\n *\n *     const themeUrl = ...; // url of parent object\n *     const childUrlResolver = composeUrlResolvers(\n *           new RelativeUriResolver(themeUrl),\n *           defaultUrlResolver\n *     );\n */\nexport function composeUriResolvers(...resolvers: Array<UriResolver | undefined>): UriResolver {\n    return {\n        resolveUri(originalUrl: string) {\n            return resolvers.reduce((url, resolver) => {\n                if (resolver !== undefined) {\n                    return resolver.resolveUri(url);\n                } else {\n                    return url;\n                }\n            }, originalUrl);\n        }\n    };\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Chains two functions for further assigning as one wrapped callback function\n */\nexport function chainCallbacks<T extends (this: unknown, ...args: any[]) => any>(\n    f1: T | null | undefined,\n    f2: T\n): T {\n    return function(this: any, ...args: any[]): ReturnType<T> {\n        if (f1) {\n            f1.apply(this, args);\n        }\n        return f2.apply(this, args);\n    } as T;\n}\n","/*\n * Copyright (C) 2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\ntype TypedArray =\n    | Int8Array\n    | Uint8Array\n    | Int16Array\n    | Uint16Array\n    | Int32Array\n    | Uint32Array\n    | Uint8ClampedArray\n    | Float32Array\n    | Float64Array;\n\n/**\n * Returns a bilinear-interpolated texture sample for a given texture.\n * @param texture Two-dimensional texture to sample.\n * @param width Texture width.\n * @param height Texture height.\n * @param u Number between 0 and 1 representing the location to sample in the width dimension.\n * @param v Number between 0 and 1 representing the location to sample in the height dimension.\n */\nexport function sampleBilinear(\n    texture: TypedArray,\n    width: number,\n    height: number,\n    u: number,\n    v: number\n): number {\n    const maxXIndex = width - 1;\n    const maxYIndex = height - 1;\n    // Compute the x and y coordinates relative to the mesh size.\n    const xIndex = u * maxXIndex;\n    const xIndexFloor = Math.floor(xIndex);\n    const yIndex = v * maxYIndex;\n    const yIndexFloor = Math.floor(yIndex);\n    const swIndex = yIndexFloor * width + xIndexFloor;\n    const seIndex = xIndexFloor < maxXIndex ? swIndex + 1 : swIndex;\n    const nwIndex = yIndexFloor < maxYIndex ? swIndex + width : swIndex;\n    const neIndex = xIndexFloor < maxXIndex ? nwIndex + 1 : nwIndex;\n    const swElevation = texture[swIndex];\n    const seElevation = texture[seIndex];\n    const nwElevation = texture[nwIndex];\n    const neElevation = texture[neIndex];\n    // Get the fractional components to do bilinear interpolation.\n    const xFrac = Number.isInteger(xIndex) ? 0 : xIndex - xIndexFloor;\n    const xFracInverse = 1 - xFrac;\n    const yFrac = Number.isInteger(yIndex) ? 0 : yIndex - yIndexFloor;\n    const yFracInverse = 1 - yFrac;\n    // The interpolation is the sum of the four closest neighbours each\n    // multiplied by the diagonal areas.\n    const result =\n        swElevation * xFracInverse * yFracInverse +\n        seElevation * xFrac * yFracInverse +\n        nwElevation * xFracInverse * yFrac +\n        neElevation * xFrac * yFrac;\n    return result;\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { baseUrl } from \"./UrlUtils\";\n\n/**\n * Get base URL for from where relative URLs will be loaded.\n *\n * * In browser, it resolves to `baseUrl(location.href)` i.e document's base URL\n * (see: https://www.w3.org/TR/WD-html40-970917/htmlweb.html#h-5.1.2).\n *\n * * In node, it resolves to `file://${process.cwd()}`.\n */\nexport function getAppBaseUrl() {\n    return baseUrl(window.location.href);\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { HiddenThreeJSMaterialProperties } from \"./MapMeshMaterials\";\n\n/**\n * Parameters used when constructing a new implementor of [[DisplacementFeature]].\n */\nexport interface DisplacementFeatureParameters {\n    /**\n     * Texture used for vertex displacement along their normals.\n     */\n    displacementMap?: THREE.Texture;\n}\n\n/**\n * Interface to be implemented by materials that use displacement maps to overlay geometry\n * on elevation data.\n */\nexport interface DisplacementFeature extends HiddenThreeJSMaterialProperties {\n    displacementMap: THREE.Texture | null;\n}\n\n/**\n * Determines whether a given material supports displacement maps for elevation overlay.\n * @param material The material to check.\n * @returns Whether the given material supports displacement maps for elevation overlay.\n */\nexport function hasDisplacementFeature(material: any): material is DisplacementFeature {\n    return \"displacementMap\" in material;\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nimport { DisplacementFeature, DisplacementFeatureParameters } from \"./DisplacementFeature\";\nimport {\n    ExtrusionFeature,\n    ExtrusionFeatureParameters,\n    FadingFeature,\n    FadingFeatureParameters\n} from \"./MapMeshMaterials\";\nimport { ExtrusionFeatureDefs } from \"./MapMeshMaterialsDefs\";\nimport { enforceBlending, setShaderDefine, setShaderMaterialDefine } from \"./Utils\";\n\nconst vertexSource: string = `\n#define EDGE_DEPTH_OFFSET 0.0001\n\nattribute vec3 position;\nattribute vec4 color;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 edgeColor;\nuniform float edgeColorMix;\n\n#ifdef USE_DISPLACEMENTMAP\nattribute vec3 normal;\nattribute vec2 uv;\nuniform sampler2D displacementMap;\n#endif\n\nvarying vec3 vColor;\n\n#ifdef USE_EXTRUSION\n#include <extrusion_pars_vertex>\n#endif\n\n#ifdef USE_FADING\n#include <fading_pars_vertex>\n#endif\n\nvoid main() {\n\n    #ifdef USE_COLOR\n    vColor = mix(edgeColor.rgb, color.rgb, edgeColorMix);\n    #else\n    vColor = edgeColor.rgb;\n    #endif\n\n    vec3 transformed = vec3( position );\n\n    #ifdef USE_EXTRUSION\n    #include <extrusion_vertex>\n    #endif\n\n    #ifdef USE_DISPLACEMENTMAP\n    transformed += normalize( normal ) * texture2D( displacementMap, uv ).x;\n    #endif\n\n    vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\n\n    gl_Position = projectionMatrix * mvPosition;\n    // After projection gl_Position contains clip space coordinates of each vertex\n    // before perspective division (1 / w), thus only vertexes with -w < z < w should\n    // be displayed and offset. We offset only those edges which z coordinate in NDC\n    // space is between: -inf < z < 1\n    float depthOffset = step(-1.0, -gl_Position.z / gl_Position.w) * EDGE_DEPTH_OFFSET;\n    gl_Position.z -= depthOffset;\n\n    #ifdef USE_FADING\n    #include <fading_vertex>\n    #endif\n}`;\n\nconst fragmentSource: string = `\nprecision highp float;\nprecision highp int;\n\nvarying vec3 vColor;\n\n#ifdef USE_EXTRUSION\n#include <extrusion_pars_fragment>\n#endif\n\n#ifdef USE_FADING\n#include <fading_pars_fragment>\n#endif\n\nvoid main() {\n    float alphaValue = 1.0;\n    gl_FragColor = vec4(vColor, alphaValue);\n\n    #ifdef USE_EXTRUSION\n    #include <extrusion_fragment>\n    #endif\n\n    #ifdef USE_FADING\n    #include <fading_fragment>\n    #endif\n}`;\n\n/**\n * Parameters used when constructing a new [[EdgeMaterial]].\n */\nexport interface EdgeMaterialParameters\n    extends FadingFeatureParameters,\n        DisplacementFeatureParameters,\n        ExtrusionFeatureParameters {\n    /**\n     * Edge color.\n     */\n    color?: number | string;\n    /**\n     * Color mix value. Mixes between vertexColors and edgeColor.\n     */\n    colorMix?: number;\n}\n\n/**\n * Material designed to render the edges of extruded buildings using GL_LINES. It supports solid\n * colors, vertex colors, color mixing and distance fading.\n */\nexport class EdgeMaterial extends THREE.RawShaderMaterial\n    implements FadingFeature, ExtrusionFeature, DisplacementFeature {\n    static DEFAULT_COLOR: number = 0x000000;\n    static DEFAULT_COLOR_MIX: number = 0.0;\n\n    /**\n     * Constructs a new `EdgeMaterial`.\n     *\n     * @param params `EdgeMaterial` parameters.\n     */\n    constructor(params?: EdgeMaterialParameters) {\n        const defines: { [key: string]: any } = {};\n        const hasDisplacementMap = params !== undefined && params.displacementMap !== undefined;\n        const hasExtrusion =\n            params !== undefined &&\n            params.extrusionRatio !== undefined &&\n            params.extrusionRatio >= ExtrusionFeatureDefs.DEFAULT_RATIO_MIN &&\n            params.extrusionRatio < ExtrusionFeatureDefs.DEFAULT_RATIO_MAX;\n        if (hasDisplacementMap) {\n            setShaderDefine(defines, \"USE_DISPLACEMENTMAP\", true);\n        }\n        if (hasExtrusion) {\n            setShaderDefine(defines, \"USE_EXTRUSION\", true);\n        }\n\n        const shaderParams = {\n            name: \"EdgeMaterial\",\n            vertexShader: vertexSource,\n            fragmentShader: fragmentSource,\n            uniforms: {\n                edgeColor: new THREE.Uniform(new THREE.Color(EdgeMaterial.DEFAULT_COLOR)),\n                edgeColorMix: new THREE.Uniform(EdgeMaterial.DEFAULT_COLOR_MIX),\n                fadeNear: new THREE.Uniform(FadingFeature.DEFAULT_FADE_NEAR),\n                fadeFar: new THREE.Uniform(FadingFeature.DEFAULT_FADE_FAR),\n                extrusionRatio: new THREE.Uniform(ExtrusionFeatureDefs.DEFAULT_RATIO_MAX),\n                displacementMap: new THREE.Uniform(\n                    hasDisplacementMap ? params!.displacementMap : new THREE.Texture()\n                )\n            },\n            depthWrite: false,\n            defines\n        };\n        super(shaderParams);\n        enforceBlending(this);\n\n        FadingFeature.patchGlobalShaderChunks();\n        ExtrusionFeature.patchGlobalShaderChunks();\n\n        // Apply initial parameter values.\n        if (params !== undefined) {\n            if (params.color !== undefined) {\n                // Color may be set directly on object (omitting class setter), because we already\n                // know that is does no require any special handling nor material update\n                // (see: set color()).\n                this.color.set(params.color as any);\n            }\n            if (params.colorMix !== undefined) {\n                this.colorMix = params.colorMix;\n            }\n            if (params.fadeNear !== undefined) {\n                this.fadeNear = params.fadeNear;\n            }\n            if (params.fadeFar !== undefined) {\n                this.fadeFar = params.fadeFar;\n            }\n            if (params.displacementMap !== undefined) {\n                this.displacementMap = params.displacementMap;\n            }\n            if (params.extrusionRatio !== undefined) {\n                this.extrusionRatio = params.extrusionRatio;\n            }\n        }\n    }\n\n    /**\n     * Edge color.\n     */\n    get color(): THREE.Color {\n        return this.uniforms.edgeColor.value as THREE.Color;\n    }\n    set color(value: THREE.Color) {\n        this.uniforms.edgeColor.value.copy(value);\n    }\n\n    /**\n     * Color mix value. Mixes between vertexColors and edgeColor.\n     */\n    get colorMix(): number {\n        return this.uniforms.edgeColorMix.value as number;\n    }\n    set colorMix(value: number) {\n        if (this.uniforms.edgeColorMix.value === value) {\n            return;\n        }\n        this.uniforms.edgeColorMix.value = value;\n        setShaderMaterialDefine(this, \"USE_COLOR\", value > 0.0);\n    }\n\n    get fadeNear(): number {\n        return this.uniforms.fadeNear.value as number;\n    }\n    set fadeNear(value: number) {\n        this.uniforms.fadeNear.value = value;\n    }\n\n    get fadeFar(): number {\n        return this.uniforms.fadeFar.value as number;\n    }\n    set fadeFar(value: number) {\n        if (this.uniforms.fadeFar.value === value) {\n            return;\n        }\n        this.uniforms.fadeFar.value = value;\n        setShaderMaterialDefine(this, \"USE_FADING\", value > 0.0);\n    }\n\n    get extrusionRatio(): number {\n        return this.uniforms.extrusionRatio.value as number;\n    }\n    set extrusionRatio(value: number) {\n        if (this.uniforms.extrusionRatio.value === value) {\n            return;\n        }\n        this.uniforms.extrusionRatio.value = value;\n        // NOTE: We could also disable shader extrusion chunks when it hits\n        // ExtrusionFeatureDefs.DEFAULT_RATIO_MAX value, but this would cause shader re-compile.\n        const useExtrusion = value >= ExtrusionFeatureDefs.DEFAULT_RATIO_MIN;\n        setShaderMaterialDefine(this, \"USE_EXTRUSION\", useExtrusion);\n    }\n\n    get displacementMap(): THREE.Texture | null {\n        return this.uniforms.displacementMap.value;\n    }\n\n    set displacementMap(map: THREE.Texture | null) {\n        if (this.uniforms.displacementMap.value === map) {\n            return;\n        }\n        this.uniforms.displacementMap.value = map;\n        const useDisplacementMap = map !== null;\n        if (useDisplacementMap) {\n            this.uniforms.displacementMap.value.needsUpdate = true;\n        }\n        setShaderMaterialDefine(this, \"USE_DISPLACEMENTMAP\", useDisplacementMap);\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { ExtrusionFeatureDefs } from \"../MapMeshMaterialsDefs\";\n\nconst MIN_BUILDING_HEIGHT_SQUARED =\n    ExtrusionFeatureDefs.MIN_BUILDING_HEIGHT * ExtrusionFeatureDefs.MIN_BUILDING_HEIGHT;\n\nexport default {\n    extrusion_pars_vertex: `\n// Extrusion axis (xyz: vector, w: factor).\nattribute vec4 extrusionAxis;\nuniform float extrusionRatio;\n#ifdef FLAT_SHADED\nvarying vec4 vExtrusionAxis;\n#endif\n#ifdef ZFIGHTING_WORKAROUND\nvarying float vExtrusionRatio;\n#endif\n`,\n    extrusion_vertex: `\n#ifdef ZFIGHTING_WORKAROUND\n// Cancel extrusionRatio (meaning, force to 1) if extrusionAxisLen < MIN_BUILDING_HEIGHT.\nconst float MIN_BUILDING_HEIGHT_SQUARED = ${MIN_BUILDING_HEIGHT_SQUARED};\nfloat extrusionAxisLenSquared = dot(extrusionAxis.xyz, extrusionAxis.xyz);\nvExtrusionRatio = (extrusionAxisLenSquared < MIN_BUILDING_HEIGHT_SQUARED) ? 1.0 : extrusionRatio;\n#else\nfloat vExtrusionRatio = extrusionRatio;\n#endif\ntransformed = transformed + extrusionAxis.xyz * (vExtrusionRatio - 1.0);\n#ifdef FLAT_SHADED\nvExtrusionAxis = vec4(normalMatrix * extrusionAxis.xyz, extrusionAxis.w);\n#endif\n`,\n    // Modified version of THREE <normal_fragment_begin> shader chunk which, for flat shaded\n    // geometries, computes the normal either with the extrusion axis or fragment derivatives based\n    // on the extrusion factor (1.0 = ceiling, 0.0 = footprint).\n    extrusion_normal_fragment_begin: `\n#ifdef FLAT_SHADED\n    // Flattened this divergent path to prevent undefined behaviour in the following derivatives\n    // functions. For more info:\n    // http://www.aclockworkberry.com/shader-derivative-functions/#Derivatives_and_branches\n\n    // Workaround for Adreno/Nexus5 not able able to do dFdx( vViewPosition ) ...\n    vec3 fdx = vec3(dFdx(vViewPosition.x), dFdx(vViewPosition.y), dFdx(vViewPosition.z));\n    vec3 fdy = vec3(dFdy(vViewPosition.x), dFdy(vViewPosition.y), dFdy(vViewPosition.z));\n    vec3 normal = cross( fdx, fdy );\n    if (vExtrusionAxis.w > 0.999999) {\n        normal = vExtrusionAxis.xyz;\n    }\n    normal = normalize(normal);\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * (float(gl_FrontFacing) * 2.0 - 1.0);\n\t#endif\n\t#ifdef USE_TANGENT\n\t\tvec3 tangent = normalize( vTangent );\n\t\tvec3 bitangent = normalize( vBitangent );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\ttangent = tangent * (float(gl_FrontFacing) * 2.0 - 1.0);\n\t\t\tbitangent = bitangent * (float(gl_FrontFacing) * 2.0 - 1.0);\n\t\t#endif\n\t#endif\n#endif\n// non perturbed normal for clearcoat among others\nvec3 geometryNormal = normal;\n`,\n    extrusion_pars_fragment: `\n#ifdef ZFIGHTING_WORKAROUND\nvarying float vExtrusionRatio;\n#else\nuniform float extrusionRatio;\n#endif\nvarying vec4 vExtrusionAxis;\n`,\n    extrusion_fragment: `\n#ifndef ZFIGHTING_WORKAROUND\nfloat vExtrusionRatio = extrusionRatio;\n#endif\ngl_FragColor.a *= smoothstep( 0.0, 0.25, vExtrusionRatio );\n`\n};\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * The shader chunks have their lines \"#ifdef USE_FADING\" commented out, because currently the\n * mesh materials use individually created shader strings based on the materials settings.\n * @see [[FadingMeshBasicMaterial]]\n **/\n\nexport default {\n    fading_pars_vertex: `\nvarying float fadingDepth;\n`,\n\n    fading_vertex: `\nfadingDepth = -mvPosition.z;\n`,\n\n    fading_pars_fragment: `\nvarying float fadingDepth;\nuniform float fadeNear;\nuniform float fadeFar;\n`,\n\n    fading_fragment: `\n\n// lerp with \"hard\" edges\n//float fadingFactor = 1.0 - clamp((fadingDepth - fadeNear) / (fadeFar - fadeNear), 0.0, 1.0);\n\n// smooth transitions\nfloat fadingFactor = smoothstep( fadeNear, fadeFar, fadingDepth );\n\ngl_FragColor.a *= 1.0 - fadingFactor;\n\n// debugging color:\n// gl_FragColor = vec4(1., fadingFactor, fadingFactor, 1.0);\n`\n};\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * This shader chunk replaces the default lighting in the standard material, the problem with this\n * is that the final pixel color is the addition of the material color and the light, this means\n * that the final map's rendered color is vastly different from that configured by the designers.\n * This chunk removes the extra highlight by providing just two colors, the material color when not\n * in shadow and a reduced color value when in shadow (currently 50% of the material's color).\n */\nexport const simpleLightingShadowChunk = `\n    struct PhysicalMaterial {\n        vec3\tdiffuseColor;\n        float\tspecularRoughness;\n        vec3\tspecularColor;\n    };\n\n    #define DEFAULT_SPECULAR_COEFFICIENT 0.04\n\n    void RE_Direct_Physical( const in IncidentLight directLight,\n        const in GeometricContext geometry,\n        const in PhysicalMaterial material,\n        inout ReflectedLight reflectedLight ) {\n        // directLight.color is the light color * shadow, internally three.js uses a step function, so\n        // this value is either the light color or black. in order to lighten up the shadows, we\n        // take add 50% of the color to grey (to give us either pure white or grey) and multiply this to\n        // the material's diffuse color.\n        #if defined(USE_SHADOWMAP)\n            reflectedLight.directDiffuse = (0.5 * directLight.color +\n                vec3(0.5,0.5,0.5)) * material.diffuseColor;\n        #else\n            reflectedLight.directDiffuse = material.diffuseColor;\n        #endif\n    }\n\n    void RE_IndirectDiffuse_Physical( const in vec3 irradiance,\n        const in GeometricContext geometry,\n        const in PhysicalMaterial material,\n        inout ReflectedLight reflectedLight ) {\n            // Disable influence of indirect light (it is handled in the RE_Direct_Physical function)\n    }\n\n    void RE_IndirectSpecular_Physical( const in vec3 radiance,\n        const in vec3 irradiance,\n        const in vec3 clearcoatRadiance,\n        const in GeometricContext geometry,\n        const in PhysicalMaterial material,\n        inout ReflectedLight reflectedLight) {\n            // Disable specular reflection of light.\n    }\n\n    #define RE_Direct               RE_Direct_Physical\n    #define RE_IndirectDiffuse      RE_IndirectDiffuse_Physical\n    #define RE_IndirectSpecular     RE_IndirectSpecular_Physical\n`;\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport * as THREE from \"three\";\nimport AtmosphereShaderChunks from \"./ShaderChunks/AtmosphereChunks\";\nimport { setShaderDefine } from \"./Utils\";\n\nconst EQUATORIAL_RADIUS: number = 6378137.0;\n\n/**\n * `GroundAtmosphereShader`.\n *\n * Describes shading of atmosphere as seen from outer space.\n */\nexport const GroundAtmosphereShader: THREE.Shader = {\n    uniforms: {\n        u_eyePositionWorld: new THREE.Uniform(new THREE.Vector3()),\n        u_lightDirectionWorld: new THREE.Uniform(new THREE.Vector3(0, 1, 0)),\n        u_modelViewProjection: new THREE.Uniform(new THREE.Matrix4()),\n        // Environment settings:\n        // atmosphere inner and outer radius, camera height, light mode\n        u_atmosphereEnv: new THREE.Uniform(\n            new THREE.Vector4(\n                // Maximum inner radius\n                EQUATORIAL_RADIUS * 1.001,\n                // Maximum outer radius\n                EQUATORIAL_RADIUS * 1.025,\n                // Camera height\n                0,\n                // Toggles the light modes:\n                // 0 - light always directly overhead,\n                // 1 - lighting uses light direction: uniform u_lightDirectionWorld\n                1\n            )\n        ),\n        u_hsvCorrection: new THREE.Uniform(new THREE.Vector3(0, 0, 0)),\n\n        topColor: new THREE.Uniform(new THREE.Color(0x0077ff)),\n        bottomColor: new THREE.Uniform(new THREE.Color(0xffffff)),\n        offset: new THREE.Uniform(33.0),\n        exponent: new THREE.Uniform(0.6),\n        fogColor: new THREE.Uniform(new THREE.Color(0x0077ff)), // scene.fog.color\n        fogNear: new THREE.Uniform(new THREE.Color(0x0077ff)), // scene.fog.near\n        fogFar: new THREE.Uniform(new THREE.Color(0xffffff)) // scene.fog.far\n    },\n\n    vertexShader: `\n\n    #define IMPROVE_INTERSECT_PRECISION 1\n    #define IMPROVE_DOT_PRECISION 1\n\n    precision highp float;\n    precision highp int;\n\n    attribute vec4 position;\n\n    // Base mandatory uniforms\n    uniform mat4 u_modelViewProjection;\n    uniform vec3 u_eyePositionWorld;\n    uniform vec3 u_lightDirectionWorld;\n\n    uniform vec4 u_atmosphereEnv; // Atmosphere inner and outer radius, camera height, light mode\n    uniform vec3 u_hsvCorrection;\n\n    const float Pi = 3.141592653589793;\n    const float Kr = 0.0025;\n    const float Km = 0.0015;\n    const float Kr4PI = Kr * 4.0 * Pi;\n    const float Km4PI = Km * 4.0 * Pi;\n    const float ESun = 25.0; // should be 15.0\n    const float KmESun = Km * ESun;\n    const float KrESun = Kr * ESun;\n    const vec3 InvWavelength = vec3(\n        1.0 / pow(0.650, 4.0), // Red\n        1.0 / pow(0.570, 4.0), // Green\n        1.0 / pow(0.475, 4.0)); // Blue\n\n    const int nSamples = 2;\n    const float fSamples = 2.0;\n\n    varying vec3 v_rayleighColor;\n    varying vec3 v_mieColor;\n    varying vec3 v_vertToCamera;\n    varying vec3 v_vertToOrigin;\n\n    ${AtmosphereShaderChunks.atmosphere_common_utils}\n    ${AtmosphereShaderChunks.atmosphere_vertex_utils}\n\n    //\n    // Computes rayleight and mia atmosphere factors for ground.\n    //\n    // Code based on GPU Gems article.\n    //\n    // Author: Sean O'Neil\n    //\n    // Copyright (c) 2004 Sean O'Neil\n    //\n    // https://developer.nvidia.com/gpugems/gpugems2/part-ii-shading-lighting-and-shadows/chapter-16-accurate-atmospheric-scattering\n    //\n    // Further modifications by HERE.\n    //\n    AtmosphereColor computeGroundAtmosphere(vec3 v3Pos, vec3 vLightDir, bool dynamicLighting)\n    {\n        // Retrieve environment variables\n        float fInnerRadius = u_atmosphereEnv.x;\n        float fOuterRadius = u_atmosphereEnv.y;\n        float fCameraHeight = u_atmosphereEnv.z;\n\n        // All that may be moved to const or define(s) at further optimizations:\n        float fScale = 1.0 / (fOuterRadius - fInnerRadius);\n        float fScaleOverScaleDepth = fScale / RayleighScaleDepth;\n        float fCameraHeight2 = fCameraHeight * fCameraHeight;\n        float fOuterRadius2 = fOuterRadius * fOuterRadius;\n\n        // Get the ray from the camera to the vertex and its length (which is the far point of the ray passing through the atmosphere)\n        vec3 v3Ray = v3Pos - u_eyePositionWorld;\n        float fFar = length(v3Ray);\n        v3Ray /= fFar;\n\n#if !defined(IMPROVE_DOT_PRECISION)\n        vec3 v3Dir = normalize(v3Pos);\n#endif\n\n#ifdef CAMERA_IN_SPACE\n\n        // Calculate first point of camera ray and sphere intersection.\n        float fNear = getNearSphereIntersect(u_eyePositionWorld, v3Ray, fCameraHeight2, fOuterRadius2);\n        // Make far relative to first atmosphere intersection, setting it to\n        // the length of ray passed through atmosphere\n        fFar -= fNear;\n\n        // Compute the ray's starting position within the atmosphere, then\n        // calculate its scattering offset\n        vec3 v3Start = u_eyePositionWorld + v3Ray * fNear;\n        float fDepth = exp((fInnerRadius - fOuterRadius) / RayleighScaleDepth);\n\n#else // CAMERA_IN_ATMOSPHERE\n\n        // The ray starts already in atmosphere\n        vec3 v3Start = u_eyePositionWorld;\n        // Virtually fNear is just at eye position, so ray passing through atmosphere does not shorten\n        // fFar -= 0.0;\n        float fDepth = exp((fInnerRadius - fCameraHeight) / RayleighScaleDepth);\n#endif\n\n#if defined(IMPROVE_DOT_PRECISION)\n        float fCameraAngle = dot(-v3Ray, v3Pos) / length(v3Pos);\n#else\n        float fCameraAngle = dot(-v3Ray, v3Dir);\n#endif\n        float fCameraScale = scale(fCameraAngle);\n\n        // When we want the atmosphere to be uniform over the globe so it is set to 1.0.\n#if defined(IMPROVE_DOT_PRECISION)\n        // The light angle for given light source may be calculated as:\n        // angle = dot(vLightDir, v3Dir) / length(v3Dir);\n        // where v3Dir holds normalized vertex position, but for precision issues we v3Pos (un-normalized)\n        float fLightAngle = conditionalBranchFree(dynamicLighting, dot(vLightDir, v3Pos) / length(v3Pos), 1.0);\n#else\n        float fLightAngle = conditionalBranchFree(dynamicLighting, dot(vLightDir, v3Dir), 1.0);\n#endif\n        float fLightScale = scale(fLightAngle);\n\n        float fCameraOffset = fDepth * fCameraScale;\n        float fTemp = (fLightScale + fCameraScale);\n\n        // Initialize the scattering loop variables\n        float fSampleLength = fFar / fSamples;\n        float fScaledLength = fSampleLength * fScale;\n        vec3 v3SampleRay = v3Ray * fSampleLength;\n        vec3 v3SamplePoint = v3Start + v3SampleRay * 0.5;\n\n        // Now loop through the sample rays\n        vec3 v3BaseColor = vec3(0.0);\n        vec3 v3Attenuate = vec3(0.0);\n        for(int i = 0; i < nSamples; i++)\n        {\n            float fHeight = length(v3SamplePoint);\n            float fDepth = exp(fScaleOverScaleDepth * (fInnerRadius - fHeight));\n            float fScatter = fDepth * fTemp - fCameraOffset;\n            // Compute color factors\n            v3Attenuate = exp(-fScatter * (InvWavelength * Kr4PI + Km4PI));\n            v3BaseColor += v3Attenuate * (fDepth * fScaledLength);\n            // Move to the next point\n            v3SamplePoint += v3SampleRay;\n        }\n\n        AtmosphereColor color;\n        color.mie = v3BaseColor * (InvWavelength * KrESun + KmESun);\n        // Calculate the attenuation factor for the ground\n        color.rayleigh = v3Attenuate;\n\n        return color;\n    }\n\n    void main(void)\n    {\n        float fLightMode = u_atmosphereEnv.w;\n        bool bDynamicLight = fLightMode != 0.0;\n\n        vec3 vLightDir = conditionalBranchFree(bDynamicLight,\n            u_lightDirectionWorld,\n            u_eyePositionWorld);\n        vLightDir = normalize(vLightDir);\n\n        AtmosphereColor atmColor = computeGroundAtmosphere(position.xyz, vLightDir, bDynamicLight);\n        v_mieColor = atmColor.mie;\n        v_rayleighColor = atmColor.rayleigh;\n        v_vertToCamera = u_eyePositionWorld - position.xyz;\n        v_vertToOrigin = normalize(position.xyz);\n\n        gl_Position = u_modelViewProjection * position;\n    }\n    `,\n\n    fragmentShader: `\n\n    // Exposure correction gives more subtle gradients on the ground.\n    #define CORRECT_EXPOSURE 1\n    #define FADE_DEPTH 1\n    #define NIGHT_LOCAL 1\n\n    precision highp float;\n    precision highp int;\n\n    #ifdef CORRECT_COLOR\n    uniform vec3 u_hsvCorrection; // Hue, saturation, brightness\n    #endif\n\n    uniform vec4 u_atmosphereEnv; // Atmosphere inner and outer radius, camera height, light mode\n    uniform vec3 u_eyePositionWorld;\n    uniform vec3 u_lightDirectionWorld;\n\n    const float g = -0.95;\n    const float g2 = g * g;\n\n    varying vec3 v_rayleighColor;\n    varying vec3 v_mieColor;\n    varying vec3 v_vertToCamera;\n    varying vec3 v_vertToOrigin;\n\n    ${AtmosphereShaderChunks.atmosphere_common_utils}\n    ${AtmosphereShaderChunks.atmosphere_fragment_utils}\n\n    void main(void)\n    {\n        float fInnerRadius = u_atmosphereEnv.x;\n        float fOuterRadius = u_atmosphereEnv.y;\n        float fCameraHeight = u_atmosphereEnv.z;\n        float fLightMode = u_atmosphereEnv.w;\n        bool bDynamicLight = fLightMode != 0.0;\n\n        vec3 vLightDir = conditionalBranchFree(bDynamicLight,\n            u_lightDirectionWorld,\n            u_eyePositionWorld);\n        vLightDir = normalize(vLightDir);\n\n        // GPU gems mix of ground solution, with custom alpha settings\n        vec3 cRgb = v_mieColor + 0.25 * v_rayleighColor;\n\n        // Not needed for HDR frame buffer\n    #if !defined(HDR_FRAME_BUFFER) && defined(CORRECT_EXPOSURE)\n        // Interesting results with exposure factor: 2.0, 3.5, 4.0\n        cRgb = correctExposure(cRgb, 3.0);\n    #endif\n\n    #ifdef CORRECT_COLOR\n        cRgb = correctColor(cRgb, u_hsvCorrection);\n    #endif\n\n        // Base atmosphere opacity\n        float fAtmosphereAlpha = 1.0;\n\n        // Factor based on the distance of camera atmosphere and ground, results are:\n        // 0.0 = camera on the ground surface,\n        // 1.0 = at the outer edge of the atmosphere.\n        float fDepthFactor = clamp((fCameraHeight - fInnerRadius) /\n            (fOuterRadius - fInnerRadius), 0.0, 1.0);\n    #ifdef FADE_DEPTH\n        // Fade alpha based on the distance of camera between atmosphere layers\n        #ifdef FADE_DEPTH_LINEAR\n            fAtmosphereAlpha *= fDepthFactor;\n        #else\n            fAtmosphereAlpha *= pow(fDepthFactor, 1.5);\n        #endif\n    #endif\n\n#if defined(FADE_NIGHT) || defined(DARKEN_NIGHT)\n        // Adjust factor based on time of day, results are:\n        // 0.0 = night,\n        // 1.0 = day.\n    #ifdef NIGHT_GLOBAL\n        // Global night fade based on camera and light orientation\n        float fNightFactor = conditionalBranchFree(bDynamicLight,\n            clamp(dot(normalize(u_eyePositionWorld), vLightDir), 0.0, 1.0),\n             1.0);\n        fNightFactor = pow(fNightFactor, 0.5);\n    #else // NIGHT_LOCAL\n        float fNightFactor = conditionalBranchFree(bDynamicLight,\n            clamp(dot(v_vertToOrigin, vLightDir) / length(v_vertToOrigin), 0.0, 1.0),\n            1.0);\n        fNightFactor = pow(fNightFactor, 0.8);\n    #endif\n#endif\n\n    #ifdef FADE_NIGHT\n        // Adjust alpha for night side of the globe\n        fAtmosphereAlpha *= fNightFactor;\n    #endif\n\n    #ifdef DARKEN_NIGHT\n        // Change the brightness depending on night / day side.\n        // NOTE: Darkening should be rather applied in HSV space, without loss on saturation,\n        // but it is much more GPU consuming.\n        const float minBrightness = 0.5;\n        float fDarkenFactor = clamp(fNightFactor, minBrightness, 1.0);\n        cRgb *= fDarkenFactor;\n    #endif\n\n    #ifdef EXPOSURE_DEPTH\n        // Control exposure depending from ground distance\n        float exposureBoost = 3.0 - fDepthFactor;\n        cRgb = correctExposure(cRgb, exposureBoost);\n    #endif\n\n        // Experimental fading out of focus point - similar to fresnel effect in top view.\n        // This fade is handy to better expose cartographic/map features in screen center.\n        float fFocusFactor = 1.0 - clamp(dot(normalize(v_vertToCamera), v_vertToOrigin), 0.0, 1.0) + 0.1;\n        fFocusFactor = pow(fFocusFactor, 2.5);\n        fAtmosphereAlpha *= fFocusFactor;\n\n        // Integrate all features\n        gl_FragColor = vec4(cRgb, fAtmosphereAlpha);\n    }\n    `\n};\n\nexport class GroundAtmosphereMaterial extends THREE.RawShaderMaterial {\n    constructor(params?: any) {\n        const defines: { [key: string]: any } = {};\n        defines.CAMERA_IN_SPACE = \"\";\n\n        const shaderParams = {\n            name: \"GroundAtmosphereMaterial\",\n            vertexShader: GroundAtmosphereShader.vertexShader,\n            fragmentShader: GroundAtmosphereShader.fragmentShader,\n            uniforms: GroundAtmosphereShader.uniforms,\n            transparent: true,\n            depthTest: false,\n            depthWrite: false,\n            side: THREE.FrontSide,\n            blending: THREE.NormalBlending,\n            fog: false\n        };\n        super(shaderParams);\n    }\n\n    setDynamicLighting(enableLighting: boolean) {\n        this.uniforms.u_atmosphereEnv.value.w = enableLighting ? 1.0 : 0.0;\n    }\n\n    /**\n     * Set maximum outer radius of atmosphere.\n     *\n     * @default [[EarthConstants.EQUATORIAL_RADIUS]] * 1.025\n     */\n    set outerRadius(radius: number) {\n        this.uniforms.u_atmosphereEnv.value.y = radius;\n    }\n\n    get outerRadius(): number {\n        return this.uniforms.u_atmosphereEnv.value.y;\n    }\n\n    /**\n     * Set maximum inner radius of atmosphere.\n     *\n     * @default [[EarthConstants.EQUATORIAL_RADIUS]] * 1.001.\n     */\n    set innerRadius(radius: number) {\n        this.uniforms.u_atmosphereEnv.value.x = radius;\n    }\n\n    get innerRadius(): number {\n        return this.uniforms.u_atmosphereEnv.value.x;\n    }\n\n    /**\n     * Updates the uniform data of a material used to render an atmosphere.\n     *\n     * This includes only uniforms that may change frame by frame, other uniforms are\n     * accessed with convenient material setters and getters.\n     *\n     * @param shaderMaterial Material which uniforms will be updated.\n     * @param matrixWorldInverse Inverse of world matrix used to position the atmosphere dome.\n     * @param lightDirection The light directional vector in world space.\n     * @param camera Camera used in rendering.\n     */\n    updateUniforms(\n        shaderMaterial: THREE.ShaderMaterial,\n        object: THREE.Object3D,\n        camera: THREE.Camera,\n        lightDirection: THREE.Vector3\n    ): void {\n        const cameraInfo = this.getCameraInfo(object, camera);\n\n        if (shaderMaterial !== undefined && shaderMaterial.isMaterial) {\n            if (\n                shaderMaterial.uniforms &&\n                shaderMaterial.uniforms.u_atmosphereEnv &&\n                shaderMaterial.uniforms.u_hsvCorrection &&\n                shaderMaterial.uniforms.u_eyePositionWorld &&\n                shaderMaterial.uniforms.u_modelViewProjection &&\n                shaderMaterial.uniforms.u_lightDirectionWorld\n            ) {\n                const eyePos = cameraInfo.eyePos;\n                const mvp = cameraInfo.modelViewProjection;\n                const cameraHeight = cameraInfo.eyeHeight;\n\n                shaderMaterial.uniforms.u_eyePositionWorld.value.copy(eyePos);\n                shaderMaterial.uniforms.u_modelViewProjection.value.copy(mvp);\n\n                shaderMaterial.uniforms.u_atmosphereEnv.value.z = cameraHeight;\n                shaderMaterial.uniforms.u_lightDirectionWorld.value = lightDirection.clone();\n\n                const cameraInSpace = cameraHeight > this.outerRadius;\n                const needsUpdate0 = setShaderDefine(\n                    shaderMaterial.defines,\n                    \"CAMERA_IN_SPACE\",\n                    cameraInSpace\n                );\n                const needsUpdate1 = setShaderDefine(\n                    shaderMaterial.defines,\n                    \"CAMERA_IN_ATMOSPHERE\",\n                    !cameraInSpace\n                );\n                shaderMaterial.needsUpdate = needsUpdate0 || needsUpdate1;\n            } else {\n                throw Error(\"Atmosphere material has missing uniforms\");\n            }\n        } else {\n            throw Error(\"Wrong object used, only Material objects are supported\");\n        }\n    }\n\n    /*\n     * Calculate camera position used in vertex shader of atmosphere materials.\n     *\n     * @param object\n     * @param camera Camera used to get the eye position.\n     */\n    private getCameraInfo(\n        object: THREE.Object3D,\n        camera: THREE.Camera,\n        reverse: boolean = false\n    ): { modelViewProjection: THREE.Matrix4; eyePos: THREE.Vector3; eyeHeight: number } {\n        if (reverse) {\n            const modelMatrix = new THREE.Matrix4().identity();\n            const viewMatrix = new THREE.Matrix4().getInverse(object.matrixWorld).transpose();\n            const projectionMatrix = camera.projectionMatrix;\n\n            const mvpMatrix = new THREE.Matrix4();\n            // MVP = Projection * View * Model\n            mvpMatrix.multiplyMatrices(viewMatrix, modelMatrix);\n            mvpMatrix.multiplyMatrices(projectionMatrix, mvpMatrix);\n\n            const eyePos = new THREE.Vector3();\n            object.getWorldPosition(eyePos);\n            const objectPos = new THREE.Vector3();\n            camera.getWorldPosition(objectPos);\n            const eyeHeight = objectPos.distanceTo(eyePos);\n\n            return {\n                modelViewProjection: mvpMatrix,\n                eyePos,\n                eyeHeight\n            };\n        } else {\n            const modelMatrix = object.matrixWorld;\n            const viewMatrix = camera.matrixWorldInverse;\n            const projectionMatrix = camera.projectionMatrix;\n\n            const mvpMatrix = new THREE.Matrix4();\n            // MVP = Projection * View * Model\n            mvpMatrix.multiplyMatrices(viewMatrix, modelMatrix);\n            mvpMatrix.multiplyMatrices(projectionMatrix, mvpMatrix);\n\n            const eyePos = new THREE.Vector3();\n            camera.getWorldPosition(eyePos);\n            const objectPos = new THREE.Vector3();\n            object.getWorldPosition(objectPos);\n            const eyeHeight = objectPos.distanceTo(eyePos);\n            // Normally we would return simply camera position, but since camera is not moving in\n            // the globe view only the world, we need to calculate eye relative to object position.\n            eyePos.sub(objectPos);\n            return {\n                modelViewProjection: mvpMatrix,\n                eyePos,\n                eyeHeight\n            };\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\nimport linesShaderChunk from \"./ShaderChunks/LinesChunks\";\n\nconst vertexSource: string = `\n#ifdef USE_COLOR\nattribute vec4 color;\nvarying vec3 vColor;\n#endif\n\n// uniforms to implement double-precision\nuniform mat4 u_mvp;             // combined modelView and projection matrix\nuniform vec3 u_eyepos;          // eye position major\nuniform vec3 u_eyepos_lowpart;  // eye position minor ((double) eyepos - (float) eyepos)\n\n// vertex attributes\nattribute vec3 position;        // high part\nattribute vec3 positionLow;     // low part\n\n#include <high_precision_vert_func>\n\nvoid main() {\n    #ifdef USE_COLOR\n    vColor = color.rgb;\n    #endif\n\n    vec3 pos = subtractDblEyePos(position);\n    gl_Position = u_mvp * vec4(pos, 1.0);\n}`;\n\nconst fragmentSource: string = `\nprecision highp float;\nprecision highp int;\n\nuniform vec3 diffuse;\nuniform float opacity;\n\n#ifdef USE_COLOR\nvarying vec3 color;\n#endif\n\nvoid main() {\n    #ifdef USE_COLOR\n    gl_FragColor = vec4( diffuse * vColor, opacity );\n    #else\n    gl_FragColor = vec4( diffuse, opacity );\n    #endif\n}`;\n\n/**\n * Parameters used when constructing a new [[SolidLineMaterial]].\n */\nexport interface HighPrecisionLineMaterialParameters {\n    /**\n     * Line color.\n     */\n    color?: number | string | THREE.Color;\n    /**\n     * Line opacity.\n     */\n    opacity?: number;\n}\n\n/**\n * Material designed to render high precision lines (ideal for position-sensible data).\n */\nexport class HighPrecisionLineMaterial extends THREE.RawShaderMaterial {\n    static DEFAULT_COLOR: number = 0x000050;\n    static DEFAULT_OPACITY: number = 1.0;\n\n    isHighPrecisionLineMaterial: boolean;\n\n    /**\n     * Constructs a new `HighPrecisionLineMaterial`.\n     *\n     * @param params `HighPrecisionLineMaterial` parameters.\n     */\n    constructor(params?: HighPrecisionLineMaterialParameters) {\n        Object.assign(THREE.ShaderChunk, linesShaderChunk);\n\n        const shaderParams = {\n            name: \"HighPrecisionLineMaterial\",\n            vertexShader: vertexSource,\n            fragmentShader: fragmentSource,\n            uniforms: {\n                diffuse: new THREE.Uniform(\n                    new THREE.Color(HighPrecisionLineMaterial.DEFAULT_COLOR)\n                ),\n                opacity: new THREE.Uniform(HighPrecisionLineMaterial.DEFAULT_OPACITY),\n                u_mvp: new THREE.Uniform(new THREE.Matrix4()),\n                u_eyepos: new THREE.Uniform(new THREE.Vector3()),\n                u_eyepos_lowpart: new THREE.Uniform(new THREE.Vector3())\n            }\n        };\n        Object.assign(shaderParams, params);\n        super(shaderParams);\n\n        this.type = \"HighPrecisionLineMaterial\";\n        this.isHighPrecisionLineMaterial = true;\n\n        // Apply initial parameter values.\n        if (params !== undefined) {\n            if (params.color !== undefined) {\n                this.color.set(params.color as any);\n            }\n            if (params.opacity !== undefined) {\n                this.opacity = params.opacity;\n            }\n        }\n\n        this.updateTransparencyFeature();\n    }\n\n    /**\n     * Line color.\n     */\n    get color(): THREE.Color {\n        return this.uniforms.diffuse.value as THREE.Color;\n    }\n    set color(value: THREE.Color) {\n        this.uniforms.diffuse.value.copy(value);\n    }\n\n    private updateTransparencyFeature() {\n        this.transparent = this.opacity < 1.0 ? true : false;\n    }\n}\n\nexport function isHighPrecisionLineMaterial(\n    material: object | undefined\n): material is HighPrecisionLineMaterial {\n    return (\n        material !== undefined &&\n        (material as HighPrecisionLineMaterial).isHighPrecisionLineMaterial === true\n    );\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\nimport linesShaderChunk from \"./ShaderChunks/LinesChunks\";\n\nconst vertexSource: string = `\n#ifdef USE_COLOR\nvarying vec3 vColor;\n#endif\n\nuniform float size;\n\n// uniforms to implement double-precision\nuniform mat4 u_mvp;             // combined modelView and projection matrix\nuniform vec3 u_eyepos;          // eye position major\nuniform vec3 u_eyepos_lowpart;  // eye position minor ((double) eyepos - (float) eyepos)\n\n// vertex attributes\nattribute vec3 positionLow;     // low part\n\n#include <high_precision_vert_func>\n\nvoid main() {\n    #ifdef USE_COLOR\n    vColor = color.rgb;\n    #endif\n\n    vec3 pos = subtractDblEyePos(position);\n    gl_Position = u_mvp * vec4(pos, 1.0);\n\n    // ignore sizeAttenuation for now!\n    gl_PointSize = size;\n}`;\n\n/**\n * Parameters used when constructing a new [[HighPrecisionPointMaterial]].\n */\nexport interface HighPrecisionPointMaterialParameters extends THREE.PointsMaterialParameters {\n    /**\n     * Point color.\n     */\n    color?: number | string | THREE.Color;\n    /**\n     * Point opacity.\n     */\n    opacity?: number;\n    /**\n     * Point scale.\n     */\n    scale?: number;\n    /**\n     * UV transformation matrix.\n     */\n    uvTransform?: THREE.Matrix3;\n}\n\n/**\n * Material designed to render high precision points (ideal for position-sensible data).\n */\nexport class HighPrecisionPointMaterial extends THREE.PointsMaterial {\n    static DEFAULT_COLOR: number = 0x000050;\n    static DEFAULT_OPACITY: number = 1.0;\n    static DEFAULT_SIZE: number = 1.0;\n    static DEFAULT_SCALE: number = 1.0;\n\n    isHighPrecisionPointMaterial: boolean;\n    uniforms: { [uniform: string]: THREE.IUniform };\n    vertexShader?: string;\n    fragmentShader?: string;\n\n    /**\n     * Constructs a new `HighPrecisionPointMaterial`.\n     *\n     * @param params `HighPrecisionPointMaterial` parameters.\n     */\n    constructor(params?: HighPrecisionPointMaterialParameters) {\n        Object.assign(THREE.ShaderChunk, linesShaderChunk);\n\n        const shaderParams = params;\n        super(shaderParams);\n\n        this.type = \"HighPrecisionPointMaterial\";\n        this.vertexShader = vertexSource;\n        this.fragmentShader = THREE.ShaderChunk.points_frag;\n        this.fog = false;\n\n        this.uniforms = {\n            diffuse: new THREE.Uniform(new THREE.Color(HighPrecisionPointMaterial.DEFAULT_COLOR)),\n            opacity: new THREE.Uniform(HighPrecisionPointMaterial.DEFAULT_OPACITY),\n            size: new THREE.Uniform(HighPrecisionPointMaterial.DEFAULT_SIZE),\n            scale: new THREE.Uniform(HighPrecisionPointMaterial.DEFAULT_SCALE),\n            map: new THREE.Uniform(new THREE.Texture()),\n            uvTransform: new THREE.Uniform(new THREE.Matrix3()),\n            u_mvp: new THREE.Uniform(new THREE.Matrix4()),\n            u_eyepos: new THREE.Uniform(new THREE.Vector3()),\n            u_eyepos_lowpart: new THREE.Uniform(new THREE.Vector3())\n        };\n\n        this.isHighPrecisionPointMaterial = true;\n\n        // Apply initial parameter values.\n        if (params !== undefined) {\n            if (params.color !== undefined) {\n                this.color.set(params.color as any);\n            }\n            if (params.opacity !== undefined) {\n                this.opacity = params.opacity;\n            }\n            if (params.size !== undefined) {\n                this.size = params.size;\n            }\n            if (params.scale !== undefined) {\n                this.scale = params.scale;\n            }\n            if (params.uvTransform !== undefined) {\n                this.uvTransform = params.uvTransform;\n            }\n            if (params.map !== undefined) {\n                this.map = params.map;\n            }\n        }\n    }\n\n    /**\n     *  Point scale.\n     */\n    get scale(): number {\n        return this.uniforms.scale.value;\n    }\n\n    set scale(value: number) {\n        this.uniforms.scale.value = value;\n    }\n\n    /**\n     * UV transformation matrix.\n     */\n    get uvTransform(): THREE.Matrix3 {\n        return this.uniforms.uvTransform.value;\n    }\n    set uvTransform(value: THREE.Matrix3) {\n        this.uniforms.uvTransform.value = value;\n    }\n}\n\nexport function isHighPrecisionPointMaterial(\n    material: object | undefined\n): material is HighPrecisionPointMaterial {\n    return (\n        material !== undefined &&\n        (material as HighPrecisionPointMaterial).isHighPrecisionPointMaterial === true\n    );\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nconst vertexSource: string = `\nattribute vec4 position;\nattribute vec4 color;\nattribute vec2 uv;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\n\nvarying vec4 vColor;\nvarying vec2 vUv;\n\nvoid main() {\n    vUv = uv;\n    vColor = color;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position.xyz, 1.0);\n}`;\n\nconst fragmentSource: string = `\nprecision highp float;\nprecision highp int;\n\nuniform sampler2D map;\n\nvarying vec4 vColor;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(map, vUv.xy);\n    color *= vColor;\n    if (color.a < 0.05) {\n        discard;\n    }\n    gl_FragColor = color;\n}`;\n\n/**\n * Parameters used when constructing a new [[IconMaterial]].\n */\nexport interface IconMaterialParameters {\n    /**\n     * Texture map.\n     */\n    map: THREE.Texture;\n}\n\n/**\n * 2D material for icons, similar to [[TextMaterial]]. Uses component in texture coordinates to\n * apply opacity.\n */\nexport class IconMaterial extends THREE.RawShaderMaterial {\n    /**\n     * Constructs a new `IconMaterial`.\n     *\n     * @param params `IconMaterial` parameters.\n     */\n    constructor(params: IconMaterialParameters) {\n        // tslint:disable-next-line: deprecation\n        const shaderParams: THREE.ShaderMaterialParameters = {\n            name: \"IconMaterial\",\n            vertexShader: vertexSource,\n            fragmentShader: fragmentSource,\n            uniforms: {\n                map: new THREE.Uniform(params.map)\n            },\n            depthTest: true,\n            depthWrite: true,\n            transparent: true,\n\n            vertexColors: true,\n            premultipliedAlpha: true,\n            blending: THREE.NormalBlending\n        };\n        super(shaderParams);\n    }\n\n    /**\n     * Icon texture map/atlas.\n     */\n    get map(): THREE.Texture {\n        return this.uniforms.map.value;\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\n/**\n * The shader used in the [[UnrealBloomPass]] for the bloom/glow effect.\n */\nexport const LuminosityHighPassShader: THREE.Shader = {\n    uniforms: {\n        tDiffuse: { value: null },\n        luminosityThreshold: { value: 1.0 },\n        smoothWidth: { value: 1.0 },\n        defaultColor: { value: new THREE.Color(0x000000) },\n        defaultOpacity: { value: 0.0 }\n    },\n    vertexShader: `\n    varying vec2 vUv;\n    void main() {\n        vUv = uv;\n        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n    }`,\n    fragmentShader: `\n    uniform sampler2D tDiffuse;\n    uniform vec3 defaultColor;\n    uniform float defaultOpacity;\n    uniform float luminosityThreshold;\n    uniform float smoothWidth;\n    varying vec2 vUv;\n    void main() {\n        vec4 texel = texture2D( tDiffuse, vUv );\n        vec3 luma = vec3( 0.299, 0.587, 0.114 );\n        float v = dot( texel.xyz, luma );\n        vec4 outputColor = vec4( defaultColor.rgb, defaultOpacity );\n        float alpha = smoothstep( luminosityThreshold, luminosityThreshold + smoothWidth, v );\n        gl_FragColor = mix( outputColor, texel, alpha );\n    }`\n};\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport * as THREE from \"three\";\n\nimport { CopyShader } from \"./CopyMaterial\";\n\n/**\n * The material to use for the quad of the [[MSAARenderPass]] in the composing.\n */\nexport class MSAAMaterial extends THREE.ShaderMaterial {\n    /**\n     * The constructor of `MSAAMaterial`.\n     *\n     * @param uniforms The [[CopyShader]]'s uniforms.\n     */\n    constructor(uniforms: { [uniformName: string]: THREE.IUniform }) {\n        super({\n            uniforms,\n            vertexShader: CopyShader.vertexShader,\n            fragmentShader: CopyShader.fragmentShader,\n            premultipliedAlpha: true,\n            transparent: true,\n            blending: THREE.AdditiveBlending,\n            depthTest: false,\n            depthWrite: false\n        });\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport * as THREE from \"three\";\n\n/**\n * `SepiaShader`.\n */\nexport const SepiaShader: THREE.Shader = {\n    uniforms: {\n        tDiffuse: { value: null },\n        amount: { value: 1.0 }\n    },\n    vertexShader: `\n        varying vec2 vUv;\n        void main() {\n            vUv = uv;\n            gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        }`,\n    fragmentShader: `\n        uniform float amount;\n        uniform sampler2D tDiffuse;\n        varying vec2 vUv;\n        void main() {\n            vec4 color = texture2D( tDiffuse, vUv );\n            vec3 c = color.rgb;\n            color.r = dot( c, vec3( 1.0 - 0.607 * amount, 0.769 * amount, 0.189 * amount ) );\n            color.g = dot( c, vec3( 0.349 * amount, 1.0 - 0.314 * amount, 0.168 * amount ) );\n            color.b = dot( c, vec3( 0.272 * amount, 0.534 * amount, 1.0 - 0.869 * amount ) );\n            gl_FragColor = vec4( min( vec3( 1.0 ), color.rgb ), color.a );\n        }`\n};\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport * as THREE from \"three\";\nimport AtmosphereShaderChunks from \"./ShaderChunks/AtmosphereChunks\";\nimport { setShaderDefine } from \"./Utils\";\n\nconst EQUATORIAL_RADIUS: number = 6378137.0;\n\n/**\n * `SkyAtmosphereShader`.\n *\n * Describes shading of atmosphere as seen from outer space.\n */\nexport const SkyAtmosphereShader: THREE.Shader = {\n    uniforms: {\n        u_eyePositionWorld: new THREE.Uniform(new THREE.Vector3()),\n        u_lightDirectionWorld: new THREE.Uniform(new THREE.Vector3(0, 1, 0)),\n        u_modelViewProjection: new THREE.Uniform(new THREE.Matrix4()),\n        // Environment settings:\n        // atmosphere inner and outer radius, camera height, light mode\n        u_atmosphereEnv: new THREE.Uniform(\n            new THREE.Vector4(\n                // Maximum inner radius\n                EQUATORIAL_RADIUS,\n                // Maximum outer radius\n                EQUATORIAL_RADIUS * 1.025,\n                // Camera height\n                0,\n                // Toggles the light modes:\n                // 0 - light always directly overhead,\n                // 1 - lighting uses light direction: uniform u_lightDirectionWorld\n                1\n            )\n        ),\n        u_hsvCorrection: new THREE.Uniform(new THREE.Vector3(0, 0, 0)),\n\n        topColor: new THREE.Uniform(new THREE.Color(0x0077ff)),\n        bottomColor: new THREE.Uniform(new THREE.Color(0xffffff)),\n        offset: new THREE.Uniform(33.0),\n        exponent: new THREE.Uniform(0.6),\n        fogColor: new THREE.Uniform(new THREE.Color(0x0077ff)), // scene.fog.color\n        fogNear: new THREE.Uniform(new THREE.Color(0x0077ff)), // scene.fog.near\n        fogFar: new THREE.Uniform(new THREE.Color(0xffffff)) // scene.fog.far\n    },\n\n    vertexShader: `\n    precision highp float;\n    precision highp int;\n\n    attribute vec4 position;\n\n    uniform mat4 u_modelViewProjection;\n    uniform vec3 u_eyePositionWorld;\n    uniform vec3 u_lightDirectionWorld;\n\n    uniform vec4 u_atmosphereEnv; // Atmosphere inner and outer radius, camera height, light mode\n    uniform vec3 u_hsvCorrection;\n\n    const float Pi = 3.141592653589793;\n    const float Kr = 0.0025;\n    const float Kr4PI = Kr * 4.0 * Pi;\n    const float Km = 0.0015;\n    const float Km4PI = Km * 4.0 * Pi;\n    const float ESun = 15.0; // should be 15.0\n    const float KmESun = Km * ESun;\n    const float KrESun = Kr * ESun;\n    const vec3 InvWavelength = vec3(\n        5.60204474633241,  // Red = 1.0 / Math.pow(0.650, 4.0)\n        9.473284437923038, // Green = 1.0 / Math.pow(0.570, 4.0)\n        19.643802610477206); // Blue = 1.0 / Math.pow(0.475, 4.0)\n\n    const int nSamples = 2;\n    const float fSamples = 2.0;\n\n    varying vec3 v_rayleighColor;\n    varying vec3 v_mieColor;\n    varying vec3 v_vertToCamera;\n\n    ${AtmosphereShaderChunks.atmosphere_common_utils}\n    ${AtmosphereShaderChunks.atmosphere_vertex_utils}\n\n    //\n    // Computes rayleight and mia atmosphere factors for sky.\n    //\n    // Code based on GPU Gems article.\n    //\n    // Author: Sean O'Neil\n    //\n    // Copyright (c) 2004 Sean O'Neil\n    //\n    // https://developer.nvidia.com/gpugems/gpugems2/part-ii-shading-lighting-and-shadows/chapter-16-accurate-atmospheric-scattering\n    //\n    // Further modifications by HERE\n    //\n    AtmosphereColor computeSkyAtmosphere(vec3 v3Pos, vec3 vLightDir, bool dynamicLighting)\n    {\n        // Unpack attributes\n        float fInnerRadius = u_atmosphereEnv.x;\n        float fOuterRadius = u_atmosphereEnv.y;\n        float fCameraHeight = u_atmosphereEnv.z;\n\n        // All that may be const or define(s) at further optimization:\n        float fScale = 1.0 / (fOuterRadius - fInnerRadius);\n        float fScaleOverScaleDepth = (fScale / RayleighScaleDepth);\n        float fCameraHeight2 = fCameraHeight * fCameraHeight;\n        float fOuterRadius2 = fOuterRadius * fOuterRadius;\n\n        // Get the ray from the camera to the vertex and its length (which is the far point of the ray passing through the atmosphere)\n        vec3 v3Ray = v3Pos - u_eyePositionWorld;\n        float fFar = length(v3Ray);\n        v3Ray /= fFar;\n\n    #ifdef CAMERA_IN_SPACE\n\n        // Calculate the closest intersection of the ray with the outer\n        // atmosphere, this is the first point of the ray passing through the atmosphere dome.\n        float fNear = getNearSphereIntersect(u_eyePositionWorld, v3Ray, fCameraHeight2, fOuterRadius2);\n        // Make far relative to first atmosphere intersection\n        fFar -= fNear;\n\n        // Compute the ray's starting position within the atmosphere, then\n        // calculate its scattering offset\n        vec3 v3Start = u_eyePositionWorld + v3Ray * fNear;\n\n        float fStartAngle = dot(v3Ray, v3Start) / fOuterRadius;\n        float fStartDepth = exp(-1.0 / RayleighScaleDepth );\n        float fStartOffset = fStartDepth * scale(fStartAngle);\n\n    #else // CAMERA_IN_ATMOSPHERE\n\n        // The ray starts already in atmosphere\n        vec3 v3Start = u_eyePositionWorld;\n        float height = length(v3Start);\n        float depth = exp(fScaleOverScaleDepth * (fInnerRadius - fCameraHeight));\n        float fStartAngle = dot(v3Ray, v3Start) / height;\n        float fStartOffset = depth * scale(fStartAngle);\n\n    #endif\n\n        // Initialize the scattering loop variables\n        float fSampleLength = fFar / fSamples;\n        float fScaledLength = fSampleLength * fScale;\n        vec3 v3SampleRay = v3Ray * fSampleLength;\n        vec3 v3SamplePoint = v3Start + v3SampleRay * 0.5;\n\n        // Now loop through the sample rays\n        vec3 v3BaseColor = vec3(0.0);\n        vec3 v3Attenuate = vec3(0.0);\n        for(int i=0; i < nSamples; i++)\n        {\n            float height = length(v3SamplePoint);\n            float depth = exp(fScaleOverScaleDepth * (fInnerRadius - height));\n            float fLightAngle = dot(vLightDir, v3SamplePoint) / height;\n            float fCameraAngle = dot(v3Ray, v3SamplePoint) / height;\n            float fScatter = (fStartOffset + depth * (scale(fLightAngle) - scale(fCameraAngle)));\n            v3Attenuate = exp(-fScatter * (InvWavelength * Kr4PI + Km4PI));\n            v3BaseColor += v3Attenuate * (depth * fScaledLength);\n            v3SamplePoint += v3SampleRay;\n        }\n\n        // Scale the Mie and Rayleigh colors and set up output of the function\n        AtmosphereColor color;\n        color.mie = v3BaseColor * KmESun;\n        color.rayleigh = v3BaseColor * (InvWavelength * KrESun);\n        return color;\n    }\n\n    void main(void)\n    {\n        float fLightMode = u_atmosphereEnv.w;\n        bool bDynamicLight = fLightMode != 0.0;\n\n        vec3 vLightDir = conditionalBranchFree(bDynamicLight,\n            u_lightDirectionWorld,\n            u_eyePositionWorld);\n        vLightDir = normalize(vLightDir);\n\n        AtmosphereColor atmColor = computeSkyAtmosphere(position.xyz, vLightDir, bDynamicLight);\n        v_mieColor = atmColor.mie;\n        v_rayleighColor = atmColor.rayleigh;\n        v_vertToCamera = u_eyePositionWorld - position.xyz;\n\n        gl_Position = u_modelViewProjection * position;\n    }\n    `,\n\n    fragmentShader: `\n    // Because of harsh light distribution the exposure correction is always enabled for the sky.\n    #define CORRECT_EXPOSURE 1\n\n    precision highp float;\n    precision highp int;\n\n    #ifdef CORRECT_COLOR\n    uniform vec3 u_hsvCorrection; // Hue, saturation, brightness\n    #endif\n\n    uniform vec4 u_atmosphereEnv; // Atmosphere inner and outer radius, camera height, light mode\n    uniform vec3 u_eyePositionWorld;\n    uniform vec3 u_lightDirectionWorld;\n\n    const float g = -0.95;\n    const float g2 = g * g;\n\n    varying vec3 v_rayleighColor;\n    varying vec3 v_mieColor;\n    varying vec3 v_vertToCamera;\n\n    ${AtmosphereShaderChunks.atmosphere_common_utils}\n    ${AtmosphereShaderChunks.atmosphere_fragment_utils}\n\n    void main(void)\n    {\n        float fInnerRadius = u_atmosphereEnv.x;\n        float fOuterRadius = u_atmosphereEnv.y;\n        float fCameraHeight = u_atmosphereEnv.z;\n        float fLightMode = u_atmosphereEnv.w;\n        bool bDynamicLight = fLightMode != 0.0;\n\n        vec3 vLightDir = conditionalBranchFree(bDynamicLight,\n            u_lightDirectionWorld,\n            u_eyePositionWorld);\n        vLightDir = normalize(vLightDir);\n\n        // NOTE:\n        // For better precision normalization may be added on fragment (for mobile devices)\n        // while in vertex shader may be left un-normalized\n        // dot(vLightDir, normalize(v_vertToCamera)) / length(v_vertToCamera);\n        float fCosAngle = dot(vLightDir, v_vertToCamera) / length(v_vertToCamera);\n        float fRayleighPhase = 0.75 * (1.0 + fCosAngle * fCosAngle);\n        float fMiePhase = 1.5 * ((1.0 - g2) / (2.0 + g2)) * (1.0 + fCosAngle * fCosAngle) / pow(1.0 + g2 - 2.0 * g * fCosAngle, 1.5);\n\n        vec3 cRgb = fRayleighPhase * v_rayleighColor + fMiePhase * v_mieColor;\n\n        // Sky produces very harsh lighting effect so exposure correction is always enabled.\n    #if !defined(HDR_FRAME_BUFFER) && defined(CORRECT_EXPOSURE)\n        // Exposure factor may be exposed to uniform variable.\n        cRgb = correctExposure(cRgb, 2.0);\n    #endif\n\n    #ifdef CORRECT_COLOR\n        cRgb = correctColor(cRgb, u_hsvCorrection);\n    #endif\n\n        // Alter alpha based on how close the viewer is to the ground (1.0 = on ground, 0.0 = at edge of atmosphere)\n        float fAtmosphereAlpha = clamp((fOuterRadius - fCameraHeight) /\n            (fOuterRadius - fInnerRadius), 0.0, 1.0);\n\n        // Alter alpha based on time of day (0.0 = night , 1.0 = day)\n        float fNightAlpha = conditionalBranchFree(bDynamicLight,\n            clamp(dot(normalize(u_eyePositionWorld), vLightDir), 0.0, 1.0),\n            1.0);\n        fAtmosphereAlpha *= pow(fNightAlpha, 0.5);\n\n        gl_FragColor = vec4(cRgb, mix(cRgb.b, 1.0, fAtmosphereAlpha));\n    }\n    `\n};\n\nexport class SkyAtmosphereMaterial extends THREE.RawShaderMaterial {\n    constructor(params?: any) {\n        // Import shader chunks\n        const defines: { [key: string]: any } = {};\n        defines.CAMERA_IN_SPACE = \"\";\n\n        const shaderParams = {\n            name: \"SkyAtmosphereMaterial\",\n            vertexShader: SkyAtmosphereShader.vertexShader,\n            fragmentShader: SkyAtmosphereShader.fragmentShader,\n            uniforms: SkyAtmosphereShader.uniforms,\n            transparent: true,\n            depthTest: true,\n            depthWrite: false,\n            side: THREE.BackSide,\n            blending: THREE.NormalBlending,\n            fog: false\n        };\n        super(shaderParams);\n    }\n\n    setDynamicLighting(enableLighting: boolean) {\n        this.uniforms.u_atmosphereEnv.value.w = enableLighting ? 1.0 : 0.0;\n    }\n\n    /**\n     * Set maximum outer radius of atmosphere.\n     *\n     * @default [[EarthConstants.EQUATORIAL_RADIUS]] * 1.025\n     */\n    set outerRadius(radius: number) {\n        this.uniforms.u_atmosphereEnv.value.y = radius;\n    }\n\n    get outerRadius(): number {\n        return this.uniforms.u_atmosphereEnv.value.y;\n    }\n\n    /**\n     * Set maximum inner radius of atmosphere.\n     *\n     * @default [[EarthConstants.EQUATORIAL_RADIUS]].\n     */\n    set innerRadius(radius: number) {\n        this.uniforms.u_atmosphereEnv.value.x = radius;\n    }\n\n    get innerRadius(): number {\n        return this.uniforms.u_atmosphereEnv.value.x;\n    }\n\n    /**\n     * Updates the uniform data of a material used to render an atmosphere.\n     *\n     * This includes only uniforms that may change frame by frame, other uniforms are\n     * accessed with convenient material setters and getters.\n     *\n     * @param shaderMaterial Material which uniforms will be updated.\n     * @param matrixWorldInverse Inverse of world matrix used to position the atmosphere dome.\n     * @param lightDirection The light directional vector in world space.\n     * @param camera Camera used in rendering.\n     */\n    updateUniforms(\n        shaderMaterial: THREE.ShaderMaterial,\n        object: THREE.Object3D,\n        camera: THREE.Camera,\n        lightDirection: THREE.Vector3\n    ): void {\n        const cameraInfo = this.getCameraInfo(object, camera);\n\n        if (shaderMaterial !== undefined && shaderMaterial.isMaterial) {\n            if (\n                shaderMaterial.uniforms &&\n                shaderMaterial.uniforms.u_atmosphereEnv &&\n                shaderMaterial.uniforms.u_hsvCorrection &&\n                shaderMaterial.uniforms.u_eyePositionWorld &&\n                shaderMaterial.uniforms.u_modelViewProjection &&\n                shaderMaterial.uniforms.u_lightDirectionWorld\n            ) {\n                const eyePos = cameraInfo.eyePos;\n                const mvp = cameraInfo.modelViewProjection;\n                const cameraHeight = cameraInfo.eyeHeight;\n\n                shaderMaterial.uniforms.u_eyePositionWorld.value.copy(eyePos);\n                shaderMaterial.uniforms.u_modelViewProjection.value.copy(mvp);\n\n                shaderMaterial.uniforms.u_atmosphereEnv.value.z = cameraHeight;\n                shaderMaterial.uniforms.u_lightDirectionWorld.value = lightDirection.clone();\n\n                const cameraInSpace = cameraHeight > this.outerRadius;\n                const needsUpdate0 = setShaderDefine(\n                    shaderMaterial.defines,\n                    \"CAMERA_IN_SPACE\",\n                    cameraInSpace\n                );\n                const needsUpdate1 = setShaderDefine(\n                    shaderMaterial.defines,\n                    \"CAMERA_IN_ATMOSPHERE\",\n                    !cameraInSpace\n                );\n                shaderMaterial.needsUpdate = needsUpdate0 || needsUpdate1;\n            } else {\n                throw Error(\"Atmosphere material has missing uniforms\");\n            }\n        } else {\n            throw Error(\"Wrong object used, only Material objects are supported\");\n        }\n    }\n\n    /*\n     * Calculate camera position used in vertex shader of atmosphere materials.\n     *\n     * @param object\n     * @param camera Camera used to get the eye position.\n     */\n    private getCameraInfo(\n        object: THREE.Object3D,\n        camera: THREE.Camera,\n        reverse: boolean = false\n    ): { modelViewProjection: THREE.Matrix4; eyePos: THREE.Vector3; eyeHeight: number } {\n        if (reverse) {\n            const modelMatrix = new THREE.Matrix4().identity();\n            const viewMatrix = new THREE.Matrix4().getInverse(object.matrixWorld).transpose();\n            const projectionMatrix = camera.projectionMatrix;\n\n            const mvpMatrix = new THREE.Matrix4();\n            // MVP = Projection * View * Model\n            mvpMatrix.multiplyMatrices(viewMatrix, modelMatrix);\n            mvpMatrix.multiplyMatrices(projectionMatrix, mvpMatrix);\n\n            const eyePos = new THREE.Vector3();\n            object.getWorldPosition(eyePos);\n            const objectPos = new THREE.Vector3();\n            camera.getWorldPosition(objectPos);\n            const eyeHeight = objectPos.distanceTo(eyePos);\n            return {\n                modelViewProjection: mvpMatrix,\n                eyePos,\n                eyeHeight\n            };\n        } else {\n            const modelMatrix = object.matrixWorld;\n            const viewMatrix = camera.matrixWorldInverse;\n            const projectionMatrix = camera.projectionMatrix;\n\n            const mvpMatrix = new THREE.Matrix4();\n            // MVP = Projection * View * Model\n            mvpMatrix.multiplyMatrices(viewMatrix, modelMatrix);\n            mvpMatrix.multiplyMatrices(projectionMatrix, mvpMatrix);\n\n            const eyePos = new THREE.Vector3();\n            camera.getWorldPosition(eyePos);\n            const objectPos = new THREE.Vector3();\n            object.getWorldPosition(objectPos);\n            const eyeHeight = objectPos.distanceTo(eyePos);\n            // Normally we would return simply camera position, but since camera is not moving in\n            // the globe view only the world, we need to calculate eye relative to object position.\n            eyePos.sub(objectPos);\n            return {\n                modelViewProjection: mvpMatrix,\n                eyePos,\n                eyeHeight\n            };\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { LineCaps, LineDashes } from \"@here/harp-datasource-protocol\";\nimport * as THREE from \"three\";\nimport { DisplacementFeature, DisplacementFeatureParameters } from \"./DisplacementFeature\";\nimport { FadingFeature, FadingFeatureParameters } from \"./MapMeshMaterials\";\nimport linesShaderChunk, { LineCapsModes } from \"./ShaderChunks/LinesChunks\";\nimport {\n    enforceBlending,\n    getShaderMaterialDefine,\n    setShaderDefine,\n    setShaderMaterialDefine\n} from \"./Utils\";\n\nconst LineCapsDefinesMapping: { [key in LineCaps]: number } = {\n    None: LineCapsModes.CAPS_NONE,\n    Square: LineCapsModes.CAPS_SQUARE,\n    Round: LineCapsModes.CAPS_ROUND,\n    TriangleIn: LineCapsModes.CAPS_TRIANGLE_IN,\n    TriangleOut: LineCapsModes.CAPS_TRIANGLE_OUT\n};\n\nconst DefinesLineCapsMapping: { [key: number]: LineCaps } = Object.keys(\n    LineCapsDefinesMapping\n).reduce((r, lineCapsName) => {\n    const defineKey = lineCapsName as keyof typeof LineCapsDefinesMapping;\n    const defineValue: number = LineCapsDefinesMapping[defineKey];\n    r[defineValue] = defineKey;\n    return r;\n}, ({} as any) as { [key: number]: LineCaps });\n\nexport enum LineDashesModes {\n    DASHES_SQUARE = 0,\n    DASHES_ROUND,\n    DASHES_DIAMOND\n}\n\nconst LineDashesDefinesMapping: { [key in LineDashes]: number } = {\n    Square: LineDashesModes.DASHES_SQUARE,\n    Round: LineDashesModes.DASHES_ROUND,\n    Diamond: LineDashesModes.DASHES_DIAMOND\n};\n\nconst DefinesLineDashesMapping: { [key: number]: LineDashes } = Object.keys(\n    LineDashesDefinesMapping\n).reduce((r, lineDashesName) => {\n    const defineKey = lineDashesName as keyof typeof LineDashesDefinesMapping;\n    const defineValue: number = LineDashesDefinesMapping[defineKey];\n    r[defineValue] = defineKey;\n    return r;\n}, ({} as any) as { [key: number]: LineDashes });\n\n/**\n * The vLength contains the actual line length, it's needed for the creation of line caps by\n * detecting line ends. `vLength == vExtrusionCoord.x + lineWidth * 2`\n */\n/**\n * The vExtrusionStrength relies on the edges of the lines. Represents how far the current point was\n * extruded on the edges because of the current angle. Needed for preventing line caps artifacts on\n * sharp line edges. For example, on sharp edges, some vertices can be extruded much further than\n * the full line length.\n */\n\nconst tmpColor = new THREE.Color();\nconst vertexSource: string = `\n#define SEGMENT_OFFSET 0.1\n\nattribute vec3 extrusionCoord;\nattribute vec3 position;\nattribute vec4 bitangent;\nattribute vec3 tangent;\nattribute vec2 uv;\nattribute vec3 normal;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform float extrusionWidth;\nuniform float outlineWidth;\nuniform float offset;\nuniform vec2 drawRange;\n\n#ifdef USE_DISPLACEMENTMAP\nuniform sampler2D displacementMap;\n#endif\n\n#ifdef USE_TILE_CLIP\nvarying vec3 vPosition;\n#endif\nvarying vec3 vRange;\nvarying vec4 vCoords;\n#ifdef USE_COLOR\nattribute vec3 color;\nvarying vec3 vColor;\n#endif\n\n#ifdef USE_FADING\n#include <fading_pars_vertex>\n#endif\n\n#include <fog_pars_vertex>\n\n#include <extrude_line_vert_func>\n\nvoid main() {\n    // Calculate the segment.\n    vec2 segment = abs(extrusionCoord.xy) - SEGMENT_OFFSET;\n    float segmentPos = sign(extrusionCoord.x) / 2.0 + 0.5;\n\n    // Calculate the vertex position inside the line (segment) and extrusion direction and factor.\n    float linePos = mix(segment.x, segment.y, segmentPos);\n    vec2 extrusionDir = sign(extrusionCoord.xy);\n    // Precompute to avoid computing multiple times\n    float tanHalfAngle = tan(bitangent.w / 2.0);\n    float extrusionFactor = extrusionDir.y * tanHalfAngle;\n\n    // Calculate the extruded vertex position (and scale the extrusion direction).\n    vec3 pos = extrudeLine(\n        position, linePos, extrusionWidth + outlineWidth, bitangent, tangent, tanHalfAngle,\n        extrusionDir);\n\n    // Store the normalized extrusion coordinates in vCoords (with their ranges in vRange).\n    vRange = vec3(extrusionCoord.z, extrusionWidth, extrusionFactor);\n    vCoords = vec4(extrusionDir / vRange.xy, segment / vRange.x);\n\n    // Adjust the segment to fit the drawRange.\n    float capDist = (extrusionWidth + outlineWidth) / extrusionCoord.z;\n    if ((vCoords.w + capDist) < drawRange.x || (vCoords.z - capDist) > drawRange.y) {\n        vCoords.zw += 1.0;\n    }\n    if (vCoords.z < drawRange.x) {\n        vCoords.zw += vec2(drawRange.x - vCoords.z, 0.0);\n    }\n    if (vCoords.w > drawRange.y) {\n        vCoords.zw -= vec2(0.0, vCoords.w - drawRange.y);\n    }\n\n    // Transform position.\n    #ifdef USE_DISPLACEMENTMAP\n    pos += normalize( normal ) * texture2D( displacementMap, uv ).x;\n    #endif\n\n    // Shift the line based on the offset, where the bitangent is the cross product of the average\n    // of the two direction vectors (the previous and next segment directions) and the normal of\n    // the line (facing into the sky). The w component is the angle between the two segments.\n    // Note, we need to take the angle into consideration, so we use trigonometry to calculate how\n    // much we need to extend the offset. Note, orthough this looks complicated we are doing this\n    // in the vertex shader, so it should not cause a performance issue.\n    pos += bitangent.xyz * offset * sqrt(1.0 + pow(abs(tanHalfAngle), 2.0));\n\n    vec4 mvPosition = modelViewMatrix * vec4(pos, 1.0);\n    gl_Position = projectionMatrix * mvPosition;\n\n    // Pass extruded position to fragment shader.\n    #ifdef USE_TILE_CLIP\n    vPosition = pos;\n    #endif\n\n    #ifdef USE_COLOR\n    // Pass vertex color to fragment shader.\n    vColor = color;\n    #endif\n\n    #ifdef USE_FADING\n    #include <fading_vertex>\n    #endif\n\n    #include <fog_vertex>\n}`;\n\nconst fragmentSource: string = `\nprecision highp float;\nprecision highp int;\n\nuniform vec3 diffuse;\nuniform vec3 outlineColor;\nuniform float opacity;\nuniform float extrusionWidth;\nuniform float outlineWidth;\nuniform vec2 tileSize;\nuniform vec2 drawRange;\n\n#ifdef USE_DASHED_LINE\nuniform float dashSize;\nuniform float gapSize;\nuniform vec3 dashColor;\n\n#define DASHES_SQUARE ${LineDashesModes.DASHES_SQUARE}\n#define DASHES_ROUND ${LineDashesModes.DASHES_ROUND}\n#define DASHES_DIAMOND ${LineDashesModes.DASHES_DIAMOND}\n#endif\n\n#ifdef USE_TILE_CLIP\nvarying vec3 vPosition;\n#endif\n\nvarying vec3 vRange;\nvarying vec4 vCoords;\n#ifdef USE_COLOR\nvarying vec3 vColor;\n#endif\n\n#include <round_edges_and_add_caps>\n#include <tile_clip_func>\n\n#ifdef USE_FADING\n#include <fading_pars_fragment>\n#endif\n\n#include <fog_pars_fragment>\n\nvoid main() {\n    float alpha = opacity;\n    vec3 outputDiffuse = diffuse;\n\n    #ifdef USE_TILE_CLIP\n    tileClip(vPosition.xy, tileSize);\n    #endif\n\n    // Calculate distance to center (0.0: lineCenter, 1.0: lineEdge).\n    float distToCenter = roundEdgesAndAddCaps(vCoords, vRange);\n    // Calculate distance to edge (-1.0: lineCenter, 0.0: lineEdge).\n    float distToEdge = distToCenter - (extrusionWidth + outlineWidth) / extrusionWidth;\n\n    // Decrease the line opacity by the distToEdge, making the transition steeper when the slope\n    // of distToChange increases (i.e. the line is further away).\n    float width = fwidth(distToEdge);\n    alpha *= (1.0 - smoothstep(-width, width, distToEdge));\n\n    #ifdef USE_DASHED_LINE\n    // Compute the distance to the dash origin (0.0: dashOrigin, 1.0: dashEnd, (d+g)/d: gapEnd).\n    float d = dashSize / vRange.x;\n    float g = gapSize / vRange.x;\n    float distToDashOrigin = mod(vCoords.x, d + g) / d;\n\n    // Compute distance to dash edge (0.5: dashCenter, 0.0: dashEdge) and compute the\n    // dashBlendFactor similarly on how we did it for the line opacity.\n    float distToDashEdge = 0.5 - distance(distToDashOrigin, (d + g) / d * 0.5);\n    #if DASHES_MODE == DASHES_ROUND\n    distToDashEdge = 0.5 - distance(vec2(distToCenter * 0.5, distToDashEdge), vec2(0.0, 0.5));\n    #elif DASHES_MODE == DASHES_DIAMOND\n    distToDashEdge -= distToCenter * 0.5;\n    #endif\n    float dashWidth = fwidth(distToDashEdge);\n    float dashBlendFactor = 1.0 - smoothstep(-dashWidth, dashWidth, distToDashEdge);\n\n    #ifdef USE_DASH_COLOR\n    outputDiffuse = mix(diffuse, dashColor, dashBlendFactor);\n    #endif\n    #endif\n\n    #ifdef USE_OUTLINE\n    // Calculate distance to outline (0.0: lineEdge, outlineWidth/lineWidth: outlineEdge) and\n    // compute the outlineBlendFactor (used to mix line and outline colors).\n    float distToOutline = distToCenter - 1.0;\n    float outlineWidth = fwidth(distToOutline);\n    float outlineBlendFactor = smoothstep(-outlineWidth, outlineWidth, distToOutline);\n\n    // Mix the colors using the different computed factors.\n    #if defined(USE_DASHED_LINE) && !defined(USE_DASH_COLOR)\n    float colorBlendFactor = smoothstep(-1.0, 1.0, dashBlendFactor - outlineBlendFactor);\n    outputDiffuse = mix(\n      mix(\n        mix(outlineColor, diffuse, colorBlendFactor),\n        outputDiffuse,\n        dashBlendFactor\n      ),\n      outlineColor,\n      outlineBlendFactor\n    );\n    #else\n    outputDiffuse = mix(outputDiffuse, outlineColor, outlineBlendFactor);\n    #endif\n    #endif\n\n    #if defined(USE_DASHED_LINE) && !defined(USE_DASH_COLOR)\n    // Multiply the alpha by the dashBlendFactor.\n    #if defined(USE_OUTLINE)\n    alpha *= clamp(dashBlendFactor + outlineBlendFactor, 0.0, 1.0);\n    #else\n    alpha *= 1.0 - dashBlendFactor;\n    #endif\n    #endif\n\n    #ifdef USE_COLOR\n    gl_FragColor = vec4( outputDiffuse * vColor, alpha );\n    #else\n    gl_FragColor = vec4( outputDiffuse, alpha );\n    #endif\n\n    #include <fog_fragment>\n\n    #ifdef USE_FADING\n    #include <fading_fragment>\n    #endif\n}`;\n\n/**\n * Parameters used when constructing a new [[SolidLineMaterial]].\n */\nexport interface SolidLineMaterialParameters\n    extends FadingFeatureParameters,\n        DisplacementFeatureParameters {\n    /**\n     * Line color.\n     */\n    color?: number | string;\n\n    /**\n     * Line outline color.\n     */\n    outlineColor?: number | string;\n\n    /**\n     * Enables/Disable depth test.\n     */\n    depthTest?: boolean;\n\n    /**\n     * Enables/Disable depth write.\n     */\n    depthWrite?: boolean;\n\n    /**\n     * `SolidLineMaterial` extends the ThreeJS `RawShaderMaterial` that does not update fog at\n     * runtime, so instead of recompiling everything we pass it in the constructor.\n     */\n    fog?: boolean;\n\n    /**\n     * Line width.\n     */\n    lineWidth?: number;\n\n    /**\n     * Outline width.\n     */\n    outlineWidth?: number;\n\n    /**\n     * Line opacity.\n     */\n    opacity?: number;\n\n    /**\n     * Describes line caps type (`\"None\"`, `\"Round\"`, `\"Square\"`, `\"TriangleOut\"`, `\"TriangleIn\"`).\n     * Default is `\"Round\"`.\n     */\n    caps?: LineCaps;\n\n    /**\n     * Describes the starting drawing position for the line (in the range [0...1]).\n     * Default is `0.0`.\n     */\n    drawRangeStart?: number;\n\n    /**\n     * Describes the ending drawing position for the line (in the range [0...1]).\n     * Default is `1.0`.\n     */\n    drawRangeEnd?: number;\n\n    /**\n     * Describes line dash type (`\"Round\"`, `\"Square\"`, `\"Diamond\"`).\n     * Default is `\"Square\"`.\n     */\n    dashes?: LineDashes;\n\n    /**\n     * Line dashes color.\n     */\n    dashColor?: number | string;\n\n    /**\n     * Size of the dashed segments.\n     */\n    dashSize?: number;\n\n    /**\n     * Size of the gaps between dashed segments.\n     */\n    gapSize?: number;\n\n    /**\n     * How much to offset in world units.\n     */\n    offset?: number;\n}\n\n/**\n * Material designed to render solid variable-width lines.\n */\nexport class SolidLineMaterial extends THREE.RawShaderMaterial\n    implements DisplacementFeature, FadingFeature {\n    static DEFAULT_COLOR: number = 0xff0000;\n    static DEFAULT_WIDTH: number = 1.0;\n    static DEFAULT_OUTLINE_WIDTH: number = 0.0;\n    static DEFAULT_OPACITY: number = 1.0;\n    static DEFAULT_DRAW_RANGE_START: number = 0.0;\n    static DEFAULT_DRAW_RANGE_END: number = 1.0;\n    static DEFAULT_DASH_SIZE: number = 1.0;\n    static DEFAULT_GAP_SIZE: number = 1.0;\n    static DEFAULT_OFFSET: number = 0.0;\n\n    /**\n     * @hidden\n     * Material properties overrides.\n     */\n    private m_fog: boolean;\n    private m_opacity: number;\n\n    /**\n     * Constructs a new `SolidLineMaterial`.\n     *\n     * @param params `SolidLineMaterial` parameters.\n     */\n    constructor(params?: SolidLineMaterialParameters) {\n        Object.assign(THREE.ShaderChunk, linesShaderChunk);\n\n        FadingFeature.patchGlobalShaderChunks();\n\n        // Setup default defines.\n        const defines: { [key: string]: any } = {\n            CAPS_MODE: LineCapsModes.CAPS_ROUND,\n            DASHES_MODE: LineDashesModes.DASHES_SQUARE\n        };\n\n        // Prepare defines based on params passed in, before super class c-tor, this ensures\n        // proper set for shader compilation, without need to re-compile.\n        let fogParam = true;\n        let opacityParam = 1.0;\n        let displacementMap;\n        if (params !== undefined) {\n            fogParam = params.fog === true;\n            if (fogParam) {\n                setShaderDefine(defines, \"USE_FOG\", true);\n            }\n            opacityParam = params.opacity !== undefined ? params.opacity : opacityParam;\n            displacementMap = params.displacementMap;\n            if (displacementMap !== undefined) {\n                setShaderDefine(defines, \"USE_DISPLACEMENTMAP\", true);\n            }\n            const hasOutline = params.outlineWidth !== undefined && params.outlineWidth > 0;\n            if (hasOutline) {\n                setShaderDefine(defines, \"USE_OUTLINE\", true);\n            }\n        }\n\n        const shaderParams: THREE.ShaderMaterialParameters = {\n            name: \"SolidLineMaterial\",\n            vertexShader: vertexSource,\n            fragmentShader: fragmentSource,\n            uniforms: THREE.UniformsUtils.merge([\n                {\n                    diffuse: new THREE.Uniform(new THREE.Color(SolidLineMaterial.DEFAULT_COLOR)),\n                    dashColor: new THREE.Uniform(new THREE.Color(SolidLineMaterial.DEFAULT_COLOR)),\n                    outlineColor: new THREE.Uniform(\n                        new THREE.Color(SolidLineMaterial.DEFAULT_COLOR)\n                    ),\n                    extrusionWidth: new THREE.Uniform(SolidLineMaterial.DEFAULT_WIDTH),\n                    outlineWidth: new THREE.Uniform(SolidLineMaterial.DEFAULT_OUTLINE_WIDTH),\n                    offset: new THREE.Uniform(SolidLineMaterial.DEFAULT_OFFSET),\n                    opacity: new THREE.Uniform(SolidLineMaterial.DEFAULT_OPACITY),\n                    tileSize: new THREE.Uniform(new THREE.Vector2()),\n                    fadeNear: new THREE.Uniform(FadingFeature.DEFAULT_FADE_NEAR),\n                    fadeFar: new THREE.Uniform(FadingFeature.DEFAULT_FADE_FAR),\n                    displacementMap: new THREE.Uniform(\n                        displacementMap !== undefined ? displacementMap : new THREE.Texture()\n                    ),\n                    drawRange: new THREE.Uniform(\n                        new THREE.Vector2(\n                            SolidLineMaterial.DEFAULT_DRAW_RANGE_START,\n                            SolidLineMaterial.DEFAULT_DRAW_RANGE_END\n                        )\n                    ),\n                    dashSize: new THREE.Uniform(SolidLineMaterial.DEFAULT_DASH_SIZE),\n                    gapSize: new THREE.Uniform(SolidLineMaterial.DEFAULT_GAP_SIZE)\n                },\n                // We need the fog uniforms available when we use `fog` setter as the internal\n                // recompilation cannot add or remove uniforms.\n                THREE.UniformsLib.fog\n            ]),\n            defines,\n            // No need to pass overridden `fog` and `opacity` params they will be set\n            // after super c-tor call.\n            fog: fogParam,\n            opacity: opacityParam\n        };\n        super(shaderParams);\n        // Required to satisfy compiler error if fields has no initializer or are not definitely\n        // assigned in the constructor, this also mimics ShaderMaterial set of defaults\n        // for overridden props.\n        this.m_fog = fogParam;\n        this.m_opacity = opacityParam;\n\n        enforceBlending(this);\n        this.extensions.derivatives = true;\n\n        // Apply initial parameter values.\n        if (params !== undefined) {\n            if (params.color !== undefined) {\n                tmpColor.set(params.color as any);\n                this.color = tmpColor;\n            }\n            if (params.outlineColor !== undefined) {\n                tmpColor.set(params.outlineColor as any);\n                this.outlineColor = tmpColor;\n            }\n            if (params.lineWidth !== undefined) {\n                this.lineWidth = params.lineWidth;\n            }\n            if (params.outlineWidth !== undefined) {\n                this.outlineWidth = params.outlineWidth;\n            }\n            if (params.opacity !== undefined) {\n                this.opacity = params.opacity;\n            }\n            if (params.depthTest !== undefined) {\n                this.depthTest = params.depthTest;\n            }\n            if (params.depthWrite !== undefined) {\n                this.depthWrite = params.depthWrite;\n            }\n            if (params.fadeNear !== undefined) {\n                this.fadeNear = params.fadeNear;\n            }\n            if (params.fadeFar !== undefined) {\n                this.fadeFar = params.fadeFar;\n            }\n            if (params.displacementMap !== undefined) {\n                this.displacementMap = params.displacementMap;\n            }\n            if (params.caps !== undefined) {\n                this.caps = params.caps;\n            }\n            if (params.drawRangeStart !== undefined) {\n                this.drawRangeStart = params.drawRangeStart;\n            }\n            if (params.drawRangeEnd !== undefined) {\n                this.drawRangeEnd = params.drawRangeEnd;\n            }\n            if (params.dashes !== undefined) {\n                this.dashes = params.dashes;\n            }\n            if (params.dashColor !== undefined) {\n                tmpColor.set(params.dashColor as any);\n                this.dashColor = tmpColor;\n            }\n            if (params.dashSize !== undefined) {\n                this.dashSize = params.dashSize;\n            }\n            if (params.gapSize !== undefined) {\n                this.gapSize = params.gapSize;\n            }\n            if (params.fog !== undefined) {\n                this.fog = params.fog;\n            }\n            this.offset = params.offset ?? 0;\n        }\n        // ShaderMaterial overrides requires invalidation cause super c-tor may set this\n        // properties before related `defines` and `uniforms` were created.\n        this.invalidateFog();\n        this.invalidateOpacity();\n    }\n\n    /**\n     * Overrides THREE.Material.fog flag to add support for custom shader.\n     *\n     * @param enable Whether we want to enable the fog.\n     */\n    set fog(enable: boolean) {\n        this.m_fog = enable;\n        // Function may be called from THREE.js cause we override setter,\n        // in this case defines are not yet initialized and require late invalidation in\n        // SolidLineMaterial c-tor.\n        if (this.defines !== undefined) {\n            setShaderMaterialDefine(this, \"USE_FOG\", enable);\n        }\n    }\n\n    /**\n     * Checks if fog is enabled.\n     */\n    get fog(): boolean {\n        return this.m_fog && getShaderMaterialDefine(this, \"USE_FOG\") === true;\n    }\n\n    /**\n     * Sets the offset used to shift the line in world space perpendicular to the direction.\n     */\n    set offset(offset: number) {\n        this.uniforms.offset.value = offset;\n    }\n\n    /**\n     * @return The offset to shift the line in world space perpendicular to the direction.\n     */\n    get offset(): number {\n        return this.uniforms.offset.value as number;\n    }\n\n    /**\n     * The method to call to recompile a material to enable/disable outline effect\n     *\n     * @param enable Whether we want to use outline.\n     */\n    set outline(enable: boolean) {\n        setShaderMaterialDefine(this, \"USE_OUTLINE\", enable);\n    }\n\n    /**\n     * Checks if outline is enabled.\n     */\n    get outline(): boolean {\n        return getShaderMaterialDefine(this, \"USE_OUTLINE\") === true;\n    }\n\n    /**\n     * Line opacity.\n     */\n    get opacity(): number {\n        return this.m_opacity;\n    }\n    set opacity(value: number) {\n        this.m_opacity = value;\n        // Setting opacity before uniform being created requires late invalidation,\n        // call to invalidateOpacity() is done at the end of c-tor.\n        if (this.uniforms !== undefined) {\n            this.uniforms.opacity.value = value;\n        }\n    }\n\n    /**\n     * Line color.\n     */\n    get color(): THREE.Color {\n        return this.uniforms.diffuse.value as THREE.Color;\n    }\n    set color(value: THREE.Color) {\n        this.uniforms.diffuse.value.copy(value);\n    }\n\n    /**\n     * Outline color.\n     *\n     * @note The width of outline ([[outlineWidth]]) need to be also set to enable outlining.\n     */\n    get outlineColor(): THREE.Color {\n        return this.uniforms.outlineColor.value as THREE.Color;\n    }\n    set outlineColor(value: THREE.Color) {\n        this.uniforms.outlineColor.value.copy(value);\n    }\n\n    /**\n     * Dash color.\n     *\n     * @note The property [[gapSize]] need to be set to enable dashed line.\n     */\n    get dashColor(): THREE.Color {\n        return this.uniforms.dashColor.value as THREE.Color;\n    }\n    set dashColor(value: THREE.Color) {\n        this.uniforms.dashColor.value.copy(value);\n        setShaderMaterialDefine(this, \"USE_DASH_COLOR\", true);\n    }\n\n    /**\n     * Line width.\n     */\n    get lineWidth(): number {\n        return (this.uniforms.extrusionWidth.value as number) * 2;\n    }\n    set lineWidth(value: number) {\n        this.uniforms.extrusionWidth.value = value / 2;\n    }\n\n    /**\n     * Outline width.\n     */\n    get outlineWidth(): number {\n        return this.uniforms.outlineWidth.value as number;\n    }\n    set outlineWidth(value: number) {\n        this.uniforms.outlineWidth.value = value;\n        this.outline = value > 0.0;\n    }\n\n    /**\n     * Size of the dashed segments.\n     *\n     * @note Ths [[gapSize]] need to be also set to enable dashed line.\n     * @see gapSize.\n     */\n    get dashSize(): number {\n        return this.uniforms.dashSize.value as number;\n    }\n    set dashSize(value: number) {\n        this.uniforms.dashSize.value = value;\n    }\n\n    /**\n     * Size of the gaps between dashed segments.\n     *\n     * @note You may also need to set [[dashSize]].\n     * @see dashSize.\n     */\n    get gapSize(): number {\n        return this.uniforms.gapSize.value as number;\n    }\n    set gapSize(value: number) {\n        this.uniforms.gapSize.value = value;\n        setShaderMaterialDefine(this, \"USE_DASHED_LINE\", value > 0.0);\n    }\n\n    /**\n     * Caps mode.\n     */\n    get caps(): LineCaps {\n        let result: LineCaps = \"Round\";\n        const capsMode = getShaderMaterialDefine(this, \"CAPS_MODE\");\n        // Sanity check if material define is numerical and has direct mapping to LineCaps type.\n        if (typeof capsMode === \"number\" && DefinesLineCapsMapping.hasOwnProperty(capsMode)) {\n            result = DefinesLineCapsMapping[capsMode];\n        }\n        return result;\n    }\n    set caps(value: LineCaps) {\n        // Line caps mode may be set directly from theme, thus we need to check value\n        // for correctness and provide string to define mapping in fragment shader.\n        if (LineCapsDefinesMapping.hasOwnProperty(value)) {\n            setShaderMaterialDefine(this, \"CAPS_MODE\", LineCapsDefinesMapping[value]);\n        }\n    }\n\n    /**\n     * Dashes mode.\n     */\n    get dashes(): LineDashes {\n        let result: LineDashes = \"Square\";\n        const dashesMode = getShaderMaterialDefine(this, \"DASHES_MODE\");\n        // Sanity check if material define is numerical and has direct mapping to LineDashes type.\n        if (typeof dashesMode === \"number\" && DefinesLineDashesMapping.hasOwnProperty(dashesMode)) {\n            result = DefinesLineDashesMapping[dashesMode];\n        }\n        return result;\n    }\n    set dashes(value: LineDashes) {\n        // Line dashes mode may be set directly from theme, thus we need to check value\n        // for correctness and provide string to define mapping in fragment shader.\n        if (LineDashesDefinesMapping.hasOwnProperty(value)) {\n            setShaderMaterialDefine(this, \"DASHES_MODE\", LineDashesDefinesMapping[value]);\n        }\n    }\n\n    get fadeNear(): number {\n        return this.uniforms.fadeNear.value as number;\n    }\n    set fadeNear(value: number) {\n        this.uniforms.fadeNear.value = value;\n    }\n\n    get fadeFar(): number {\n        return this.uniforms.fadeFar.value as number;\n    }\n    set fadeFar(value: number) {\n        this.uniforms.fadeFar.value = value;\n        setShaderMaterialDefine(this, \"USE_FADING\", value > 0.0);\n    }\n\n    get displacementMap(): THREE.Texture | null {\n        return this.uniforms.displacementMap.value;\n    }\n    set displacementMap(map: THREE.Texture | null) {\n        if (this.uniforms.displacementMap.value === map) {\n            return;\n        }\n        this.uniforms.displacementMap.value = map;\n        const useDisplacementMap = map !== null;\n        if (useDisplacementMap) {\n            this.uniforms.displacementMap.value.needsUpdate = true;\n        }\n        setShaderMaterialDefine(this, \"USE_DISPLACEMENTMAP\", useDisplacementMap);\n    }\n\n    get drawRangeStart(): number {\n        return this.uniforms.drawRange.value.x as number;\n    }\n    set drawRangeStart(value: number) {\n        this.uniforms.drawRange.value.x = value;\n    }\n\n    get drawRangeEnd(): number {\n        return this.uniforms.drawRange.value.y as number;\n    }\n    set drawRangeEnd(value: number) {\n        this.uniforms.drawRange.value.y = value;\n    }\n\n    set clipTileSize(tileSize: THREE.Vector2) {\n        this.uniforms.tileSize.value.copy(tileSize);\n        const useTileClip = tileSize.x > 0 && tileSize.y > 0;\n        setShaderMaterialDefine(this, \"USE_TILE_CLIP\", useTileClip);\n    }\n    get clipTileSize(): THREE.Vector2 {\n        return this.uniforms.tileSize.value as THREE.Vector2;\n    }\n\n    private invalidateFog() {\n        if (this.m_fog !== getShaderMaterialDefine(this, \"USE_FOG\")) {\n            setShaderMaterialDefine(this, \"USE_FOG\", this.m_fog);\n        }\n    }\n\n    private invalidateOpacity() {\n        if (this.m_opacity !== this.uniforms.opacity.value) {\n            this.uniforms.opacity.value = this.m_opacity;\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport * as THREE from \"three\";\n\n/**\n * `VignetteShader`.\n */\nexport const VignetteShader: THREE.Shader = {\n    uniforms: {\n        tDiffuse: { value: null },\n        offset: { value: 1.0 },\n        darkness: { value: 1.0 }\n    },\n    vertexShader: `\n        varying vec2 vUv;\n        void main() {\n            vUv = uv;\n            gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        }`,\n    fragmentShader: `\n        uniform float offset;\n        uniform float darkness;\n        uniform sampler2D tDiffuse;\n        varying vec2 vUv;\n        void main() {\n            vec4 texel = texture2D( tDiffuse, vUv );\n            vec2 uv = ( vUv - vec2( 0.5 ) ) * vec2( offset );\n            gl_FragColor = vec4( mix( texel.rgb, vec3( 1.0 - darkness ), dot( uv, uv ) ), texel.a );\n        }`\n};\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    BooleanLiteralExpr,\n    CallExpr,\n    CaseExpr,\n    Env,\n    Expr,\n    ExprScope,\n    ExprVisitor,\n    HasAttributeExpr,\n    InterpolateExpr,\n    LiteralExpr,\n    MatchExpr,\n    NullLiteralExpr,\n    NumberLiteralExpr,\n    ObjectLiteralExpr,\n    StepExpr,\n    StringLiteralExpr,\n    Value,\n    VarExpr\n} from \"./Expr\";\n\nimport { ArrayOperators } from \"./operators/ArrayOperators\";\nimport { CastOperators } from \"./operators/CastOperators\";\nimport { ColorOperators } from \"./operators/ColorOperators\";\nimport { ComparisonOperators } from \"./operators/ComparisonOperators\";\nimport { FeatureOperators } from \"./operators/FeatureOperators\";\nimport { FlowOperators } from \"./operators/FlowOperators\";\nimport { MapOperators } from \"./operators/MapOperators\";\nimport { MathOperators } from \"./operators/MathOperators\";\nimport { MiscOperators } from \"./operators/MiscOperators\";\nimport { ObjectOperators } from \"./operators/ObjectOperators\";\nimport { StringOperators } from \"./operators/StringOperators\";\nimport { TypeOperators } from \"./operators/TypeOperators\";\nimport { VectorOperators } from \"./operators/VectorOperators\";\nimport { RGBA } from \"./RGBA\";\n\nimport * as THREE from \"three\";\nimport { Pixels } from \"./Pixels\";\n\nexport interface OperatorDescriptor {\n    /**\n     * Returns `true` if this operator requires a dynamic execution context (e.g. [\"zoom\"]).\n     */\n    isDynamicOperator?: (call: CallExpr) => boolean;\n\n    /**\n     * Evaluates the given expression.\n     */\n    call: (context: ExprEvaluatorContext, call: CallExpr) => Value;\n\n    /**\n     * Partial evaluate the `call` expression using the given `context`.\n     */\n    partialEvaluate?: (context: ExprEvaluatorContext, call: CallExpr) => Value;\n}\n\nexport interface OperatorDescriptorMap {\n    [name: string]: OperatorDescriptor;\n}\n\nconst operatorDescriptors = new Map<string, OperatorDescriptor>();\n\n/**\n * Promote string literals and values to color and pixel constants.\n *\n * @hidden\n * @internal\n */\nfunction promoteValue(context: ExprEvaluatorContext, expr: Expr): Value {\n    if (expr instanceof StringLiteralExpr) {\n        return expr.promotedValue ?? expr.value;\n    }\n\n    const value = context.evaluate(expr);\n\n    if (typeof value === \"string\") {\n        return RGBA.parse(value) ?? Pixels.parse(value) ?? value;\n    }\n\n    return value;\n}\n\nfunction cubicInterpolate(\n    context: ExprEvaluatorContext,\n    interp: InterpolateExpr,\n    t: number\n): Value {\n    if (t < interp.stops[0][0]) {\n        return promoteValue(context, interp.stops[0][1]);\n    } else if (t >= interp.stops[interp.stops.length - 1][0]) {\n        return promoteValue(context, interp.stops[interp.stops.length - 1][1]);\n    }\n\n    // indices\n    const i1 = interp.stops.findIndex(stop => stop[0] > t);\n    const i0 = Math.max(0, i1 - 1);\n    const iP = i0 === 0 ? i1 : i0 - 1;\n    const iN = i1 < interp.stops.length - 1 ? i1 + 1 : i1 - 1;\n\n    // keys\n    const tP = interp.stops[iP][0];\n    const t0 = interp.stops[i0][0];\n    const t1 = interp.stops[i1][0];\n    const tN = interp.stops[iN][0];\n\n    const dt = (t1 - t0) * 0.5;\n    const wP = dt / (t0 - tP);\n    const wN = dt / (tN - t1);\n    const p = (t - t0) / (t1 - t0);\n    const pp = p * p;\n    const ppp = pp * p;\n\n    // coefficients\n    const cP = -wP * ppp + 2 * wP * pp - wP * p;\n    const c0 = (1 + wP) * ppp + (-1.5 - 2 * wP) * pp + (-0.5 + wP) * p + 1;\n    const c1 = (-1 - wN) * ppp + (1.5 + wN) * pp + 0.5 * p;\n    const cN = wN * ppp - wN * pp;\n\n    // values\n    const vP = promoteValue(context, interp.stops[iP][1]);\n    const v0 = promoteValue(context, interp.stops[i0][1]);\n    const v1 = promoteValue(context, interp.stops[i1][1]);\n    const vN = promoteValue(context, interp.stops[iN][1]);\n\n    if (\n        typeof vP === \"number\" &&\n        typeof v0 === \"number\" &&\n        typeof v1 === \"number\" &&\n        typeof vN === \"number\"\n    ) {\n        return cP * vP + c0 * v0 + c1 * v1 + cN * vN;\n    } else if (\n        vP instanceof RGBA &&\n        v0 instanceof RGBA &&\n        v1 instanceof RGBA &&\n        vN instanceof RGBA\n    ) {\n        return new RGBA(\n            THREE.MathUtils.clamp(cP * vP.r + c0 * v0.r + c1 * v1.r + cN * vN.r, 0, 1),\n            THREE.MathUtils.clamp(cP * vP.g + c0 * v0.g + c1 * v1.g + cN * vN.g, 0, 1),\n            THREE.MathUtils.clamp(cP * vP.b + c0 * v0.b + c1 * v1.b + cN * vN.b, 0, 1),\n            THREE.MathUtils.clamp(cP * vP.a + c0 * v0.a + c1 * v1.a + cN * vN.a, 0, 1)\n        );\n    } else if (\n        vP instanceof Pixels &&\n        v0 instanceof Pixels &&\n        v1 instanceof Pixels &&\n        vN instanceof Pixels\n    ) {\n        return new Pixels(cP * vP.value + c0 * v0.value + c1 * v1.value + cN * vN.value);\n    } else if (\n        vP instanceof THREE.Color &&\n        v0 instanceof THREE.Color &&\n        v1 instanceof THREE.Color &&\n        vN instanceof THREE.Color\n    ) {\n        return new THREE.Color(\n            cP * vP.r + c0 * v0.r + c1 * v1.r + cN * vN.r,\n            cP * vP.g + c0 * v0.g + c1 * v1.g + cN * vN.g,\n            cP * vP.b + c0 * v0.b + c1 * v1.b + cN * vN.b\n        );\n    } else if (\n        vP instanceof THREE.Vector2 &&\n        v0 instanceof THREE.Vector2 &&\n        v1 instanceof THREE.Vector2 &&\n        vN instanceof THREE.Vector2\n    ) {\n        return new THREE.Vector2(\n            cP * vP.x + c0 * v0.x + c1 * v1.x + cN * vN.x,\n            cP * vP.y + c0 * v0.y + c1 * v1.y + cN * vN.y\n        );\n    } else if (\n        vP instanceof THREE.Vector3 &&\n        v0 instanceof THREE.Vector3 &&\n        v1 instanceof THREE.Vector3 &&\n        vN instanceof THREE.Vector3\n    ) {\n        return new THREE.Vector3(\n            cP * vP.x + c0 * v0.x + c1 * v1.x + cN * vN.x,\n            cP * vP.y + c0 * v0.y + c1 * v1.y + cN * vN.y,\n            cP * vP.z + c0 * v0.z + c1 * v1.z + cN * vN.z\n        );\n    } else if (\n        vP instanceof THREE.Vector4 &&\n        v0 instanceof THREE.Vector4 &&\n        v1 instanceof THREE.Vector4 &&\n        vN instanceof THREE.Vector4\n    ) {\n        return new THREE.Vector4(\n            cP * vP.x + c0 * v0.x + c1 * v1.x + cN * vN.x,\n            cP * vP.y + c0 * v0.y + c1 * v1.y + cN * vN.y,\n            cP * vP.z + c0 * v0.z + c1 * v1.z + cN * vN.z,\n            cP * vP.w + c0 * v0.w + c1 * v1.w + cN * vN.w\n        );\n    } else if (Array.isArray(vP) && Array.isArray(v0) && Array.isArray(v1) && Array.isArray(vN)) {\n        const N = vP.length;\n        const r: number[] = [];\n        for (let i = 0; i < N; ++i) {\n            r[i] = cP * vP[i] + c0 * v0[i] + c1 * v1[i] + cN * vN[i];\n        }\n        return r;\n    }\n\n    throw new Error(`failed to interpolate values`);\n}\n\n/*\n * @hidden\n */\nexport class ExprEvaluatorContext {\n    constructor(\n        readonly evaluator: ExprEvaluator,\n        readonly env: Env,\n        readonly scope: ExprScope,\n        readonly cache?: Map<Expr, Value>\n    ) {}\n\n    /**\n     * Evaluate the given expression.\n     *\n     * @param expr The [[Expr]] to evaluate.\n     */\n    evaluate(expr: Expr | undefined) {\n        if (expr === undefined) {\n            throw new Error(\"Failed to evaluate expression\");\n        }\n\n        const cachedResult = this.cache?.get(expr);\n\n        if (cachedResult !== undefined) {\n            return cachedResult;\n        }\n\n        const result = expr.accept(this.evaluator, this);\n        this.cache?.set(expr, result);\n        return result;\n    }\n\n    /**\n     * Wraps the given value in an [[Expr]] if needed.\n     *\n     * @param value\n     */\n    wrapValue(value: Value | Expr): Expr {\n        return Expr.isExpr(value) ? value : LiteralExpr.fromValue(value);\n    }\n}\n\n/**\n * [[ExprEvaluator]] is used to evaluate [[Expr]] in a given environment.\n *\n * @hidden\n */\nexport class ExprEvaluator implements ExprVisitor<Value, ExprEvaluatorContext> {\n    static defineOperator(op: string, builtin: OperatorDescriptor) {\n        operatorDescriptors.set(op, builtin);\n    }\n\n    static defineOperators(builtins: OperatorDescriptorMap) {\n        Object.getOwnPropertyNames(builtins).forEach(p => {\n            this.defineOperator(p, builtins[p]);\n        });\n    }\n\n    /**\n     * Returns the [[OperatorDescriptor]] for the given operator name.\n     * @hidden\n     */\n    static getOperator(op: string): OperatorDescriptor | undefined {\n        return operatorDescriptors.get(op);\n    }\n\n    visitVarExpr(expr: VarExpr, context: ExprEvaluatorContext): Value {\n        const value = context.env.lookup(expr.name);\n        return value !== undefined ? value : null;\n    }\n\n    visitNullLiteralExpr(expr: NullLiteralExpr, context: ExprEvaluatorContext): Value {\n        return null;\n    }\n\n    visitBooleanLiteralExpr(expr: BooleanLiteralExpr, context: ExprEvaluatorContext): Value {\n        return expr.value;\n    }\n\n    visitNumberLiteralExpr(expr: NumberLiteralExpr, context: ExprEvaluatorContext): Value {\n        return expr.value;\n    }\n\n    visitStringLiteralExpr(expr: StringLiteralExpr, context: ExprEvaluatorContext): Value {\n        return expr.value;\n    }\n\n    visitObjectLiteralExpr(expr: ObjectLiteralExpr, context: ExprEvaluatorContext): Value {\n        return expr.value;\n    }\n\n    visitHasAttributeExpr(expr: HasAttributeExpr, context: ExprEvaluatorContext): Value {\n        return context.env.lookup(expr.name) !== undefined;\n    }\n\n    visitMatchExpr(match: MatchExpr, context: ExprEvaluatorContext): Value {\n        const r = context.evaluate(match.value);\n        for (const [label, body] of match.branches) {\n            if (Array.isArray(label) && (label as any[]).includes(r)) {\n                return context.evaluate(body);\n            } else if (label === r) {\n                return context.evaluate(body);\n            }\n        }\n        return context.evaluate(match.fallback);\n    }\n\n    visitCaseExpr(match: CaseExpr, context: ExprEvaluatorContext): Value {\n        if (context.scope === ExprScope.Value) {\n            const firstDynamicCondition = match.branches.findIndex(([condition, _]) =>\n                condition.isDynamic()\n            );\n\n            if (firstDynamicCondition !== -1) {\n                let branches: Array<[Expr, Expr]> | undefined;\n\n                // tslint:disable-next-line: prefer-for-of\n                for (let i = 0; i < match.branches.length; ++i) {\n                    const [condition, body] = match.branches[i];\n\n                    const evaluatedCondition = context.evaluate(condition);\n                    const evaluatedBody = context.evaluate(body);\n\n                    if (i < firstDynamicCondition && Boolean(evaluatedCondition)) {\n                        return evaluatedBody;\n                    }\n\n                    if (!Expr.isExpr(evaluatedCondition) && !Boolean(evaluatedCondition)) {\n                        // skip this branch, it constantly evaluates to false.\n                        continue;\n                    }\n\n                    if (branches === undefined) {\n                        branches = [];\n                    }\n\n                    branches?.push([\n                        context.wrapValue(evaluatedCondition),\n                        context.wrapValue(evaluatedBody)\n                    ]);\n\n                    if (!Expr.isExpr(evaluatedCondition) && Boolean(evaluatedCondition)) {\n                        // skip unreachble expressions\n                        return new CaseExpr(branches, LiteralExpr.fromValue(null));\n                    }\n                }\n\n                const fallback = context.evaluate(match.fallback);\n\n                return branches === undefined\n                    ? fallback\n                    : new CaseExpr(branches, context.wrapValue(fallback));\n            }\n        }\n\n        for (const [condition, body] of match.branches) {\n            if (context.evaluate(condition)) {\n                return context.evaluate(body);\n            }\n        }\n\n        return context.evaluate(match.fallback);\n    }\n\n    visitCallExpr(expr: CallExpr, context: ExprEvaluatorContext): Value {\n        const descriptor = expr.descriptor ?? operatorDescriptors.get(expr.op);\n\n        if (descriptor) {\n            expr.descriptor = descriptor;\n\n            let result: Value;\n\n            if (context.scope === ExprScope.Value && expr.isDynamic()) {\n                if (expr.descriptor.partialEvaluate) {\n                    return expr.descriptor.partialEvaluate(context, expr);\n                }\n\n                const args = expr.args.map(arg => {\n                    return context.wrapValue(context.evaluate(arg));\n                });\n\n                if (args.every((arg, i) => arg === expr.args[i])) {\n                    return expr;\n                }\n\n                result = new CallExpr(expr.op, args);\n            } else {\n                result = descriptor.call(context, expr);\n            }\n\n            return result;\n        }\n\n        throw new Error(`undefined operator '${expr.op}'`);\n    }\n\n    visitStepExpr(expr: StepExpr, context: ExprEvaluatorContext): Value {\n        if (context.scope === ExprScope.Value) {\n            const input = context.evaluate(expr.input);\n            const defaultValue = context.evaluate(expr.defaultValue);\n            return new StepExpr(\n                context.wrapValue(input),\n                context.wrapValue(defaultValue),\n                // tslint:disable-next-line: no-shadowed-variable\n                expr.stops.map(([key, value]) => {\n                    const v = context.evaluate(value);\n                    return [key, context.wrapValue(v)];\n                })\n            );\n        } else {\n            const input = context.evaluate(expr.input);\n\n            if (typeof input !== \"number\") {\n                throw new Error(`input '${input}' must be a number`);\n            }\n\n            if (input < expr.stops[0][0]) {\n                return context.evaluate(expr.defaultValue);\n            }\n\n            let index = expr.stops.findIndex(s => s[0] > input);\n\n            if (index === -1) {\n                index = expr.stops.length;\n            }\n\n            return context.evaluate(expr.stops[index - 1][1]);\n        }\n    }\n\n    visitInterpolateExpr(expr: InterpolateExpr, context: ExprEvaluatorContext): Value {\n        if (context.scope === ExprScope.Value) {\n            const input = context.evaluate(expr.input);\n            return new InterpolateExpr(\n                expr.mode,\n                context.wrapValue(input),\n                expr.stops.map(([key, value]) => {\n                    const v = context.evaluate(value);\n                    return [key, context.wrapValue(v)];\n                })\n            );\n        } else {\n            const param = context.evaluate(expr.input);\n\n            if (typeof param !== \"number\") {\n                throw new Error(`input must be a number`);\n            }\n\n            if (expr.mode[0] === \"cubic\") {\n                return cubicInterpolate(context, expr, param);\n            }\n\n            const keyIndex = expr.stops.findIndex(stop => stop[0] > param);\n\n            if (keyIndex === -1) {\n                // all the keys are smaller than the parameter\n                return context.evaluate(expr.stops[expr.stops.length - 1][1]);\n            } else if (keyIndex === 0) {\n                return context.evaluate(expr.stops[0][1]);\n            }\n\n            const [key, value] = expr.stops[keyIndex];\n            const [prevKey, prevValue] = expr.stops[keyIndex - 1];\n\n            const v0 = promoteValue(context, prevValue);\n\n            let t = 0;\n\n            switch (expr.mode[0]) {\n                case \"discrete\":\n                    return v0;\n\n                case \"linear\":\n                    t = (param - prevKey) / (key - prevKey);\n                    break;\n\n                case \"exponential\": {\n                    const base = expr.mode[1];\n                    t = (Math.pow(base, param - prevKey) - 1) / (Math.pow(base, key - prevKey) - 1);\n                    break;\n                }\n\n                default:\n                    throw new Error(\n                        `interpolation mode ${JSON.stringify(expr.mode)} is not supported`\n                    );\n            }\n\n            const v1 = promoteValue(context, value);\n\n            if (typeof v0 === \"number\" && typeof v1 === \"number\") {\n                return THREE.MathUtils.lerp(v0, v1, t);\n            } else if (v0 instanceof RGBA && v1 instanceof RGBA) {\n                return v0.clone().lerp(v1, t);\n            } else if (v0 instanceof Pixels && v1 instanceof Pixels) {\n                return new Pixels(THREE.MathUtils.lerp(v0.value, v1.value, t));\n            } else if (v0 instanceof THREE.Color && v1 instanceof THREE.Color) {\n                return v0.clone().lerp(v1, t);\n            } else if (v0 instanceof THREE.Vector2 && v1 instanceof THREE.Vector2) {\n                return v0.clone().lerp(v1, t);\n            } else if (v0 instanceof THREE.Vector3 && v1 instanceof THREE.Vector3) {\n                return v0.clone().lerp(v1, t);\n            } else if (v0 instanceof THREE.Vector4 && v1 instanceof THREE.Vector4) {\n                return v0.clone().lerp(v1, t);\n            } else if (Array.isArray(v0) && Array.isArray(v1) && v0.length === v1.length) {\n                return v0.map((x, i) => THREE.MathUtils.lerp(x, (v1 as number[])[i], t));\n            }\n\n            throw new Error(`todo: mix(${JSON.stringify(v0)}, ${JSON.stringify(v1)}, ${t})`);\n        }\n    }\n}\n\nExprEvaluator.defineOperators(CastOperators);\nExprEvaluator.defineOperators(ComparisonOperators);\nExprEvaluator.defineOperators(MathOperators);\nExprEvaluator.defineOperators(StringOperators);\nExprEvaluator.defineOperators(ColorOperators);\nExprEvaluator.defineOperators(TypeOperators);\nExprEvaluator.defineOperators(MiscOperators);\nExprEvaluator.defineOperators(FlowOperators);\nExprEvaluator.defineOperators(ArrayOperators);\nExprEvaluator.defineOperators(ObjectOperators);\nExprEvaluator.defineOperators(FeatureOperators);\nExprEvaluator.defineOperators(MapOperators);\nExprEvaluator.defineOperators(VectorOperators);\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CallExpr, Expr, JsonArray, NumberLiteralExpr, StringLiteralExpr } from \"../Expr\";\nimport { ExprEvaluatorContext, OperatorDescriptorMap } from \"../ExprEvaluator\";\n\nconst VALID_ELEMENT_TYPES = [\"boolean\", \"number\", \"string\"];\n\nfunction checkElementTypes(arg: Expr, array: JsonArray) {\n    if (!(arg instanceof StringLiteralExpr) || !VALID_ELEMENT_TYPES.includes(arg.value)) {\n        throw new Error(\n            `expected \"boolean\", \"number\" or \"string\" instead of '${JSON.stringify(arg)}'`\n        );\n    }\n\n    const ty = arg.value;\n\n    array.forEach((element, index) => {\n        if (typeof element !== ty) {\n            throw new Error(`expected array element at index ${index} to have type '${ty}'`);\n        }\n    });\n}\n\nfunction checkArrayLength(arg: Expr, array: JsonArray) {\n    if (!(arg instanceof NumberLiteralExpr)) {\n        throw new Error(`missing expected number of elements`);\n    }\n\n    const length = arg.value;\n\n    if (array.length !== length) {\n        throw new Error(`the array must have ${length} element(s)`);\n    }\n}\n\nfunction checkArray(context: ExprEvaluatorContext, arg: Expr) {\n    const value = context.evaluate(arg);\n    if (!Array.isArray(value)) {\n        throw new Error(`'${value}' is not an array`);\n    }\n    return value;\n}\n\nconst operators = {\n    array: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            switch (call.args.length) {\n                case 0:\n                    throw new Error(\"not enough arguments\");\n                case 1:\n                    return checkArray(context, call.args[0]);\n                case 2: {\n                    const array = checkArray(context, call.args[1]);\n                    checkElementTypes(call.args[0], array);\n                    return array;\n                }\n                case 3: {\n                    const array = checkArray(context, call.args[2]);\n                    checkArrayLength(call.args[1], array);\n                    checkElementTypes(call.args[0], array);\n                    return array;\n                }\n                default:\n                    throw new Error(\"too many arguments\");\n            }\n        }\n    },\n    \"make-array\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            if (call.args.length === 0) {\n                throw new Error(\"not enough arguments\");\n            }\n            return [...call.args.map(arg => context.evaluate(arg))];\n        }\n    },\n    at: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const args = call.args;\n            const index = context.evaluate(args[0]);\n            if (typeof index !== \"number\") {\n                throw new Error(`expected the index of the element to retrieve`);\n            }\n            const value = context.evaluate(args[1]);\n            if (!Array.isArray(value)) {\n                throw new Error(`expected an array`);\n            }\n            return index >= 0 && index < value.length ? value[index] : null;\n        }\n    }\n};\n\nexport const ArrayOperators: OperatorDescriptorMap = operators;\nexport type ArrayOperatorNames = keyof typeof operators;\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CallExpr } from \"../Expr\";\nimport { ExprEvaluatorContext, OperatorDescriptorMap } from \"../ExprEvaluator\";\n\nconst operators = {\n    \"to-boolean\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            return Boolean(context.evaluate(call.args[0]));\n        }\n    },\n\n    \"to-string\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            return String(context.evaluate(call.args[0]));\n        }\n    },\n\n    \"to-number\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            for (const arg of call.args) {\n                const value = Number(context.evaluate(arg));\n                if (!isNaN(value)) {\n                    return value;\n                }\n            }\n            throw new Error(\"cannot convert the value to a number\");\n        }\n    }\n};\n\nexport const CastOperators: OperatorDescriptorMap = operators;\nexport type CastOperatorNames = keyof typeof operators;\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nimport { ColorUtils } from \"../ColorUtils\";\nimport { CallExpr, Value } from \"../Expr\";\nimport { ExprEvaluatorContext, OperatorDescriptorMap } from \"../ExprEvaluator\";\nimport { parseStringEncodedColor } from \"../StringEncodedNumeral\";\n\nconst operators = {\n    alpha: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            let color: Value | undefined = context.evaluate(call.args[0]);\n            if (typeof color === \"string\") {\n                color = parseStringEncodedColor(color);\n            }\n            const alpha = typeof color === \"number\" ? ColorUtils.getAlphaFromHex(color) : 1;\n            return alpha;\n        }\n    },\n    rgba: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const r = context.evaluate(call.args[0]);\n            const g = context.evaluate(call.args[1]);\n            const b = context.evaluate(call.args[2]);\n            const a = context.evaluate(call.args[3]);\n            if (\n                typeof r === \"number\" &&\n                typeof g === \"number\" &&\n                typeof b === \"number\" &&\n                typeof a === \"number\" &&\n                r >= 0 &&\n                g >= 0 &&\n                b >= 0 &&\n                a >= 0 &&\n                a <= 1\n            ) {\n                return rgbaToHex(r, g, b, a);\n            }\n            throw new Error(`unknown color 'rgba(${r},${g},${b},${a})'`);\n        }\n    },\n    rgb: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const r = context.evaluate(call.args[0]);\n            const g = context.evaluate(call.args[1]);\n            const b = context.evaluate(call.args[2]);\n            if (\n                typeof r === \"number\" &&\n                typeof g === \"number\" &&\n                typeof b === \"number\" &&\n                r >= 0 &&\n                g >= 0 &&\n                b >= 0\n            ) {\n                return rgbToHex(r, g, b);\n            }\n            throw new Error(`unknown color 'rgb(${r},${g},${b})'`);\n        }\n    },\n    // Hsl operator contains angle modulated to <0, 360> range, percent of\n    // saturation and lightness in <0, 100> range, i.e. hsl(360, 100, 100)\n    hsl: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const h = context.evaluate(call.args[0]);\n            const s = context.evaluate(call.args[1]);\n            const l = context.evaluate(call.args[2]);\n            if (\n                typeof h === \"number\" &&\n                typeof s === \"number\" &&\n                typeof l === \"number\" &&\n                h >= 0 &&\n                s >= 0 &&\n                l >= 0\n            ) {\n                return hslToHex(h, s, l);\n            }\n            throw new Error(`unknown color 'hsl(${h},${s}%,${l}%)'`);\n        }\n    }\n};\n\nfunction rgbaToHex(r: number, g: number, b: number, a: number): number {\n    // We decode rgba color channels using custom hex format with transparency.\n    return ColorUtils.getHexFromRgba(\n        THREE.MathUtils.clamp(r, 0, 255) / 255,\n        THREE.MathUtils.clamp(g, 0, 255) / 255,\n        THREE.MathUtils.clamp(b, 0, 255) / 255,\n        THREE.MathUtils.clamp(a, 0, 1)\n    );\n}\n\nfunction rgbToHex(r: number, g: number, b: number): number {\n    return ColorUtils.getHexFromRgb(\n        THREE.MathUtils.clamp(r, 0, 255) / 255,\n        THREE.MathUtils.clamp(g, 0, 255) / 255,\n        THREE.MathUtils.clamp(b, 0, 255) / 255\n    );\n}\n\nfunction hslToHex(h: number, s: number, l: number): number {\n    return ColorUtils.getHexFromHsl(\n        THREE.MathUtils.euclideanModulo(h, 360) / 360,\n        THREE.MathUtils.clamp(s, 0, 100) / 100,\n        THREE.MathUtils.clamp(l, 0, 100) / 100\n    );\n}\n\nexport const ColorOperators: OperatorDescriptorMap = operators;\nexport type ColorOperatorNames = keyof typeof operators;\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CallExpr } from \"../Expr\";\nimport { ExprEvaluatorContext, OperatorDescriptorMap } from \"../ExprEvaluator\";\n\nfunction compare(context: ExprEvaluatorContext, call: CallExpr, strict: boolean = false) {\n    const left = context.evaluate(call.args[0]) as any;\n    const right = context.evaluate(call.args[1]) as any;\n\n    if (\n        !(\n            (typeof left === \"number\" && typeof right === \"number\") ||\n            (typeof left === \"string\" && typeof right === \"string\")\n        )\n    ) {\n        if (strict) {\n            throw new Error(`invalid operands '${left}' and '${right}' for operator '${call.op}'`);\n        }\n    }\n\n    switch (call.op) {\n        case \"<\":\n            return left < right;\n        case \">\":\n            return left > right;\n        case \"<=\":\n            return left <= right;\n        case \">=\":\n            return left >= right;\n        default:\n            throw new Error(`invalid comparison operator '${call.op}'`);\n    }\n}\n\nconst operators = {\n    \"!\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            return !context.evaluate(call.args[0]);\n        }\n    },\n\n    \"==\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const left = context.evaluate(call.args[0]);\n            const right = context.evaluate(call.args[1]);\n            return left === right;\n        }\n    },\n\n    \"!=\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const left = context.evaluate(call.args[0]);\n            const right = context.evaluate(call.args[1]);\n            return left !== right;\n        }\n    },\n\n    \"<\": { call: (context: ExprEvaluatorContext, call: CallExpr) => compare(context, call) },\n    \">\": { call: (context: ExprEvaluatorContext, call: CallExpr) => compare(context, call) },\n    \"<=\": { call: (context: ExprEvaluatorContext, call: CallExpr) => compare(context, call) },\n    \">=\": { call: (context: ExprEvaluatorContext, call: CallExpr) => compare(context, call) }\n};\n\nexport const ComparisonOperators: OperatorDescriptorMap = operators;\nexport type ComparisonOperatorNames = keyof typeof operators;\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Env } from \"../Env\";\nimport { CallExpr, ExprScope } from \"../Expr\";\n\nimport { ExprEvaluatorContext, OperatorDescriptorMap } from \"../ExprEvaluator\";\n\nconst operators = {\n    \"geometry-type\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const geometryType = context.env.lookup(\"$geometryType\");\n            switch (geometryType) {\n                case \"point\":\n                    return \"Point\";\n                case \"line\":\n                    return \"LineString\";\n                case \"polygon\":\n                    return \"Polygon\";\n                default:\n                    return null;\n            }\n        }\n    },\n    \"feature-state\": {\n        isDynamicOperator: () => true,\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            if (context.scope !== ExprScope.Dynamic) {\n                throw new Error(\"feature-state cannot be used in this context\");\n            }\n            const property = context.evaluate(call.args[0]);\n            if (typeof property !== \"string\") {\n                throw new Error(`expected the name of the property of the feature state`);\n            }\n            const state = context.env.lookup(\"$state\");\n            if (Env.isEnv(state)) {\n                return state.lookup(property) ?? null;\n            } else if (state instanceof Map) {\n                return state.get(property) ?? null;\n            }\n            return null;\n        }\n    },\n    id: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            return context.env.lookup(\"$id\") ?? null;\n        }\n    }\n};\n\nexport const FeatureOperators: OperatorDescriptorMap = operators;\nexport type FeatureOperatorNames = keyof typeof operators;\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CallExpr, Expr } from \"../Expr\";\nimport { ExprEvaluatorContext, OperatorDescriptorMap } from \"../ExprEvaluator\";\n\nfunction conditionalCast(context: ExprEvaluatorContext, type: string, args: Expr[]) {\n    switch (type) {\n        case \"boolean\":\n        case \"number\":\n        case \"string\":\n            for (const childExpr of args) {\n                const value = context.evaluate(childExpr);\n                if (typeof value === type) {\n                    return value;\n                }\n            }\n            throw new Error(`expected a '${type}'`);\n        default:\n            throw new Error(`invalid type '${type}'`);\n    } // switch\n}\n\nconst operators = {\n    all: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            for (const childExpr of call.args) {\n                if (!context.evaluate(childExpr)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    },\n\n    any: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            for (const childExpr of call.args) {\n                if (context.evaluate(childExpr)) {\n                    return true;\n                }\n            }\n            return false;\n        }\n    },\n\n    none: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            for (const childExpr of call.args) {\n                if (context.evaluate(childExpr)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    },\n\n    boolean: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            return conditionalCast(context, \"boolean\", call.args);\n        }\n    },\n\n    number: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            return conditionalCast(context, \"number\", call.args);\n        }\n    },\n\n    string: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            return conditionalCast(context, \"string\", call.args);\n        }\n    }\n};\n\nexport const FlowOperators: OperatorDescriptorMap = operators;\nexport type FlowOperatorNames = keyof typeof operators;\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CallExpr, ExprScope, Value } from \"../Expr\";\nimport { ExprEvaluatorContext, OperatorDescriptorMap } from \"../ExprEvaluator\";\n\nconst operators = {\n    \"ppi-scale\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const value = context.evaluate(call.args[0]) as number;\n            const scaleFactor = call.args[1] ? (context.evaluate(call.args[1]) as number) : 1;\n            return value * scaleFactor;\n        }\n    },\n    \"world-ppi-scale\": {\n        isDynamicOperator: (): boolean => {\n            return true;\n        },\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const pixels = context.evaluate(call.args[0]) as number;\n            const scaleFactor = call.args[1] ? (context.evaluate(call.args[1]) as number) : 1;\n            const zoom = context.env.lookup(\"$zoom\") as number;\n            const zoomWidth = Math.pow(2, 17) / Math.pow(2, zoom);\n            const v = pixels * zoomWidth * scaleFactor;\n            return v;\n        }\n    },\n    \"world-discrete-ppi-scale\": {\n        isDynamicOperator: (): boolean => {\n            return true;\n        },\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const pixels = context.evaluate(call.args[0]) as number;\n            const scaleFactor = call.args[1] ? (context.evaluate(call.args[1]) as number) : 1;\n            const zoom = context.env.lookup(\"$zoom\") as number;\n            const zoomWidthDiscrete = Math.pow(2, 17.8) / Math.pow(2, Math.floor(zoom));\n            const v = pixels * zoomWidthDiscrete * scaleFactor;\n            return v;\n        }\n    },\n    ppi: {\n        call: (context: ExprEvaluatorContext) => {\n            const ppi = context.env.lookup(\"$ppi\");\n            if (typeof ppi === \"number\") {\n                return ppi;\n            }\n            return 72;\n        }\n    },\n    zoom: {\n        isDynamicOperator: (): boolean => {\n            return true;\n        },\n        call: (context: ExprEvaluatorContext, call: CallExpr): Value => {\n            if (context.scope === ExprScope.Value) {\n                return call;\n            }\n            return context.env.lookup(\"$zoom\") ?? null;\n        }\n    }\n};\n\nexport const MapOperators: OperatorDescriptorMap = operators;\nexport type MapOperatorNames = keyof typeof operators;\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CallExpr } from \"../Expr\";\nimport { ExprEvaluatorContext, OperatorDescriptorMap } from \"../ExprEvaluator\";\n\nimport * as THREE from \"three\";\n\nconst operators = {\n    \"^\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const a = context.evaluate(call.args[0]);\n            const b = context.evaluate(call.args[1]);\n            if (typeof a !== \"number\" || typeof b !== \"number\") {\n                // tslint:disable-next-line: max-line-length\n                throw new Error(\n                    `invalid operands '${typeof a}' and '${typeof b}' for operator '^'`\n                );\n            }\n            return Math.pow(a, b);\n        }\n    },\n\n    \"-\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            if (call.args.length === 1) {\n                const value = context.evaluate(call.args[0]);\n                if (typeof value !== \"number\") {\n                    throw new Error(`ìnvalid operand '${typeof value} for operator '-'`);\n                }\n\n                return -value;\n            }\n\n            const a = context.evaluate(call.args[0]);\n            const b = context.evaluate(call.args[1]);\n            if (typeof a !== \"number\" || typeof b !== \"number\") {\n                throw new Error(\n                    `invalid operands '${typeof a}' and '${typeof b}' for operator '-'`\n                );\n            }\n            return a - b;\n        }\n    },\n\n    \"/\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const a = context.evaluate(call.args[0]);\n            const b = context.evaluate(call.args[1]);\n            if (typeof a !== \"number\" || typeof b !== \"number\") {\n                // tslint:disable-next-line: max-line-length\n                throw new Error(\n                    `invalid operands '${typeof a}' and '${typeof b}' for operator '/'`\n                );\n            }\n            return a / b;\n        }\n    },\n\n    \"%\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const a = context.evaluate(call.args[0]);\n            const b = context.evaluate(call.args[1]);\n            if (typeof a !== \"number\" || typeof b !== \"number\") {\n                // tslint:disable-next-line: max-line-length\n                throw new Error(\n                    `invalid operands '${typeof a}' and '${typeof b}' for operator '%'`\n                );\n            }\n            return a % b;\n        }\n    },\n\n    \"+\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            return call.args.reduce((a, b) => Number(a) + Number(context.evaluate(b)), 0);\n        }\n    },\n\n    \"*\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            return call.args.reduce((a, b) => Number(a) * Number(context.evaluate(b)), 1);\n        }\n    },\n\n    abs: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const value = context.evaluate(call.args[0]);\n            if (typeof value !== \"number\") {\n                throw new Error(`invalid operand '${value}' for operator 'abs'`);\n            }\n            return Math.abs(value);\n        }\n    },\n\n    acos: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const value = context.evaluate(call.args[0]);\n            if (typeof value !== \"number\") {\n                throw new Error(`invalid operand '${value}' for operator 'acos'`);\n            }\n            return Math.acos(value);\n        }\n    },\n\n    asin: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const value = context.evaluate(call.args[0]);\n            if (typeof value !== \"number\") {\n                throw new Error(`invalid operand '${value}' for operator 'asin'`);\n            }\n            return Math.asin(value);\n        }\n    },\n\n    atan: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const value = context.evaluate(call.args[0]);\n            if (typeof value !== \"number\") {\n                throw new Error(`invalid operand '${value}' for operator 'atan'`);\n            }\n            return Math.atan(value);\n        }\n    },\n\n    ceil: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const value = context.evaluate(call.args[0]);\n            if (typeof value !== \"number\") {\n                throw new Error(`invalid operand '${value}' for operator 'ceil'`);\n            }\n            return Math.ceil(value);\n        }\n    },\n\n    cos: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const value = context.evaluate(call.args[0]);\n            if (typeof value !== \"number\") {\n                throw new Error(`invalid operand '${value}' for operator 'cos'`);\n            }\n            return Math.cos(value);\n        }\n    },\n\n    e: {\n        call: () => {\n            return Math.E;\n        }\n    },\n\n    floor: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const value = context.evaluate(call.args[0]);\n            if (typeof value !== \"number\") {\n                throw new Error(`invalid operand '${value}' for operator 'floor'`);\n            }\n            return Math.floor(value);\n        }\n    },\n\n    ln: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const value = context.evaluate(call.args[0]);\n            if (typeof value !== \"number\") {\n                throw new Error(`invalid operand '${value}' for operator 'ln'`);\n            }\n            return Math.log(value);\n        }\n    },\n\n    ln2: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const value = context.evaluate(call.args[0]);\n            if (typeof value !== \"number\") {\n                throw new Error(`invalid operand '${value}' for operator 'ln2'`);\n            }\n            return Math.log2(value);\n        }\n    },\n\n    log10: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const value = context.evaluate(call.args[0]);\n            if (typeof value !== \"number\") {\n                throw new Error(`invalid operand '${value}' for operator 'log10'`);\n            }\n            return Math.log10(value);\n        }\n    },\n\n    max: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            return Math.max(...call.args.map(v => Number(context.evaluate(v))));\n        }\n    },\n\n    min: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            return Math.min(...call.args.map(v => Number(context.evaluate(v))));\n        }\n    },\n\n    /**\n     * Clamp numeric value to given range, inclusive.\n     *\n     * Synopsis:\n     * ```\n     * [\"clamp\", v: number, min: number, max: number]`\n     * ```\n     */\n    clamp: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const v = context.evaluate(call.args[0]);\n            const min = context.evaluate(call.args[1]);\n            const max = context.evaluate(call.args[2]);\n\n            if (typeof v !== \"number\" || typeof min !== \"number\" || typeof max !== \"number\") {\n                throw new Error(`invalid operands '${v}', ${min}, ${max} for operator 'clamp'`);\n            }\n            return THREE.MathUtils.clamp(v, min, max);\n        }\n    },\n\n    pi: {\n        call: () => {\n            return Math.PI;\n        }\n    },\n\n    round: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const value = context.evaluate(call.args[0]);\n            if (typeof value !== \"number\") {\n                throw new Error(`invalid operand '${value}' for operator 'round'`);\n            }\n            return Math.round(value);\n        }\n    },\n\n    sin: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const value = context.evaluate(call.args[0]);\n            if (typeof value !== \"number\") {\n                throw new Error(`invalid operand '${value}' for operator 'sin'`);\n            }\n            return Math.sin(value);\n        }\n    },\n\n    sqrt: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const value = context.evaluate(call.args[0]);\n            if (typeof value !== \"number\") {\n                throw new Error(`invalid operand '${value}' for operator 'sqrt'`);\n            }\n            return Math.sqrt(value);\n        }\n    },\n\n    tan: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const value = context.evaluate(call.args[0]);\n            if (typeof value !== \"number\") {\n                throw new Error(`invalid operand '${value}' for operator 'tan'`);\n            }\n            return Math.tan(value);\n        }\n    }\n};\n\nexport const MathOperators: OperatorDescriptorMap = operators;\nexport type MathOperatorNames = keyof typeof operators;\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CallExpr } from \"../Expr\";\nimport { ExprEvaluatorContext, OperatorDescriptorMap } from \"../ExprEvaluator\";\n\nconst operators = {\n    length: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const value = context.evaluate(call.args[0]);\n            if (Array.isArray(value) || typeof value === \"string\") {\n                return value.length;\n            }\n            throw new Error(`invalid operand '${value}' for operator 'length'`);\n        }\n    },\n    coalesce: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            for (const childExpr of call.args) {\n                const value = context.evaluate(childExpr);\n                if (value !== null) {\n                    return value;\n                }\n            }\n            return null;\n        }\n    }\n};\n\nexport const MiscOperators: OperatorDescriptorMap = operators;\nexport type MiscOperatorNames = keyof typeof operators;\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CallExpr, Expr, ExprScope } from \"../Expr\";\n\nimport { Env } from \"../Env\";\nimport { ExprEvaluatorContext, OperatorDescriptorMap } from \"../ExprEvaluator\";\n\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\n\nenum LookupMode {\n    get,\n    has\n}\n\nfunction lookupMember(context: ExprEvaluatorContext, args: Expr[], lookupMode: LookupMode) {\n    const memberName = context.evaluate(args[0]);\n\n    if (typeof memberName !== \"string\") {\n        throw new Error(`expected the name of an attribute`);\n    }\n\n    const object = context.evaluate(args[1]) as any;\n\n    if (object && typeof object === \"object\") {\n        if (Env.isEnv(object)) {\n            const value = object.lookup(memberName) ?? null;\n            return lookupMode === LookupMode.get ? value : value !== null;\n        }\n        if (hasOwnProperty.call(object, memberName)) {\n            return lookupMode === LookupMode.get ? object[memberName] : true;\n        }\n    }\n\n    return lookupMode === LookupMode.get ? null : false;\n}\n\nconst operators = {\n    in: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const value = context.evaluate(call.args[0]);\n            const object = context.evaluate(call.args[1]);\n            if (typeof value === \"string\" && typeof object === \"string\") {\n                return object.includes(value);\n            } else if (Array.isArray(object)) {\n                return object.includes(value);\n            }\n            return false;\n        }\n    },\n\n    get: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) =>\n            lookupMember(context, call.args, LookupMode.get)\n    },\n\n    has: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) =>\n            lookupMember(context, call.args, LookupMode.has)\n    },\n\n    \"dynamic-properties\": {\n        isDynamicOperator: () => true,\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            if (context.scope === ExprScope.Dynamic) {\n                return context.env;\n            }\n            return call;\n        }\n    }\n};\n\nexport const ObjectOperators: OperatorDescriptorMap = operators;\nexport type ObjectOperatorNames = keyof typeof operators;\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CallExpr } from \"../Expr\";\nimport { ExprEvaluatorContext, OperatorDescriptorMap } from \"../ExprEvaluator\";\n\nconst operators = {\n    concat: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            return \"\".concat(...call.args.map(a => String(context.evaluate(a))));\n        }\n    },\n\n    downcase: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            return String(context.evaluate(call.args[0])).toLocaleLowerCase();\n        }\n    },\n\n    upcase: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            return String(context.evaluate(call.args[0])).toLocaleUpperCase();\n        }\n    },\n\n    \"~=\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const left = context.evaluate(call.args[0]);\n            const right = context.evaluate(call.args[1]);\n            if (typeof left === \"string\" && typeof right === \"string\") {\n                return left.indexOf(right) !== -1;\n            }\n            return false;\n        }\n    },\n\n    \"^=\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const left = context.evaluate(call.args[0]);\n            const right = context.evaluate(call.args[1]);\n            if (typeof left === \"string\" && typeof right === \"string\") {\n                return left.startsWith(right);\n            }\n            return false;\n        }\n    },\n\n    \"$=\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const left = context.evaluate(call.args[0]);\n            const right = context.evaluate(call.args[1]);\n            if (typeof left === \"string\" && typeof right === \"string\") {\n                return left.endsWith(right);\n            }\n            return false;\n        }\n    }\n};\n\nexport const StringOperators: OperatorDescriptorMap = operators;\nexport type StringOperatorNames = keyof typeof operators;\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CallExpr } from \"../Expr\";\nimport { ExprEvaluatorContext, OperatorDescriptorMap } from \"../ExprEvaluator\";\n\nconst operators = {\n    typeof: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            return typeof context.evaluate(call.args[0]);\n        }\n    }\n};\n\nexport const TypeOperators: OperatorDescriptorMap = operators;\nexport type TypeOperatorNames = keyof typeof operators;\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Value } from \"../Env\";\nimport { CallExpr, NumberLiteralExpr } from \"../Expr\";\nimport { ExprEvaluatorContext, OperatorDescriptorMap } from \"../ExprEvaluator\";\n\nimport * as THREE from \"three\";\n\ntype MakeVectorCallExpr = CallExpr & {\n    _value?: THREE.Vector2 | THREE.Vector3 | THREE.Vector4;\n};\n\nfunction isVector(\n    context: ExprEvaluatorContext,\n    call: CallExpr,\n    type: \"vector2\" | \"vector3\" | \"vector4\"\n): Value {\n    let ctor: new () => object;\n    switch (type) {\n        case \"vector2\":\n            ctor = THREE.Vector2;\n            break;\n        case \"vector3\":\n            ctor = THREE.Vector3;\n            break;\n        case \"vector4\":\n            ctor = THREE.Vector4;\n            break;\n    }\n    for (const childExpr of call.args) {\n        const value = context.evaluate(childExpr);\n        if (value instanceof ctor) {\n            return value;\n        }\n    }\n    throw new Error(`expected a \"${type}\"`);\n}\n\nfunction toVector(\n    context: ExprEvaluatorContext,\n    call: CallExpr,\n    type: \"vector2\" | \"vector3\" | \"vector4\"\n): Value {\n    let VectorCtor: any;\n    let components: number;\n\n    switch (type) {\n        case \"vector2\":\n            VectorCtor = THREE.Vector2;\n            components = 2;\n            break;\n        case \"vector3\":\n            VectorCtor = THREE.Vector3;\n            components = 3;\n            break;\n        case \"vector4\":\n            VectorCtor = THREE.Vector4;\n            components = 4;\n            break;\n    }\n\n    for (const childExpr of call.args) {\n        const value = context.evaluate(childExpr);\n        if (value instanceof VectorCtor) {\n            return value;\n        } else if (\n            Array.isArray(value) &&\n            value.length === components &&\n            value.every(v => typeof v === \"number\")\n        ) {\n            return new VectorCtor().fromArray(value);\n        }\n    }\n    throw new Error(`expected a \"${type}\"`);\n}\n\nconst operators = {\n    \"make-vector\": {\n        call: (context: ExprEvaluatorContext, call: MakeVectorCallExpr) => {\n            if (call._value !== undefined) {\n                return call._value;\n            }\n\n            if (call.args.length < 2) {\n                throw new Error(\"not enough arguments\");\n            } else if (call.args.length > 4) {\n                throw new Error(\"too many arguments\");\n            }\n\n            const components = call.args.map(arg => context.evaluate(arg)) as number[];\n\n            components.forEach((element, index) => {\n                if (typeof element !== \"number\") {\n                    throw new Error(\n                        `expected vector component at index ${index} to have type \"number\"`\n                    );\n                }\n            });\n\n            let result: THREE.Vector2 | THREE.Vector3 | THREE.Vector4 | undefined;\n\n            switch (components.length) {\n                case 2:\n                    result = new THREE.Vector2().fromArray(components);\n                    break;\n                case 3:\n                    result = new THREE.Vector3().fromArray(components);\n                    break;\n                case 4:\n                    result = new THREE.Vector4().fromArray(components);\n                    break;\n                default:\n                    throw new Error(\"too many arguments\");\n            }\n\n            if (call.args.every(arg => arg instanceof NumberLiteralExpr)) {\n                call._value = result;\n            }\n\n            return result;\n        }\n    },\n    vector2: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => isVector(context, call, \"vector2\")\n    },\n    vector3: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => isVector(context, call, \"vector3\")\n    },\n    vector4: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => isVector(context, call, \"vector4\")\n    },\n    \"to-vector2\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => toVector(context, call, \"vector2\")\n    },\n    \"to-vector3\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => toVector(context, call, \"vector3\")\n    },\n    \"to-vector4\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => toVector(context, call, \"vector4\")\n    }\n};\n\nexport const VectorOperators: OperatorDescriptorMap = operators;\nexport type VectorOperatorNames = keyof typeof operators;\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    BooleanLiteralExpr,\n    CallExpr,\n    CaseExpr,\n    Expr,\n    ExprScope,\n    ExprVisitor,\n    HasAttributeExpr,\n    InterpolateExpr,\n    LiteralExpr,\n    MatchExpr,\n    MatchLabel,\n    NullLiteralExpr,\n    NumberLiteralExpr,\n    ObjectLiteralExpr,\n    StepExpr,\n    StringLiteralExpr,\n    VarExpr\n} from \"./Expr\";\n\nimport { Env } from \"./Env\";\n\nexport interface InstantiationContext {\n    /**\n     * The [[Env]] used to lookup for names.\n     */\n    env: Env;\n\n    /**\n     * The names to preserve during the instantiation.\n     */\n    preserve?: Set<string>;\n}\n\nconst emptyEnv = new Env();\n\n/**\n * @hidden\n */\nexport class ExprInstantiator implements ExprVisitor<Expr, InstantiationContext> {\n    visitNullLiteralExpr(expr: NullLiteralExpr, _context: InstantiationContext): Expr {\n        return expr;\n    }\n\n    visitBooleanLiteralExpr(expr: BooleanLiteralExpr, _context: InstantiationContext): Expr {\n        return expr;\n    }\n\n    visitNumberLiteralExpr(expr: NumberLiteralExpr, _context: InstantiationContext): Expr {\n        return expr;\n    }\n\n    visitStringLiteralExpr(expr: StringLiteralExpr, _context: InstantiationContext): Expr {\n        return expr;\n    }\n\n    visitObjectLiteralExpr(expr: ObjectLiteralExpr, _context: InstantiationContext): Expr {\n        return expr;\n    }\n\n    visitVarExpr(expr: VarExpr, context: InstantiationContext): Expr {\n        if (context.preserve && context.preserve.has(expr.name)) {\n            return expr;\n        }\n        const value = context.env.lookup(expr.name);\n        return LiteralExpr.fromValue(value !== undefined ? value : null);\n    }\n\n    visitHasAttributeExpr(expr: HasAttributeExpr, context: InstantiationContext): Expr {\n        if (context.preserve && context.preserve.has(expr.name)) {\n            return expr;\n        }\n        const value = context.env.lookup(expr.name) !== undefined;\n        return LiteralExpr.fromValue(value);\n    }\n\n    visitCallExpr(expr: CallExpr, context: InstantiationContext): Expr {\n        const args = expr.args.map(arg => arg.accept(this, context));\n        if (args.some((a, i) => a !== expr.args[i])) {\n            return new CallExpr(expr.op, args);\n        }\n        return expr;\n    }\n\n    visitMatchExpr(match: MatchExpr, context: InstantiationContext): Expr {\n        const value = match.value.accept(this, context);\n\n        if (value instanceof LiteralExpr) {\n            const r = value.value;\n            for (const [label, body] of match.branches) {\n                if (Array.isArray(label) && (label as any[]).includes(r)) {\n                    return body.accept(this, context);\n                } else if (label === r) {\n                    return body.accept(this, context);\n                }\n            }\n            return match.fallback.accept(this, context);\n        }\n\n        let changed = match.value !== value;\n\n        const branches: Array<[MatchLabel, Expr]> = match.branches.map(([label, branch]) => {\n            const newBranch = branch.accept(this, context);\n            if (newBranch !== branch) {\n                changed = true;\n            }\n            return [label, newBranch];\n        });\n\n        const fallback = match.fallback.accept(this, context);\n\n        if (fallback !== match.fallback) {\n            changed = true;\n        }\n\n        return changed ? new MatchExpr(value, branches, fallback) : match;\n    }\n\n    visitCaseExpr(expr: CaseExpr, context: InstantiationContext): Expr {\n        const branches: Array<[Expr, Expr]> = [];\n\n        let changed = false;\n\n        for (const [condition, branch] of expr.branches) {\n            const newCondition = condition.accept(this, context);\n            const deps = newCondition.dependencies();\n            if (!condition.isDynamic() && deps.properties.size === 0) {\n                if (Boolean(newCondition.evaluate(emptyEnv, ExprScope.Condition))) {\n                    return branch.accept(this, context);\n                }\n            } else {\n                if (newCondition !== condition) {\n                    changed = true;\n                }\n                branches.push([newCondition, branch]);\n            }\n        }\n\n        if (branches.length === 0) {\n            // all the conditions of this CaseExpr evaluated\n            // to false, so the resulting of instantiating this CaseExpr\n            // is the same as instantiating its fallback expression.\n            return expr.fallback.accept(this, context);\n        }\n\n        if (branches.length !== expr.branches.length) {\n            // the number of branches changed, this means that\n            // some of the branches had constant expressions that\n            // evaluate to false. In this case the resulting\n            // `CaseExpr` has less branches.\n            changed = true;\n        }\n\n        // Instantiate the body of all the branches of this CaseExpr\n        // that have dynamic conditions.\n        branches.forEach(branch => {\n            const instantiatedBranch = branch[1].accept(this, context);\n\n            if (instantiatedBranch !== branch[1]) {\n                changed = true;\n            }\n\n            branch[1] = instantiatedBranch;\n        });\n\n        const fallback = expr.fallback.accept(this, context);\n\n        if (fallback !== expr.fallback) {\n            changed = true;\n        }\n\n        if (!changed) {\n            // nothing changed, return the old expression.\n            return expr;\n        }\n\n        return new CaseExpr(branches, fallback);\n    }\n\n    visitStepExpr(expr: StepExpr, context: InstantiationContext): Expr {\n        const input = expr.input.accept(this, context);\n        const defaultValue = expr.defaultValue.accept(this, context);\n        const stops: Array<[number, Expr]> = expr.stops.map(([key, value]) => [\n            key,\n            value.accept(this, context)\n        ]);\n        return new StepExpr(input, defaultValue, stops);\n    }\n\n    visitInterpolateExpr(expr: InterpolateExpr, context: InstantiationContext): Expr {\n        const input = expr.input.accept(this, context);\n        const stops: Array<[number, Expr]> = expr.stops.map(([key, value]) => [\n            key,\n            value.accept(this, context)\n        ]);\n        return new InterpolateExpr(expr.mode, input, stops);\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    CallExpr,\n    EqualityOp,\n    Expr,\n    HasAttributeExpr,\n    LiteralExpr,\n    NumberLiteralExpr,\n    RelationalOp,\n    StringLiteralExpr,\n    VarExpr\n} from \"./Expr\";\n\n/**\n * Character value\n */\nenum Character {\n    Tab = 9,\n    Lf = 10,\n    Cr = 13,\n    Space = 32,\n    LParen = 40,\n    RParen = 41,\n    Comma = 44,\n    Dot = 46,\n    LBracket = 91,\n    Backslash = 92,\n    RBracket = 93,\n    _0 = 48,\n    _9 = 57,\n    _ = 95,\n    A = 64,\n    Z = 90,\n    a = 97,\n    z = 122,\n    DoubleQuote = 34,\n    SingleQuote = 39,\n    Exclaim = 33,\n    Equal = 61,\n    Caret = 94,\n    Tilde = 126,\n    Dollar = 36,\n    Less = 60,\n    Greater = 62,\n    Bar = 124,\n    Amp = 38\n}\n\n/**\n * Check if a codepoint is a whitespace character.\n */\nfunction isSpace(codepoint: number): boolean {\n    switch (codepoint) {\n        case Character.Tab:\n        case Character.Lf:\n        case Character.Cr:\n        case Character.Space:\n            return true;\n        default:\n            return false;\n    } // switch\n}\n\n/**\n * Check if codepoint is a digit character.\n */\nfunction isNumber(codepoint: number): boolean {\n    return codepoint >= Character._0 && codepoint <= Character._9;\n}\n\n/**\n * Check if codepoint is a letter character.\n */\nfunction isLetter(codepoint: number): boolean {\n    return (\n        (codepoint >= Character.a && codepoint <= Character.z) ||\n        (codepoint >= Character.A && codepoint <= Character.Z)\n    );\n}\n\n/**\n * Check if codepoint is either a digit or a letter character.\n */\nfunction isLetterOrNumber(codepoint: number): boolean {\n    return isLetter(codepoint) || isNumber(codepoint);\n}\n\n/**\n * Check if codepoint is an identification character: underscore, dollar sign, dot or bracket.\n */\nfunction isIdentChar(codepoint: number): boolean {\n    return (\n        isLetterOrNumber(codepoint) ||\n        codepoint === Character._ ||\n        codepoint === Character.Dollar ||\n        codepoint === Character.Dot ||\n        codepoint === Character.LBracket ||\n        codepoint === Character.RBracket\n    );\n}\n\n/**\n * Tokens used in theme grammar.\n */\nenum Token {\n    Eof = 0,\n    Error,\n    Identifier,\n    Number,\n    String,\n    Comma,\n    LParen,\n    RParen,\n    LBracket,\n    RBracket,\n    Exclaim,\n    TildeEqual,\n    CaretEqual,\n    DollarEqual,\n    EqualEqual,\n    ExclaimEqual,\n    Less,\n    Greater,\n    LessEqual,\n    GreaterEqual,\n    BarBar,\n    AmpAmp\n}\n\n/**\n * Maps a token to its string name.\n */\nfunction tokenSpell(token: Token): string {\n    switch (token) {\n        case Token.Eof:\n            return \"eof\";\n        case Token.Error:\n            return \"error\";\n        case Token.Identifier:\n            return \"identifier\";\n        case Token.Number:\n            return \"number\";\n        case Token.String:\n            return \"string\";\n        case Token.Comma:\n            return \",\";\n        case Token.LParen:\n            return \"(\";\n        case Token.RParen:\n            return \")\";\n        case Token.LBracket:\n            return \"[\";\n        case Token.RBracket:\n            return \"]\";\n        case Token.Exclaim:\n            return \"!\";\n        case Token.TildeEqual:\n            return \"~=\";\n        case Token.CaretEqual:\n            return \"^=\";\n        case Token.DollarEqual:\n            return \"$=\";\n        case Token.EqualEqual:\n            return \"==\";\n        case Token.ExclaimEqual:\n            return \"!=\";\n        case Token.Less:\n            return \"<\";\n        case Token.Greater:\n            return \">\";\n        case Token.LessEqual:\n            return \"<=\";\n        case Token.GreaterEqual:\n            return \">=\";\n        case Token.BarBar:\n            return \"||\";\n        case Token.AmpAmp:\n            return \"&&\";\n        default:\n            throw new Error(`invalid token ${token}`);\n    }\n}\n\n/**\n * Lexer class implementation.\n */\nclass Lexer {\n    private m_token: Token = Token.Error;\n    private m_index = 0;\n    private m_char: number = Character.Lf;\n    private m_text?: string;\n\n    constructor(readonly code: string) {}\n\n    /**\n     * Single lexer token.\n     */\n    token(): Token {\n        return this.m_token;\n    }\n\n    /**\n     * Parsed text.\n     */\n    text(): string {\n        return this.m_text || \"\";\n    }\n\n    /**\n     * Go to the next token.\n     */\n    next(): Token {\n        this.m_token = this.yylex();\n        if (this.m_token === Token.Error) {\n            throw new Error(`unexpected character ${this.m_char}`);\n        }\n        return this.m_token;\n    }\n\n    private yyinp(): void {\n        this.m_char = this.code.codePointAt(this.m_index++) || 0;\n    }\n\n    private yylex(): Token {\n        this.m_text = undefined;\n        while (isSpace(this.m_char)) {\n            this.yyinp();\n        }\n        if (this.m_char === 0) {\n            return Token.Eof;\n        }\n        const ch = this.m_char;\n        this.yyinp();\n        switch (ch) {\n            case Character.LParen:\n                return Token.LParen;\n            case Character.RParen:\n                return Token.RParen;\n            case Character.LBracket:\n                return Token.LBracket;\n            case Character.RBracket:\n                return Token.RBracket;\n            case Character.Comma:\n                return Token.Comma;\n            case Character.SingleQuote:\n            case Character.DoubleQuote: {\n                const start = this.m_index - 1;\n                while (this.m_char && this.m_char !== ch) {\n                    // ### TODO handle escape sequences\n                    this.yyinp();\n                }\n                if (this.m_char !== ch) {\n                    throw new Error(\"Unfinished string literal\");\n                }\n                this.yyinp();\n                this.m_text = this.code.substring(start, this.m_index - 2);\n                return Token.String;\n            }\n            case Character.Exclaim:\n                if (this.m_char === Character.Equal) {\n                    this.yyinp();\n                    return Token.ExclaimEqual;\n                }\n                return Token.Exclaim;\n            case Character.Caret:\n                if (this.m_char === Character.Equal) {\n                    this.yyinp();\n                    return Token.CaretEqual;\n                }\n                return Token.Error;\n            case Character.Tilde:\n                if (this.m_char === Character.Equal) {\n                    this.yyinp();\n                    return Token.TildeEqual;\n                }\n                return Token.Error;\n            case Character.Equal:\n                if (this.m_char === Character.Equal) {\n                    this.yyinp();\n                    return Token.EqualEqual;\n                }\n                return Token.Error;\n            case Character.Less:\n                if (this.m_char === Character.Equal) {\n                    this.yyinp();\n                    return Token.LessEqual;\n                }\n                return Token.Less;\n            case Character.Greater:\n                if (this.m_char === Character.Equal) {\n                    this.yyinp();\n                    return Token.GreaterEqual;\n                }\n                return Token.Greater;\n            case Character.Bar:\n                if (this.m_char === Character.Bar) {\n                    this.yyinp();\n                    return Token.BarBar;\n                }\n                return Token.Error;\n            case Character.Amp:\n                if (this.m_char === Character.Amp) {\n                    this.yyinp();\n                    return Token.AmpAmp;\n                }\n                return Token.Error;\n            default: {\n                const start = this.m_index - 2;\n                if (\n                    isLetter(ch) ||\n                    ch === Character._ ||\n                    (ch === Character.Dollar && isIdentChar(this.m_char))\n                ) {\n                    while (isIdentChar(this.m_char)) {\n                        this.yyinp();\n                    }\n                    this.m_text = this.code.substring(start, this.m_index - 1);\n                    return Token.Identifier;\n                } else if (isNumber(ch)) {\n                    while (isNumber(this.m_char)) {\n                        this.yyinp();\n                    }\n                    if (this.m_char === Character.Dot) {\n                        this.yyinp();\n                        while (isNumber(this.m_char)) {\n                            this.yyinp();\n                        }\n                    }\n                    this.m_text = this.code.substring(start, this.m_index - 1);\n                    return Token.Number;\n                } else if (ch === Character.Dollar) {\n                    if (this.m_char === Character.Equal) {\n                        this.yyinp();\n                        return Token.DollarEqual;\n                    }\n                    return Token.Error;\n                }\n            }\n        }\n        return Token.Error;\n    }\n}\n\nfunction getEqualityOp(token: Token): EqualityOp | undefined {\n    switch (token) {\n        case Token.TildeEqual:\n            return \"~=\";\n        case Token.CaretEqual:\n            return \"^=\";\n        case Token.DollarEqual:\n            return \"$=\";\n        case Token.EqualEqual:\n            return \"==\";\n        case Token.ExclaimEqual:\n            return \"!=\";\n        default:\n            return undefined;\n    } // switch\n}\n\nfunction getRelationalOp(token: Token): RelationalOp | undefined {\n    switch (token) {\n        case Token.Less:\n            return \"<\";\n        case Token.Greater:\n            return \">\";\n        case Token.LessEqual:\n            return \"<=\";\n        case Token.GreaterEqual:\n            return \">=\";\n        default:\n            return undefined;\n    } // switch\n}\n\nexport class ExprParser {\n    private readonly lex: Lexer;\n\n    constructor(code: string) {\n        this.lex = new Lexer(code);\n        this.lex.next();\n    }\n\n    parse(): Expr | never {\n        return this.parseLogicalOr();\n    }\n\n    private yyexpect(token: Token): void | never {\n        if (this.lex.token() !== token) {\n            throw new Error(\n                `Syntax error: Expected token '${tokenSpell(token)}' but ` +\n                    `found '${tokenSpell(this.lex.token())}'`\n            );\n        }\n        this.lex.next();\n    }\n\n    private parsePrimary(): Expr | never {\n        switch (this.lex.token()) {\n            case Token.Identifier: {\n                const text = this.lex.text();\n                switch (text) {\n                    case \"has\":\n                        this.lex.next(); // skip has keyword\n                        this.yyexpect(Token.LParen);\n                        const hasAttribute = this.lex.text();\n                        this.yyexpect(Token.Identifier);\n                        this.yyexpect(Token.RParen);\n                        return new HasAttributeExpr(hasAttribute);\n                    case \"length\":\n                        this.lex.next(); // skip length keyword\n                        this.yyexpect(Token.LParen);\n                        const value = this.parseLogicalOr();\n                        this.yyexpect(Token.RParen);\n                        return new CallExpr(\"length\", [value]);\n                    default:\n                        const expr = new VarExpr(text);\n                        this.lex.next();\n                        return expr;\n                }\n            }\n\n            case Token.LParen: {\n                this.lex.next();\n                const expr = this.parseLogicalOr();\n                this.yyexpect(Token.RParen);\n                return expr;\n            }\n\n            default:\n                return this.parseLiteral();\n        } // switch\n    }\n\n    private parseLiteral(): NumberLiteralExpr | StringLiteralExpr | never {\n        switch (this.lex.token()) {\n            case Token.Number: {\n                const expr = new NumberLiteralExpr(parseFloat(this.lex.text()));\n                this.lex.next();\n                return expr;\n            }\n            case Token.String: {\n                const expr = new StringLiteralExpr(this.lex.text());\n                this.lex.next();\n                return expr;\n            }\n            default:\n                throw new Error(\"Syntax error\");\n        } // switch\n    }\n\n    private parseUnary(): Expr | never {\n        if (this.lex.token() === Token.Exclaim) {\n            this.lex.next();\n            return new CallExpr(\"!\", [this.parseUnary()]);\n        }\n        return this.parsePrimary();\n    }\n\n    private parseRelational(): Expr | never {\n        let expr = this.parseUnary();\n        while (true) {\n            if (this.lex.token() === Token.Identifier && this.lex.text() === \"in\") {\n                this.lex.next();\n                this.yyexpect(Token.LBracket);\n                const elements = [this.parseLiteral()];\n                while (this.lex.token() === Token.Comma) {\n                    this.lex.next();\n                    elements.push(this.parseLiteral());\n                }\n                this.yyexpect(Token.RBracket);\n                expr = new CallExpr(\"in\", [\n                    expr,\n                    LiteralExpr.fromValue(elements.map(({ value }) => value))\n                ]);\n            } else {\n                const op = getRelationalOp(this.lex.token());\n                if (op === undefined) {\n                    break;\n                }\n                this.lex.next();\n                const right = this.parseUnary();\n                expr = new CallExpr(op, [expr, right]);\n            }\n        }\n        return expr;\n    }\n\n    private parseEquality(): Expr | never {\n        let expr = this.parseRelational();\n        while (true) {\n            let op: string | undefined = getEqualityOp(this.lex.token());\n\n            if (op === undefined) {\n                break;\n            }\n\n            if (op === \"~=\") {\n                op = \"in\";\n            }\n\n            this.lex.next();\n            const right = this.parseRelational();\n            expr = new CallExpr(op, [expr, right]);\n        }\n        return expr;\n    }\n\n    private parseLogicalAnd(): Expr | never {\n        const expr = this.parseEquality();\n\n        if (this.lex.token() !== Token.AmpAmp) {\n            return expr;\n        }\n\n        const expressions: Expr[] = [expr];\n\n        do {\n            this.lex.next();\n            expressions.push(this.parseEquality());\n        } while (this.lex.token() === Token.AmpAmp);\n\n        return new CallExpr(\"all\", expressions);\n    }\n\n    private parseLogicalOr(): Expr | never {\n        const expr = this.parseLogicalAnd();\n\n        if (this.lex.token() !== Token.BarBar) {\n            return expr;\n        }\n\n        const expressions: Expr[] = [expr];\n\n        do {\n            this.lex.next();\n            expressions.push(this.parseLogicalAnd());\n        } while (this.lex.token() === Token.BarBar);\n\n        return new CallExpr(\"any\", expressions);\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Common communication protocol for [[WorkerService]].\n */\nexport namespace WorkerServiceProtocol {\n    /**\n     * Service id of worker manager ([[WorkerServiceManager]]) used to create/destroy service\n     * instances in workers.\n     */\n    export const WORKER_SERVICE_MANAGER_SERVICE_ID = \"worker-service-manager\";\n\n    /**\n     * Define possible names of messages exchanged with services within `WebWorker`.\n     */\n    export enum ServiceMessageName {\n        Initialized = \"initialized\",\n        Request = \"request\",\n        Response = \"response\"\n    }\n\n    /**\n     * Interface for `ServiceMessage` which describes metadata for a service messages.\n     */\n    export interface ServiceMessage {\n        service: string;\n        type: ServiceMessageName;\n    }\n\n    /**\n     * This message is sent by the worker to the main thread. No data is sent. Receiving this\n     * message confirms that the worker has started successfully.\n     */\n    export interface InitializedMessage extends ServiceMessage {\n        type: ServiceMessageName.Initialized;\n    }\n\n    /**\n     * Type guard to check if an object is a signal message from worker.\n     */\n    export function isInitializedMessage(message: any): message is InitializedMessage {\n        return (\n            message &&\n            typeof message.service === \"string\" &&\n            typeof message.type === \"string\" &&\n            message.type === ServiceMessageName.Initialized\n        );\n    }\n\n    /**\n     * Define possible names of requests called on services within `WebWorker`.\n     */\n    export enum Requests {\n        CreateService = \"create-service\",\n        DestroyService = \"destroy-service\"\n    }\n\n    /**\n     * This is an internal general interface used in communication with workers.\n     * Check [[ConcurrentWorkerSet]]'s invokeRequest function for exemplary usage.\n     */\n    export interface ServiceRequest {\n        type: string;\n    }\n\n    /**\n     * This message is sent by the main thread to [[WorkerServiceManager]] to dynamically create a\n     * new service.\n     *\n     * May throw `UnknownServiceError` if service of given type is not registered in\n     * [[WorkerServiceManager]], see [[isUnknownServiceError]].\n     */\n    export interface CreateServiceRequest extends ServiceRequest {\n        type: Requests.CreateService;\n\n        /**\n         * Type of service to be created.\n         *\n         * @see [[WorkerServiceManager.register]]\n         */\n        targetServiceType: string;\n\n        /**\n         * The newly created service instance will be available under this id.\n         */\n        targetServiceId: string;\n    }\n\n    /**\n     * Test if `error` thrown by [[CreateServiceRequest]] was caused by unknown type of service.\n     */\n    export function isUnknownServiceError(error: Error): boolean {\n        return /unknown targetServiceType requested: /.test(error.message);\n    }\n\n    /**\n     * This message is sent by the main thread to [[WorkerServiceManager]] to dynamically destroy a\n     * service.\n     */\n    export interface DestroyServiceRequest extends ServiceRequest {\n        type: Requests.DestroyService;\n\n        /**\n         * Id of service to be destroyed.\n         */\n        targetServiceId: string;\n    }\n\n    /**\n     * Possible service management messages (`CreateService` or `DestroyService`) sent to WebWorker.\n     */\n    export type WorkerServiceManagerRequest = CreateServiceRequest | DestroyServiceRequest;\n\n    /**\n     * This message is a part of the Request-Response scheme implemented to be used in communication\n     * between workers and the decoder.\n     */\n    export interface RequestMessage extends ServiceMessage {\n        type: ServiceMessageName.Request;\n        messageId: number;\n        request: any;\n    }\n\n    /**\n     * Type guard to check if an object is a request message sent to a worker.\n     */\n    export function isRequestMessage(message: any): message is RequestMessage {\n        return (\n            message &&\n            typeof message.service === \"string\" &&\n            typeof message.type === \"string\" &&\n            message.type === ServiceMessageName.Request\n        );\n    }\n\n    /**\n     * This message is a part of the Request-Response scheme implemented to be used in communication\n     * between workers and the decoder.\n     */\n    export interface ResponseMessage extends ServiceMessage {\n        type: ServiceMessageName.Response;\n        messageId: number;\n        errorMessage?: string;\n        errorStack?: string;\n        response?: object;\n    }\n\n    /**\n     * Type guard to check if an object is a request message sent to a worker.\n     */\n    export function isResponseMessage(message: any): message is ResponseMessage {\n        return (\n            message &&\n            typeof message.service === \"string\" &&\n            typeof message.type === \"string\" &&\n            message.type === ServiceMessageName.Response\n        );\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeoJson } from \"../lib/GeoJsonDataType\";\nimport { WorkerServiceProtocol } from \"./WorkerServiceProtocol\";\n\n/**\n * Communication protocol with [[ITiler]].\n */\nexport namespace WorkerTilerProtocol {\n    /**\n     * Define possible names of requests called on tiler services within `WebWorker`.\n     */\n    export enum Requests {\n        RegisterIndex = \"register-index\",\n        UpdateIndex = \"update-index\",\n        TileRequest = \"tile-request\"\n    }\n\n    /**\n     * This object is sent to the tiler to register a new tile index in the worker.\n     */\n    export interface RegisterIndexRequest extends WorkerServiceProtocol.ServiceRequest {\n        type: Requests.RegisterIndex;\n        id: string;\n        input: string | GeoJson;\n    }\n\n    /**\n     * Type guard to check if an object is an index registration request sent to a worker.\n     */\n    export function isRegisterIndexRequest(message: any): message is RegisterIndexRequest {\n        return (\n            message && typeof message.type === \"string\" && message.type === Requests.RegisterIndex\n        );\n    }\n\n    /**\n     * This object is sent to the tiler to register a new tile index in the worker.\n     */\n    export interface UpdateIndexRequest extends WorkerServiceProtocol.ServiceRequest {\n        type: Requests.UpdateIndex;\n        id: string;\n        input: string | GeoJson;\n    }\n\n    /**\n     * Type guard to check if an object is an update request for the index registration.\n     */\n    export function isUpdateIndexRequest(message: any): message is UpdateIndexRequest {\n        return message && typeof message.type === \"string\" && message.type === Requests.UpdateIndex;\n    }\n\n    /**\n     * This object is sent to the tiler asking to retrieve a specific tile. The expected response\n     * type is an object containing a tiled payload.\n     */\n    export interface TileRequest extends WorkerServiceProtocol.ServiceRequest {\n        type: Requests.TileRequest;\n        index: string;\n        tileKey: number;\n    }\n\n    /**\n     * Type guard to check if an object is a tile request sent to a worker.\n     */\n    export function isTileRequest(message: any): message is TileRequest {\n        return message && typeof message.type === \"string\" && message.type === Requests.TileRequest;\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Definitions, StyleSet } from \"./Theme\";\nimport { WorkerServiceProtocol } from \"./WorkerServiceProtocol\";\n\n/**\n * Interface for `OptionsMap` which describes a general structure of key-value pairs.\n */\nexport interface OptionsMap {\n    [name: string]: any;\n}\n\n/**\n * Allows to cancel and prioritize requests inside the requestQueue. Useful to optimize the order of\n * decoding tiles during animations and camera movements.\n *\n * `RequestController` is not extending [[AbortController]], because this is not supported in ES5.\n */\nexport class RequestController implements AbortController {\n    /**\n     * Creates an instance of `RequestController`.\n     *\n     * @param {number} priority\n     * @param {AbortController} abortController Optional [[AbortController]] used internally, since\n     *      [[AbortController]]s should not be subclassed.\n     */\n    constructor(\n        public priority: number = 0,\n        public abortController: AbortController = new AbortController()\n    ) {}\n\n    get signal(): AbortSignal {\n        return this.abortController.signal;\n    }\n\n    /**\n     * Invoking this method will set this object's AbortSignal's aborted flag and\n     * signal to any observers that the associated activity is to be aborted.\n     */\n    abort(): void {\n        this.abortController.abort();\n    }\n}\n\n/**\n * Communication protocol with [[ITileDecoder]].\n */\nexport namespace WorkerDecoderProtocol {\n    /**\n     * Define possible names of messages exchanged with decoder services within `WebWorker`.\n     */\n    export enum DecoderMessageName {\n        Configuration = \"configuration\"\n    }\n\n    /**\n     * Interface for `DecodedTileMessage` which describes metadata for a decoded tile.\n     */\n    export interface DecoderMessage {\n        service: string;\n        type: DecoderMessageName;\n    }\n\n    /**\n     * Interface for a ConfigurationMessage that is sent from the datasource to the decoder. The\n     * message used to configure the [[ITileDecoder]].\n     */\n    export interface ConfigurationMessage extends DecoderMessage {\n        type: DecoderMessageName.Configuration;\n        styleSet?: StyleSet;\n        definitions?: Definitions;\n        options?: OptionsMap;\n        languages?: string[];\n    }\n\n    /**\n     * Type guard to check if an object is an instance of `ConfigurationMessage`.\n     */\n    export function isConfigurationMessage(message: any): message is ConfigurationMessage {\n        return (\n            message &&\n            typeof message.service === \"string\" &&\n            typeof message.type === \"string\" &&\n            message.type === DecoderMessageName.Configuration\n        );\n    }\n\n    /**\n     * Define possible names of requests called on decoder services within `WebWorker`.\n     */\n    export enum Requests {\n        DecodeTileRequest = \"decode-tile-request\",\n        TileInfoRequest = \"tile-info-request\"\n    }\n\n    /**\n     * This object is sent to the decoder asking to decode a specific tile. The expected response\n     * type is a [[DecodedTile]].\n     */\n    export interface DecodeTileRequest extends WorkerServiceProtocol.ServiceRequest {\n        type: Requests.DecodeTileRequest;\n        tileKey: number;\n        data: ArrayBufferLike;\n        projection: string;\n    }\n\n    /**\n     * Type guard to check if an object is a decoded tile object sent to a worker.\n     */\n    export function isDecodeTileRequest(message: any): message is DecodeTileRequest {\n        return (\n            message &&\n            typeof message.type === \"string\" &&\n            message.type === Requests.DecodeTileRequest\n        );\n    }\n\n    /**\n     * This object is sent to the decoder asking for a tile info of a specific tile. The expected\n     * response type is a [[DecodedTile]].\n     */\n    export interface TileInfoRequest extends WorkerServiceProtocol.ServiceRequest {\n        type: Requests.TileInfoRequest;\n        tileKey: number;\n        data: ArrayBufferLike;\n        projection: string;\n    }\n\n    /**\n     * Type guard to check if an object is an info tile object sent to a worker.\n     */\n    export function isTileInfoRequest(message: any): message is TileInfoRequest {\n        return (\n            message && typeof message.type === \"string\" && message.type === Requests.TileInfoRequest\n        );\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Env, Expr, MapEnv, Value } from \"./Expr\";\nimport { getPropertyValue } from \"./PropertyValue\";\n\nexport interface AttrEvaluationContext {\n    /**\n     * Expression evaluation environment containing variable bindings.\n     */\n    env: MapEnv;\n\n    /**\n     * Optional, cache of expression results.\n     *\n     * @see [[Expr.evaluate]]\n     */\n    cachedExprResults?: Map<Expr, Value>;\n}\n\n/**\n * Evaluate feature attr _without_ default value.\n *\n * @returns actual value or `undefined`\n */\nexport function evaluateTechniqueAttr<T = Value>(\n    context: Env | AttrEvaluationContext,\n    attrValue: T | Expr | undefined\n): T | undefined;\n\n/**\n * Evaluate feature attr _with_ default value.\n *\n * @returns actual value or `defaultValue`\n */\nexport function evaluateTechniqueAttr<T extends Value>(\n    context: Env | AttrEvaluationContext,\n    attrValue: T | Expr | undefined,\n    defaultValue: T\n): T;\n\nexport function evaluateTechniqueAttr<T = Value>(\n    context: Env | AttrEvaluationContext,\n    attrValue: Value | undefined,\n    defaultValue?: T\n): T | undefined {\n    if (attrValue === undefined) {\n        return defaultValue;\n    }\n\n    const result = Env.isEnv(context)\n        ? getPropertyValue(attrValue, context)\n        : getPropertyValue(attrValue, context.env, context.cachedExprResults);\n\n    return result ?? defaultValue;\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { isJsonExpr } from \"./Expr\";\nimport { StyleDeclaration, Theme } from \"./Theme\";\n\n/**\n * The ThemeVisitor visits every style in the theme in a depth-first fashion.\n */\nexport class ThemeVisitor {\n    constructor(readonly theme: Theme) {}\n    /**\n     * Applies a function to every style in the theme.\n     *\n     * @param visitFunc Function to be called with `style` as an argument. Function should return\n     *                  `true` to cancel visitation.\n     * @returns `true` if function has finished prematurely.\n     */\n    visitStyles(visitFunc: (style: StyleDeclaration) => boolean): boolean {\n        const visit = (style: StyleDeclaration): boolean => {\n            if (isJsonExpr(style)) {\n                return false;\n            }\n            if (visitFunc(style)) {\n                return true;\n            }\n            return false;\n        };\n        if (this.theme.styles !== undefined) {\n            for (const styleSetName in this.theme.styles) {\n                if (this.theme.styles[styleSetName] !== undefined) {\n                    for (const style of this.theme.styles[styleSetName]) {\n                        if (visit(style)) {\n                            return true;\n                        }\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Box3Like, GeoBox, Projection, ProjectionType } from \"@here/harp-geoutils\";\nimport { assert } from \"@here/harp-utils\";\nimport { Vector3 } from \"three\";\nimport { SubdivisionModifier } from \"./SubdivisionModifier\";\n\nconst VERTEX_POSITION_CACHE = [new Vector3(), new Vector3()];\n\nexport enum SubdivisionMode {\n    /**\n     * Subdivide all edges\n     */\n    All,\n    /**\n     * Only subdivide horizontal and vertical edges\n     */\n    NoDiagonals\n}\n\n/**\n * The [[EdgeLengthGeometrySubdivisionModifier]] subdivides triangle mesh depending on\n * length of edges.\n */\nexport class EdgeLengthGeometrySubdivisionModifier extends SubdivisionModifier {\n    private m_projectedBox: Box3Like;\n    private m_maxLength: number;\n    private m_maxLengthX: number;\n    private m_maxLengthY: number;\n\n    /**\n     * Constructs a new [[EdgeLengthGeometrySubdivisionModifier]].\n     *\n     * @param subdivision The subdivision factor\n     * @param geoBox The geo bounding box of a tile\n     * @param subdivisionMode Configures what edges to divide\n     * @param projection The projection that defines the world space of this geometry.\n     */\n    constructor(\n        readonly subdivision: number,\n        readonly geoBox: GeoBox,\n        readonly subdivisionMode: SubdivisionMode = SubdivisionMode.All,\n        readonly projection: Projection\n    ) {\n        super();\n\n        assert(\n            projection.type === ProjectionType.Planar,\n            \"EdgeLengthGeometrySubdivisionModifier only supports planar projections\"\n        );\n\n        const northEast = projection.projectPoint(geoBox.northEast, VERTEX_POSITION_CACHE[0]);\n        const southWest = projection.projectPoint(geoBox.southWest, VERTEX_POSITION_CACHE[1]);\n        this.m_projectedBox = {\n            min: {\n                x: Math.min(northEast.x, southWest.x),\n                y: Math.min(northEast.y, southWest.y),\n                z: Math.min(northEast.z, southWest.z)\n            },\n            max: {\n                x: Math.max(northEast.x, southWest.x),\n                y: Math.max(northEast.y, southWest.y),\n                z: Math.max(northEast.z, southWest.z)\n            }\n        };\n        this.m_maxLengthX = (this.m_projectedBox.max.x - this.m_projectedBox.min.x) / subdivision;\n        this.m_maxLengthY = (this.m_projectedBox.max.y - this.m_projectedBox.min.y) / subdivision;\n\n        // Increase max length slightly to account for precision errors\n        if (this.subdivisionMode === SubdivisionMode.All) {\n            this.m_maxLengthX *= 1.1;\n            this.m_maxLengthY *= 1.1;\n        }\n        this.m_maxLength = Math.sqrt(\n            this.m_maxLengthX * this.m_maxLengthX + this.m_maxLengthY * this.m_maxLengthY\n        );\n    }\n\n    /**\n     * Return upper bound for length of diagonal edges\n     */\n    get maxLength() {\n        return this.m_maxLength;\n    }\n\n    /**\n     * Return upper bound for edge length in x direction\n     */\n    get maxLengthX() {\n        return this.m_maxLengthX;\n    }\n\n    /**\n     * Return upper bound for edge length in y direction\n     */\n    get maxLengthY() {\n        return this.m_maxLengthY;\n    }\n\n    /** @override */\n    protected shouldSplitTriangle(a: Vector3, b: Vector3, c: Vector3): number | undefined {\n        const shouldSplitAB = this.shouldSplitEdge(a, b);\n        const shouldSplitBC = this.shouldSplitEdge(b, c);\n        const shouldSplitCA = this.shouldSplitEdge(c, a);\n        const shouldSplit = shouldSplitAB || shouldSplitBC || shouldSplitCA;\n\n        if (!shouldSplit) {\n            return;\n        }\n\n        const ab = a.distanceTo(b);\n        const bc = b.distanceTo(c);\n        const ca = c.distanceTo(a);\n        const maxDistance = Math.max(\n            shouldSplitAB ? ab : 0,\n            shouldSplitBC ? bc : 0,\n            shouldSplitCA ? ca : 0\n        );\n        if (ab === maxDistance) {\n            return 0;\n        } else if (bc === maxDistance) {\n            return 1;\n        } else if (ca === maxDistance) {\n            return 2;\n        }\n\n        throw new Error(\"Could not split triangle.\");\n    }\n\n    private shouldSplitEdge(a: Vector3, b: Vector3): boolean {\n        switch (this.subdivisionMode) {\n            case SubdivisionMode.All:\n                return (\n                    (a.y === b.y && Math.abs(a.x - b.x) > this.m_maxLengthX) ||\n                    (a.x === b.x && Math.abs(a.y - b.y) > this.m_maxLengthY) ||\n                    a.distanceTo(b) > this.m_maxLength\n                );\n            case SubdivisionMode.NoDiagonals:\n                return (\n                    (a.y === b.y && Math.abs(a.x - b.x) > this.m_maxLengthX) ||\n                    (a.x === b.x && Math.abs(a.y - b.y) > this.m_maxLengthY)\n                );\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Projection, sphereProjection } from \"@here/harp-geoutils\";\nimport { Vector3 } from \"three\";\nimport { SubdivisionModifier } from \"./SubdivisionModifier\";\n\nconst VERTEX_POSITION_CACHE = [new Vector3(), new Vector3(), new Vector3()];\n\n/**\n * The [[SphericalGeometrySubdivisionModifier]] subdivides triangle mesh geometries positioned\n * on the surface of a sphere centered at `(0, 0, 0)`.\n */\nexport class SphericalGeometrySubdivisionModifier extends SubdivisionModifier {\n    /**\n     * Constructs a new [[SphericalGeometrySubdivisionModifier]].\n     *\n     * @param angle The maximum angle in radians between two vertices and the origin.\n     * @param projection The projection that defines the world space of this geometry.\n     */\n    constructor(readonly angle: number, readonly projection: Projection = sphereProjection) {\n        super();\n    }\n\n    /** @override */\n    protected shouldSplitTriangle(a: Vector3, b: Vector3, c: Vector3): number | undefined {\n        const aa = sphereProjection.reprojectPoint(this.projection, a, VERTEX_POSITION_CACHE[0]);\n        const bb = sphereProjection.reprojectPoint(this.projection, b, VERTEX_POSITION_CACHE[1]);\n        const cc = sphereProjection.reprojectPoint(this.projection, c, VERTEX_POSITION_CACHE[2]);\n\n        const alpha = aa.angleTo(bb);\n        const beta = bb.angleTo(cc);\n        const gamma = cc.angleTo(aa);\n\n        // find the maximum angle\n        const m = Math.max(alpha, Math.max(beta, gamma));\n\n        // split the triangle if needed.\n        if (m < this.angle) {\n            return undefined;\n        }\n\n        if (m === alpha) {\n            return 0;\n        } else if (m === beta) {\n            return 1;\n        } else if (m === gamma) {\n            return 2;\n        }\n\n        throw new Error(\"failed to split triangle\");\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nimport { MemoryUsage } from \"../TextCanvas\";\nimport { GlyphData } from \"./GlyphData\";\nimport { GlyphTextureCache } from \"./GlyphTextureCache\";\nimport { FontStyle, FontVariant, TextRenderStyle } from \"./TextStyle\";\n\nconst ASSETS_PATH = \"_Assets/\";\nconst BOLD_ASSETS_PATH = \"_BoldAssets/\";\nconst ITALIC_ASSETS_PATH = \"_ItalicAssets/\";\nconst BOLD_ITALIC_ASSETS_PATH = \"_BoldItalicAssets/\";\nconst REPLACEMENT_PATH = \"_Assets/Extra/\";\n\ninterface SrcGlyphData {\n    id: number;\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n    xoffset: number;\n    yoffset: number;\n    xadvance: number;\n    page: number;\n    chnl: number;\n}\n\n/**\n * Metrics defining the placement and rendering of all glyphs in a given [[Font]].\n */\nexport interface FontMetrics {\n    size: number;\n    distanceRange: number;\n    base: number;\n    lineHeight: number;\n    lineGap: number;\n    capHeight: number;\n    xHeight: number;\n}\n\n/**\n * Description of all assets, charset and metrics that define a font inside a [[FontCatalog]].\n */\nexport interface Font {\n    name: string;\n    metrics: FontMetrics;\n    charset: string;\n    bold?: string;\n    italic?: string;\n    boldItalic?: string;\n}\n\n/**\n * Description of a continuous range of Unicode code points (as well as information on which fonts\n * supports it).\n */\nexport interface UnicodeBlock {\n    name: string;\n    min: number;\n    max: number;\n    fonts: string[];\n}\n\n/**\n * Collection of font assets used to render glyphs when using a [[TextCanvas]].\n *\n * @summary A `FontCatalog` works as a stack of SDF bitmap fonts (using the BMFont format) designed\n * to cover the widest Unicode code point range possible. In order to manage all these assets\n * elegantly, the assets inside the `FontCatalog` are stored on a per-Unicode-Block basis, and\n * assets for a block are only loaded once a glyph belonging to that block is requested.\n *\n * Bitmap information coming from all different fonts is then stored in a unified WebGL GPU Texture\n * resource, which can be sampled to render all currently loaded glyphs.\n *\n */\nexport class FontCatalog {\n    /**\n     * Loads a `FontCatalog`.\n     *\n     * @param url Asset url.\n     * @param maxCodePointCount Maximum number of unique code points bitmaps this `FontCatalog`'s\n     * internal texture can store simultaneously.\n     *\n     * @returns `FontCatalog` Promise.\n     */\n    static async load(path: string, maxCodePointCount: number): Promise<FontCatalog> {\n        const url = new URL(path, window.location.href);\n        const fontCatalog = await FontCatalog.loadJSON(url.href);\n\n        const replacementDirUrl = new URL(`${fontCatalog.name}${REPLACEMENT_PATH}`, url);\n        const replacementJson = await FontCatalog.loadJSON(\n            replacementDirUrl.href + \"Specials.json\"\n        );\n        const replacementTexture = await FontCatalog.loadTexture(\n            replacementDirUrl.href + \"Specials.png\"\n        );\n        replacementTexture.wrapS = THREE.ClampToEdgeWrapping;\n        replacementTexture.wrapT = THREE.ClampToEdgeWrapping;\n        replacementTexture.minFilter = THREE.NearestFilter;\n        replacementTexture.needsUpdate = true;\n\n        const replacementFont = fontCatalog.fonts.find((font: Font) => font.name === \"Extra\");\n        const replacementGlyph = new GlyphData(\n            65533,\n            \"Specials\",\n            replacementJson.chars[0].width,\n            replacementJson.chars[0].height,\n            replacementJson.chars[0].xadvance,\n            replacementJson.chars[0].xoffset,\n            replacementJson.chars[0].yoffset,\n            0.0,\n            0.0,\n            1.0,\n            1.0,\n            replacementTexture,\n            replacementFont!\n        );\n\n        const fontCatalogInfo = new FontCatalog(\n            url.href.substr(0, url.href.lastIndexOf(\"/\")),\n            fontCatalog.name,\n            fontCatalog.type,\n            fontCatalog.size,\n            fontCatalog.maxWidth,\n            fontCatalog.maxHeight,\n            fontCatalog.distanceRange,\n            fontCatalog.fonts,\n            fontCatalog.supportedBlocks,\n            maxCodePointCount,\n            replacementGlyph\n        );\n        return fontCatalogInfo;\n    }\n\n    static async loadTexture(url: string): Promise<THREE.Texture> {\n        return new Promise(resolve => {\n            new THREE.TextureLoader().load(url, resolve);\n        }) as Promise<THREE.Texture>;\n    }\n\n    static async loadJSON(url: string): Promise<any> {\n        const response = await fetch(url);\n        if (!response.ok) {\n            throw new Error(`${url} Status Text:  ${response.statusText}`);\n        }\n        const rawJSON = await response.text();\n        return JSON.parse(rawJSON);\n    }\n\n    private m_glyphTextureCache: GlyphTextureCache;\n\n    private m_loadingJson: Map<string, Promise<any>>;\n    private m_loadingPages: Map<string, Promise<THREE.Texture>>;\n    private m_loadingGlyphs: Map<string, Promise<GlyphData>>;\n    private m_loadedJson: Map<string, any>;\n    private m_loadedPages: Map<string, THREE.Texture>;\n    private m_loadedGlyphs: Map<string, Map<number, GlyphData>>;\n\n    /**\n     * @hidden\n     * Creates a new FontCatalog.\n     *\n     * @param url FontCatalog's URL.\n     * @param name FontCatalog's name.\n     * @param type FontCatalog's type (sdf or msdf).\n     * @param size FontCatalog's glyph size (pixels).\n     * @param maxWidth FontCatalog's maximum glyph width (pixels).\n     * @param maxHeight FontCatalog's maximum glyph height (pixels).\n     * @param distanceRange Distance range used to generate the SDF bitmaps.\n     * @param fonts Array of supported fonts.\n     * @param unicodeBlocks Array of supported Unicode blocks.\n     * @param maxCodePointCount Maximum number of unique code points bitmaps this `FontCatalog`'s\n     * internal texture can store simultaneously.\n     * @param m_replacementGlyph [[GlyphData]] to be used whenever a Unicode code point is not\n     * supported by this `FontCatalog`.\n     *\n     * @returns New FontCatalog.\n     */\n    private constructor(\n        readonly url: string,\n        readonly name: string,\n        readonly type: string,\n        readonly size: number,\n        readonly maxWidth: number,\n        readonly maxHeight: number,\n        readonly distanceRange: number,\n        readonly fonts: Font[],\n        readonly unicodeBlocks: UnicodeBlock[],\n        readonly maxCodePointCount: number,\n        private m_replacementGlyph: GlyphData\n    ) {\n        this.m_glyphTextureCache = new GlyphTextureCache(\n            maxCodePointCount,\n            this.maxWidth + 1,\n            this.maxHeight + 1\n        );\n\n        this.m_loadingJson = new Map<string, Promise<any>>();\n        this.m_loadingPages = new Map<string, Promise<THREE.Texture>>();\n        this.m_loadingGlyphs = new Map<string, Promise<GlyphData>>();\n        this.m_loadedJson = new Map<string, any>();\n        this.m_loadedPages = new Map<string, THREE.Texture>();\n        this.m_loadedGlyphs = new Map<string, Map<number, GlyphData>>();\n    }\n\n    /**\n     * Release all allocated resources.\n     */\n    dispose() {\n        this.fonts.length = 0;\n        this.unicodeBlocks.length = 0;\n        this.m_glyphTextureCache.dispose();\n        this.m_loadingJson.clear();\n        this.m_loadingPages.clear();\n        this.m_loadingGlyphs.clear();\n        this.m_loadedJson.clear();\n        this.m_loadedPages.clear();\n        this.m_loadedGlyphs.clear();\n    }\n\n    /**\n     * Removes all loaded (and loading) assets.\n     */\n    clear() {\n        this.m_glyphTextureCache.clear();\n        this.m_loadingJson.clear();\n        this.m_loadingPages.clear();\n        this.m_loadingGlyphs.clear();\n        this.m_loadedJson.clear();\n        this.m_loadedPages.clear();\n        this.m_loadedGlyphs.clear();\n    }\n\n    /**\n     * Updates the internal WebGLRenderTarget.\n     * The update will copy the newly introduced glyphs since the previous update.\n     *\n     * @param renderer WebGLRenderer.\n     */\n    update(renderer: THREE.WebGLRenderer): void {\n        this.m_glyphTextureCache.update(renderer);\n    }\n\n    /**\n     * Internal WebGL Texture.\n     */\n    get texture(): THREE.Texture {\n        return this.m_glyphTextureCache.texture;\n    }\n\n    /**\n     * Internal WebGL Texture size.\n     */\n    get textureSize(): THREE.Vector2 {\n        return this.m_glyphTextureCache.textureSize;\n    }\n\n    /**\n     * Current internal loading state.\n     */\n    get isLoading(): boolean {\n        return (\n            this.m_loadingJson.size > 0 ||\n            this.m_loadingPages.size > 0 ||\n            this.m_loadingGlyphs.size > 0\n        );\n    }\n\n    /**\n     * Loads the description file for a specific [[UnicodeBlock]]. This speeds up consequent calls\n     * to `FontCatalog`.loadCharset() that require glyphs from this block to be loaded.\n     *\n     * @param block Requested [[UnicodeBlock]].\n     * @param font [[Font]] to retrieve this Unicode block from.\n     * @param fontStyle [[FontStyle]] assets to load.\n     * @param loadPages If `true`, all pages in this Unicode block will also be loaded.\n     *\n     * @returns Loaded Unicode Block json.\n     */\n    async loadBlock(\n        block: UnicodeBlock,\n        font: Font,\n        fontStyle: FontStyle,\n        loadPages?: boolean\n    ): Promise<any> {\n        const assetsPath = this.getAssetsPath(fontStyle, font);\n        const jsonPath = `${assetsPath}/${block.name.replace(/ /g, \"_\")}.json`;\n        let json = this.m_loadedJson.get(jsonPath);\n        if (json === undefined) {\n            let jsonPromise = this.m_loadingJson.get(jsonPath);\n            if (jsonPromise === undefined) {\n                try {\n                    jsonPromise = FontCatalog.loadJSON(jsonPath);\n                    this.m_loadingJson.set(jsonPath, jsonPromise);\n                    json = await jsonPromise;\n                    this.m_loadingJson.delete(jsonPath);\n                    this.m_loadedJson.set(jsonPath, json);\n                } catch (e) {\n                    // tslint:disable-next-line:no-console\n                    console.error(e);\n                    this.m_loadingJson.delete(jsonPath);\n                }\n            } else {\n                json = await jsonPromise;\n            }\n        }\n\n        const pagePromises: Array<Promise<THREE.Texture>> = [];\n        if (loadPages === true) {\n            for (const page of json.pages) {\n                pagePromises.push(this.loadPage(`${assetsPath}/${page}`));\n            }\n        }\n        await Promise.all(pagePromises);\n\n        return json;\n    }\n\n    /**\n     * Releases the description file for a specific [[UnicodeBlock]] (and all downloaded pages).\n     * Safe to call when no assets for this block have been loaded.\n     *\n     * @param block Requested [[UnicodeBlock]].\n     * @param font [[Font]] to remove this Unicode block from.\n     * @param fontStyle [[FontStyle]] assets to remove.\n     */\n    removeBlock(block: UnicodeBlock, font: Font, fontStyle: FontStyle): void {\n        const assetsPath = this.getAssetsPath(fontStyle, font);\n        const jsonPath = `${assetsPath}/${block.name.replace(/ /g, \"_\")}.json`;\n        const json = this.m_loadedJson.get(jsonPath);\n        if (json !== undefined) {\n            for (const page of json.pages) {\n                const pagePath = `${assetsPath}/${page}`;\n                this.m_loadingPages.delete(pagePath);\n                this.m_loadedPages.delete(pagePath);\n            }\n            this.m_loadingJson.delete(jsonPath);\n            this.m_loadedJson.delete(jsonPath);\n        }\n    }\n\n    /**\n     * Loads all the required glyphs needed to render the input text. Character repetition will not\n     * be considered, and only styled assets (with applied font selection, style and variants) will\n     * be loaded.\n     *\n     * @param input Input text.\n     * @param style Specific [[TextRenderStyle]] for which glyphs will be loaded.\n     *\n     * @returns Promise containing an array of all loaded [[GlyphData]] for the input text.\n     */\n    async loadCharset(input: string, style: TextRenderStyle): Promise<GlyphData[]> {\n        const fontName = style.fontName;\n        const fontStyle = style.fontStyle;\n        const shouldTransform =\n            style.fontVariant === FontVariant.AllCaps ||\n            style.fontVariant === FontVariant.SmallCaps;\n\n        const charset = (shouldTransform ? input.toUpperCase() : input).replace(\n            /[\\s\\S](?=([\\s\\S]+))/g,\n            (c, s) => {\n                return s.indexOf(c) + 1 ? \"\" : c;\n            }\n        );\n        const glyphPromises: Array<Promise<GlyphData>> = [];\n        for (const char of charset) {\n            const codePoint = char.codePointAt(0)!;\n            const font = this.getFont(codePoint, fontName);\n            const fontHash = `${font.name}_${fontStyle}`;\n            const glyphHash = `${fontHash}_${codePoint}`;\n\n            let fontGlyphMap = this.m_loadedGlyphs.get(fontHash);\n            if (fontGlyphMap === undefined) {\n                fontGlyphMap = new Map();\n                this.m_loadedGlyphs.set(fontHash, fontGlyphMap);\n            }\n\n            const glyph = fontGlyphMap.get(codePoint);\n            if (glyph === undefined) {\n                let glyphPromise = this.m_loadingGlyphs.get(glyphHash);\n                if (glyphPromise === undefined) {\n                    if (font.charset.indexOf(String.fromCodePoint(codePoint)) === -1) {\n                        const replacementGlyph = this.createReplacementGlyph(codePoint, char, font);\n                        fontGlyphMap!.set(codePoint, replacementGlyph);\n                        this.m_glyphTextureCache.add(glyphHash, replacementGlyph);\n                        continue;\n                    }\n\n                    let charUnicodeBlock: UnicodeBlock | undefined;\n                    for (const block of this.unicodeBlocks) {\n                        if (codePoint >= block.min && codePoint <= block.max) {\n                            charUnicodeBlock = block;\n                            break;\n                        }\n                    }\n\n                    glyphPromise = this.loadAssets(codePoint, fontStyle, charUnicodeBlock!, font);\n                    this.m_loadingGlyphs.set(glyphHash, glyphPromise);\n                    glyphPromise.then((loadedGlyph: GlyphData) => {\n                        this.m_loadingGlyphs.delete(glyphHash);\n                        fontGlyphMap!.set(codePoint, loadedGlyph);\n                        this.m_glyphTextureCache.add(glyphHash, loadedGlyph);\n                    });\n                }\n                glyphPromises.push(glyphPromise);\n            } else if (!this.m_glyphTextureCache.has(glyphHash)) {\n                glyphPromises.push(Promise.resolve(glyph));\n                this.m_glyphTextureCache.add(glyphHash, glyph);\n            }\n        }\n\n        return Promise.all(glyphPromises);\n    }\n\n    /**\n     * Retrieves the loaded [[GlyphData]] for a specific character.\n     * Returns `undefined` if the assets for this glyph haven't been loaded yet.\n     *\n     * @param codePoint Character's Unicode code point.\n     * @param font [[Font]] to get this glyph from.\n     * @param fontStyle Specific [[FontStyle]] to get glyphs for.\n     *\n     * @returns [[GlyphData]] for this code point.\n     */\n    getGlyph(codePoint: number, font: Font, fontStyle: FontStyle): GlyphData | undefined {\n        const fontGlyphMap = this.m_loadedGlyphs.get(`${font.name}_${fontStyle}`);\n        if (fontGlyphMap === undefined) {\n            return undefined;\n        }\n        return fontGlyphMap.get(codePoint);\n    }\n\n    /**\n     * Retrieves the loaded [[GlyphData]] for the specified text.\n     * Returns `undefined` if the assets for these glyphs haven't been loaded yet.\n     *\n     * @param input Input text.\n     * @param style Specific [[TextRenderStyle]] to get glyphs for.\n     * @param letterCaseArray Array containing the original letter case for the requested glyphs.\n     *\n     * @returns Array containing [[GlyphData]] for each character of the input text.\n     */\n    getGlyphs(\n        input: string,\n        style: TextRenderStyle,\n        letterCaseArray?: boolean[]\n    ): GlyphData[] | undefined {\n        const result = [];\n        const fontName = style.fontName;\n        const fontStyle = style.fontStyle;\n        const fontVariant = style.fontVariant;\n        const shouldTransform =\n            fontVariant === FontVariant.AllCaps || fontVariant === FontVariant.SmallCaps;\n        for (const character of input) {\n            const transformedCharacter = shouldTransform ? character.toUpperCase() : character;\n            for (const char of transformedCharacter) {\n                const codePoint = char.codePointAt(0)!;\n                const font = this.getFont(codePoint, fontName);\n                const glyphData = this.getGlyph(codePoint, font, fontStyle);\n                if (glyphData !== undefined) {\n                    result.push(glyphData);\n                    if (letterCaseArray !== undefined) {\n                        letterCaseArray.push(char !== character);\n                    }\n                } else {\n                    return undefined;\n                }\n            }\n        }\n        return result;\n    }\n\n    /**\n     * Gets the best matched font for a specific character.\n     *\n     * @param codePoint Character's Unicode code point.\n     * @param fontName Font name suggestion.\n     *\n     * @returns Best matched font.\n     */\n    getFont(codePoint: number, fontName?: string): Font {\n        let selectedFontName: string = this.fonts[0].name;\n        for (const block of this.unicodeBlocks) {\n            if (codePoint >= block.min && codePoint <= block.max) {\n                selectedFontName =\n                    fontName !== undefined &&\n                    block.fonts.find(element => {\n                        return element === fontName;\n                    }) !== undefined\n                        ? fontName\n                        : block.fonts[0];\n                break;\n            }\n        }\n\n        return this.fonts.find(element => {\n            return element.name === selectedFontName;\n        })!;\n    }\n\n    /**\n     * Update the info with the memory footprint caused by objects owned by the `FontCatalog`.\n     *\n     * @param info The info object to increment with the values from this `FontCatalog`.\n     */\n    updateMemoryUsage(info: MemoryUsage) {\n        let numBytes = 0;\n\n        for (const block of this.unicodeBlocks) {\n            numBytes += (block.max - block.min) * 2;\n        }\n\n        // Always stored in RGBA internally.\n        let textureBytes =\n            this.m_glyphTextureCache.textureSize.x * this.m_glyphTextureCache.textureSize.y * 4;\n\n        for (const page in this.m_loadedPages.entries) {\n            if (this.m_loadedPages.get(page) !== undefined) {\n                const loadedPage = this.m_loadedPages.get(page);\n                if (loadedPage !== undefined) {\n                    textureBytes += loadedPage.image.width * loadedPage.image.height * 4;\n                }\n            }\n        }\n\n        info.heapSize += numBytes + textureBytes;\n        info.gpuSize += textureBytes;\n    }\n\n    private createReplacementGlyph(codePoint: number, char: string, font: Font): GlyphData {\n        const replacementGlyph = this.m_replacementGlyph.clone();\n        (replacementGlyph as any).codePoint = codePoint;\n        (replacementGlyph as any).character = char;\n        (replacementGlyph as any).font = font;\n        return replacementGlyph;\n    }\n\n    private async loadAssets(\n        codePoint: number,\n        fontStyle: FontStyle,\n        block: UnicodeBlock,\n        font: Font\n    ): Promise<GlyphData> {\n        const json = await this.loadBlock(block, font, fontStyle);\n        if (json === undefined) {\n            return this.m_replacementGlyph;\n        }\n\n        const sourceGlyphData = (json.chars as SrcGlyphData[]).find(char => char.id === codePoint);\n        const assetsPath = this.getAssetsPath(fontStyle, font);\n        const texturePath = `${assetsPath}/${json.pages[sourceGlyphData!.page]}`;\n        const texture = await this.loadPage(texturePath);\n\n        const glyphData = new GlyphData(\n            sourceGlyphData!.id,\n            block.name,\n            sourceGlyphData!.width,\n            sourceGlyphData!.height,\n            sourceGlyphData!.xadvance,\n            sourceGlyphData!.xoffset,\n            sourceGlyphData!.yoffset,\n            sourceGlyphData!.x / texture!.image.width,\n            1.0 - (sourceGlyphData!.y + sourceGlyphData!.height) / texture!.image.height,\n            (sourceGlyphData!.x + sourceGlyphData!.width) / texture!.image.width,\n            1.0 - sourceGlyphData!.y / texture!.image.height,\n            texture!,\n            font\n        );\n\n        return glyphData;\n    }\n\n    private async loadPage(pagePath: string): Promise<THREE.Texture> {\n        let page = this.m_loadedPages.get(pagePath);\n        if (page === undefined) {\n            let pagePromise = this.m_loadingPages.get(pagePath);\n            if (pagePromise === undefined) {\n                pagePromise = FontCatalog.loadTexture(pagePath);\n                this.m_loadingPages.set(pagePath, pagePromise);\n                page = await pagePromise;\n                page.wrapS = THREE.ClampToEdgeWrapping;\n                page.wrapT = THREE.ClampToEdgeWrapping;\n                page.minFilter = THREE.NearestFilter;\n                page.needsUpdate = true;\n                if (this.m_loadingPages.delete(pagePath)) {\n                    this.m_loadedPages.set(pagePath, page);\n                }\n                this.m_loadingPages.delete(pagePath);\n            } else {\n                page = await pagePromise;\n            }\n        }\n        return page;\n    }\n\n    private getAssetsPath(fontStyle: FontStyle, font: Font) {\n        let fontStylePath = ASSETS_PATH;\n        switch (fontStyle) {\n            case FontStyle.Bold:\n                if (font.bold !== undefined) {\n                    fontStylePath = BOLD_ASSETS_PATH;\n                }\n                break;\n            case FontStyle.Italic:\n                if (font.italic !== undefined) {\n                    fontStylePath = ITALIC_ASSETS_PATH;\n                }\n                break;\n            case FontStyle.BoldItalic:\n                if (font.boldItalic !== undefined) {\n                    fontStylePath = BOLD_ITALIC_ASSETS_PATH;\n                } else if (font.italic !== undefined) {\n                    fontStylePath = ITALIC_ASSETS_PATH;\n                } else if (font.bold !== undefined) {\n                    fontStylePath = BOLD_ASSETS_PATH;\n                }\n                break;\n        }\n        return `${this.url}/${this.name}${fontStylePath}${font.name!}`;\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { LRUCache } from \"@here/harp-lrucache\";\nimport * as THREE from \"three\";\n\nimport { Font, FontMetrics } from \"./FontCatalog\";\nimport { GlyphData } from \"./GlyphData\";\nimport { GlyphClearMaterial, GlyphCopyMaterial } from \"./TextMaterials\";\n\n/**\n * Maximum number of texture atlas pages we can copy from in a single go. This amount is determined\n * by the maximum number of texture units available on a pixel shader for all devices:\n * https://webglstats.com/webgl/parameter/MAX_TEXTURE_IMAGE_UNITS\n */\nconst MAX_NUM_COPY_PAGES = 8;\n\n/**\n * Maximum texture size supported. This amount is determined by the maximum texture size supported\n * for all devices:\n * https://webglstats.com/webgl/parameter/MAX_TEXTURE_SIZE\n */\nconst MAX_TEXTURE_SIZE = 4096;\n\n/**\n * @hidden\n * Information stored for every entry in a [[GlyphTextureCache]].\n */\nexport interface GlyphCacheEntry {\n    glyphData: GlyphData;\n    location: THREE.Vector2;\n}\n\n/**\n * @hidden\n * Unified glyph SDF bitmap storage for all fonts in a [[FontCatalog]].\n * Implemented as an abstraction layer on top of an LRUCache and WebGLRenderTarget.\n */\nexport class GlyphTextureCache {\n    private m_cacheWidth: number;\n    private m_cacheHeight: number;\n    private m_textureSize: THREE.Vector2;\n    private m_entryCache: LRUCache<string, GlyphCacheEntry>;\n\n    private m_scene: THREE.Scene;\n    private m_camera: THREE.OrthographicCamera;\n    private m_rt: THREE.WebGLRenderTarget;\n\n    private m_copyTextureSet: Set<THREE.Texture>;\n    private m_copyTransform: THREE.Matrix3;\n    private m_copyPositions: THREE.Vector2[];\n    private m_copyMaterial: GlyphCopyMaterial;\n    private m_copyVertexBuffer: THREE.InterleavedBuffer;\n    private m_copyPositionAttribute: THREE.InterleavedBufferAttribute;\n    private m_copyUVAttribute: THREE.InterleavedBufferAttribute;\n    private m_copyGeometry: THREE.BufferGeometry;\n    private m_copyMesh: THREE.Mesh;\n    private m_copyGeometryDrawCount: number;\n\n    private m_clearMaterial: GlyphClearMaterial;\n    private m_clearPositionAttribute: THREE.BufferAttribute;\n    private m_clearGeometry: THREE.BufferGeometry;\n    private m_clearMesh: THREE.Mesh;\n    private m_clearGeometryDrawCount: number;\n\n    /**\n     * Creates a `GlyphTextureCache` object.\n     *\n     * @param capacity Cache's maximum glyph capacity.\n     * @param entryWidth Maximum entry width.\n     * @param entryHeight Maximum entry height.\n     *\n     * @returns New `GlyphTextureCache`.\n     */\n    constructor(\n        readonly capacity: number,\n        readonly entryWidth: number,\n        readonly entryHeight: number\n    ) {\n        const nRows = Math.floor(Math.sqrt(capacity));\n        this.m_cacheHeight = nRows * nRows < capacity ? nRows + 1 : nRows;\n        this.m_cacheWidth = nRows * this.m_cacheHeight < capacity ? nRows + 1 : nRows;\n\n        this.m_textureSize = new THREE.Vector2(\n            this.m_cacheWidth * entryWidth,\n            this.m_cacheHeight * entryHeight\n        );\n        if (this.m_textureSize.y > MAX_TEXTURE_SIZE || this.m_textureSize.x > MAX_TEXTURE_SIZE) {\n            // tslint:disable-next-line:no-console\n            console.warn(\n                \"GlyphTextureCache texture size (\" +\n                    this.m_textureSize.x +\n                    \", \" +\n                    this.m_textureSize.y +\n                    \") exceeds WebGL's widely supported MAX_TEXTURE_SIZE (\" +\n                    MAX_TEXTURE_SIZE +\n                    \").\\n\" +\n                    \"This could result in rendering errors on some devices.\\n\" +\n                    \"Please consider reducing its capacity or input assets size.\"\n            );\n        }\n\n        this.m_entryCache = new LRUCache<string, GlyphCacheEntry>(capacity);\n        this.initCacheEntries();\n\n        this.m_scene = new THREE.Scene();\n        this.m_camera = new THREE.OrthographicCamera(\n            0,\n            this.m_textureSize.x,\n            this.m_textureSize.y,\n            0\n        );\n        this.m_camera.position.z = 1;\n        this.m_camera.updateMatrixWorld(false);\n        this.m_rt = new THREE.WebGLRenderTarget(this.m_textureSize.x, this.m_textureSize.y, {\n            wrapS: THREE.ClampToEdgeWrapping,\n            wrapT: THREE.ClampToEdgeWrapping,\n            depthBuffer: false,\n            stencilBuffer: false\n        });\n\n        this.m_copyTextureSet = new Set<THREE.Texture>();\n        this.m_copyTransform = new THREE.Matrix3();\n        this.m_copyPositions = [];\n        this.m_copyPositions.push(\n            new THREE.Vector2(),\n            new THREE.Vector2(),\n            new THREE.Vector2(),\n            new THREE.Vector2()\n        );\n\n        this.m_copyMaterial = new GlyphCopyMaterial();\n        this.m_copyVertexBuffer = new THREE.InterleavedBuffer(new Float32Array(capacity * 20), 5);\n        this.m_copyVertexBuffer.setUsage(THREE.DynamicDrawUsage);\n\n        this.m_copyPositionAttribute = new THREE.InterleavedBufferAttribute(\n            this.m_copyVertexBuffer,\n            3,\n            0\n        );\n        this.m_copyUVAttribute = new THREE.InterleavedBufferAttribute(\n            this.m_copyVertexBuffer,\n            2,\n            3\n        );\n        this.m_copyGeometry = new THREE.BufferGeometry();\n        this.m_copyGeometry.setAttribute(\"position\", this.m_copyPositionAttribute);\n        this.m_copyGeometry.setAttribute(\"uv\", this.m_copyUVAttribute);\n\n        const copyIndexBuffer = new THREE.BufferAttribute(new Uint32Array(capacity * 6), 1);\n        copyIndexBuffer.setUsage(THREE.DynamicDrawUsage);\n        this.m_copyGeometry.setIndex(copyIndexBuffer);\n        this.m_copyMesh = new THREE.Mesh(this.m_copyGeometry, this.m_copyMaterial);\n        this.m_copyMesh.frustumCulled = false;\n        this.m_copyGeometryDrawCount = 0;\n\n        this.m_clearMaterial = new GlyphClearMaterial();\n        this.m_clearPositionAttribute = new THREE.BufferAttribute(\n            new Float32Array(capacity * 8),\n            2\n        );\n        this.m_clearPositionAttribute.setUsage(THREE.DynamicDrawUsage);\n        this.m_clearGeometry = new THREE.BufferGeometry();\n        this.m_clearGeometry.setAttribute(\"position\", this.m_clearPositionAttribute);\n        const clearIndexBuffer = new THREE.BufferAttribute(new Uint32Array(capacity * 6), 1);\n        clearIndexBuffer.setUsage(THREE.DynamicDrawUsage);\n\n        this.m_clearGeometry.setIndex(clearIndexBuffer);\n        this.m_clearMesh = new THREE.Mesh(this.m_clearGeometry, this.m_clearMaterial);\n        this.m_clearMesh.frustumCulled = false;\n        this.m_clearGeometryDrawCount = 0;\n\n        this.m_scene.add(this.m_clearMesh, this.m_copyMesh);\n    }\n\n    /**\n     * Release all allocated resources.\n     */\n    dispose(): void {\n        this.m_entryCache.clear();\n        this.m_scene.remove(this.m_clearMesh, this.m_copyMesh);\n        this.m_rt.dispose();\n        this.m_clearMaterial.dispose();\n        this.m_copyMaterial.dispose();\n        this.m_copyTextureSet.clear();\n        this.m_clearGeometry.dispose();\n        this.m_copyGeometry.dispose();\n    }\n\n    /**\n     * Internal WebGL Texture.\n     */\n    get texture(): THREE.Texture {\n        return this.m_rt.texture;\n    }\n\n    /**\n     * Internal WebGL Texture size.\n     */\n    get textureSize(): THREE.Vector2 {\n        return this.m_textureSize;\n    }\n\n    /**\n     * Add a new entry to the GlyphTextureCache. If the limit of entries is hit, the least requested\n     * entry will be replaced.\n     *\n     * @param hash Entry's hash.\n     * @param glyph Entry's glyph data.\n     */\n    add(hash: string, glyph: GlyphData): void {\n        const entry = this.m_entryCache.get(hash);\n        if (entry !== undefined) {\n            return;\n        }\n\n        const oldestEntry = this.m_entryCache.oldest;\n        if (oldestEntry === null) {\n            throw new Error(\"GlyphTextureCache is uninitialized!\");\n        }\n        this.clearCacheEntry(oldestEntry.value);\n        this.copyGlyphToCache(hash, glyph, oldestEntry.value.location);\n    }\n\n    /**\n     * Checks if an entry is in the cache.\n     *\n     * @param hash Entry's hash.\n     *\n     * @returns Test result.\n     */\n    has(hash: string): boolean {\n        return this.m_entryCache.has(hash);\n    }\n\n    /**\n     * Retrieves an entry from the cache.\n     *\n     * @param hash Entry's hash.\n     *\n     * @returns Retrieval result.\n     */\n    get(hash: string): GlyphCacheEntry | undefined {\n        return this.m_entryCache.get(hash);\n    }\n\n    /**\n     * Clears the internal LRUCache.\n     */\n    clear(): void {\n        this.m_copyGeometryDrawCount = 0;\n        this.m_clearGeometryDrawCount = 0;\n        this.m_entryCache.clear();\n        this.m_copyTextureSet.clear();\n        this.initCacheEntries();\n    }\n\n    /**\n     * Updates the internal WebGLRenderTarget.\n     * The update will copy the newly introduced glyphs since the previous update.\n     *\n     * @param renderer WebGLRenderer.\n     */\n    update(renderer: THREE.WebGLRenderer): void {\n        let oldRenderTarget: THREE.RenderTarget | null = null;\n\n        const willClearGeometry = this.m_clearGeometryDrawCount > 0;\n        const willCopyGeometry = this.m_copyGeometryDrawCount > 0;\n\n        if (willClearGeometry || willCopyGeometry) {\n            oldRenderTarget = renderer.getRenderTarget();\n            renderer.setRenderTarget(this.m_rt);\n        }\n\n        if (willClearGeometry) {\n            if (this.m_clearGeometry.index === null) {\n                throw new Error(\"GlyphTextureCache clear geometry index is uninitialized!\");\n            }\n            this.m_clearPositionAttribute.needsUpdate = true;\n            this.m_clearPositionAttribute.updateRange.offset = 0;\n            this.m_clearPositionAttribute.updateRange.count = this.m_clearGeometryDrawCount * 8;\n            this.m_clearGeometry.index.needsUpdate = true;\n            this.m_clearGeometry.index.updateRange.offset = 0;\n            this.m_clearGeometry.index.updateRange.count = this.m_clearGeometryDrawCount * 6;\n            this.m_clearGeometry.setDrawRange(0, this.m_clearGeometryDrawCount * 6);\n\n            this.m_clearMesh.visible = true;\n            this.m_copyMesh.visible = false;\n\n            renderer.render(this.m_scene, this.m_camera);\n            this.m_clearGeometryDrawCount = 0;\n            this.m_clearMesh.visible = false;\n        }\n\n        if (willCopyGeometry) {\n            if (this.m_copyGeometry.index === null) {\n                throw new Error(\"GlyphTextureCache copy geometry index is uninitialized!\");\n            }\n            this.m_copyVertexBuffer.needsUpdate = true;\n            this.m_copyVertexBuffer.updateRange.offset = 0;\n            this.m_copyVertexBuffer.updateRange.count = this.m_copyGeometryDrawCount * 20;\n            this.m_copyGeometry.index.needsUpdate = true;\n            this.m_copyGeometry.index.updateRange.offset = 0;\n            this.m_copyGeometry.index.updateRange.count = this.m_copyGeometryDrawCount * 6;\n            this.m_copyGeometry.setDrawRange(0, this.m_copyGeometryDrawCount * 6);\n\n            this.m_copyMesh.visible = true;\n            const srcPages = Array.from(this.m_copyTextureSet);\n            const nCopies = Math.ceil(this.m_copyTextureSet.size / MAX_NUM_COPY_PAGES);\n            for (let copyIndex = 0; copyIndex < nCopies; copyIndex++) {\n                const pageOffset = copyIndex * MAX_NUM_COPY_PAGES;\n                this.m_copyMaterial.uniforms.pageOffset.value = pageOffset;\n                for (let i = 0; i < MAX_NUM_COPY_PAGES; i++) {\n                    const pageIndex = pageOffset + i;\n                    if (pageIndex < this.m_copyTextureSet.size) {\n                        this.m_copyMaterial.uniforms[\"page\" + i].value = srcPages[pageIndex];\n                    }\n                }\n\n                renderer.render(this.m_scene, this.m_camera);\n            }\n            this.m_copyTextureSet.clear();\n            this.m_copyGeometryDrawCount = 0;\n        }\n        if (willClearGeometry || willCopyGeometry) {\n            renderer.setRenderTarget(oldRenderTarget);\n        }\n    }\n\n    private initCacheEntries() {\n        const dummyMetrics: FontMetrics = {\n            size: 0,\n            distanceRange: 0,\n            base: 0,\n            lineHeight: 0,\n            lineGap: 0,\n            capHeight: 0,\n            xHeight: 0\n        };\n        const dummyFont: Font = {\n            name: \"\",\n            metrics: dummyMetrics,\n            charset: \"\"\n        };\n\n        const dummyGlyphData = new GlyphData(\n            0,\n            \"\",\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            THREE.Texture.DEFAULT_IMAGE,\n            dummyFont\n        );\n\n        for (let i = 0; i < this.m_cacheHeight; i++) {\n            for (let j = 0; j < this.m_cacheWidth; j++) {\n                const dummyEntry: GlyphCacheEntry = {\n                    glyphData: dummyGlyphData,\n                    location: new THREE.Vector2(j, i)\n                };\n                this.m_entryCache.set(`Dummy_${i * this.m_cacheHeight + j}`, dummyEntry);\n            }\n        }\n    }\n\n    private copyGlyphToCache(hash: string, glyph: GlyphData, cacheLocation: THREE.Vector2) {\n        this.m_copyTextureSet.add(glyph.texture);\n        let copyTextureIndex = 0;\n        for (const value of this.m_copyTextureSet.values()) {\n            if (value === glyph.texture) {\n                break;\n            }\n            copyTextureIndex++;\n        }\n        glyph.copyIndex = copyTextureIndex;\n\n        this.m_copyTransform.set(\n            1.0,\n            0.0,\n            cacheLocation.x * this.entryWidth - glyph.offsetX,\n            0.0,\n            1.0,\n            cacheLocation.y * this.entryHeight - glyph.positions[0].y,\n            0.0,\n            0.0,\n            0.0\n        );\n        for (let i = 0; i < 4; ++i) {\n            this.m_copyPositions[i].set(glyph.positions[i].x, glyph.positions[i].y);\n            this.m_copyPositions[i].applyMatrix3(this.m_copyTransform);\n        }\n\n        if (this.m_copyGeometryDrawCount >= this.capacity) {\n            return;\n        }\n        const baseVertex = this.m_copyGeometryDrawCount * 4;\n        const baseIndex = this.m_copyGeometryDrawCount * 6;\n\n        for (let i = 0; i < 4; ++i) {\n            this.m_copyPositionAttribute.setXYZ(\n                baseVertex + i,\n                this.m_copyPositions[i].x,\n                this.m_copyPositions[i].y,\n                glyph.copyIndex\n            );\n            this.m_copyUVAttribute.setXY(\n                baseVertex + i,\n                glyph.sourceTextureCoordinates[i].x,\n                glyph.sourceTextureCoordinates[i].y\n            );\n        }\n\n        if (this.m_copyGeometry.index === null) {\n            throw new Error(\"GlyphTextureCache copy geometry index is uninitialized!\");\n        }\n        this.m_copyGeometry.index.setX(baseIndex, baseVertex);\n        this.m_copyGeometry.index.setX(baseIndex + 1, baseVertex + 1);\n        this.m_copyGeometry.index.setX(baseIndex + 2, baseVertex + 2);\n        this.m_copyGeometry.index.setX(baseIndex + 3, baseVertex + 2);\n        this.m_copyGeometry.index.setX(baseIndex + 4, baseVertex + 1);\n        this.m_copyGeometry.index.setX(baseIndex + 5, baseVertex + 3);\n\n        ++this.m_copyGeometryDrawCount;\n\n        const u0 = this.m_copyPositions[0].x / this.m_textureSize.x;\n        const v0 = this.m_copyPositions[0].y / this.m_textureSize.y;\n        const u1 = this.m_copyPositions[3].x / this.m_textureSize.x;\n        const v1 = this.m_copyPositions[3].y / this.m_textureSize.y;\n        glyph.dynamicTextureCoordinates[0].set(u0, v0);\n        glyph.dynamicTextureCoordinates[1].set(u1, v0);\n        glyph.dynamicTextureCoordinates[2].set(u0, v1);\n        glyph.dynamicTextureCoordinates[3].set(u1, v1);\n\n        glyph.isInCache = true;\n        this.m_entryCache.set(hash, {\n            glyphData: glyph,\n            location: cacheLocation\n        });\n    }\n\n    private clearCacheEntry(entry: GlyphCacheEntry) {\n        entry.glyphData.isInCache = false;\n        this.m_copyPositions[0].set(\n            entry.location.x * this.entryWidth,\n            entry.location.y * this.entryHeight\n        );\n        this.m_copyPositions[1].set(\n            (entry.location.x + 1) * this.entryWidth,\n            entry.location.y * this.entryHeight\n        );\n        this.m_copyPositions[2].set(\n            entry.location.x * this.entryWidth,\n            (entry.location.y + 1) * this.entryHeight\n        );\n        this.m_copyPositions[3].set(\n            (entry.location.x + 1) * this.entryWidth,\n            (entry.location.y + 1) * this.entryHeight\n        );\n\n        if (this.m_clearGeometryDrawCount >= this.capacity) {\n            return;\n        }\n        const baseVertex = this.m_clearGeometryDrawCount * 4;\n        const baseIndex = this.m_clearGeometryDrawCount * 6;\n\n        for (let i = 0; i < 4; ++i) {\n            this.m_clearPositionAttribute.setXY(\n                baseVertex + i,\n                this.m_copyPositions[i].x,\n                this.m_copyPositions[i].y\n            );\n        }\n\n        if (this.m_clearGeometry.index === null) {\n            throw new Error(\"GlyphTextureCache clear geometry index is uninitialized!\");\n        }\n        this.m_clearGeometry.index.setX(baseIndex, baseVertex);\n        this.m_clearGeometry.index.setX(baseIndex + 1, baseVertex + 1);\n        this.m_clearGeometry.index.setX(baseIndex + 2, baseVertex + 2);\n        this.m_clearGeometry.index.setX(baseIndex + 3, baseVertex + 2);\n        this.m_clearGeometry.index.setX(baseIndex + 4, baseVertex + 1);\n        this.m_clearGeometry.index.setX(baseIndex + 5, baseVertex + 3);\n\n        ++this.m_clearGeometryDrawCount;\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { assert } from \"@here/harp-utils\";\n\n/** @hidden */\nexport class Entry<Key, Value> {\n    constructor(\n        public key: Key,\n        public value: Value,\n        public size: number,\n        public newer: Entry<Key, Value> | null,\n        public older: Entry<Key, Value> | null\n    ) {}\n}\n\n/**\n * Fixed size cache that evicts its entries in least-recently-used order when it overflows.\n * Modeled after standard JavaScript `Map` otherwise.\n */\nexport class LRUCache<Key, Value> {\n    /**\n     * Optional callback that is called on every item that is evicted from the cache.\n     *\n     * **Note**: This callback is not called when an item is explicitly deleted from the map via\n     * [[delete]] or [[clear]].\n     */\n    evictionCallback?: (key: Key, value: Value) => void;\n\n    /**\n     * Optional callback that is called on every item that should be evicted from the cache to\n     * determine if it can be removed, or should be locked in the cache.\n     *\n     * It returns `true` if the item can be removed from cache, `false` otherwise. Locking items in\n     * the cache should be a temporary measure, since if the cache is filled with non-evictable\n     * items only, it may grow beyond its capacity.\n     *\n     * **Note**: This callback is not called when an item is explicitly deleted from the map via\n     * [[delete]] or [[clear]].\n     */\n    canEvict?: (key: Key, value: Value) => boolean;\n    private m_capacity: number;\n    private m_size = 0;\n\n    /**\n     * The internal map object that keeps the key-value pairs and their order.\n     */\n    private m_map = new Map<Key, Entry<Key, Value>>();\n\n    /**\n     * The newest entry, i.e. the most recently used item.\n     */\n    private m_newest: Entry<Key, Value> | null = null;\n\n    /**\n     * The oldest entry, i.e. the least recently used item.\n     */\n    private m_oldest: Entry<Key, Value> | null = null;\n\n    /**\n     * A function determining the size per element.\n     */\n    private m_sizeFunction: (v: Value) => number;\n\n    /**\n     * Creates a new instance of `LRUCache`.\n     *\n     * The optional [[sizeFunction]] can be used to fine tune the memory consumption of all cached\n     * elements, thus [[cacheCapacity]] means then memory used (in MBs). Otherwise, if\n     * [[sizeFunction]] is not specified, the [[cacheCapacity]] accounts for the maximum\n     * number of elements stored.\n     *\n     * @param cacheCapacity Number used to configure the maximum cache size, may express\n     * number of entries or memory consumed in megabytes depending on [[sizeFunction]].\n     * @param sizeFunction A function determining the size per element.\n     */\n    constructor(cacheCapacity: number, sizeFunction: (v: Value) => number = () => 1) {\n        this.m_capacity = cacheCapacity;\n        this.m_sizeFunction = sizeFunction;\n    }\n\n    /**\n     * Iterates over all items from the most recently used item to the least recently used one.\n     *\n     * **Note**: Results are undefined if the entire cache is modified during iteration. You may\n     * although modify the current element in [[callbackfn]] function.\n     *\n     * @param callbackfn The callback to call for each item.\n     * @param thisArg Optional this argument for the callback.\n     */\n    forEach(\n        callbackfn: (value: Value, key: Key, map: LRUCache<Key, Value>) => void,\n        thisArg?: any\n    ): void {\n        let entry = this.m_newest;\n        while (entry !== null) {\n            const older = entry.older;\n            callbackfn.call(thisArg, entry.value, entry.key, this);\n            entry = older;\n        }\n    }\n\n    /**\n     * The size of the cache, i.e. the sum of all the sizes of all the objects in the cache.\n     *\n     * @returns The size of the cache.\n     */\n    get size(): number {\n        return this.m_size;\n    }\n\n    /**\n     * Returns the maximum capacity of the cache, i.e. the maximum number of elements this cache\n     * can contain or the total amount of memory that may be consumed by cache if element size\n     * function was specified in cache c-tor.\n     *\n     * @returns The capacity of the cache.\n     */\n    get capacity(): number {\n        return this.m_capacity;\n    }\n\n    /**\n     * @deprecated - DO NOT USE. Will be removed in future versions.\n     *\n     * Returns the internal map object that keeps the key-value pairs and their order.\n     *\n     * @returns The internal map object.\n     */\n    get map(): Map<Key, Entry<Key, Value>> {\n        // ### TODO - remove me. Cache must not expose its internal object,\n        // modifications to it are fatal for the internal state machine.\n        return this.m_map;\n    }\n\n    /**\n     * Returns the newest entry in the cache.\n     *\n     * @returns Newest entry in the cache.\n     */\n    get newest(): Entry<Key, Value> | null {\n        return this.m_newest;\n    }\n\n    /**\n     * Returns the oldest entry in the cache.\n     *\n     * Note: Does not promote the oldest item as most recently used item.\n     *\n     * @returns Oldest entry in the cache.\n     */\n    get oldest(): Entry<Key, Value> | null {\n        return this.m_oldest;\n    }\n\n    /**\n     * Resets the capacity of this cache. If `newCapacity` is smaller than the current cache size,\n     * all items will be evicted until the cache shrinks to `newCapacity`.\n     *\n     * @param newCapacity The new capacity of this cache.\n     */\n    setCapacity(newCapacity: number): void {\n        this.m_capacity = newCapacity;\n        this.evict();\n    }\n\n    /**\n     * Resets the cache capacity and function used to measure the element size.\n     *\n     * @param newCapacity The new capacity masured in units returned from [[sizeMeasure]] funtion.\n     * @param sizeMeasure Function that defines the size of element, if you want to measure\n     * number of elements only always return 1 from this function (default), you may also\n     * specify own function that measures entries by memory consumed, nubmer of sub-elements, etc.\n     */\n    setCapacityAndMeasure(newCapacity: number, sizeMeasure: (v: Value) => number = () => 1) {\n        this.m_capacity = newCapacity;\n        this.m_sizeFunction = sizeMeasure;\n        this.shrinkToCapacity();\n    }\n\n    /**\n     * Updates the size of all elements in this cache. If their aggregated size is larger than the\n     * capacity, items will be evicted until the cache shrinks to fit the capacity.\n     */\n    shrinkToCapacity(): void {\n        let size = 0;\n        const sizeFunction = this.m_sizeFunction;\n\n        let entry = this.m_newest;\n        while (entry !== null) {\n            const entrySize = sizeFunction(entry.value);\n            entry.size = entrySize;\n            size += entrySize;\n            entry = entry.older;\n        }\n\n        this.m_size = size;\n        this.evict();\n    }\n\n    /**\n     * Inserts or updates a key/value pair in the cache.\n     *\n     * If the key already existed in the cache, it will be updated and promoted to the most recently\n     * used item.\n     *\n     * If the key didn't exist in the cache, it will be inserted as most recently used item. An\n     * eviction of the least recently used item takes place if the cache exceeded its capacity.\n     *\n     * @param key The key for the key-value pair to insert or update.\n     * @param value The value for the key-value pair to insert or update.\n     */\n    set(key: Key, value: Value) {\n        const valueSize = this.m_sizeFunction(value);\n        let entry = this.m_map.get(key);\n        if (entry !== undefined) {\n            this.m_size = this.m_size - entry.size + valueSize;\n            entry.value = value;\n            entry.size = valueSize;\n            this.promoteEntry(entry);\n            this.evict();\n        } else {\n            if (valueSize > this.m_capacity) {\n                return; // single item too big to cache\n            }\n\n            entry = new Entry<Key, Value>(key, value, valueSize, null, null);\n            if (this.m_map.size === 0) {\n                this.m_newest = this.m_oldest = entry;\n            } else {\n                assert(this.m_newest !== null);\n                const newest: Entry<Key, Value> = this.m_newest!;\n                entry.older = this.m_newest;\n                newest.newer = entry;\n                this.m_newest = entry;\n            }\n            this.m_map.set(key, entry);\n            this.m_size += valueSize;\n            this.evict();\n        }\n    }\n\n    /**\n     * Looks up key in the cache and returns the associated value.\n     *\n     * @param key The key to look up.\n     * @returns The associated value, or `undefined` if the key-value pair is not in the cache.\n     */\n    get(key: Key): Value | undefined {\n        const entry = this.m_map.get(key);\n        if (entry === undefined) {\n            return undefined;\n        }\n\n        this.promoteEntry(entry);\n        return entry.value;\n    }\n\n    /**\n     * Test if a key/value pair is in the cache.\n     *\n     * @param key The key to look up.\n     * @returns `true` if the key-value pair is in the cache, `false` otherwise.\n     */\n    has(key: Key): boolean {\n        return this.m_map.has(key);\n    }\n\n    /**\n     * Clears the cache and removes all stored key-value pairs.\n     *\n     * Does not call the eviction callback. Use [[evictAll]] to clear the cache and call the\n     * eviction callback.\n     */\n    clear(): void {\n        this.m_newest = this.m_oldest = null;\n        this.m_size = 0;\n        this.m_map.clear();\n    }\n\n    /**\n     * Evicts all items from the cache, calling the eviction callback on each item.\n     *\n     * Use [[clear]] to remove all items without calling the eviction callback.\n     */\n    evictAll(): void {\n        const cb = this.evictionCallback;\n        if (cb !== undefined) {\n            this.forEach((value, key) => cb(key, value));\n        }\n        this.clear();\n    }\n\n    /**\n     * Evict selected elements from the cache using [[selector]] function.\n     *\n     * @param selector The function for selecting elements for eviction.\n     * @param thisArg Optional _this_ object reference.\n     */\n    evictSelected(selector: (value: Value, key: Key) => boolean, thisArg?: any) {\n        const cb = this.evictionCallback;\n        let entry = this.m_newest;\n        while (entry !== null) {\n            const entryOlder = entry.older;\n            if (selector.call(thisArg, entry.value, entry.key)) {\n                if (cb !== undefined) {\n                    cb(entry.key, entry.value);\n                }\n                this.deleteEntry(entry);\n                this.m_map.delete(entry.key);\n            }\n            entry = entryOlder;\n        }\n    }\n\n    /**\n     * Explicitly removes a key-value pair from the cache.\n     *\n     * **Note**: This is an explicit removal, thus, the eviction callback will not be called.\n     *\n     * @param key The key of the key-value pair to delete.\n     * @returns `true` if the key-value pair existed and was deleted, `false` otherwise.\n     */\n    delete(key: Key): boolean {\n        const entry = this.m_map.get(key);\n        if (entry === undefined) {\n            return false;\n        }\n        this.deleteEntry(entry);\n        return this.m_map.delete(key);\n    }\n\n    protected evict() {\n        while (this.m_oldest !== null && this.m_size > this.m_capacity) {\n            const evicted = this.evictOldest();\n            if (evicted === undefined) {\n                return;\n            }\n        }\n    }\n\n    protected evictOldest(): Entry<Key, Value> | undefined {\n        assert(this.m_oldest !== null);\n        const oldest = this.m_oldest!;\n        assert(oldest.older === null);\n        let itemToRemove = oldest;\n\n        if (this.canEvict !== undefined) {\n            while (!this.canEvict(itemToRemove.key, itemToRemove.value)) {\n                if (itemToRemove.newer === null) {\n                    return undefined;\n                }\n                itemToRemove = itemToRemove.newer;\n            }\n        }\n\n        if (itemToRemove === oldest) {\n            this.m_oldest = itemToRemove.newer;\n            if (itemToRemove.newer !== null) {\n                assert(itemToRemove.newer.older === itemToRemove);\n                itemToRemove.newer.older = null;\n            }\n        } else {\n            if (itemToRemove.newer !== null) {\n                assert(itemToRemove.newer.older === itemToRemove);\n                itemToRemove.newer.older = itemToRemove.older;\n                if (itemToRemove.older !== null) {\n                    itemToRemove.older.newer = itemToRemove.newer;\n                }\n            } else {\n                return undefined;\n            }\n        }\n\n        const isOk = this.m_map.delete(itemToRemove.key);\n        assert(isOk === true);\n        if (isOk && this.evictionCallback !== undefined) {\n            this.evictionCallback(itemToRemove.key, itemToRemove.value);\n        }\n        this.m_size -= itemToRemove.size;\n        return itemToRemove;\n    }\n\n    private deleteEntry(entry: Entry<Key, Value>): void {\n        if (entry === this.m_newest) {\n            this.m_newest = entry.older;\n        } else if (entry.newer) {\n            entry.newer.older = entry.older;\n        } else {\n            assert(false);\n        }\n\n        if (entry === this.m_oldest) {\n            this.m_oldest = entry.newer;\n        } else if (entry.older) {\n            entry.older.newer = entry.newer;\n        } else {\n            assert(false);\n        }\n\n        this.m_size -= entry.size;\n    }\n\n    private promoteEntry(entry: Entry<Key, Value>): void {\n        if (entry === this.m_newest) {\n            return;\n        } // already newest, nothing to do\n\n        // re-link newer and older items\n        if (entry.newer) {\n            assert(entry.newer.older === entry);\n            entry.newer.older = entry.older;\n        }\n        if (entry.older) {\n            assert(entry.older.newer === entry);\n            entry.older.newer = entry.newer;\n        }\n        if (entry === this.m_oldest) {\n            this.m_oldest = entry.newer;\n        }\n        // re-link ourselves\n        entry.newer = null;\n        entry.older = this.m_newest;\n\n        // finally, set ourselves as the newest entry\n        assert(this.m_newest !== null);\n        const newest = this.m_newest!;\n        assert(newest.newer === null);\n        newest.newer = entry;\n        this.m_newest = entry;\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nimport { FontCatalog } from \"./rendering/FontCatalog\";\nimport { GlyphData } from \"./rendering/GlyphData\";\nimport { TextBufferObject } from \"./rendering/TextBufferObject\";\nimport { QUAD_VERTEX_MEMORY_FOOTPRINT, TextGeometry } from \"./rendering/TextGeometry\";\nimport { SdfTextMaterial } from \"./rendering/TextMaterials\";\nimport { FontVariant, TextLayoutStyle, TextRenderStyle } from \"./rendering/TextStyle\";\nimport { LineTypesetter } from \"./typesetting/LineTypesetter\";\nimport { PathTypesetter, PathTypesettingParameters } from \"./typesetting/PathTypesetter\";\nimport { TypesettingParameters } from \"./typesetting/Typesetter\";\nimport { createSdfTextMaterial } from \"./utils/MaterialUtils\";\n\nconst tempTextPosition = new THREE.Vector3();\nconst tempTextBounds = {\n    array: [new THREE.Box2()],\n    offset: 0\n};\nlet tempVertexBuffer = new Float32Array();\n\ninterface TextPlacementParameters {\n    input: string | GlyphData[];\n    layer: TextCanvasLayer;\n    textPath?: THREE.Path | THREE.CurvePath<THREE.Vector2>;\n    textPathOverflow?: boolean;\n    bounds?: THREE.Box2;\n    individualBounds?: THREE.Box2[];\n    computeTextBuffer?: boolean;\n    letterCaseArray?: boolean[];\n}\n\n/**\n * Optional parameters passed on [[TextCanvas]].`measureText` function call.\n */\nexport interface MeasurementParameters {\n    /**\n     * Path where text should be placed on. Overrides the original position parameter.\n     */\n    path?: THREE.Path | THREE.CurvePath<THREE.Vector2>;\n\n    /**\n     * If `true`, text on a path will be placed even when its size its bigger than the path's size.\n     */\n    pathOverflow?: boolean;\n\n    /**\n     * Output per-character bounds.\n     */\n    outputCharacterBounds?: THREE.Box2[];\n\n    /**\n     * Array containing info on whether the glyphs are upper or lower case. Needed to support\n     * `SmallCaps`.\n     */\n    letterCaseArray?: boolean[];\n}\n\n/**\n * Optional parameters passed on [[TextCanvas]].`addText` function call.\n */\nexport interface AdditionParameters {\n    /**\n     * Path where text should be placed on. Overrides the original position parameter.\n     */\n    path?: THREE.Path | THREE.CurvePath<THREE.Vector2>;\n\n    /**\n     * If `true`, text on a path will be placed even when its size its bigger than the path's size.\n     */\n    pathOverflow?: boolean;\n\n    /**\n     * Layer where text will be added.\n     */\n    layer?: number;\n\n    /**\n     * If `true`, the input position parameter will be updated to contain the position of the last\n     * glyph added.\n     */\n    updatePosition?: boolean;\n\n    /**\n     * Object containing additional data intended to be retrieved during picking.\n     */\n    pickingData?: any;\n\n    /**\n     * Array containing info on whether the glyphs are upper or lower case. Needed to support\n     * `SmallCaps`.\n     */\n    letterCaseArray?: boolean[];\n}\n\n/**\n * Optional parameters passed on [[TextCanvas]].`createTextBufferObject` function call.\n */\nexport interface TextBufferCreationParameters {\n    /**\n     * Path where text should be placed on. Overrides the original position parameter.\n     */\n    path?: THREE.Path | THREE.CurvePath<THREE.Vector2>;\n\n    /**\n     * If `true`, text on a path will be placed even when its size its bigger than the path's size.\n     */\n    pathOverflow?: boolean;\n\n    /**\n     * Output text bounding-box.\n     */\n    outputBounds?: boolean;\n\n    /**\n     * Output per-character bounds.\n     */\n    outputCharacterBounds?: boolean;\n\n    /**\n     * Array containing info on whether the glyphs are upper or lower case. Needed to support\n     * `SmallCaps`.\n     */\n    letterCaseArray?: boolean[];\n\n    /**\n     * If `true`, both the [[TextRenderStyle]] and [[TextLayoutStyle]] used to generate the\n     * [[TextBufferObject]] will be stored in it.\n     */\n    storeStyles?: boolean;\n}\n\n/**\n * Optional parameters passed on [[TextCanvas]].`addTextBufferObject` function call.\n */\nexport interface TextBufferAdditionParameters {\n    layer?: number;\n    position?: THREE.Vector3;\n    scale?: number;\n    rotation?: number;\n    color?: THREE.Color;\n    opacity?: number;\n    backgroundColor?: THREE.Color;\n    backgroundOpacity?: number;\n    pickingData?: any;\n}\n\n/**\n * Default's [[TextCanvas]] layer identifier.\n */\nexport const DEFAULT_TEXT_CANVAS_LAYER = 0;\n\n/**\n * [[TextCanvas]] rendering layer.\n */\nexport interface TextCanvasLayer {\n    id: number;\n    storage: TextGeometry;\n}\n\n/**\n * [[TextCanvas]] construction parameters.\n */\nexport interface TextCanvasParameters {\n    /**\n     * WebGLRenderer internally used by this `TextCanvas`.\n     */\n    renderer: THREE.WebGLRenderer;\n\n    /**\n     * Initial [[FontCatalog]].\n     */\n    fontCatalog: FontCatalog;\n\n    /**\n     * Minimum amount of glyphs each [[TextCanvas]] layer can store.\n     */\n    minGlyphCount: number;\n\n    /**\n     * Maximum amount of glyphs each [[TextCanvas]] layer can store.\n     */\n    maxGlyphCount: number;\n\n    /**\n     * Material used to render text.\n     */\n    material?: THREE.Material;\n\n    /**\n     * Material used to render text background.\n     */\n    backgroundMaterial?: THREE.Material;\n}\n\n/**\n * Describes estimated usage of memory on heap and GPU.\n */\nexport interface MemoryUsage {\n    heapSize: number;\n    gpuSize: number;\n}\n\n/**\n * three.js text rendering engine which can manage and render high-quality, transformable, stylable\n * and properly layout SDF and MSDF text.\n */\nexport class TextCanvas {\n    private static defaultTextRenderStyle: TextRenderStyle = new TextRenderStyle();\n    private static defaultTextLayoutStyle: TextLayoutStyle = new TextLayoutStyle();\n    /**\n     * Minimum amount of glyphs each [[TextCanvas]] layer can store.\n     */\n    readonly minGlyphCount: number;\n\n    /**\n     * Maximum amount of glyphs each [[TextCanvas]] layer can store.\n     */\n    readonly maxGlyphCount: number;\n\n    private m_renderer: THREE.WebGLRenderer;\n    private m_fontCatalog: FontCatalog;\n\n    private m_currentTextRenderStyle: TextRenderStyle;\n    private m_currentTextLayoutStyle: TextLayoutStyle;\n\n    private m_material: SdfTextMaterial | THREE.Material;\n    private m_bgMaterial: SdfTextMaterial | THREE.Material;\n    private m_ownsMaterial: boolean;\n    private m_ownsBgMaterial: boolean;\n\n    private m_defaultLayer: TextCanvasLayer;\n    private m_layers: TextCanvasLayer[];\n\n    private m_lineTypesetter: LineTypesetter;\n    private m_pathTypesetter: PathTypesetter;\n\n    /**\n     * Constructs a new `TextCanvas`.\n     *\n     * @param params `TextCanvas` construction parameters.\n     *\n     * @returns New `TextCanvas`.\n     */\n    constructor(params: TextCanvasParameters) {\n        this.m_renderer = params.renderer;\n        this.m_fontCatalog = params.fontCatalog;\n        this.minGlyphCount = params.minGlyphCount;\n        this.maxGlyphCount = params.maxGlyphCount;\n\n        if (params.material === undefined) {\n            this.m_ownsMaterial = true;\n            this.m_material = createSdfTextMaterial({ fontCatalog: params.fontCatalog });\n        } else {\n            this.m_ownsMaterial = false;\n            this.m_material = params.material;\n        }\n        if (params.backgroundMaterial === undefined) {\n            this.m_ownsBgMaterial = true;\n            this.m_bgMaterial = createSdfTextMaterial({\n                fontCatalog: params.fontCatalog,\n                isBackground: true\n            });\n        } else {\n            this.m_ownsBgMaterial = false;\n            this.m_bgMaterial = params.backgroundMaterial;\n        }\n\n        this.m_defaultLayer = {\n            id: DEFAULT_TEXT_CANVAS_LAYER,\n            storage: new TextGeometry(\n                new THREE.Scene(),\n                this.m_material,\n                this.m_bgMaterial,\n                this.minGlyphCount,\n                this.maxGlyphCount\n            )\n        };\n        this.m_layers = [this.m_defaultLayer];\n\n        this.m_currentTextRenderStyle = new TextRenderStyle().copy(\n            TextCanvas.defaultTextRenderStyle\n        );\n        this.m_currentTextLayoutStyle = new TextLayoutStyle().copy(\n            TextCanvas.defaultTextLayoutStyle\n        );\n\n        this.m_lineTypesetter = new LineTypesetter();\n        this.m_pathTypesetter = new PathTypesetter();\n    }\n\n    /**\n     * Currently active [[FontCatalog]].\n     */\n    get fontCatalog(): FontCatalog {\n        return this.m_fontCatalog;\n    }\n    set fontCatalog(value: FontCatalog) {\n        this.m_fontCatalog = value;\n\n        const material = this.m_material as THREE.RawShaderMaterial;\n        material.uniforms.sdfTexture.value = this.m_fontCatalog.texture;\n        material.uniforms.sdfParams.value = new THREE.Vector4(\n            this.m_fontCatalog.textureSize.x,\n            this.m_fontCatalog.textureSize.y,\n            this.m_fontCatalog.size,\n            this.m_fontCatalog.distanceRange\n        );\n        material.defines.MSDF = this.m_fontCatalog.type === \"msdf\" ? 1.0 : 0.0;\n\n        const bgMaterial = this.m_bgMaterial as THREE.RawShaderMaterial;\n        bgMaterial.uniforms.sdfTexture.value = this.m_fontCatalog.texture;\n        bgMaterial.uniforms.sdfParams.value = new THREE.Vector4(\n            this.m_fontCatalog.textureSize.x,\n            this.m_fontCatalog.textureSize.y,\n            this.m_fontCatalog.size,\n            this.m_fontCatalog.distanceRange\n        );\n        bgMaterial.defines.MSDF = this.m_fontCatalog.type === \"msdf\" ? 1.0 : 0.0;\n    }\n\n    /**\n     * Currently active text rendering material.\n     */\n    get material(): THREE.Material {\n        return this.m_material;\n    }\n    set material(value: THREE.Material) {\n        if (this.m_ownsMaterial) {\n            this.m_material.dispose();\n            this.m_ownsMaterial = false;\n        }\n\n        this.m_material = value;\n        for (const layer of this.m_layers) {\n            layer.storage.mesh.material = this.m_material;\n        }\n    }\n\n    /**\n     * Currently active text background rendering material.\n     */\n    get backgroundMaterial(): THREE.Material {\n        return this.m_bgMaterial;\n    }\n    set backgroundMaterial(value: THREE.Material) {\n        if (this.m_ownsBgMaterial) {\n            this.m_bgMaterial.dispose();\n            this.m_ownsBgMaterial = false;\n        }\n\n        this.m_bgMaterial = value;\n        for (const layer of this.m_layers) {\n            layer.storage.backgroundMesh.material = this.m_bgMaterial;\n        }\n    }\n\n    /**\n     * Currently active text rendering style.\n     */\n    get textRenderStyle(): TextRenderStyle {\n        return this.m_currentTextRenderStyle;\n    }\n    set textRenderStyle(style: TextRenderStyle) {\n        this.m_currentTextRenderStyle.copy(style);\n    }\n\n    /**\n     * Currently active text layout style.\n     */\n    get textLayoutStyle(): TextLayoutStyle {\n        return this.m_currentTextLayoutStyle;\n    }\n    set textLayoutStyle(style: TextLayoutStyle) {\n        this.m_currentTextLayoutStyle.copy(style);\n    }\n\n    /**\n     * Clears all the placed glyphs in this `TextCanvas` (as well as resetting the current style).\n     */\n    clear() {\n        for (const layer of this.m_layers) {\n            layer.storage.clear();\n        }\n        this.m_currentTextRenderStyle.copy(TextCanvas.defaultTextRenderStyle);\n        this.m_currentTextLayoutStyle.copy(TextCanvas.defaultTextLayoutStyle);\n    }\n\n    /**\n     * Renders the content of this `TextCanvas`.\n     *\n     * @param camera Orthographic camera.\n     * @param target Optional render target.\n     * @param clear Optional render target clear operation.\n     */\n    render(camera: THREE.OrthographicCamera, target?: THREE.WebGLRenderTarget, clear?: boolean) {\n        this.m_fontCatalog.update(this.m_renderer);\n        let oldTarget: THREE.RenderTarget | null = null;\n        if (target !== undefined) {\n            oldTarget = this.m_renderer.getRenderTarget();\n            this.m_renderer.setRenderTarget(target);\n        }\n        if (clear === true) {\n            this.m_renderer.clear(true);\n        }\n        for (const layer of this.m_layers) {\n            layer.storage.update();\n            this.m_renderer.clear(false, true);\n            this.m_renderer.render(layer.storage.scene, camera);\n        }\n        if (target !== undefined) {\n            this.m_renderer.setRenderTarget(oldTarget);\n        }\n    }\n\n    /**\n     * Creates a new `TextCanvas` rendering layer and returns. If there was already a layer for the\n     * input `layerId`, it just returns this one instead.\n     *\n     * @param layerId Desired layer identifier.\n     *\n     * @returns Created [[TextCanvasLayer]].\n     */\n    addLayer(layerId: number): TextCanvasLayer {\n        let result = this.getLayer(layerId);\n        if (result === undefined) {\n            result = {\n                id: layerId,\n                storage: new TextGeometry(\n                    new THREE.Scene(),\n                    this.m_material,\n                    this.m_bgMaterial,\n                    this.minGlyphCount,\n                    this.maxGlyphCount\n                )\n            };\n\n            this.m_layers.push(result);\n            this.m_layers.sort((a: TextCanvasLayer, b: TextCanvasLayer) => {\n                return a.id - b.id;\n            });\n        }\n        return result;\n    }\n\n    /**\n     * Retrieves a specific `TextCanvas` rendering layer.\n     *\n     * @param layerId Desired layer identifier.\n     *\n     * @returns Selected [[TextCanvasLayer]].\n     */\n    getLayer(layerId: number): TextCanvasLayer | undefined {\n        return this.m_layers.find(layer => layer.id === layerId);\n    }\n\n    /**\n     * Retrieves all `TextCanvas` rendering layers.\n     *\n     * @returns Array of [[TextCanvasLayer]]s.\n     */\n    getAllLayers(): TextCanvasLayer[] {\n        return this.m_layers;\n    }\n\n    /**\n     * Returns the computed bounding box for the input text. The current [[TextRenderStyle]] and\n     * [[TextLayoutStyle]] will influence the results of this function.\n     *\n     * @param text Input text. Provide an array of [[GlyphData]] for better performance.\n     * @param outputBounds Output text bounding box.\n     * @param params Optional measurement parameters.\n     *\n     * @returns Result of the measurement. If `false`, some error occurred during execution and the\n     * input text couldn't be properly measured.\n     */\n    measureText(\n        text: string | GlyphData[],\n        outputBounds: THREE.Box2,\n        params?: MeasurementParameters\n    ): boolean {\n        tempTextPosition.set(0, 0, 0);\n\n        let path;\n        let pathOverflow;\n        let upperCaseArray;\n        let outputCharacterBounds;\n        if (params !== undefined) {\n            path = params.path;\n            pathOverflow = params.pathOverflow;\n            outputCharacterBounds = params.outputCharacterBounds;\n            if (params.path !== undefined) {\n                const pathOrigin = params.path.getPoint(0);\n                if (pathOrigin === null) {\n                    return false;\n                }\n                tempTextPosition.set(pathOrigin.x, pathOrigin.y, 0.0);\n            }\n            if (params.letterCaseArray) {\n                upperCaseArray = params.letterCaseArray;\n            }\n        }\n\n        return this.placeText({\n            input: text,\n            layer: this.m_defaultLayer,\n            textPath: path,\n            textPathOverflow: pathOverflow,\n            bounds: outputBounds,\n            individualBounds: outputCharacterBounds,\n            letterCaseArray: upperCaseArray\n        });\n    }\n\n    /**\n     * Adds the input text to this `TextCanvas` in the specified screen position. The current\n     * [[TextRenderStyle]] and [[TextLayoutStyle]] will influence the results of this function.\n     *\n     * @param text Input text. Provide an array of [[GlyphData]] for better performance.\n     * @param position Screen position.\n     * @param params Optional addition parameters.\n     *\n     * @returns Result of the addition. If `false`, some error occurred during execution and the\n     * input text couldn't be properly added.\n     */\n    addText(\n        text: string | GlyphData[],\n        position: THREE.Vector3,\n        params?: AdditionParameters\n    ): boolean {\n        tempTextPosition.copy(position);\n\n        let path;\n        let pathOverflow;\n        let upperCaseArray;\n        let targetLayer = this.m_defaultLayer;\n        if (params !== undefined) {\n            path = params.path;\n            pathOverflow = params.pathOverflow;\n            if (params.layer !== undefined) {\n                let tempLayer = this.getLayer(params.layer);\n                if (tempLayer === undefined) {\n                    tempLayer = this.addLayer(params.layer);\n                }\n                targetLayer = tempLayer;\n            }\n            if (params.path !== undefined) {\n                tempTextPosition.set(0, 0, tempTextPosition.z);\n            }\n            if (params.letterCaseArray) {\n                upperCaseArray = params.letterCaseArray;\n            }\n        }\n        const prevDrawCount = targetLayer.storage.drawCount;\n\n        const result = this.placeText({\n            input: text,\n            textPath: path,\n            textPathOverflow: pathOverflow,\n            layer: targetLayer,\n            letterCaseArray: upperCaseArray\n        });\n        if (result && params !== undefined) {\n            if (params.updatePosition === true) {\n                position.copy(tempTextPosition);\n            }\n            if (params.pickingData !== undefined) {\n                targetLayer.storage.addPickingData(\n                    prevDrawCount,\n                    targetLayer.storage.drawCount,\n                    params.pickingData\n                );\n            }\n        } else if (!result) {\n            (targetLayer.storage as any).m_drawCount = prevDrawCount;\n        }\n        return result;\n    }\n\n    /**\n     * Creates a new [[TextBufferObject]]. The computed text vertex buffer is equivalent to the\n     * result of performing the `addText` function for the input text in the screen origin.\n     *\n     * @param text Input text. Provide an array of [[GlyphData]] for better performance.\n     * @param params Optional creation parameters.\n     *\n     * @returns New [[TextBufferObject]] (or `undefined` if requested text glyphs couldn't be\n     * retrieved from the current [[FontCatalog]]).\n     */\n    createTextBufferObject(\n        text: string | GlyphData[],\n        params?: TextBufferCreationParameters\n    ): TextBufferObject | undefined {\n        tempTextPosition.set(0, 0, 0);\n\n        let glyphArray;\n        let upperCaseArray: boolean[] | undefined;\n        const smallCapsEnabled =\n            this.m_currentTextRenderStyle.fontVariant === FontVariant.SmallCaps;\n        if (typeof text !== \"string\") {\n            glyphArray = text;\n            if (params !== undefined && params.letterCaseArray) {\n                upperCaseArray = params.letterCaseArray;\n            }\n        } else {\n            upperCaseArray = [];\n            glyphArray = this.m_fontCatalog.getGlyphs(\n                text,\n                this.m_currentTextRenderStyle,\n                smallCapsEnabled ? upperCaseArray : undefined\n            );\n            if (glyphArray === undefined) {\n                return undefined;\n            }\n        }\n\n        let path;\n        let pathOverflow;\n        let textBounds;\n        let characterBounds;\n        let renderStyle;\n        let layoutStyle;\n        if (params !== undefined) {\n            path = params.path;\n            pathOverflow = params.pathOverflow;\n            if (params.outputBounds === true) {\n                textBounds = new THREE.Box2();\n            }\n            if (params.outputCharacterBounds === true) {\n                characterBounds = [];\n            }\n            if (params.storeStyles === true) {\n                renderStyle = this.m_currentTextRenderStyle.clone();\n                layoutStyle = this.m_currentTextLayoutStyle.clone();\n            }\n        }\n\n        this.placeText({\n            input: text,\n            layer: this.m_defaultLayer,\n            computeTextBuffer: true,\n            textPath: path,\n            textPathOverflow: pathOverflow,\n            bounds: textBounds,\n            individualBounds: characterBounds,\n            letterCaseArray: upperCaseArray\n        });\n\n        return new TextBufferObject(\n            glyphArray,\n            new Float32Array(tempVertexBuffer),\n            textBounds,\n            characterBounds,\n            renderStyle,\n            layoutStyle\n        );\n    }\n\n    /**\n     * Adds a previously created [[TextBufferObject]] to the `TextCanvas`. Additional parameters can\n     * be provided to override the attributes stored in the buffer.\n     *\n     * @param textBufferObject [[TextBufferObject]] to add.\n     * @param params Optional addition parameters.\n     *\n     * @returns Result of the addition. If `false`, some error occurred during execution and the\n     * input text couldn't be properly added.\n     */\n    addTextBufferObject(\n        textBufferObject: TextBufferObject,\n        params?: TextBufferAdditionParameters\n    ): boolean {\n        let targetLayer = this.m_defaultLayer;\n        let position;\n        let scale;\n        let rotation;\n        let color;\n        let opacity;\n        let bgColor;\n        let bgOpacity;\n\n        if (params !== undefined) {\n            if (params.layer !== undefined) {\n                let tempLayer = this.getLayer(params.layer);\n                if (tempLayer === undefined) {\n                    tempLayer = this.addLayer(params.layer);\n                }\n                targetLayer = tempLayer;\n            }\n            position = params.position?.clone();\n            scale = params.scale;\n            rotation = params.rotation;\n            color = params.color;\n            opacity = params.opacity;\n            bgColor = params.backgroundColor;\n            bgOpacity = params.backgroundOpacity;\n        }\n        const prevDrawCount = targetLayer.storage.drawCount;\n\n        const result = targetLayer.storage.addTextBufferObject(\n            textBufferObject,\n            position,\n            scale,\n            rotation,\n            color,\n            opacity,\n            bgColor,\n            bgOpacity\n        );\n        if (result && params !== undefined) {\n            if (params.pickingData !== undefined) {\n                targetLayer.storage.addPickingData(\n                    prevDrawCount,\n                    targetLayer.storage.drawCount,\n                    params.pickingData\n                );\n            }\n        } else if (!result) {\n            (targetLayer.storage as any).m_drawCount = prevDrawCount;\n        }\n        return result;\n    }\n\n    /**\n     * Executes the `pickCallback` for all previously stored picking data for text covering the\n     * specified screen position.\n     *\n     * @param screenPosition Screen coordinate of picking position.\n     * @param pickCallback Callback to be called for every picked element.\n     */\n    pickText(position: THREE.Vector2, callback: (pickData: any | undefined) => void): void {\n        for (const layer of this.m_layers) {\n            layer.storage.pick(position, callback);\n        }\n    }\n\n    /**\n     * Update the info with the memory footprint caused by objects owned by the `TextCanvas`.\n     *\n     * @param info The info object to increment with the values from this `TextCanvas`.\n     */\n    getMemoryUsage(info: MemoryUsage) {\n        this.m_fontCatalog.updateMemoryUsage(info);\n\n        for (const layer of this.m_layers) {\n            layer.storage.updateMemoryUsage(info);\n        }\n    }\n\n    // Places all glyphs for input text. Depending on parameters, it can store the resulting glyphs\n    // in the current [[TextGeometry]] (or into a separate buffer) or compute the bounding box for\n    // the input (as a whole or on a per-character basis).\n    private placeText(params: TextPlacementParameters): boolean {\n        if (params.input.length === 0 || this.m_currentTextLayoutStyle.maxLines! === 0) {\n            if (params.bounds !== undefined) {\n                params.bounds.min.set(0, 0);\n                params.bounds.max.set(0, 0);\n            }\n            if (params.individualBounds !== undefined) {\n                params.individualBounds.length = 0;\n            }\n            return true;\n        }\n\n        let glyphArray;\n        let smallCapsTransformations: boolean[] | undefined;\n        const smallCapsEnabled =\n            this.m_currentTextRenderStyle.fontVariant === FontVariant.SmallCaps;\n        if (typeof params.input !== \"string\") {\n            glyphArray = params.input;\n            if (params.letterCaseArray) {\n                smallCapsTransformations = params.letterCaseArray;\n            }\n        } else {\n            smallCapsTransformations = [];\n            glyphArray = this.m_fontCatalog.getGlyphs(\n                params.input,\n                this.m_currentTextRenderStyle,\n                smallCapsEnabled ? smallCapsTransformations : undefined\n            );\n            if (glyphArray === undefined) {\n                return false;\n            }\n        }\n\n        let glyphBounds;\n        if (params.individualBounds !== undefined) {\n            tempTextBounds.array = params.individualBounds;\n            tempTextBounds.offset = 0;\n            glyphBounds = tempTextBounds;\n        }\n        if (params.bounds !== undefined) {\n            params.bounds.min.set(Infinity, Infinity);\n            params.bounds.max.set(-Infinity, -Infinity);\n        }\n        if (params.computeTextBuffer === true) {\n            tempVertexBuffer = new Float32Array(glyphArray.length * QUAD_VERTEX_MEMORY_FOOTPRINT);\n        }\n\n        const isPath = params.textPath !== undefined;\n        const typesettingParams: TypesettingParameters | PathTypesettingParameters = {\n            glyphs: glyphArray,\n            fontCatalog: this.m_fontCatalog,\n            textRenderStyle: this.m_currentTextRenderStyle,\n            textLayoutStyle: this.m_currentTextLayoutStyle,\n            position: tempTextPosition,\n            geometry: params.layer.storage,\n            smallCapsArray: smallCapsEnabled ? smallCapsTransformations : undefined,\n            globalBounds: params.bounds,\n            individualBounds: glyphBounds,\n            vertexBuffer: params.computeTextBuffer === true ? tempVertexBuffer : undefined\n        };\n\n        let result = true;\n        if (isPath) {\n            Object.assign(typesettingParams as PathTypesettingParameters, {\n                path: params.textPath,\n                pathOverflow: params.textPathOverflow === true\n            });\n            result = this.m_pathTypesetter.arrangeGlyphs(\n                typesettingParams as PathTypesettingParameters\n            );\n        } else {\n            result = this.m_lineTypesetter.arrangeGlyphs(typesettingParams);\n        }\n        if (glyphBounds !== undefined) {\n            glyphBounds.array.length = glyphBounds.offset;\n        }\n\n        return result;\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nimport { QUAD_VERTEX_MEMORY_FOOTPRINT } from \"../rendering/TextGeometry\";\nimport { FontStyle, FontVariant, WrappingMode } from \"../rendering/TextStyle\";\nimport { TypesettingUtils } from \"../utils/TypesettingUtils\";\nimport { UnicodeUtils } from \"../utils/UnicodeUtils\";\nimport { Typesetter, TypesettingParameters } from \"./Typesetter\";\n\n/**\n * [[Typesetter]] implementation that handles multi-line complex layout text.\n */\nexport class LineTypesetter implements Typesetter {\n    private m_tempTransform: THREE.Matrix3;\n    private m_tempCorners: THREE.Vector3[];\n    private m_tempLineDirection: UnicodeUtils.Direction;\n    private m_tempRunDirection: UnicodeUtils.Direction;\n    private m_tempPixelSize: number;\n    private m_tempPixelBgSize: number;\n    private m_tempScale: number;\n    private m_tempSmallCaps: boolean;\n\n    private m_currentParams?: TypesettingParameters;\n\n    /**\n     * Creates a `LineTypesetter` object.\n     *\n     * @returns New `LineTypesetter`.\n     */\n    constructor() {\n        this.m_tempTransform = new THREE.Matrix3();\n        this.m_tempCorners = [\n            new THREE.Vector3(),\n            new THREE.Vector3(),\n            new THREE.Vector3(),\n            new THREE.Vector3()\n        ];\n        this.m_tempLineDirection = UnicodeUtils.Direction.LTR;\n        this.m_tempRunDirection = UnicodeUtils.Direction.LTR;\n        this.m_tempPixelSize = 1.0;\n        this.m_tempPixelBgSize = 1.0;\n        this.m_tempScale = 1.0;\n        this.m_tempSmallCaps = false;\n    }\n\n    /**\n     * Arranges the specified glyphs using this `LineTypesetter`. Text will be placed into multiple\n     * bidirectional lines, that will be generated taking into account [[textLayoutStyle]] features,\n     * such as:\n     * - Maximum line width.\n     * - Word and character wrapping.\n     * - Maximum number of lines.\n     * - Vertical and horizontal alignment.\n     * - Leading (spacing between lines).\n     *\n     * @param params Typesetting parameters.\n     *\n     * @returns If `false`, some error occurred during execution and the output should be dismissed.\n     */\n    arrangeGlyphs(params: TypesettingParameters): boolean {\n        // Initializes common typesetting parameters (used across all functions in this class).\n        this.m_currentParams = params;\n        this.m_tempLineDirection = TypesettingUtils.getDirection(this.m_currentParams.glyphs, 0);\n        this.m_tempRunDirection = this.m_tempLineDirection;\n        this.m_tempPixelSize = TypesettingUtils.getPixelSize(\n            this.m_currentParams.textRenderStyle.fontSize.size,\n            this.m_currentParams.textRenderStyle.fontSize.unit,\n            this.m_currentParams.fontCatalog.size\n        );\n        this.m_tempScale = this.m_tempPixelSize / this.m_currentParams.fontCatalog.size;\n        this.m_tempPixelBgSize = Math.min(\n            TypesettingUtils.getPixelSize(\n                this.m_currentParams.textRenderStyle.fontSize.backgroundSize,\n                this.m_currentParams.textRenderStyle.fontSize.unit,\n                this.m_currentParams.fontCatalog.size\n            ),\n            this.m_currentParams!.fontCatalog.distanceRange * this.m_tempScale\n        );\n        this.m_tempSmallCaps = this.m_currentParams!.smallCapsArray !== undefined;\n\n        this.m_currentParams.position.y +=\n            this.m_currentParams.textLayoutStyle.verticalAlignment *\n            this.m_currentParams.glyphs[0].font.metrics.capHeight *\n            this.m_tempScale;\n\n        const isOnlyMeasured =\n            this.m_currentParams.globalBounds !== undefined &&\n            this.m_currentParams.vertexBuffer === undefined;\n\n        // Compute line origin and height.\n        const origin = this.m_currentParams.position.x;\n        const lineHeight =\n            this.m_currentParams.glyphs[0].font.metrics.lineHeight +\n            this.m_currentParams.textLayoutStyle.leading;\n\n        // Initialize line-breaking and wrapping variables.\n        let lineStartIdx = 0;\n        let glyphWrapIdx = 0;\n        let wordWrapIdx = 0;\n        let lineStartX = 0;\n        let lineCurrX = 0;\n        let glyphWrapX = 0;\n        let wordWrapX = 0;\n\n        let lineCount = 0;\n        let isBidirectionalLine = false;\n        for (let i = 0; i < this.m_currentParams.glyphs.length; ++i) {\n            if (lineCount > this.m_currentParams.textLayoutStyle.maxLines - 1) {\n                break;\n            }\n            const glyphData = this.m_currentParams.glyphs[i];\n            if (!glyphData.isInCache && !isOnlyMeasured) {\n                return false;\n            }\n\n            const isNewLine = UnicodeUtils.isNewLine(glyphData.codePoint);\n            const isWhiteSpace = UnicodeUtils.isWhiteSpace(glyphData.codePoint);\n\n            // Check if this line should be treated as bidirectional.\n            if (!isBidirectionalLine && glyphData.direction === -this.m_tempLineDirection) {\n                isBidirectionalLine = true;\n            }\n            // Advance the line's current X offset (only for printable characters).\n            if (UnicodeUtils.isPrintable(glyphData.codePoint)) {\n                lineCurrX +=\n                    (glyphData.advanceX + this.m_currentParams.textLayoutStyle.tracking) *\n                    this.m_tempScale *\n                    (this.m_tempSmallCaps\n                        ? TypesettingUtils.getSmallCapsScale(\n                              this.m_currentParams.glyphs,\n                              this.m_currentParams.smallCapsArray!,\n                              i,\n                              this.m_currentParams.textRenderStyle.fontVariant\n                          )\n                        : 1.0);\n            }\n            // If this is the first character in a line, update the line's X offset values (needed\n            // to properly center and wrap).\n            if (i === lineStartIdx) {\n                lineStartX = lineCurrX;\n                glyphWrapX = lineCurrX;\n                wordWrapX = lineCurrX;\n            }\n\n            // Check if should break the current line.\n            if (\n                isNewLine ||\n                (this.m_currentParams.textLayoutStyle.wrappingMode === WrappingMode.Character &&\n                    lineCurrX > this.m_currentParams.textLayoutStyle.lineWidth) ||\n                (this.m_currentParams.textLayoutStyle.wrappingMode === WrappingMode.Word &&\n                    lineCurrX > this.m_currentParams.textLayoutStyle.lineWidth &&\n                    wordWrapX !== lineStartX)\n            ) {\n                // Perform wrapping.\n                if (this.m_currentParams.textLayoutStyle.wrappingMode !== WrappingMode.None) {\n                    let wrapPointIdx = glyphWrapIdx;\n                    let wrapPointX = glyphWrapX;\n                    // Only wrap words when more than a single word fits into the current line.\n                    if (\n                        this.m_currentParams.textLayoutStyle.wrappingMode === WrappingMode.Word &&\n                        wordWrapX !== lineStartX\n                    ) {\n                        wrapPointIdx = wordWrapIdx;\n                        wrapPointX = wordWrapX;\n                    }\n\n                    lineCurrX = wrapPointX;\n                    i = Math.min(\n                        isNewLine ? (lineStartIdx === i ? wrapPointIdx : i) : wrapPointIdx,\n                        this.m_currentParams.glyphs.length - 1\n                    );\n                }\n\n                // Calculate the correct starting position for the line base on alignment, and place\n                // all glyphs in it.\n                const lineAlignment =\n                    this.m_tempLineDirection === UnicodeUtils.Direction.RTL && isBidirectionalLine\n                        ? 1.0 + this.m_currentParams.textLayoutStyle.horizontalAlignment\n                        : this.m_currentParams.textLayoutStyle.horizontalAlignment;\n                this.m_currentParams.position.x =\n                    this.m_currentParams.position.x + lineCurrX * lineAlignment;\n                if (\n                    !this.placeLine(lineStartIdx, i, this.m_tempLineDirection, isBidirectionalLine)\n                ) {\n                    return false;\n                }\n\n                // Update the line position.\n                this.m_currentParams.position.y -= lineHeight * this.m_tempScale;\n                this.m_currentParams.position.x = origin;\n\n                // Find the beginning of a new line (removing trailing white spaces).\n                while (\n                    i !== lineStartIdx &&\n                    i + 1 < this.m_currentParams.glyphs.length &&\n                    UnicodeUtils.isWhiteSpace(this.m_currentParams.glyphs[i + 1].codePoint)\n                ) {\n                    ++i;\n                }\n                lineStartIdx = i + 1;\n                if (lineStartIdx === this.m_currentParams.glyphs.length) {\n                    break;\n                }\n\n                // Only reset the line's direction when a new line character is found (to keep\n                // correct bidirectional behaviour when a bidirectional run is placed between\n                // multiple lines).\n                if (isNewLine) {\n                    this.m_tempLineDirection = TypesettingUtils.getDirection(\n                        this.m_currentParams.glyphs,\n                        lineStartIdx\n                    );\n                    this.m_tempRunDirection = this.m_tempLineDirection;\n                }\n\n                // Reset the line placement parameters.\n                lineStartX = 0;\n                lineCurrX = 0;\n                glyphWrapIdx = lineStartIdx;\n                glyphWrapX = 0;\n                wordWrapIdx = lineStartIdx;\n                wordWrapX = 0;\n                isBidirectionalLine = false;\n                lineCount++;\n            }\n            // If not, should if we should record any new wrapping points.\n            else if (\n                this.m_currentParams.textLayoutStyle.wrappingMode !== WrappingMode.None &&\n                !isWhiteSpace\n            ) {\n                // Update the per-glyph wrapping point.\n                glyphWrapIdx = i;\n                glyphWrapX = lineCurrX;\n\n                // Update the word wrapping point (only if mode is correctly set and we are\n                // currently placed at the end of a word).\n                if (\n                    this.m_currentParams.textLayoutStyle.wrappingMode === WrappingMode.Word &&\n                    i + 1 < this.m_currentParams.glyphs.length &&\n                    (UnicodeUtils.isWhiteSpace(this.m_currentParams.glyphs[i + 1].codePoint) ||\n                        UnicodeUtils.isNewLine(this.m_currentParams.glyphs[i + 1].codePoint))\n                ) {\n                    wordWrapIdx = i;\n                    wordWrapX = lineCurrX;\n                }\n            }\n        }\n\n        // If we still haven't placed all characters, place a final line.\n        if (\n            lineCount <= this.m_currentParams.textLayoutStyle.maxLines - 1 &&\n            lineStartIdx <= this.m_currentParams.glyphs.length - 1\n        ) {\n            const offset =\n                this.m_tempLineDirection === UnicodeUtils.Direction.RTL && isBidirectionalLine\n                    ? 1.0 + this.m_currentParams.textLayoutStyle.horizontalAlignment\n                    : this.m_currentParams.textLayoutStyle.horizontalAlignment;\n            this.m_currentParams.position.setX(\n                this.m_currentParams.position.x + lineCurrX * offset\n            );\n            if (\n                !this.placeLine(\n                    lineStartIdx,\n                    this.m_currentParams.glyphs.length - 1,\n                    this.m_tempLineDirection,\n                    isBidirectionalLine\n                )\n            ) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    // Place characters alongside a line. Text direction is taken into account, and text is broken\n    // into directional runs.\n    private placeLine(\n        startIdx: number,\n        endIdx: number,\n        direction: UnicodeUtils.Direction,\n        isBidirectional: boolean\n    ): boolean {\n        // If the line is not bidirectional, place it as a single directional run.\n        if (!isBidirectional) {\n            return this.placeRun(startIdx, endIdx, direction);\n        }\n\n        // Gather common typesetting parameters.\n        const glyphDataArray = this.m_currentParams!.glyphs;\n        const smallCapsArray = this.m_currentParams!.smallCapsArray;\n        const textRenderStyle = this.m_currentParams!.textRenderStyle;\n        const textLayoutStyle = this.m_currentParams!.textLayoutStyle;\n        const position = this.m_currentParams!.position;\n\n        // Initialize line placement parameters.\n        const isRTL = direction === UnicodeUtils.Direction.RTL;\n        const origin = position.x;\n        let offset = 0;\n        let runStart = startIdx;\n\n        for (let i = startIdx; i <= endIdx; ++i) {\n            const glyphData = glyphDataArray[i];\n\n            // If the current glyph changes the line direction, place the current run.\n            if (glyphData.direction === -this.m_tempRunDirection) {\n                if (isRTL) {\n                    position.x = origin + offset;\n                }\n                if (!this.placeRun(runStart, i - 1, this.m_tempRunDirection)) {\n                    return false;\n                }\n                if (!isRTL) {\n                    position.x = origin + offset;\n                }\n\n                runStart = i;\n                this.m_tempRunDirection *= -1.0;\n            }\n            // If the current glyph has neutral direction (i.e. white space) and we're in the middle\n            // of a run with direction opposite to the line's main direction, check for the closest\n            // strong direction in the run.\n            else if (\n                glyphData.direction === UnicodeUtils.Direction.Neutral &&\n                this.m_tempRunDirection === -direction\n            ) {\n                let neutralIdx = i;\n                while (\n                    neutralIdx + 1 < glyphDataArray.length &&\n                    Math.abs(glyphDataArray[neutralIdx].direction) !== 1\n                ) {\n                    ++neutralIdx;\n                }\n\n                // If the closest strong direction in the run is not the current run's direction,\n                // place the current run.\n                if (glyphDataArray[neutralIdx].direction !== this.m_tempRunDirection) {\n                    if (isRTL) {\n                        position.x = origin + offset;\n                    }\n                    if (!this.placeRun(runStart, i - 1, this.m_tempRunDirection)) {\n                        return false;\n                    }\n                    if (!isRTL) {\n                        position.x = origin + offset;\n                    }\n\n                    runStart = i;\n                    this.m_tempRunDirection *= -1.0;\n                }\n            }\n\n            // Advance the offset position in the line.\n            offset +=\n                (glyphData.advanceX + textLayoutStyle.tracking) *\n                this.m_tempScale *\n                (this.m_tempSmallCaps\n                    ? TypesettingUtils.getSmallCapsScale(\n                          glyphDataArray,\n                          smallCapsArray!,\n                          i,\n                          textRenderStyle.fontVariant\n                      )\n                    : 1.0) *\n                direction;\n        }\n\n        // If we still haven't placed all characters in the line, place a final run.\n        if (runStart <= endIdx) {\n            if (isRTL) {\n                position.x = origin + offset;\n            }\n            if (!this.placeRun(runStart, endIdx, this.m_tempRunDirection)) {\n                return false;\n            }\n            if (!isRTL) {\n                position.x = origin + offset;\n            }\n        }\n\n        return true;\n    }\n\n    // Place a directional run of index inside a line.\n    private placeRun(startIdx: number, endIdx: number, direction: UnicodeUtils.Direction): boolean {\n        // Gather common typesetting parameters.\n        const glyphDataArray = this.m_currentParams!.glyphs;\n        const smallCapsArray = this.m_currentParams!.smallCapsArray;\n        const fontCatalog = this.m_currentParams!.fontCatalog;\n        const textRenderStyle = this.m_currentParams!.textRenderStyle;\n        const textLayoutStyle = this.m_currentParams!.textLayoutStyle;\n        const position = this.m_currentParams!.position;\n        const geometry = this.m_currentParams!.geometry;\n        const globalBounds = this.m_currentParams!.globalBounds;\n        const individualBounds = this.m_currentParams!.individualBounds;\n        const vertexBuffer = this.m_currentParams!.vertexBuffer;\n\n        // Move through the glyph array following the run's direction (as the order of the glyphs in\n        // memory might not match the order on glyphs on scree).\n        const start = direction === UnicodeUtils.Direction.LTR ? startIdx : endIdx;\n        const end = direction === UnicodeUtils.Direction.LTR ? endIdx : startIdx;\n        for (\n            let i = start;\n            direction === UnicodeUtils.Direction.RTL ? i >= end : i <= end;\n            i += direction\n        ) {\n            // Only process printable characters.\n            const glyphData = glyphDataArray[i];\n            if (!UnicodeUtils.isPrintable(glyphData.codePoint)) {\n                continue;\n            }\n\n            // When placing a RTL run, we need to check for weak runs (numerical runs of characters\n            // that don't change the overall run direction, but should always be displayed as LTR\n            // text).\n            if (\n                startIdx !== endIdx &&\n                i !== 0 &&\n                direction === UnicodeUtils.Direction.RTL &&\n                glyphData.direction === UnicodeUtils.Direction.Weak\n            ) {\n                let weakRunStart = i;\n                let weakGlyph = glyphDataArray[weakRunStart - 1];\n                while (\n                    weakRunStart !== startIdx &&\n                    (weakGlyph.direction === UnicodeUtils.Direction.Weak ||\n                        (weakGlyph.direction === UnicodeUtils.Direction.Neutral &&\n                            !UnicodeUtils.isWhiteSpace(weakGlyph.codePoint)))\n                ) {\n                    --weakRunStart;\n                    weakGlyph = glyphDataArray[weakRunStart - 1];\n                }\n\n                this.placeRun(Math.max(weakRunStart, startIdx), i, UnicodeUtils.Direction.LTR);\n\n                i = weakRunStart;\n                continue;\n            }\n\n            // Compute various rendering parameters for this glyph.\n            const glyphFont = glyphData.font;\n            const glyphFontMetrics = glyphFont.metrics;\n            const fontStyle = textRenderStyle.fontStyle;\n\n            const isBoldEmulated =\n                (fontStyle === FontStyle.Bold && glyphFont.bold === undefined) ||\n                (fontStyle === FontStyle.BoldItalic &&\n                    glyphFont.bold === undefined &&\n                    glyphFont.boldItalic === undefined);\n            const isItalicEmulated =\n                (fontStyle === FontStyle.Italic && glyphFont.italic === undefined) ||\n                (fontStyle === FontStyle.BoldItalic &&\n                    glyphFont.italic === undefined &&\n                    glyphFont.boldItalic === undefined);\n\n            const isSmallCaps = this.m_tempSmallCaps\n                ? smallCapsArray![i] && textRenderStyle.fontVariant === FontVariant.SmallCaps\n                : false;\n            const smallCapsScale = isSmallCaps\n                ? glyphFontMetrics.xHeight / glyphFontMetrics.capHeight\n                : 1.0;\n            const glyphScale = this.m_tempScale * smallCapsScale;\n\n            const emulationWeight =\n                ((isBoldEmulated ? 0.02 : 0.0) + (isSmallCaps ? 0.01 : 0.0)) *\n                (fontCatalog.size / fontCatalog.distanceRange);\n            const bgWeight =\n                (0.5 * this.m_tempPixelBgSize!) /\n                (fontCatalog.distanceRange * Math.max(glyphScale, 1.0));\n            const isMirrored =\n                UnicodeUtils.isRtlMirrored(glyphData.codePoint) &&\n                direction === UnicodeUtils.Direction.RTL;\n            const verticalOffset =\n                glyphFontMetrics.lineHeight -\n                glyphFontMetrics.base -\n                glyphFontMetrics.distanceRange * 0.5;\n\n            // Compute the glyphs transformation matrix and apply to all corners of a glyph.\n            TypesettingUtils.computeGlyphTransform(\n                this.m_tempTransform,\n                position,\n                glyphScale,\n                textLayoutStyle.canvasRotation,\n                textRenderStyle.rotation\n            );\n            for (let j = 0; j < 4; ++j) {\n                const glyphVertexPosition = glyphData.positions[j];\n                const horizontalOffset =\n                    isItalicEmulated && j > 1\n                        ? TypesettingUtils.OBLIQUE_OFFSET * glyphFontMetrics.size\n                        : 0.0;\n                this.m_tempCorners[j].set(\n                    glyphVertexPosition.x + horizontalOffset,\n                    glyphVertexPosition.y - verticalOffset,\n                    glyphVertexPosition.z\n                );\n                this.m_tempCorners[j].applyMatrix3(this.m_tempTransform);\n            }\n\n            // Depending on the typesetting options, add the computed glyph to the TextGeometry or\n            // update the text bounds.\n            if (globalBounds === undefined && vertexBuffer === undefined) {\n                if (\n                    !geometry.add(\n                        glyphData,\n                        this.m_tempCorners,\n                        emulationWeight,\n                        emulationWeight + bgWeight,\n                        isMirrored,\n                        textRenderStyle\n                    )\n                ) {\n                    return false;\n                }\n            } else {\n                if (globalBounds !== undefined) {\n                    TypesettingUtils.updateBounds(\n                        this.m_tempCorners,\n                        globalBounds,\n                        individualBounds\n                    );\n                }\n                if (vertexBuffer !== undefined) {\n                    geometry.addToBuffer(\n                        vertexBuffer,\n                        i * QUAD_VERTEX_MEMORY_FOOTPRINT,\n                        glyphData,\n                        this.m_tempCorners,\n                        emulationWeight,\n                        emulationWeight + bgWeight,\n                        isMirrored,\n                        textRenderStyle\n                    );\n                }\n            }\n\n            // Advance the current position and proceed to next glyph in the run.\n            position.set(\n                position.x +\n                    (glyphData.advanceX + textLayoutStyle.tracking) *\n                        glyphScale *\n                        Math.cos(textLayoutStyle.lineRotation),\n                position.y +\n                    (glyphData.advanceX + textLayoutStyle.tracking) *\n                        glyphScale *\n                        Math.sin(textLayoutStyle.lineRotation),\n                position.z\n            );\n        }\n\n        return true;\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nimport { QUAD_VERTEX_MEMORY_FOOTPRINT } from \"../rendering/TextGeometry\";\nimport { FontStyle, FontVariant } from \"../rendering/TextStyle\";\nimport { TypesettingUtils } from \"../utils/TypesettingUtils\";\nimport { UnicodeUtils } from \"../utils/UnicodeUtils\";\nimport { Typesetter, TypesettingParameters } from \"./Typesetter\";\n\n/**\n * @hidden\n * Parameters passed when placing glyphs using [[PathTypesetter]]'s `arrangeGlyphs` function.\n */\nexport interface PathTypesettingParameters extends TypesettingParameters {\n    /**\n     * Path to be followed when arranging glyphs.\n     */\n    path: THREE.Path | THREE.CurvePath<THREE.Vector2>;\n\n    /**\n     * If `true`, text on a path will be placed even when its size its bigger than the path's size.\n     */\n    pathOverflow: boolean;\n}\n\n/**\n * [[Typesetter]] implementation that arranges glyphs alongside a specified path.\n */\nexport class PathTypesetter implements Typesetter {\n    private m_tempTransform: THREE.Matrix3;\n    private m_tempCorners: THREE.Vector3[];\n    private m_tempLineDirection: UnicodeUtils.Direction;\n    private m_tempRunDirection: UnicodeUtils.Direction;\n    private m_tempPixelSize: number;\n    private m_tempPixelBgSize: number;\n    private m_tempScale: number;\n    private m_tempSmallCaps: boolean;\n\n    private m_tempPathPosition: THREE.Vector3;\n    private m_tempPathLength: number;\n    private m_tempPathOffset: number;\n\n    private m_currentParams?: PathTypesettingParameters;\n\n    /**\n     * Creates a `PathTypesetter` object.\n     *\n     * @returns New `PathTypesetter`.\n     */\n    constructor() {\n        this.m_tempTransform = new THREE.Matrix3();\n        this.m_tempCorners = [\n            new THREE.Vector3(),\n            new THREE.Vector3(),\n            new THREE.Vector3(),\n            new THREE.Vector3()\n        ];\n        this.m_tempLineDirection = UnicodeUtils.Direction.LTR;\n        this.m_tempRunDirection = UnicodeUtils.Direction.LTR;\n        this.m_tempPixelSize = 1.0;\n        this.m_tempPixelBgSize = 1.0;\n        this.m_tempScale = 1.0;\n        this.m_tempSmallCaps = false;\n\n        this.m_tempPathPosition = new THREE.Vector3();\n        this.m_tempPathLength = 0.0;\n        this.m_tempPathOffset = 0.0;\n    }\n\n    /**\n     * Arranges the specified glyphs using this `PathTypesetter`. Text will be placed into a single\n     * bidirectional line that follows the specified path. Characters will be orientated and placed\n     * alongside this path following [[TextLayout]]'s [[VerticalAlignment]] and\n     * [[HorizontalAlignment]].\n     *\n     * @param params Typesetting parameters.\n     *\n     * @returns If `false`, some error occurred during execution and the output should be dismissed.\n     */\n    arrangeGlyphs(params: PathTypesettingParameters): boolean {\n        // Initializes common typesetting parameters (used across all functions in this class).\n        this.m_currentParams = params;\n        this.m_tempLineDirection = TypesettingUtils.getDirection(this.m_currentParams.glyphs, 0);\n        this.m_tempRunDirection = this.m_tempLineDirection;\n        this.m_tempPixelSize = TypesettingUtils.getPixelSize(\n            this.m_currentParams.textRenderStyle.fontSize.size,\n            this.m_currentParams.textRenderStyle.fontSize.unit,\n            this.m_currentParams.fontCatalog.size\n        );\n        this.m_tempScale = this.m_tempPixelSize / this.m_currentParams.fontCatalog.size;\n        this.m_tempPixelBgSize = Math.min(\n            TypesettingUtils.getPixelSize(\n                this.m_currentParams.textRenderStyle.fontSize.backgroundSize,\n                this.m_currentParams.textRenderStyle.fontSize.unit,\n                this.m_currentParams.fontCatalog.size\n            ),\n            this.m_currentParams!.fontCatalog.distanceRange * this.m_tempScale\n        );\n        this.m_tempSmallCaps = this.m_currentParams!.smallCapsArray !== undefined;\n\n        this.m_tempPathLength = this.m_currentParams.path.getLength();\n        this.m_tempPathOffset = 0.0;\n\n        const isOnlyMeasured =\n            this.m_currentParams.globalBounds !== undefined &&\n            this.m_currentParams.vertexBuffer === undefined;\n\n        // To be able to properly set the horizontal alignment on a path, we need to first retrieve\n        // how much of the path the input text covers, so we can calculate the correct initial\n        // offset.\n        let isBidirectional = false;\n        let pathWidth = 0.0;\n        for (let i = 0; i < this.m_currentParams.glyphs.length; ++i) {\n            const glyphData = this.m_currentParams.glyphs[i];\n            if (!glyphData.isInCache && !isOnlyMeasured) {\n                return false;\n            }\n\n            if (!UnicodeUtils.isPrintable(glyphData.codePoint)) {\n                continue;\n            }\n            if (!isBidirectional && glyphData.direction === -this.m_tempLineDirection) {\n                isBidirectional = true;\n            }\n\n            pathWidth +=\n                (glyphData.advanceX + this.m_currentParams.textLayoutStyle.tracking) *\n                this.m_tempScale *\n                (this.m_tempSmallCaps\n                    ? TypesettingUtils.getSmallCapsScale(\n                          this.m_currentParams.glyphs,\n                          this.m_currentParams.smallCapsArray!,\n                          i,\n                          this.m_currentParams.textRenderStyle.fontVariant\n                      )\n                    : 1.0);\n        }\n        this.m_tempPathOffset = Math.min(\n            Math.max(\n                -this.m_currentParams.textLayoutStyle.horizontalAlignment +\n                    (this.m_currentParams.textLayoutStyle.horizontalAlignment * pathWidth) /\n                        this.m_tempPathLength,\n                0\n            ),\n            1\n        );\n\n        // Place the input text as a single path line.\n        return this.placeLine(this.m_tempLineDirection, isBidirectional);\n    }\n\n    // Place characters alongside a path line. Text direction is taken into account, and text is\n    // broken into directional runs.\n    private placeLine(direction: UnicodeUtils.Direction, isBidirectional: boolean): boolean {\n        // If the line is not bidirectional, place it as a single directional run.\n        if (!isBidirectional) {\n            return this.placeRun(0, this.m_currentParams!.glyphs.length - 1, direction);\n        }\n\n        // Gather common typesetting parameters.\n        const glyphDataArray = this.m_currentParams!.glyphs;\n\n        // Initialize line placement parameters.\n        let runStart = 0;\n        for (let i = runStart; i < glyphDataArray.length; ++i) {\n            const glyphData = glyphDataArray[i];\n\n            // If the current glyph changes the line direction, place the current run.\n            if (glyphData.direction === -this.m_tempRunDirection) {\n                if (!this.placeRun(runStart, i - 1, this.m_tempRunDirection)) {\n                    return false;\n                }\n\n                runStart = i;\n                this.m_tempRunDirection *= -1.0;\n            }\n            // If the current glyph has neutral direction (i.e. white space) and we're in the middle\n            // of a run with direction opposite to the line's main direction, check for the closest\n            // strong direction in the run.\n            else if (\n                glyphData.direction === UnicodeUtils.Direction.Neutral &&\n                this.m_tempRunDirection === -direction\n            ) {\n                let neutralIdx = i;\n                while (\n                    neutralIdx + 1 < glyphDataArray.length &&\n                    Math.abs(glyphDataArray[neutralIdx].direction) !== 1\n                ) {\n                    ++neutralIdx;\n                }\n\n                // If the closest strong direction in the run is not the current run's direction,\n                // place the current run.\n                if (glyphDataArray[neutralIdx].direction !== this.m_tempRunDirection) {\n                    if (!this.placeRun(runStart, i - 1, this.m_tempRunDirection)) {\n                        return false;\n                    }\n\n                    runStart = i;\n                    this.m_tempRunDirection *= -1.0;\n                }\n            }\n        }\n\n        // If we still haven't placed all characters in the line, place a final run.\n        if (runStart < glyphDataArray.length) {\n            if (!this.placeRun(runStart, glyphDataArray.length - 1, this.m_tempRunDirection)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    // Place a directional run of index inside a path line.\n    private placeRun(startIdx: number, endIdx: number, direction: UnicodeUtils.Direction): boolean {\n        // Gather common typesetting parameters.\n        const glyphDataArray = this.m_currentParams!.glyphs;\n        const smallCapsArray = this.m_currentParams!.smallCapsArray;\n        const fontCatalog = this.m_currentParams!.fontCatalog;\n        const textRenderStyle = this.m_currentParams!.textRenderStyle;\n        const textLayoutStyle = this.m_currentParams!.textLayoutStyle;\n        const position = this.m_currentParams!.position;\n        const geometry = this.m_currentParams!.geometry;\n        const globalBounds = this.m_currentParams!.globalBounds;\n        const individualBounds = this.m_currentParams!.individualBounds;\n        const vertexBuffer = this.m_currentParams!.vertexBuffer;\n        const path = this.m_currentParams!.path;\n\n        const defaultGlyphRotation = textRenderStyle.rotation;\n        const normalDisplacement =\n            textLayoutStyle.verticalAlignment *\n            glyphDataArray[0].font.metrics.capHeight *\n            this.m_tempScale;\n\n        // Move through the glyph array following the run's direction (as the order of the glyphs in\n        // memory might not match the order on glyphs on scree).\n        const start = direction === UnicodeUtils.Direction.LTR ? startIdx : endIdx;\n        const end = direction === UnicodeUtils.Direction.LTR ? endIdx : startIdx;\n        for (\n            let i = start;\n            direction === UnicodeUtils.Direction.RTL ? i >= end : i <= end;\n            i += direction\n        ) {\n            // Only process printable characters.\n            const glyphData = glyphDataArray[i];\n            if (!UnicodeUtils.isPrintable(glyphData.codePoint)) {\n                continue;\n            }\n\n            // When placing a RTL run, we need to check for weak runs (numerical runs of characters\n            // that don't change the overall run direction, but should always be displayed as LTR\n            // text).\n            if (\n                startIdx !== endIdx &&\n                i !== 0 &&\n                direction === UnicodeUtils.Direction.RTL &&\n                glyphData.direction === UnicodeUtils.Direction.Weak\n            ) {\n                let weakRunStart = i;\n                let weakGlyph = glyphDataArray[weakRunStart - 1];\n                while (\n                    weakRunStart !== startIdx &&\n                    (weakGlyph.direction === UnicodeUtils.Direction.Weak ||\n                        (weakGlyph.direction === UnicodeUtils.Direction.Neutral &&\n                            !UnicodeUtils.isWhiteSpace(weakGlyph.codePoint)))\n                ) {\n                    --weakRunStart;\n                    weakGlyph = glyphDataArray[weakRunStart - 1];\n                }\n\n                this.placeRun(Math.max(weakRunStart, startIdx), i, UnicodeUtils.Direction.LTR);\n\n                i = weakRunStart;\n                continue;\n            }\n\n            // Compute various rendering parameters for this glyph.\n            const glyphFont = glyphData.font;\n            const glyphFontMetrics = glyphFont.metrics;\n            const fontStyle = textRenderStyle.fontStyle;\n\n            const isBoldEmulated =\n                (fontStyle === FontStyle.Bold && glyphFont.bold === undefined) ||\n                (fontStyle === FontStyle.BoldItalic &&\n                    glyphFont.bold === undefined &&\n                    glyphFont.boldItalic === undefined);\n            const isItalicEmulated =\n                (fontStyle === FontStyle.Italic && glyphFont.italic === undefined) ||\n                (fontStyle === FontStyle.BoldItalic &&\n                    glyphFont.italic === undefined &&\n                    glyphFont.boldItalic === undefined);\n\n            const isSmallCaps = this.m_tempSmallCaps\n                ? smallCapsArray![i] && textRenderStyle.fontVariant === FontVariant.SmallCaps\n                : false;\n            const smallCapsScale = isSmallCaps\n                ? glyphFontMetrics.xHeight / glyphFontMetrics.capHeight\n                : 1.0;\n            const glyphScale = this.m_tempScale * smallCapsScale;\n\n            const emulationWeight =\n                ((isBoldEmulated ? 0.02 : 0.0) + (isSmallCaps ? 0.01 : 0.0)) *\n                (fontCatalog.size / fontCatalog.distanceRange);\n            const bgWeight =\n                (0.5 * this.m_tempPixelBgSize!) /\n                (fontCatalog.distanceRange * Math.max(glyphScale, 1.0));\n            const isMirrored =\n                UnicodeUtils.isRtlMirrored(glyphData.codePoint) &&\n                direction === UnicodeUtils.Direction.RTL;\n\n            const verticalOffset =\n                glyphFontMetrics.lineHeight -\n                glyphFontMetrics.base -\n                glyphFontMetrics.distanceRange * 0.5;\n\n            // Update the current interpolated path position and angle.\n            const textPoint = path.getPoint(this.m_tempPathOffset);\n            if (textPoint === null) {\n                return this.m_currentParams!.pathOverflow;\n            }\n            const tangent = path.getTangent(this.m_tempPathOffset);\n            const normal = new THREE.Vector2(-tangent.y, tangent.x).multiplyScalar(\n                normalDisplacement\n            );\n            const angle = Math.atan2(tangent.y, tangent.x);\n            this.m_tempPathPosition.set(normal.x + textPoint.x, normal.y + textPoint.y, position.z);\n            textRenderStyle.rotation = defaultGlyphRotation + angle;\n\n            // Compute the glyphs transformation matrix and apply to all corners of a glyph.\n            TypesettingUtils.computeGlyphTransform(\n                this.m_tempTransform,\n                this.m_tempPathPosition,\n                glyphScale,\n                0.0,\n                textRenderStyle.rotation\n            );\n            for (let j = 0; j < 4; ++j) {\n                const glyphVertexPosition = glyphData.positions[j];\n                const horizontalOffset =\n                    isItalicEmulated && j > 1\n                        ? TypesettingUtils.OBLIQUE_OFFSET * glyphFontMetrics.size\n                        : 0.0;\n                this.m_tempCorners[j].set(\n                    glyphVertexPosition.x + horizontalOffset,\n                    glyphVertexPosition.y - verticalOffset,\n                    glyphVertexPosition.z\n                );\n                this.m_tempCorners[j].applyMatrix3(this.m_tempTransform);\n\n                this.m_tempCorners[j].x -= position.x;\n                this.m_tempCorners[j].y -= position.y;\n            }\n\n            // Depending on the typesetting options, add the computed glyph to the TextGeometry or\n            // update the text bounds.\n            if (globalBounds === undefined && vertexBuffer === undefined) {\n                if (\n                    !geometry.add(\n                        glyphData,\n                        this.m_tempCorners,\n                        emulationWeight,\n                        emulationWeight + bgWeight,\n                        isMirrored,\n                        textRenderStyle\n                    )\n                ) {\n                    return false;\n                }\n            } else {\n                if (globalBounds !== undefined) {\n                    TypesettingUtils.updateBounds(\n                        this.m_tempCorners,\n                        globalBounds,\n                        individualBounds\n                    );\n                }\n                if (vertexBuffer !== undefined) {\n                    geometry.addToBuffer(\n                        vertexBuffer,\n                        i * QUAD_VERTEX_MEMORY_FOOTPRINT,\n                        glyphData,\n                        this.m_tempCorners,\n                        emulationWeight,\n                        emulationWeight + bgWeight,\n                        isMirrored,\n                        textRenderStyle\n                    );\n                }\n            }\n\n            // Restore the original glyph rotation.\n            textRenderStyle.rotation = defaultGlyphRotation;\n\n            // Advance the current position and proceed to next glyph in the run.\n            this.m_tempPathOffset +=\n                ((glyphData.advanceX + textLayoutStyle.tracking) * glyphScale) /\n                this.m_tempPathLength;\n        }\n\n        return true;\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nenum ContextualForm {\n    Initial,\n    Medial,\n    Final\n}\n\nenum CombinedForm {\n    Isolated,\n    Connected\n}\n\n/**\n * Converter between arabic isolated forms (in Unicode Block 'Arabic') and their contextual forms\n * (in Unicode Block 'Arabic Presentation Forms-B').\n */\nexport class ContextualArabicConverter {\n    private static m_instance: ContextualArabicConverter;\n    static get instance(): ContextualArabicConverter {\n        if (this.m_instance === undefined) {\n            this.m_instance = new ContextualArabicConverter();\n        }\n        return this.m_instance;\n    }\n\n    private m_singleCharactersMap: Map<number, ReadonlyArray<number | undefined>> = new Map();\n    private m_combinedCharactersMap: Map<\n        number,\n        Map<number, ReadonlyArray<number | undefined>>\n    > = new Map();\n    private m_neutralCharacters: number[];\n\n    private constructor() {\n        // Single characters.\n        this.m_singleCharactersMap.set(0x0621, [undefined, undefined, undefined]); // HAMZA\n        this.m_singleCharactersMap.set(0x0622, [undefined, undefined, 0xfe82]); // ALEF_MADDA\n        this.m_singleCharactersMap.set(0x0623, [undefined, undefined, 0xfe84]); // ALEF_HAMZA_ABOVE\n        this.m_singleCharactersMap.set(0x0624, [undefined, undefined, 0xfe86]); // WAW_HAMZA\n        this.m_singleCharactersMap.set(0x0625, [undefined, undefined, 0xfe88]); // ALEF_HAMZA_BELOW\n        this.m_singleCharactersMap.set(0x0626, [0xfe8b, 0xfe8c, 0xfe8a]); // YEH_HAMZA\n        this.m_singleCharactersMap.set(0x0627, [undefined, undefined, 0xfe8e]); // ALEF\n        this.m_singleCharactersMap.set(0x0628, [0xfe91, 0xfe92, 0xfe90]); // BEH\n        this.m_singleCharactersMap.set(0x0629, [undefined, undefined, 0xfe94]); // TEH_MARBUTA\n        this.m_singleCharactersMap.set(0x062a, [0xfe97, 0xfe98, 0xfe96]); // TEH\n        this.m_singleCharactersMap.set(0x062b, [0xfe9b, 0xfe9c, 0xfe9a]); // THEH\n        this.m_singleCharactersMap.set(0x062c, [0xfe9f, 0xfea0, 0xfe9e]); // JEEM\n        this.m_singleCharactersMap.set(0x062d, [0xfea3, 0xfea4, 0xfea2]); // HAH\n        this.m_singleCharactersMap.set(0x062e, [0xfea7, 0xfea8, 0xfea6]); // KHAH\n        this.m_singleCharactersMap.set(0x062f, [undefined, undefined, 0xfeaa]); // DAL\n        this.m_singleCharactersMap.set(0x0630, [undefined, undefined, 0xfeac]); // THAL\n        this.m_singleCharactersMap.set(0x0631, [undefined, undefined, 0xfeae]); // REH\n        this.m_singleCharactersMap.set(0x0632, [undefined, undefined, 0xfeb0]); // ZAIN\n        this.m_singleCharactersMap.set(0x0633, [0xfeb3, 0xfeb4, 0xfeb2]); // SEEN\n        this.m_singleCharactersMap.set(0x0634, [0xfeb7, 0xfeb8, 0xfeb6]); // SHEEN\n        this.m_singleCharactersMap.set(0x0635, [0xfebb, 0xfebc, 0xfeba]); // SAD\n        this.m_singleCharactersMap.set(0x0636, [0xfebf, 0xfec0, 0xfebe]); // DAD\n        this.m_singleCharactersMap.set(0x0637, [0xfec3, 0xfec4, 0xfec2]); // TAH\n        this.m_singleCharactersMap.set(0x0638, [0xfec7, 0xfec8, 0xfec6]); // ZAH\n        this.m_singleCharactersMap.set(0x0639, [0xfecb, 0xfecc, 0xfeca]); // AIN\n        this.m_singleCharactersMap.set(0x063a, [0xfecf, 0xfed0, 0xfece]); // GHAIN\n        this.m_singleCharactersMap.set(0x0640, [0x0640, 0x0640, 0x0640]); // TATWEEL\n        this.m_singleCharactersMap.set(0x0641, [0xfed3, 0xfed4, 0xfed2]); // FEH\n        this.m_singleCharactersMap.set(0x0642, [0xfed7, 0xfed8, 0xfed6]); // QAF\n        this.m_singleCharactersMap.set(0x0643, [0xfedb, 0xfedc, 0xfeda]); // KAF\n        this.m_singleCharactersMap.set(0x0644, [0xfedf, 0xfee0, 0xfede]); // LAM\n        this.m_singleCharactersMap.set(0x0645, [0xfee3, 0xfee4, 0xfee2]); // MEEM\n        this.m_singleCharactersMap.set(0x0646, [0xfee7, 0xfee8, 0xfee6]); // NOON\n        this.m_singleCharactersMap.set(0x0647, [0xfeeb, 0xfeec, 0xfeea]); // HEH\n        this.m_singleCharactersMap.set(0x0648, [undefined, undefined, 0xfeee]); // WAW\n        this.m_singleCharactersMap.set(0x0649, [undefined, undefined, 0xfef0]); // ALEF_MAKSURA\n        this.m_singleCharactersMap.set(0x064a, [0xfef3, 0xfef4, 0xfef2]); // YEH\n        this.m_singleCharactersMap.set(0x067e, [0xfb58, 0xfb59, 0xfb57]); // PEH\n        this.m_singleCharactersMap.set(0x06cc, [0xfbfe, 0xfbff, 0xfbfd]); // Farsi Yeh\n        this.m_singleCharactersMap.set(0x0686, [0xfb7c, 0xfb7d, 0xfb7b]); // Tcheh\n        this.m_singleCharactersMap.set(0x06a9, [0xfb90, 0xfb91, 0xfb8f]); // Keheh\n        this.m_singleCharactersMap.set(0x06af, [0xfb94, 0xfb95, 0xfb93]); // Gaf\n        this.m_singleCharactersMap.set(0x0698, [undefined, undefined, 0xfb8b]); // Jeh\n\n        // Combined characters.\n        this.m_combinedCharactersMap.set(0x0644, new Map());\n        // LAM_ALEF_MADDA\n        this.m_combinedCharactersMap.get(0x0644)!.set(0x0622, [0xfef5, 0xfef6]);\n        // LAM_ALEF_HAMZA_ABOVE\n        this.m_combinedCharactersMap.get(0x0644)!.set(0x0623, [0xfef7, 0xfef8]);\n        // LAM_ALEF_HAMZA_BELOW\n        this.m_combinedCharactersMap.get(0x0644)!.set(0x0625, [0xfef9, 0xfefa]);\n        // LAM_ALEF\n        this.m_combinedCharactersMap.get(0x0644)!.set(0x0627, [0xfefb, 0xfefc]);\n\n        // Neutral characters.\n        this.m_neutralCharacters = [\n            0x0610, // ARABIC SIGN SALLALLAHOU ALAYHE WASSALLAM\n            0x0612, // ARABIC SIGN ALAYHE ASSALLAM\n            0x0613, // ARABIC SIGN RADI ALLAHOU ANHU\n            0x0614, // ARABIC SIGN TAKHALLUS\n            0x0615, // ARABIC SMALL HIGH TAH\n            0x064b, // ARABIC FATHATAN\n            0x064c, // ARABIC DAMMATAN\n            0x064d, // ARABIC KASRATAN\n            0x064e, // ARABIC FATHA\n            0x064f, // ARABIC DAMMA\n            0x0650, // ARABIC KASRA\n            0x0651, // ARABIC SHADDA\n            0x0652, // ARABIC SUKUN\n            0x0653, // ARABIC MADDAH ABOVE\n            0x0654, // ARABIC HAMZA ABOVE\n            0x0655, // ARABIC HAMZA BELOW\n            0x0656, // ARABIC SUBSCRIPT ALEF\n            0x0657, // ARABIC INVERTED DAMMA\n            0x0658, // ARABIC MARK NOON GHUNNA\n            0x0670, // ARABIC LETTER SUPERSCRIPT ALEF\n            0x06d6, // ARABIC SMALL HIGH LIGATURE SAD WITH LAM WITH ALEF MAKSURA\n            0x06d7, // ARABIC SMALL HIGH LIGATURE QAF WITH LAM WITH ALEF MAKSURA\n            0x06d8, // ARABIC SMALL HIGH MEEM INITIAL FORM\n            0x06d9, // ARABIC SMALL HIGH LAM ALEF\n            0x06da, // ARABIC SMALL HIGH JEEM\n            0x06db, // ARABIC SMALL HIGH THREE DOTS\n            0x06dc, // ARABIC SMALL HIGH SEEN\n            0x06df, // ARABIC SMALL HIGH ROUNDED ZERO\n            0x06e0, // ARABIC SMALL HIGH UPRIGHT RECTANGULAR ZERO\n            0x06e1, // ARABIC SMALL HIGH DOTLESS HEAD OF KHAH\n            0x06e2, // ARABIC SMALL HIGH MEEM ISOLATED FORM\n            0x06e3, // ARABIC SMALL LOW SEEN\n            0x06e4, // ARABIC SMALL HIGH MADDA\n            0x06e7, // ARABIC SMALL HIGH YEH\n            0x06e8, // ARABIC SMALL HIGH NOON\n            0x06ea, // ARABIC EMPTY CENTRE LOW STOP\n            0x06eb, // ARABIC EMPTY CENTRE HIGH STOP\n            0x06ec, // ARABIC ROUNDED HIGH STOP WITH FILLED CENTRE\n            0x06ed // ARABIC SMALL LOW MEEM\n        ];\n    }\n\n    /**\n     * Converts isolated arabic characters into their contextual form.\n     *\n     * @param input String with isolated arabic characters.\n     */\n    convert(input: string): string {\n        let output = \"\";\n        for (let i = 0; i < input.length; ++i) {\n            const currentCodePoint = input.charCodeAt(i);\n\n            // Only process arabic characters in the map.\n            if (this.isArabicCharacter(currentCodePoint)) {\n                // Find the first previous non-neutral character.\n                let prevIndex = i - 1;\n                for (; prevIndex >= 0; --prevIndex) {\n                    if (!this.isNeutral(input.charCodeAt(prevIndex))) {\n                        break;\n                    }\n                }\n\n                // Check if the previous character has ligatures with following characters.\n                let prevCodePoint = prevIndex >= 0 ? input.charCodeAt(prevIndex) : undefined;\n                if (prevCodePoint !== undefined) {\n                    const prevMap = this.getCharacterMap(prevCodePoint);\n                    if (\n                        prevMap === undefined ||\n                        (prevMap[ContextualForm.Initial] === undefined &&\n                            prevMap[ContextualForm.Medial] === undefined)\n                    ) {\n                        prevCodePoint = undefined;\n                    }\n                }\n\n                // Find the first next non-neutral character.\n                let nextIndex = i + 1;\n                for (; nextIndex < input.length; ++nextIndex) {\n                    if (!this.isNeutral(input.charCodeAt(nextIndex))) {\n                        break;\n                    }\n                }\n\n                // Check if the next character has ligatures with previous characters.\n                let nextCodePoint =\n                    nextIndex < input.length ? input.charCodeAt(nextIndex) : undefined;\n                if (nextCodePoint !== undefined) {\n                    const nextMap = this.getCharacterMap(nextCodePoint);\n                    if (\n                        nextMap === undefined ||\n                        (nextMap[ContextualForm.Medial] === undefined &&\n                            nextMap[ContextualForm.Final] === undefined)\n                    ) {\n                        nextCodePoint = undefined;\n                    }\n                }\n\n                // Check for Lam Alef combinated forms.\n                if (\n                    currentCodePoint === 0x0644 &&\n                    nextCodePoint !== undefined &&\n                    (nextCodePoint === 0x0622 ||\n                        nextCodePoint === 0x0623 ||\n                        nextCodePoint === 0x0625 ||\n                        nextCodePoint === 0x0627)\n                ) {\n                    const combinedMap = this.getCombinedCharacterMap(\n                        currentCodePoint,\n                        nextCodePoint\n                    )!;\n                    if (prevCodePoint !== undefined) {\n                        output += String.fromCharCode(combinedMap[CombinedForm.Connected]!);\n                    } else {\n                        output += String.fromCharCode(combinedMap[CombinedForm.Isolated]!);\n                    }\n\n                    // Skip the next character and continue.\n                    ++i;\n                    continue;\n                }\n\n                // Check for single character contextual forms.\n                const map = this.getCharacterMap(currentCodePoint)!;\n                // Intermediate.\n                if (\n                    prevCodePoint !== undefined &&\n                    nextCodePoint !== undefined &&\n                    map[ContextualForm.Medial] !== undefined\n                ) {\n                    output += String.fromCharCode(map[ContextualForm.Medial]!);\n                }\n                // Final.\n                else if (prevCodePoint !== undefined && map[ContextualForm.Final] !== undefined) {\n                    output += String.fromCharCode(map[ContextualForm.Final]!);\n                }\n                // Initial.\n                else if (nextCodePoint !== undefined && map[ContextualForm.Initial] !== undefined) {\n                    output += String.fromCharCode(map[ContextualForm.Initial]!);\n                }\n                // Isolated.\n                else {\n                    output += String.fromCharCode(currentCodePoint);\n                }\n            } else {\n                output += String.fromCharCode(currentCodePoint);\n            }\n        }\n\n        return output;\n    }\n\n    private isArabicCharacter(codePoint: number): boolean {\n        return this.m_singleCharactersMap.has(codePoint);\n    }\n\n    private getCharacterMap(codePoint: number): ReadonlyArray<number | undefined> | undefined {\n        return this.m_singleCharactersMap.get(codePoint);\n    }\n\n    private getCombinedCharacterMap(\n        codePoint: number,\n        nextCodePoint: number\n    ): ReadonlyArray<number | undefined> | undefined {\n        const map = this.m_combinedCharactersMap.get(codePoint);\n        if (map !== undefined) {\n            return map.get(nextCodePoint);\n        }\n        return undefined;\n    }\n\n    private isNeutral(codePoint: number): boolean {\n        for (const character of this.m_neutralCharacters) {\n            if (character === codePoint) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n","/*\n * Copyright (C) 2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { DisplacementFeature, hasDisplacementFeature } from \"@here/harp-materials\";\nimport { assert } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\nimport { DisplacedBufferAttribute } from \"./DisplacedBufferAttribute\";\nimport { DisplacedBufferGeometry, DisplacementRange } from \"./DisplacedBufferGeometry\";\n\nfunction isDisplacementMaterial(material: any): material is DisplacementFeature {\n    const isDisplacementFeature = hasDisplacementFeature(material);\n    assert(isDisplacementFeature, \"Material does not support displacement maps.\");\n    return isDisplacementFeature;\n}\n\nfunction isDataTextureMap(map?: THREE.Texture | null): map is THREE.DataTexture {\n    if (!map) {\n        return false;\n    }\n    const isDataTexture = map instanceof THREE.DataTexture;\n    assert(isDataTexture, \"Material does not support displacement maps.\");\n    return isDataTexture;\n}\n\n/**\n * Mesh with geometry modified by a displacement map. Overrides raycasting behaviour to apply\n * displacement map before intersection test.\n * @internal\n */\nexport class DisplacedMesh extends THREE.Mesh {\n    private static displacedPositions?: DisplacedBufferAttribute;\n\n    private static getDisplacedPositionAttribute(\n        geometry: THREE.BufferGeometry,\n        displacementMap: THREE.DataTexture\n    ): DisplacedBufferAttribute {\n        // Reuse same buffer attribute for all meshes since it's only needed during the\n        // intersection test.\n        if (!DisplacedMesh.displacedPositions) {\n            DisplacedMesh.displacedPositions = new DisplacedBufferAttribute(\n                geometry.attributes.position,\n                geometry.attributes.normal,\n                geometry.attributes.uv,\n                displacementMap\n            );\n        } else {\n            DisplacedMesh.displacedPositions.reset(\n                geometry.attributes.position,\n                geometry.attributes.normal,\n                geometry.attributes.uv,\n                displacementMap\n            );\n        }\n        return DisplacedMesh.displacedPositions;\n    }\n\n    displacedGeometry?: DisplacedBufferGeometry;\n\n    /**\n     * Creates an instance of displaced mesh.\n     * @param geometry Original geometry to displace.\n     * @param material Material(s) to be used by the mesh. All must have the same displacement map.\n     * @param m_getDisplacementRange Displacement values range getter.\n     * @param [m_raycastStrategy] Function that will be used to find ray intersections. If not\n     * provided, THREE.Mesh's raycast will be used.\n     */\n    constructor(\n        geometry: THREE.BufferGeometry,\n        material: THREE.Material | THREE.Material[],\n        private m_getDisplacementRange: () => DisplacementRange,\n        private m_raycastStrategy?: (\n            mesh: THREE.Mesh,\n            raycaster: THREE.Raycaster,\n            intersects: THREE.Intersection[]\n        ) => void\n    ) {\n        super(geometry, material);\n    }\n\n    // HARP-9585: Override of base class method, however tslint doesn't recognize it as such.\n    // tslint:disable-next-line: explicit-override\n    raycast(raycaster: THREE.Raycaster, intersects: THREE.Intersection[]): void {\n        // All materials in the object are expected to have the same displacement map.\n        const firstMaterial = this.firstMaterial;\n\n        // Use default raycasting implementation if there's no displacement material or if there's\n        // no displacement map or its type is not supported.\n        if (\n            !isDisplacementMaterial(firstMaterial) ||\n            !isDataTextureMap(firstMaterial.displacementMap)\n        ) {\n            super.raycast(raycaster, intersects);\n            return;\n        }\n        const displacementMap = firstMaterial.displacementMap;\n        const displacementRange = { ...this.m_getDisplacementRange() };\n\n        assert(this.geometry instanceof THREE.BufferGeometry, \"Unsupported geometry type.\");\n        const geometry = this.geometry as THREE.BufferGeometry;\n        if (this.displacedGeometry) {\n            this.displacedGeometry.reset(geometry, displacementMap, displacementRange);\n        } else {\n            this.displacedGeometry = new DisplacedBufferGeometry(\n                geometry,\n                displacementMap,\n                displacementRange,\n                DisplacedMesh.getDisplacedPositionAttribute(geometry, displacementMap)\n            );\n        }\n\n        // Replace the original geometry by the displaced one only during the intersection test.\n        this.geometry = this.displacedGeometry;\n        if (this.m_raycastStrategy) {\n            this.m_raycastStrategy(this, raycaster, intersects);\n        } else {\n            super.raycast(raycaster, intersects);\n        }\n        super.geometry = this.displacedGeometry.originalGeometry;\n    }\n\n    private get firstMaterial(): THREE.Material {\n        return Array.isArray(this.material) ? this.material[0] : this.material;\n    }\n}\n","/*\n * Copyright (C) 2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Vector3Like } from \"@here/harp-geoutils\";\nimport { assert } from \"@here/harp-utils\";\n\n// Offsets for the fields stored in cache for each vertex.\nenum Field {\n    VertexId = 0,\n    OlderIdx, // Index in cache of the immediately older vertex.\n    NewerIdx, // Index in cache of the immediately newer vertex.\n    X,\n    Y,\n    Z,\n    Count\n}\n\nconst Invalid: number = -1;\n\n/**\n * Compact vertex LRU Cache for on the fly temporary mesh transformations.\n * @internal\n */\nexport class VertexCache {\n    private m_cache: number[] = []; // Stores all fields for every cached vertex (see Field).\n    private m_vertexCount: number = 0;\n    private m_oldestIdx: number = 0;\n    private m_newestIdx: number = 0;\n\n    /**\n     * Creates a new cache with the specified maximum size.\n     * @param maxVertexCount The maximum number of vertices the cache will store.\n     */\n    constructor(readonly maxVertexCount: number) {\n        this.m_cache.length = this.maxVertexCount * Field.Count;\n        this.clear();\n    }\n\n    /**\n     * Clears the vertex cache.\n     */\n    clear() {\n        this.m_cache.fill(Invalid);\n        this.m_vertexCount = 0;\n    }\n\n    /**\n     * Gets a vertex from cache.\n     * @param vertexId The id of the vertex to get.\n     * @param vertex The vertex coordinates will be set here if found.\n     * @returns whether the vertex was found on cache.\n     */\n    get(vertexId: number, vertex: Vector3Like): boolean {\n        const vertexIdx = this.find(vertexId);\n        if (vertexIdx === undefined) {\n            return false;\n        }\n        this.promoteEntry(vertexIdx);\n        this.getVertex(vertexIdx, vertex);\n        return true;\n    }\n\n    /**\n     * Sets a vertex in cache. It's assumed there's no vertex with the same id already in cache.\n     * @param vertexId The vertex id.\n     * @param vertex The vertex coordinates.\n     */\n    set(vertexId: number, vertex: Vector3Like) {\n        let vertexIdx = Invalid;\n        if (this.m_vertexCount < this.maxVertexCount) {\n            vertexIdx = this.m_vertexCount * Field.Count;\n            this.m_vertexCount++;\n        } else {\n            vertexIdx = this.m_oldestIdx;\n        }\n        if (this.m_vertexCount === 1) {\n            this.m_oldestIdx = this.m_newestIdx = vertexIdx;\n        } else {\n            this.promoteEntry(vertexIdx);\n        }\n        this.setVertex(vertexIdx, vertexId, vertex);\n    }\n\n    private find(vertexId: number): number | undefined {\n        const size = this.m_cache.length;\n        for (let i = 0; i < size; i += Field.Count) {\n            if (this.m_cache[i] === vertexId) {\n                return i;\n            }\n        }\n        return undefined;\n    }\n    private promoteEntry(vertexIdx: number): void {\n        if (vertexIdx === this.m_newestIdx) {\n            return;\n        } // already newest, nothing to do\n        // re-link newer and older items\n        const newerIdx = this.getNewerIdx(vertexIdx);\n        const olderIdx = this.getOlderIdx(vertexIdx);\n        if (newerIdx !== Invalid) {\n            assert(this.getOlderIdx(newerIdx) === vertexIdx);\n            this.setOlderIdx(newerIdx, olderIdx);\n        }\n        if (olderIdx !== Invalid) {\n            assert(this.getNewerIdx(olderIdx) === vertexIdx);\n            this.setNewerIdx(olderIdx, newerIdx);\n        }\n        if (vertexIdx === this.m_oldestIdx) {\n            this.m_oldestIdx = newerIdx;\n        }\n        // re-link ourselves\n        this.setNewerIdx(vertexIdx, Invalid);\n        this.setOlderIdx(vertexIdx, this.m_newestIdx);\n        // finally, set ourselves as the newest entry\n        assert(this.m_newestIdx !== Invalid);\n        assert(this.getNewerIdx(this.m_newestIdx) === Invalid);\n        this.setNewerIdx(this.m_newestIdx, vertexIdx);\n        this.m_newestIdx = vertexIdx;\n    }\n    private getOlderIdx(vertexIdx: number): number {\n        return this.m_cache[vertexIdx + Field.OlderIdx];\n    }\n    private setOlderIdx(vertexIdx: number, olderIdx: number): void {\n        this.m_cache[vertexIdx + Field.OlderIdx] = olderIdx;\n    }\n    private getNewerIdx(vertexIdx: number): number {\n        return this.m_cache[vertexIdx + Field.NewerIdx];\n    }\n    private setNewerIdx(vertexIdx: number, newerIdx: number): void {\n        this.m_cache[vertexIdx + Field.NewerIdx] = newerIdx;\n    }\n    private getVertex(vertexIdx: number, vertex: Vector3Like): void {\n        vertex.x = this.m_cache[vertexIdx + Field.X];\n        vertex.y = this.m_cache[vertexIdx + Field.Y];\n        vertex.z = this.m_cache[vertexIdx + Field.Z];\n    }\n    private setVertex(vertexIdx: number, vertexId: number, vertex: Vector3Like): void {\n        this.m_cache[vertexIdx] = vertexId;\n        this.m_cache[vertexIdx + Field.X] = vertex.x;\n        this.m_cache[vertexIdx + Field.Y] = vertex.y;\n        this.m_cache[vertexIdx + Field.Z] = vertex.z;\n    }\n}\n","/*\n * Copyright (C) 2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { OrientedBox3 } from \"@here/harp-geoutils\";\nimport { SolidLineMaterial } from \"@here/harp-materials\";\nimport { assert } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\nimport { displaceBox, DisplacedBufferGeometry, DisplacementRange } from \"./DisplacedBufferGeometry\";\n\nconst tmpSphere = new THREE.Sphere();\nconst tmpInverseMatrix = new THREE.Matrix4();\nconst tmpRay = new THREE.Ray();\nconst tmpLine1 = new THREE.Line3();\nconst tmpBox = new THREE.Box3();\nconst tmpOBB = new OrientedBox3();\nconst tmpPlane = new THREE.Plane();\nconst tmpV1 = new THREE.Vector3();\nconst tmpV2 = new THREE.Vector3();\nconst tmpV3 = new THREE.Vector3();\nconst tmpV4 = new THREE.Vector3();\n\n// Strides to access the index buffer. See [[createLineGeometry]].\n// Stride between the start vertex indices of consecutive segments, each one made of 2 triangles.\nconst SEGMENT_STRIDE = 6;\n// Stride between the start and end vertex indices of a segment. Vertices are duplicated so that\n// each copy is extruded in opposite directions in the vertex shader.\nconst VERTEX_STRIDE = 2;\n\nfunction isSolidLineMaterial(material: THREE.Material | THREE.Material[]): boolean {\n    return Array.isArray(material)\n        ? material.every(mat => mat instanceof SolidLineMaterial)\n        : material instanceof SolidLineMaterial;\n}\n\n/**\n * Computes the bounding sphere of the part of a given geometry corresponding to a feature.\n * @param geometry The geometry containing the feature.\n * @param featureBeginIndex The index where the feature starts in the geometry's indices attribute.\n * @param featureEndIndex The index where the feature end in the geometry's indices attribute.\n * @returns The feature bounding sphere.\n */\nfunction computeFeatureBoundingSphere(\n    geometry: THREE.BufferGeometry | DisplacedBufferGeometry,\n    featureBeginIndex: number,\n    featureEndIndex: number\n): THREE.Sphere {\n    let displacementRange: DisplacementRange | undefined;\n\n    if (geometry instanceof DisplacedBufferGeometry) {\n        displacementRange = geometry.displacementRange;\n        geometry = geometry.originalGeometry;\n    }\n\n    const attributes = geometry.attributes;\n    const pos = attributes.position as THREE.BufferAttribute;\n    const indices = geometry.index!.array;\n    const sphere = new THREE.Sphere();\n    const bbox = tmpBox.makeEmpty();\n    const vertex = tmpV1;\n\n    // First compute the bounding box for all line segments.\n    for (let i = featureBeginIndex; i < featureEndIndex; i += SEGMENT_STRIDE) {\n        bbox.expandByPoint(vertex.fromBufferAttribute(pos, indices[i]));\n        bbox.expandByPoint(vertex.fromBufferAttribute(pos, indices[i + VERTEX_STRIDE]));\n    }\n\n    if (displacementRange) {\n        // If geometry is displaced, expand the bounding box to cover the whole displacement range,\n        // and return the sphere bounding the box. This is a coarse estimation, but avoids having\n        // to displace all vertices.\n        // All normals in the geometry are assumed to be the same or close enough so that any of\n        // them can be used as displacement direction. For sphere projection, the surface normals\n        // within a tile are approximately the same from level 4 onwards. Here are some examples of\n        // the minimum dot product between normals in a tile (normals at tile's opposite corners):\n        // TILE: (6,9,4): 0.9806892129880023\n        // TILE: (12,17,5): 0.9946739445457075\n        // TILE: (25,34,6): 0.9986326302953471\n        // TILE: (50,68,7): 0.9996583822992287\n        // TILE: (1620,2199,12): 0.9999996706085572\n        const normal = tmpV2;\n        normal.fromBufferAttribute(geometry.attributes.normal as THREE.BufferAttribute, 0);\n        return displaceBox(bbox, displacementRange, normal).getBoundingSphere(sphere);\n    }\n\n    return bbox.getBoundingSphere(sphere);\n}\n\n/**\n * Finds the intersection of a ray with a extruded line.\n * @param ray Intersection ray in object's local space.\n * @param line The centerline.\n * @param vExtrusion Line extrusion vector.\n * @param normal Extrusion plane normal.\n * @param hWidth Extrusion half width.\n * @returns Distance of the extruded line intersection to the ray origin.\n */\nfunction intersectExtrudedLine(\n    ray: THREE.Ray,\n    line: THREE.Line3,\n    vExtrusion: THREE.Vector3,\n    normal: THREE.Vector3,\n    hWidth: number\n): number {\n    const obb = tmpOBB;\n    line.getCenter(obb.position);\n    line.delta(obb.xAxis).normalize();\n    obb.yAxis.copy(vExtrusion);\n    obb.zAxis.copy(normal);\n    obb.extents.set(line.distance() / 2, hWidth, hWidth);\n\n    if (obb.contains(ray.origin)) {\n        return 0;\n    }\n    return obb.intersectsRay(ray) ?? Infinity;\n}\n\n/**\n * Finds the intersection of a ray with the closest end cap of a extruded line.\n * @param ray Intersection ray in object's local space.\n * @param line The centerline.\n * @param hWidth Extrusion half width.\n * @returns Distance of the end cap intersection to the ray origin.\n */\nfunction intersectClosestEndCap(ray: THREE.Ray, line: THREE.Line3, hWidth: number): number {\n    const sphere = new THREE.Sphere(line.start, hWidth);\n    const startCapT = sphere.containsPoint(ray.origin)\n        ? 0\n        : ray.intersectSphere(sphere, tmpV4)\n        ? tmpV4.sub(ray.origin).length()\n        : Infinity;\n    sphere.center.copy(line.end);\n    const endCapT = sphere.containsPoint(ray.origin)\n        ? 0\n        : ray.intersectSphere(sphere, tmpV4)\n        ? tmpV4.sub(ray.origin).length()\n        : Infinity;\n    return Math.min(startCapT, endCapT);\n}\n\n/**\n * Intersects line\n * @param ray Intersection ray in object's local space.\n * @param line The line to intersect.\n * @param vExtrusion Line extrusion vector.\n * @param hWidth The line's extrusion half width.\n * @param hWidthSq The line's extrusion half width squared.\n * @param plane The extrusion plane.\n * @param interPlane The intersection of the ray with the extrusion plane.\n * @param outInterLine The ray intersetion with the extruded line.\n * @returns true if ray intersects the extruded line, false otherwise.\n */\nfunction intersectLine(\n    ray: THREE.Ray,\n    line: THREE.Line3,\n    vExtrusion: THREE.Vector3,\n    hWidth: number,\n    hWidthSq: number,\n    plane: THREE.Plane,\n    interPlane: THREE.Vector3,\n    outInterLine: THREE.Vector3\n): boolean {\n    if (interPlane.equals(ray.origin) && ray.direction.dot(plane.normal) === 0) {\n        // Corner case: ray is coplanar to extruded line, find distance to extruded line sides\n        // and end caps.\n        const extrLineT = intersectExtrudedLine(ray, line, vExtrusion, plane.normal, hWidth);\n        const endCapT = intersectClosestEndCap(ray, line, hWidth);\n\n        const minT = Math.min(extrLineT, endCapT);\n        if (minT === Infinity) {\n            return false;\n        }\n        ray.at(minT, outInterLine);\n        return true;\n    }\n\n    // The plain intersection is also a line intersection only if it's closer to the line\n    // than the extrusion half width.\n    const distSq = interPlane.distanceToSquared(line.closestPointToPoint(interPlane, true, tmpV4));\n\n    if (distSq > hWidthSq) {\n        return false;\n    }\n    outInterLine.copy(interPlane);\n    return true;\n}\n\n/**\n * Finds the intersections of a ray with a partition of a solid line mesh representing a feature.\n * @param mesh The mesh whose intersections will be found.\n * @param raycaster Contains the intersection ray.\n * @param localRay Same ray as raycaster.ray but in object's local space.\n * @param halfWidth The line's extrusion half width.\n * @param lHalfWidth The line's extrusion half width in mesh local space.\n * @param lHalfWidthSq The line's extrusion half width squared in mesh local space.\n * @param beginIdx The index where the feature starts in the mesh geometry's indices attribute.\n * @param endIdx The index where the feature end in the mesh geometry's indices attribute.\n * @param bSphere The feature bounding sphere.\n * @param intersections Array where all intersections found between ray and feature will be pushed.\n */\nfunction intersectFeature(\n    mesh: THREE.Mesh,\n    raycaster: THREE.Raycaster,\n    localRay: THREE.Ray,\n    halfWidth: number,\n    lHalfWidth: number,\n    lHalfWidthSq: number,\n    beginIdx: number,\n    endIdx: number,\n    bSphere: THREE.Sphere,\n    intersections: THREE.Intersection[]\n): void {\n    const vExt = tmpV1;\n    const plane = tmpPlane;\n    const interPlane = tmpV2;\n    const line = tmpLine1;\n\n    const geometry = mesh.geometry as THREE.BufferGeometry;\n    const attributes = geometry.attributes;\n    const position = attributes.position as THREE.BufferAttribute;\n    const bitangent = attributes.bitangent;\n    const indices = geometry.index!.array;\n\n    tmpSphere.copy(bSphere);\n    tmpSphere.applyMatrix4(mesh.matrixWorld);\n    tmpSphere.radius += halfWidth;\n\n    if (!raycaster.ray.intersectsSphere(tmpSphere)) {\n        return;\n    }\n\n    for (let i = beginIdx; i < endIdx; i += SEGMENT_STRIDE) {\n        const a = indices[i];\n        const b = indices[i + VERTEX_STRIDE];\n\n        // Find the plane containing the line segment, using the segment start, end and extrusion\n        // vector.\n        line.start.fromBufferAttribute(position, a);\n        line.end.fromBufferAttribute(position, b);\n        vExt.set(bitangent.getX(a), bitangent.getY(a), bitangent.getZ(a)).normalize();\n        plane.setFromCoplanarPoints(line.start, tmpV3.copy(line.start).add(vExt), line.end);\n        if (plane.normal.manhattanLength() === 0) {\n            // Invalid plane, coplanar points are actually collinear because:\n            // a) The line segment has length 0.\n            // b) The extrusion vector has length 0.\n            // c) The extrusion and segment directions are the same.\n            // In any case it's a degenerate segment, skip it.\n            continue;\n        }\n\n        // The ray intersection if any, will be on the extrusion plane.\n        if (!localRay.intersectPlane(plane, interPlane)) {\n            continue;\n        }\n\n        const interLine = tmpV3;\n        if (\n            !intersectLine(\n                localRay,\n                line,\n                vExt,\n                lHalfWidth,\n                lHalfWidthSq,\n                plane,\n                interPlane,\n                interLine\n            )\n        ) {\n            continue;\n        }\n\n        // Move back to world space for distance calculation\n        const interLineWorld = interLine.applyMatrix4(mesh.matrixWorld);\n\n        const distance = raycaster.ray.origin.distanceTo(interLineWorld);\n\n        if (distance < raycaster.near || distance > raycaster.far) {\n            continue;\n        }\n\n        intersections.push({\n            distance,\n            point: interLineWorld.clone(),\n            index: i,\n            object: mesh\n        });\n    }\n}\n\nconst singleFeatureStart = [0];\nconst MAX_SCALE_RATIO_DIFF = 1e-2;\n\n/**\n * Finds the intersections of a ray with a group within a solid line mesh.\n * @param mesh The mesh whose intersections will be found.\n * @param material The material used by the group inside the mesh.\n * @param raycaster  Contains the intersection ray.\n * @param localRay Same ray as raycaster.ray but in object's local space.\n * @param firstFeatureIdx Index of the first feature in the group.\n * @param groupEndIdx Index of the last vertex in the group.\n * @param intersections  Array where all intersections found between ray and group will be pushed.\n * @returns The next feature index after the group.\n */\nfunction intersectGroup(\n    mesh: THREE.Mesh,\n    material: THREE.Material,\n    raycaster: THREE.Raycaster,\n    localRay: THREE.Ray,\n    firstFeatureIdx: number,\n    groupEndIdx: number,\n    intersections: THREE.Intersection[]\n): number {\n    const bVolumes = mesh.userData.feature.boundingVolumes;\n    assert(mesh.geometry instanceof THREE.BufferGeometry, \"Unsupported geometry type.\");\n    const geometry = mesh.geometry as THREE.BufferGeometry;\n    assert(isSolidLineMaterial(material), \"Unsupported material type\");\n    const solidLineMaterial = material as SolidLineMaterial;\n\n    const halfWidth = (solidLineMaterial.lineWidth + solidLineMaterial.outlineWidth) / 2;\n    // Assumption: scaling is uniform or close enough to use a local width independent of direction.\n    assert(Math.abs(1 - mesh.scale.x / mesh.scale.y) < MAX_SCALE_RATIO_DIFF);\n    assert(Math.abs(1 - mesh.scale.x / mesh.scale.z) < MAX_SCALE_RATIO_DIFF);\n    assert(Math.abs(1 - mesh.scale.y / mesh.scale.z) < MAX_SCALE_RATIO_DIFF);\n    const localHalfWidth = halfWidth / ((mesh.scale.x + mesh.scale.y + mesh.scale.z) / 3);\n    const localHalfWidthSq = localHalfWidth * localHalfWidth;\n    const featureStarts = mesh.userData.feature.starts ?? singleFeatureStart;\n\n    let featureIdx = firstFeatureIdx;\n    let beginIdx = featureStarts[featureIdx];\n    const lastFeatureIdx = featureStarts.length - 1;\n\n    while (beginIdx < groupEndIdx) {\n        const bVolumeIdx = featureIdx;\n        const endIdx = featureIdx < lastFeatureIdx ? featureStarts[++featureIdx] : groupEndIdx;\n        if (bVolumeIdx >= bVolumes.length) {\n            // Geometry might be extruded on any direction. To avoid extruding all vertices, the\n            // centerline geometry is used to compute a bounding sphere whose radius is later\n            // expanded by the extrusion half width to ensure it contains the extruded geometry.\n            bVolumes.push(computeFeatureBoundingSphere(geometry, beginIdx, endIdx));\n        }\n        intersectFeature(\n            mesh,\n            raycaster,\n            localRay,\n            halfWidth,\n            localHalfWidth,\n            localHalfWidthSq,\n            beginIdx,\n            endIdx,\n            bVolumes[bVolumeIdx],\n            intersections\n        );\n        beginIdx = endIdx;\n    }\n    return featureIdx;\n}\n\n/**\n * Mesh formed by extruding a polyline in the shaders. Overrides raycasting behaviour to account for\n * extrusion, see [[SolidLineMaterial]].\n * @internal\n */\nexport class SolidLineMesh extends THREE.Mesh {\n    /**\n     * Finds the intersections of a ray with a mesh, assuming the mesh is a polyline extruded in\n     * the shaders (see [[SolidLineMaterial]]).\n     * @param mesh The mesh whose intersections will be found.\n     * @param raycaster Contains the intersection ray.\n     * @param intersections Array where all intersections found between ray and mesh will be pushed.\n     */\n    static raycast(\n        mesh: THREE.Mesh,\n        raycaster: THREE.Raycaster,\n        intersections: THREE.Intersection[]\n    ): void {\n        assert(mesh.geometry instanceof THREE.BufferGeometry, \"Unsupported geometry type\");\n        const geometry = mesh.geometry as THREE.BufferGeometry;\n        assert(geometry.index !== null, \"Geometry does not have indices\");\n        const matrixWorld = mesh.matrixWorld;\n\n        tmpInverseMatrix.getInverse(matrixWorld);\n        const localRay = tmpRay.copy(raycaster.ray).applyMatrix4(tmpInverseMatrix);\n\n        // Test intersection of ray with each of the features within the mesh.\n        if (!mesh.userData.feature) {\n            mesh.userData.feature = {};\n        }\n        if (!mesh.userData.feature.boundingVolumes) {\n            mesh.userData.feature.boundingVolumes = [];\n        }\n        const indices = geometry.index!.array;\n\n        if (Array.isArray(mesh.material)) {\n            let nextFeatureIdx = 0;\n            for (const group of geometry.groups) {\n                const material = mesh.material[group.materialIndex!];\n                const groupEndIdx = group.start + group.count;\n                nextFeatureIdx = intersectGroup(\n                    mesh,\n                    material,\n                    raycaster,\n                    localRay,\n                    nextFeatureIdx,\n                    groupEndIdx,\n                    intersections\n                );\n            }\n        } else {\n            intersectGroup(\n                mesh,\n                mesh.material,\n                raycaster,\n                localRay,\n                0,\n                indices.length,\n                intersections\n            );\n        }\n    }\n\n    /**\n     * Creates an instance of SolidLineMesh.\n     * @param geometry Mesh geometry.\n     * @param material Material(s) to be used by the mesh. They must be instances of\n     * [[SolidLineMaterial]].\n     */\n    constructor(geometry: THREE.BufferGeometry, material: THREE.Material | THREE.Material[]) {\n        super(geometry, material);\n    }\n\n    // HARP-9585: Override of base class method, however tslint doesn't recognize it as such.\n    // tslint:disable-next-line: explicit-override\n    raycast(raycaster: THREE.Raycaster, intersects: THREE.Intersection[]): void {\n        SolidLineMesh.raycast(this, raycaster, intersects);\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Vector3Like } from \"@here/harp-geoutils\";\nimport * as THREE from \"three\";\n\n/**\n * This path in world coordinates is projected to screen space and blocks all other labels.\n *\n * It could be used for example:\n * - Border rejects labels.\n * - Route blocks street labels from being rendered underneath.\n *\n * Could potentially be expanded in future to have a priority, however for now, this isn't required.\n */\n\nexport class PathBlockingElement {\n    /**\n     * Note, [[screenSpaceLines]] is only used as a performance improvement and contains no\n     * useful information. They are used to contain the screen space coordinates of the\n     * points. By allocating the space here, we avoid per frame allocations, see\n     * [[TextElementsRenderer.prepopulateScreenWithBlockingElements]].\n     */\n    readonly screenSpaceLines: THREE.Line3[];\n\n    /**\n     * Constructs a path from a list of points.\n     * Pre allocates the [[screenSpaceLines]] used to render.\n     * @param points Points in world coordinates.\n     */\n    constructor(readonly points: Vector3Like[]) {\n        this.screenSpaceLines = new Array<THREE.Line3>(points.length >= 2 ? points.length - 1 : 0);\n        for (let i = 0; i < this.screenSpaceLines.length; i++) {\n            this.screenSpaceLines[i] = new THREE.Line3(new THREE.Vector3(), new THREE.Vector3());\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { Math2D } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\n\nimport { MemoryUsage } from \"@here/harp-text-canvas\";\nimport { getPixelFromImage, screenToUvCoordinates } from \"./PixelPicker\";\n\n/**\n * Declares an interface for a `struct` containing a [[BoxBuffer]]'s attribute state information.\n */\nexport interface State {\n    positionAttributeCount: number;\n    colorAttributeCount: number;\n    uvAttributeCount: number;\n    indexAttributeCount: number;\n    pickInfoCount: number;\n}\n\n/**\n * Initial number of boxes in BoxBuffer.\n */\nconst START_BOX_BUFFER_SIZE = 0;\n\n/**\n * Maximum number of boxes in BoxBuffer.\n */\nconst MAX_BOX_BUFFER_SIZE = 32 * 1024;\n\n/**\n * Number of vertices per box/glyph element: 4 corners.\n */\nconst NUM_VERTICES_PER_ELEMENT = 4;\n\n/**\n * Number of indices added per box/glyph: 2 triangles, 6 indices.\n */\nconst NUM_INDICES_PER_ELEMENT = 6;\n\n/**\n * Number of values per position.\n */\nconst NUM_POSITION_VALUES_PER_VERTEX = 3;\n\n/**\n * Number of values per color.\n */\nconst NUM_COLOR_VALUES_PER_VERTEX = 4;\n\n/**\n * Number of values per UV.\n */\nconst NUM_UV_VALUES_PER_VERTEX = 4;\n\n/**\n * Number of values per index.\n */\nconst NUM_INDEX_VALUES_PER_VERTEX = 1;\n\n/**\n * Number of bytes for float in an Float32Array.\n */\nconst NUM_BYTES_PER_FLOAT = 4;\n\n/**\n * Number of bytes for integer number in an UInt32Array.\n */\nconst NUM_BYTES_PER_INT32 = 4;\n\n/**\n * SubClass of [[THREE.Mesh]] to identify meshes that have been created by [[BoxBuffer]] and\n * [[TextBuffer]]. Add the isEmpty flag to quickly test for empty meshes.\n */\nexport class BoxBufferMesh extends THREE.Mesh {\n    constructor(geometry: THREE.BufferGeometry, material: THREE.Material | THREE.Material[]) {\n        super(geometry, material);\n\n        this.type = \"BoxBufferMesh\";\n    }\n\n    /**\n     * A mesh that has no positions and indices set is defined to be empty.\n     *\n     * @returns `True` if no indices have been added to the mesh.\n     */\n    get isEmpty(): boolean {\n        if (this.geometry === undefined) {\n            return true;\n        } else {\n            const bufferGeometry = this.geometry as THREE.BufferGeometry;\n            return bufferGeometry.index === null || bufferGeometry.index.count === 0;\n        }\n    }\n}\n\n/**\n * Buffer for (untransformed) `Box2` objects. Can be used to create a single geometry for screen-\n * aligned boxes, like POIs.\n */\nexport class BoxBuffer {\n    /**\n     * [[BufferAttribute]] holding the `BoxBuffer` position data.\n     */\n    protected positionAttribute?: THREE.BufferAttribute;\n\n    /**\n     * [[BufferAttribute]] holding the `BoxBuffer` color data.\n     */\n    protected colorAttribute?: THREE.BufferAttribute;\n\n    /**\n     * [[BufferAttribute]] holding the `BoxBuffer` uv data.\n     */\n    protected uvAttribute?: THREE.BufferAttribute;\n\n    /**\n     * [[BufferAttribute]] holding the `BoxBuffer` index data.\n     */\n    protected indexAttribute?: THREE.BufferAttribute;\n    protected pickInfos: Array<any | undefined>;\n\n    /**\n     * [[BufferGeometry]] holding all the different [[BufferAttribute]]s.\n     */\n    protected geometry: THREE.BufferGeometry | undefined;\n\n    /**\n     * [[Mesh]] used for rendering.\n     */\n    protected internalMesh: BoxBufferMesh | undefined;\n\n    private m_size: number = 0;\n\n    /**\n     * Creates a new `BoxBuffer`.\n     *\n     * @param material Material to be used for [[Mesh]] of this `BoxBuffer`.\n     * @param renderOrder Optional renderOrder of this buffer.\n     * @param startElementCount Initial number of elements this `BoxBuffer` can hold.\n     * @param maxElementCount Maximum number of elements this `BoxBuffer` can hold.\n     */\n    constructor(\n        readonly material: THREE.Material | THREE.Material[],\n        readonly renderOrder: number = 0,\n        readonly startElementCount = START_BOX_BUFFER_SIZE,\n        readonly maxElementCount = MAX_BOX_BUFFER_SIZE\n    ) {\n        this.resizeBuffer(startElementCount);\n        this.pickInfos = new Array();\n    }\n\n    /**\n     * Duplicate this `BoxBuffer` with same material and renderOrder.\n     *\n     * @returns A clone of this `BoxBuffer`.\n     */\n    clone(): BoxBuffer {\n        return new BoxBuffer(this.material, this.renderOrder);\n    }\n\n    /**\n     * Dispose of the geometry.\n     */\n    dispose() {\n        if (this.geometry !== undefined) {\n            this.geometry.dispose();\n            this.geometry = undefined;\n        }\n        this.internalMesh = undefined;\n    }\n\n    /**\n     * Return the current number of elements the buffer can hold.\n     */\n    get size(): number {\n        return this.m_size;\n    }\n\n    /**\n     * Clear's the `BoxBuffer` attribute buffers.\n     */\n    reset() {\n        if (this.positionAttribute !== undefined) {\n            this.positionAttribute.count = 0;\n            this.colorAttribute!.count = 0;\n            this.uvAttribute!.count = 0;\n            this.indexAttribute!.count = 0;\n            this.pickInfos!.length = 0;\n        }\n    }\n\n    /**\n     * Returns `true` if this `BoxBuffer` can hold the specified amount of glyphs. If the buffer\n     * can only add the glyph by increasing the buffer size, the resize() method is called, which\n     * will then create a new geometry for the mesh.\n     *\n     * @param glyphCount Number of glyphs to be added to the buffer.\n     * @returns `true` if the element (box or glyph) can be added to the buffer, `false` otherwise.\n     */\n    canAddElements(glyphCount = 1): boolean {\n        const indexAttribute = this.indexAttribute!;\n        if (\n            indexAttribute.count + glyphCount * NUM_INDICES_PER_ELEMENT >=\n            indexAttribute.array.length\n        ) {\n            // Too many elements for the current buffer, check if we can resize the buffer.\n            if (indexAttribute.array.length >= this.maxElementCount * NUM_INDICES_PER_ELEMENT) {\n                return false;\n            }\n\n            const newSize = Math.min(this.maxElementCount, this.size === 0 ? 256 : this.size * 2);\n            this.resize(newSize);\n        }\n        return true;\n    }\n\n    /**\n     * Returns this `BoxBuffer`'s attribute [[State]].\n     */\n    saveState(): State {\n        const state: State = {\n            positionAttributeCount: this.positionAttribute!.count,\n            colorAttributeCount: this.colorAttribute!.count,\n            uvAttributeCount: this.uvAttribute!.count,\n            indexAttributeCount: this.indexAttribute!.count,\n            pickInfoCount: this.pickInfos!.length\n        };\n        return state;\n    }\n\n    /**\n     * Store this `BoxBuffer`'s attribute [[State]] to a previously stored one.\n     *\n     * @param state [[State]] struct describing a previous attribute state.\n     */\n    restoreState(state: State) {\n        this.positionAttribute!.count = state.positionAttributeCount;\n        this.colorAttribute!.count = state.colorAttributeCount;\n        this.uvAttribute!.count = state.uvAttributeCount;\n        this.indexAttribute!.count = state.indexAttributeCount;\n        this.pickInfos!.length = state.pickInfoCount;\n    }\n\n    /**\n     * Adds a new box to this `BoxBuffer`.\n     *\n     * @param screenBox [[Math2D.Box]] holding screen coordinates for this box.\n     * @param uvBox [[Math2D.UvBox]] holding uv coordinates for this box.\n     * @param color Box's color.\n     * @param opacity Box's opacity.\n     * @param distance Box's distance to camera.\n     * @param pickInfo Box's picking information.\n     */\n    addBox(\n        screenBox: Math2D.Box,\n        uvBox: Math2D.UvBox,\n        color: THREE.Color,\n        opacity: number,\n        distance: number,\n        pickInfo?: any\n    ): boolean {\n        if (!this.canAddElements()) {\n            return false;\n        }\n\n        const { s0, t0, s1, t1 } = uvBox;\n        const { x, y, w, h } = screenBox;\n\n        const r = Math.round(color.r * 255);\n        const g = Math.round(color.g * 255);\n        const b = Math.round(color.b * 255);\n        const a = Math.round(opacity * 255);\n\n        const positionAttribute = this.positionAttribute!;\n        const colorAttribute = this.colorAttribute!;\n        const uvAttribute = this.uvAttribute!;\n        const indexAttribute = this.indexAttribute!;\n\n        const baseVertex = positionAttribute.count;\n        const baseIndex = indexAttribute.count;\n\n        positionAttribute.setXYZ(baseVertex, x, y, distance);\n        positionAttribute.setXYZ(baseVertex + 1, x + w, y, distance);\n        positionAttribute.setXYZ(baseVertex + 2, x, y + h, distance);\n        positionAttribute.setXYZ(baseVertex + 3, x + w, y + h, distance);\n\n        colorAttribute.setXYZW(baseVertex, r, g, b, a);\n        colorAttribute.setXYZW(baseVertex + 1, r, g, b, a);\n        colorAttribute.setXYZW(baseVertex + 2, r, g, b, a);\n        colorAttribute.setXYZW(baseVertex + 3, r, g, b, a);\n\n        uvAttribute.setXY(baseVertex, s0, t0);\n        uvAttribute.setXY(baseVertex + 1, s1, t0);\n        uvAttribute.setXY(baseVertex + 2, s0, t1);\n        uvAttribute.setXY(baseVertex + 3, s1, t1);\n\n        indexAttribute.setX(baseIndex, baseVertex);\n        indexAttribute.setX(baseIndex + 1, baseVertex + 1);\n        indexAttribute.setX(baseIndex + 2, baseVertex + 2);\n        indexAttribute.setX(baseIndex + 3, baseVertex + 2);\n        indexAttribute.setX(baseIndex + 4, baseVertex + 1);\n        indexAttribute.setX(baseIndex + 5, baseVertex + 3);\n\n        positionAttribute.count += NUM_VERTICES_PER_ELEMENT;\n        colorAttribute.count += NUM_VERTICES_PER_ELEMENT;\n        uvAttribute.count += NUM_VERTICES_PER_ELEMENT;\n        indexAttribute.count += NUM_INDICES_PER_ELEMENT;\n\n        this.pickInfos.push(pickInfo);\n\n        return true;\n    }\n\n    /**\n     * Updates a [[BufferGeometry]] object to reflect the changes in this `TextBuffer`'s attribute\n     * data.\n     */\n    updateBufferGeometry() {\n        const positionAttribute = this.positionAttribute!;\n        const colorAttribute = this.colorAttribute!;\n        const uvAttribute = this.uvAttribute!;\n        const indexAttribute = this.indexAttribute!;\n\n        if (positionAttribute.count > 0) {\n            positionAttribute.needsUpdate = true;\n            positionAttribute.updateRange.offset = 0;\n            positionAttribute.updateRange.count =\n                positionAttribute.count * NUM_VERTICES_PER_ELEMENT;\n        }\n\n        if (colorAttribute.count > 0) {\n            colorAttribute.needsUpdate = true;\n            colorAttribute.updateRange.offset = 0;\n            colorAttribute.updateRange.count = colorAttribute.count * NUM_VERTICES_PER_ELEMENT;\n        }\n\n        if (uvAttribute.count > 0) {\n            uvAttribute.needsUpdate = true;\n            uvAttribute.updateRange.offset = 0;\n            uvAttribute.updateRange.count = uvAttribute.count * NUM_VERTICES_PER_ELEMENT;\n        }\n\n        if (indexAttribute.count > 0) {\n            indexAttribute.needsUpdate = true;\n            indexAttribute.updateRange.offset = 0;\n            indexAttribute.updateRange.count = indexAttribute.count;\n        }\n\n        if (this.geometry !== undefined) {\n            this.geometry.clearGroups();\n            this.geometry.addGroup(0, this.indexAttribute!.count);\n        }\n    }\n\n    /**\n     * Check if the buffer is empty. If it is empty, the memory usage is minimized to reduce\n     * footprint.\n     */\n    cleanUp() {\n        // If there is nothing in this buffer, resize it, it may never be used again.\n        if (this.indexAttribute!.count === 0 && this.size > START_BOX_BUFFER_SIZE) {\n            this.clearAttributes();\n        }\n    }\n\n    /**\n     * Determine if the mesh is empty.\n     */\n    get isEmpty(): boolean {\n        return this.internalMesh!.isEmpty;\n    }\n\n    /**\n     * Get the [[Mesh]] object. The geometry instance of the mesh may change if the buffers are\n     * resized. The mesh, once created, will not change, so it can always be added to the scene.\n     */\n    get mesh(): BoxBufferMesh {\n        if (this.internalMesh === undefined) {\n            this.resize();\n        }\n        return this.internalMesh!;\n    }\n\n    /**\n     * Fill the picking results for the pixel with the given screen coordinate. If multiple\n     * boxes are found, the order of the results is unspecified.\n     *\n     * @param screenPosition Screen coordinate of picking position.\n     * @param pickCallback Callback to be called for every picked element.\n     * @param imageData Image data to test if the pixel is transparent\n     */\n    pickBoxes(\n        screenPosition: THREE.Vector2,\n        pickCallback: (pickData: any | undefined) => void,\n        imageData?: ImageBitmap | ImageData\n    ) {\n        const n = this.pickInfos.length;\n        const pickInfos = this.pickInfos;\n        const positions = this.positionAttribute!;\n        const screenX = screenPosition.x;\n        const screenY = screenPosition.y;\n\n        const canvas = document.createElement(\"canvas\");\n        for (let pickInfoIndex = 0; pickInfoIndex < n; pickInfoIndex++) {\n            const positionIndex = pickInfoIndex * NUM_VERTICES_PER_ELEMENT;\n\n            const minX = positions.getX(positionIndex);\n            if (screenX < minX) {\n                continue;\n            }\n\n            const maxX = positions.getX(positionIndex + 1);\n            if (screenX > maxX) {\n                continue;\n            }\n\n            const minY = positions.getY(positionIndex);\n            if (screenY < minY) {\n                continue;\n            }\n\n            const maxY = positions.getY(positionIndex + 2);\n            if (screenY > maxY) {\n                continue;\n            }\n\n            const box = new Math2D.Box(minX, minY, maxX - minX, maxY - minY);\n            if (\n                imageData !== undefined &&\n                pickInfos[pickInfoIndex].poiInfo !== undefined &&\n                pickInfos[pickInfoIndex].poiInfo.uvBox !== undefined &&\n                this.isPixelTransparent(\n                    imageData,\n                    screenX,\n                    screenY,\n                    box,\n                    pickInfos[pickInfoIndex].poiInfo.uvBox,\n                    canvas\n                )\n            ) {\n                continue;\n            }\n\n            if (pickInfos[pickInfoIndex] !== undefined) {\n                pickCallback(pickInfos[pickInfoIndex]);\n            }\n        }\n    }\n\n    /**\n     * Creates a new [[Geometry]] object from all the attribute data stored in this `BoxBuffer`.\n     * The [[Mesh]] object may be created if it is not initialized already.\n     *\n     * @param newSize Optional number of elements to resize the buffer to.\n     * @param forceResize Optional flag to force a resize even if new size is smaller than before.\n     */\n    resize(newSize?: number, forceResize?: boolean): BoxBufferMesh {\n        if (this.geometry !== undefined) {\n            this.geometry.dispose();\n        }\n\n        this.geometry = new THREE.BufferGeometry();\n\n        if (newSize !== undefined && (forceResize === true || newSize > this.size)) {\n            this.resizeBuffer(newSize);\n        }\n\n        this.geometry.setAttribute(\"position\", this.positionAttribute!);\n        this.geometry.setAttribute(\"color\", this.colorAttribute!);\n        this.geometry.setAttribute(\"uv\", this.uvAttribute!);\n        this.geometry.setIndex(this.indexAttribute!);\n        this.geometry.addGroup(0, this.indexAttribute!.count);\n\n        if (this.internalMesh === undefined) {\n            this.internalMesh = new BoxBufferMesh(this.geometry, this.material);\n            this.internalMesh.renderOrder = this.renderOrder;\n        } else {\n            this.internalMesh.geometry = this.geometry;\n        }\n        return this.internalMesh;\n    }\n\n    /**\n     * Update the info with the memory footprint caused by objects owned by the `BoxBuffer`.\n     *\n     * @param info The info object to increment with the values from this `BoxBuffer`.\n     */\n    updateMemoryUsage(info: MemoryUsage) {\n        const numBytes =\n            this.positionAttribute!.count * NUM_POSITION_VALUES_PER_VERTEX * NUM_BYTES_PER_FLOAT +\n            this.colorAttribute!.count * NUM_COLOR_VALUES_PER_VERTEX +\n            this.uvAttribute!.count * NUM_UV_VALUES_PER_VERTEX * NUM_BYTES_PER_FLOAT +\n            this.indexAttribute!.count * NUM_BYTES_PER_INT32; // May be UInt16, so we overestimate\n\n        info.heapSize += numBytes;\n        info.gpuSize += numBytes;\n    }\n\n    /**\n     * Check if a pixel is transparent or not.\n     *\n     * @param imageData Data containing the pixels.\n     * @param xScreenPos X position of the pixel.\n     * @param yScreenPos Y position of the pixel.\n     * @param box Bounding box of the image in screen coordinates.\n     * @param uvBox Uv box referred to the given bounding box.\n     * @param canvas Canvas element that will be used to draw the image, in case the imageData is an\n     *      ImageBitmap\n     */\n    protected isPixelTransparent(\n        imageData: ImageBitmap | ImageData,\n        xScreenPos: number,\n        yScreenPos: number,\n        box: Math2D.Box,\n        uvBox: Math2D.UvBox,\n        canvas?: HTMLCanvasElement\n    ): boolean {\n        let pixelIsTransparent = false;\n\n        const { u, v } = screenToUvCoordinates(xScreenPos, yScreenPos, box, uvBox);\n\n        const imageWidth = imageData.width;\n        const x = imageWidth * u;\n        const imageHeight = imageData.height;\n        const y = imageHeight * v;\n\n        const pixel = getPixelFromImage(x, y, imageData, canvas);\n\n        if (pixel !== undefined && pixel[3] === 0) {\n            pixelIsTransparent = true;\n        }\n        return pixelIsTransparent;\n    }\n\n    /**\n     * Remove current attributes and arrays. Minimizes memory footprint.\n     */\n    protected clearAttributes() {\n        this.positionAttribute = undefined;\n        this.colorAttribute = undefined;\n        this.uvAttribute = undefined;\n        this.indexAttribute = undefined;\n        this.resize(START_BOX_BUFFER_SIZE, true);\n    }\n\n    /**\n     * Resize the attribute buffers. New value must be larger than the previous one.\n     *\n     * @param newSize New number of elements in the buffer. Number has to be larger than the\n     *      previous size.\n     */\n    protected resizeBuffer(newSize: number) {\n        const newPositionArray = new Float32Array(\n            newSize * NUM_VERTICES_PER_ELEMENT * NUM_POSITION_VALUES_PER_VERTEX\n        );\n\n        if (this.positionAttribute !== undefined && this.positionAttribute.array.length > 0) {\n            const positionAttributeCount = this.positionAttribute.count;\n            newPositionArray.set(this.positionAttribute.array);\n            this.positionAttribute.array = newPositionArray;\n            this.positionAttribute.count = positionAttributeCount;\n        } else {\n            this.positionAttribute = new THREE.BufferAttribute(\n                newPositionArray,\n                NUM_POSITION_VALUES_PER_VERTEX\n            );\n            this.positionAttribute.count = 0;\n            this.positionAttribute.setUsage(THREE.DynamicDrawUsage);\n        }\n\n        const newColorArray = new Uint8Array(\n            newSize * NUM_VERTICES_PER_ELEMENT * NUM_COLOR_VALUES_PER_VERTEX\n        );\n\n        if (this.colorAttribute !== undefined) {\n            const colorAttributeCount = this.colorAttribute.count;\n            newColorArray.set(this.colorAttribute.array);\n            this.colorAttribute.array = newColorArray;\n            this.colorAttribute.count = colorAttributeCount;\n        } else {\n            this.colorAttribute = new THREE.BufferAttribute(\n                newColorArray,\n                NUM_COLOR_VALUES_PER_VERTEX,\n                true\n            );\n            this.colorAttribute.count = 0;\n            this.colorAttribute.setUsage(THREE.DynamicDrawUsage);\n        }\n\n        const newUvArray = new Float32Array(\n            newSize * NUM_VERTICES_PER_ELEMENT * NUM_UV_VALUES_PER_VERTEX\n        );\n\n        if (this.uvAttribute !== undefined) {\n            const uvAttributeCount = this.uvAttribute.count;\n            newUvArray.set(this.uvAttribute.array);\n            this.uvAttribute.array = newUvArray;\n            this.uvAttribute.count = uvAttributeCount;\n        } else {\n            this.uvAttribute = new THREE.BufferAttribute(newUvArray, NUM_UV_VALUES_PER_VERTEX);\n            this.uvAttribute.count = 0;\n            this.uvAttribute.setUsage(THREE.DynamicDrawUsage);\n        }\n\n        const numIndexValues = newSize * NUM_INDICES_PER_ELEMENT * NUM_INDEX_VALUES_PER_VERTEX;\n\n        const newIndexArray =\n            numIndexValues > 65535\n                ? new Uint32Array(numIndexValues)\n                : new Uint16Array(numIndexValues);\n\n        if (this.indexAttribute !== undefined) {\n            const indexAttributeCount = this.indexAttribute.count;\n            newIndexArray.set(this.indexAttribute.array);\n            this.indexAttribute.array = newIndexArray;\n            this.indexAttribute.count = indexAttributeCount;\n        } else {\n            this.indexAttribute = new THREE.BufferAttribute(\n                newIndexArray,\n                NUM_INDEX_VALUES_PER_VERTEX\n            );\n            this.indexAttribute.count = 0;\n            this.indexAttribute.setUsage(THREE.DynamicDrawUsage);\n        }\n\n        this.m_size = newSize;\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Math2D, MathUtils } from \"@here/harp-utils\";\n\n/**\n * It returns an array containing the channel colors for the pixel at the given coordinates.\n *\n * @param xPos X value of the pixel.\n * @param yPos Y value of the pixel.\n * @param imageData Data containing the pixels.\n * @param canvas Canvas element that will be used to draw the image, in case the imageData is an\n * ImageBitmap\n */\nexport function getPixelFromImage(\n    xPos: number,\n    yPos: number,\n    imageData: ImageData | ImageBitmap,\n    canvas?: HTMLCanvasElement\n): Uint8ClampedArray | undefined {\n    let pickedColor;\n\n    const isImageBitmap = (imgData: ImageBitmap | ImageData) => {\n        return (imgData as ImageBitmap).close !== undefined;\n    };\n\n    if (isImageBitmap(imageData!)) {\n        if (canvas === undefined) {\n            canvas = document.createElement(\"canvas\");\n        }\n        pickedColor = getPixelFromImageBitmap(imageData as ImageBitmap, xPos, yPos, canvas);\n    } else {\n        const pixelsData = imageData as ImageData;\n        const stride = pixelsData.data.length / (pixelsData.height * pixelsData.width);\n        pickedColor = getPixelFromImageData(pixelsData, xPos, yPos, stride);\n    }\n    return pickedColor;\n}\n\n/**\n * Given the x and y position in screen coordinates inside the target box, it map them to the UV\n * coordinates.\n * @param screenX X value in screen coordinates.\n * @param screenY Y value in screen coordinates.\n * @param box Bounding box in screen coordinates.\n * @param uvBox Uv box referred to the given bounding box.\n */\nexport function screenToUvCoordinates(\n    screenX: number,\n    screenY: number,\n    box: Math2D.Box,\n    uvBox: Math2D.UvBox\n): { u: number; v: number } {\n    const minX = box.x;\n    const maxX = box.x + box.w;\n    const minY = box.y;\n    const maxY = box.y + box.h;\n    const u = MathUtils.map(screenX, minX, maxX, uvBox.s0, uvBox.s1);\n    const v = MathUtils.map(screenY, minY, maxY, uvBox.t0, uvBox.t1);\n\n    return { u, v };\n}\n\n/**\n * It returns an Uint8ClampedArray containing the color channel values for the given pixel\n * coordinates. It returns undefined if the given coordinates are out of range.\n *\n * @param image Bitmap image in which the pixels are stored.\n * @param xPos X value of the pixel.\n * @param yPos Y value of the pixel.\n * @param canvas HTML Canvas element on which the image is drawn.\n */\nexport function getPixelFromImageBitmap(\n    image: ImageBitmap,\n    xPos: number,\n    yPos: number,\n    canvas: HTMLCanvasElement\n): Uint8ClampedArray | undefined {\n    if (xPos > image.width || xPos < 0 || yPos > image.height || yPos < 0) {\n        return undefined;\n    }\n\n    let pixelData;\n\n    canvas.width = image.width;\n    canvas.height = image.height;\n\n    const context = canvas.getContext(\"2d\");\n    if (context !== null) {\n        context.drawImage(\n            image,\n            0,\n            0,\n            image.width,\n            image.height,\n            0,\n            0,\n            canvas.width,\n            canvas.height\n        );\n        pixelData = context.getImageData(xPos, yPos, 1, 1).data;\n    }\n    return pixelData;\n}\n\n/**\n * It returns an Uint8ClampedArray containing the color channel values for the given pixel\n * coordinates. It returns undefined if the given coordinates are out of range.\n *\n * @param image Image data in which the pixels are stored.\n * @param xPos X value of the pixel.\n * @param yPos Y value of the pixel.\n * @param stride The stride value of the image data.\n */\nexport function getPixelFromImageData(\n    imgData: ImageData,\n    xPos: number,\n    yPos: number,\n    stride: number\n): Uint8ClampedArray | undefined {\n    const getPixel = (imageData: ImageData, index: number, strd: number) => {\n        const i = index * strd;\n        const d = imageData.data;\n        const pixel = new Uint8ClampedArray(strd);\n        for (let s = 0; s < strd; s++) {\n            pixel[0] = d[i + s];\n        }\n        return pixel;\n    };\n    if (xPos > imgData.width || xPos < 0 || yPos > imgData.height || yPos < 0) {\n        return undefined;\n    }\n    return getPixel(imgData, yPos * imgData.width + xPos, stride);\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { IChannel } from \"@here/harp-utils\";\n\nexport class PlacementStats {\n    totalGroups: number = 0;\n    resortedGroups: number = 0;\n    total: number = 0;\n    uninitialized: number = 0;\n    tooFar: number = 0;\n    numNotVisible: number = 0;\n    numPathTooSmall: number = 0;\n    numCannotAdd: number = 0;\n    numRenderedPoiIcons: number = 0;\n    numRenderedPoiTexts: number = 0;\n    numPoiTextsInvisible: number = 0;\n    numRenderedTextElements: number = 0;\n\n    constructor(private readonly m_logger: IChannel) {}\n\n    clear() {\n        this.totalGroups = 0;\n        this.resortedGroups = 0;\n        this.total = 0;\n        this.uninitialized = 0;\n        this.tooFar = 0;\n        this.numNotVisible = 0;\n        this.numPathTooSmall = 0;\n        this.numCannotAdd = 0;\n        this.numRenderedPoiIcons = 0;\n        this.numRenderedPoiTexts = 0;\n        this.numPoiTextsInvisible = 0;\n        this.numRenderedTextElements = 0;\n    }\n    log() {\n        const numNotRendered =\n            this.uninitialized +\n            this.numPoiTextsInvisible +\n            this.tooFar +\n            this.numNotVisible +\n            this.numCannotAdd;\n        this.m_logger.debug(\"Total groups\", this.totalGroups);\n        this.m_logger.debug(\"Resorted groups\", this.resortedGroups);\n        this.m_logger.debug(\"Total labels\", this.total);\n        this.m_logger.debug(\"Rendered labels\", this.numRenderedTextElements);\n        this.m_logger.debug(\"Rejected labels\", numNotRendered);\n        this.m_logger.debug(\"Unitialized labels\", this.uninitialized);\n        this.m_logger.debug(\"Rendered poi icons\", this.numRenderedPoiIcons);\n        this.m_logger.debug(\"Rendered poi texts\", this.numRenderedPoiTexts);\n        this.m_logger.debug(\"Poi text invisible\", this.numPoiTextsInvisible);\n        this.m_logger.debug(\"Too far\", this.tooFar);\n        this.m_logger.debug(\"Not visible\", this.numNotVisible);\n        this.m_logger.debug(\"Path too small\", this.numPathTooSmall);\n        this.m_logger.debug(\"Rejected, max glyphs reached\", this.numCannotAdd);\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\n/**\n * @hidden\n */\nexport class SimpleLineCurve extends THREE.LineCurve {\n    private m_lengths?: number[];\n\n    constructor(v1: THREE.Vector2, v2: THREE.Vector2) {\n        super(v1, v2);\n    }\n\n    getLengths(): number[] {\n        if (this.m_lengths === undefined) {\n            this.m_lengths = [0, this.v2.distanceTo(this.v1)];\n        }\n        return this.m_lengths;\n    }\n}\n\n/**\n * @hidden\n */\nexport class PathParam {\n    private m_point: THREE.Vector2 | undefined;\n\n    constructor(readonly path: THREE.Path, readonly index: number, readonly t: number) {}\n\n    get curve(): THREE.Curve<THREE.Vector2> {\n        return this.path.curves[this.index];\n    }\n\n    get point(): THREE.Vector2 {\n        if (this.m_point === undefined) {\n            this.m_point = this.curve.getPoint(this.t);\n        }\n        return this.m_point;\n    }\n}\n\n/**\n * @hidden\n */\nexport class SimplePath extends THREE.Path {\n    private m_cache?: number[];\n\n    constructor() {\n        super();\n    }\n\n    getLengths(): number[] {\n        if (this.m_cache) {\n            return this.m_cache;\n        }\n        let sum = 0;\n        const lengths = new Array<number>();\n        lengths.push(0);\n\n        this.curves.forEach(curve => {\n            const lineCurve = curve as THREE.LineCurve;\n            sum += lineCurve.v1.distanceTo(lineCurve.v2);\n            lengths.push(sum);\n        });\n        this.m_cache = lengths;\n        return lengths;\n    }\n\n    getParamAt(t: number): PathParam | null {\n        const distance = t * this.getLength();\n        const curveLengths = this.getCurveLengths();\n\n        for (let index = 0; index < curveLengths.length; ++index) {\n            if (curveLengths[index] < distance) {\n                continue;\n            }\n\n            const diff = curveLengths[index] - distance;\n            const curve = this.curves[index] as THREE.LineCurve;\n            const segmentLength = curve.getLength();\n            const u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;\n            return new PathParam(this, index, u);\n        }\n\n        return null;\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nconst DEFAULT_FONT_CATALOG = \"./resources/fonts/Default_FontCatalog.json\";\n\n/**\n * Default number of labels/POIs rendered in the scene\n */\nconst DEFAULT_MAX_NUM_RENDERED_TEXT_ELEMENTS = 500;\n\n/**\n * Number of elements that are put into second queue. This second chance queue is used to render\n * TextElements that have not been on screen before. This is a quick source for elements that can\n * appear when the camera moves a bit, before new elements are placed.\n */\nconst DEFAULT_MAX_NUM_SECOND_CHANCE_ELEMENTS = 300;\n\n/**\n * Maximum distance for text labels expressed as a ratio of distance to from the camera (0) to the\n * far plane (1.0). May be synchronized with fog value ?\n */\nconst DEFAULT_MAX_DISTANCE_RATIO_FOR_LABELS = 0.99;\n\n/**\n * Minimum scaling factor that may be applied to labels when their are distant from focus point.\n */\nconst DEFAULT_LABEL_DISTANCE_SCALE_MIN = 0.7;\n\n/**\n * Maximum scaling factor that may be applied to labels due to their distance from focus point.\n */\nconst DEFAULT_LABEL_DISTANCE_SCALE_MAX = 1.5;\n\nconst MIN_GLYPH_COUNT = 1024;\n\nconst MAX_GLYPH_COUNT = 32768;\n\nexport interface TextElementsRendererOptions {\n    /**\n     * The path to the font catalog file. Default is [[DEFAULT_FONT_CATALOG]].\n     */\n    fontCatalog?: string;\n    /**\n     * Optional initial number of glyphs (characters) for labels. In situations with limited,\n     * available memory, decreasing this number may be beneficial.\n     *\n     * @default [[MIN_GLYPH_COUNT]]\n     */\n    minNumGlyphs?: number;\n    /**\n     * Optional limit of number of glyphs (characters) for labels. In situations with limited,\n     * available memory, decreasing this number may be beneficial.\n     *\n     * @default [[MAX_GLYPH_COUNT]]\n     */\n    maxNumGlyphs?: number;\n    /**\n     * Limits the number of [[DataSource]] labels visible, such as road names and POIs.\n     * On small devices, you can reduce this number to to increase performance.\n     * @default [[DEFAULT_MAX_NUM_RENDERED_TEXT_ELEMENTS]].\n     */\n    maxNumVisibleLabels?: number;\n    /**\n     * The number of [[TextElement]]s that the [[TextElementsRenderer]] tries to render even\n     * if they were not visible during placement. This property only applies to [[TextElement]]s\n     * that were culled by the frustum; useful for map movements and animations.\n     * @default [[DEFAULT_MAX_NUM_SECOND_CHANCE_ELEMENTS]].\n     */\n    numSecondChanceLabels?: number;\n    /**\n     * The maximum distance for [[TextElement]] to be rendered, expressed as a fraction of\n     * the distance between the near and far plane [0, 1.0].\n     * @default [[DEFAULT_MAX_DISTANCE_RATIO_FOR_LABELS]].\n     */\n    maxDistanceRatioForTextLabels?: number;\n    /**\n     * The maximum distance for [[TextElement]] with icons to be rendered,\n     * expressed as a fraction of the distance\n     * between the near and far plane [0, 1.0].\n     * @default [[DEFAULT_MAX_DISTANCE_RATIO_FOR_LABELS]].\n     */\n    maxDistanceRatioForPoiLabels?: number;\n    /**\n     * The minimum scaling factor that may be applied to [[TextElement]]s due to their distance.\n     * If not defined the default value specified in [[TextElementsRenderer]] will be used.\n     * @default [[DEFAULT_LABEL_DISTANCE_SCALE_MIN]].\n     */\n    labelDistanceScaleMin?: number;\n    /**\n     * The maximum scaling factor that may be applied to [[TextElement]]s due to their distance.\n     * If not defined the default value specified in [[TextElementsRenderer]] will be used.\n     * @default [[DEFAULT_LABEL_DISTANCE_SCALE_MAX]].\n     */\n    labelDistanceScaleMax?: number;\n\n    /**\n     * Disable all fading animations for debugging and performance measurement.\n     * @default `false`\n     */\n    disableFading?: boolean;\n}\n\n/**\n * Initializes undefined text renderer options to default values.\n * @param options The options to be initialized.\n */\nexport function initializeDefaultOptions(options: TextElementsRendererOptions) {\n    if (options.fontCatalog === undefined) {\n        options.fontCatalog = DEFAULT_FONT_CATALOG;\n    }\n\n    if (options.minNumGlyphs === undefined) {\n        options.minNumGlyphs = MIN_GLYPH_COUNT;\n    }\n    if (options.maxNumGlyphs === undefined) {\n        options.maxNumGlyphs = MAX_GLYPH_COUNT;\n    }\n    if (options.maxNumVisibleLabels === undefined) {\n        options.maxNumVisibleLabels = DEFAULT_MAX_NUM_RENDERED_TEXT_ELEMENTS;\n    }\n    // TODO: Unused so far.\n    if (options.numSecondChanceLabels === undefined) {\n        options.numSecondChanceLabels = DEFAULT_MAX_NUM_SECOND_CHANCE_ELEMENTS;\n    }\n    if (options.labelDistanceScaleMin === undefined) {\n        options.labelDistanceScaleMin = DEFAULT_LABEL_DISTANCE_SCALE_MIN;\n    }\n    if (options.labelDistanceScaleMax === undefined) {\n        options.labelDistanceScaleMax = DEFAULT_LABEL_DISTANCE_SCALE_MAX;\n    }\n    if (options.maxDistanceRatioForTextLabels === undefined) {\n        options.maxDistanceRatioForTextLabels = DEFAULT_MAX_DISTANCE_RATIO_FOR_LABELS;\n    }\n    if (options.maxDistanceRatioForPoiLabels === undefined) {\n        options.maxDistanceRatioForPoiLabels = DEFAULT_MAX_DISTANCE_RATIO_FOR_LABELS;\n    }\n\n    if (options.disableFading === undefined) {\n        options.disableFading = false;\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { TileKey } from \"@here/harp-geoutils\";\nimport { assert, LoggerManager, LogLevel } from \"@here/harp-utils\";\nimport { TextElement } from \"./TextElement\";\nimport { TextElementGroup } from \"./TextElementGroup\";\nimport { TextElementFilter, TextElementGroupState } from \"./TextElementGroupState\";\nimport { TextElementState } from \"./TextElementState\";\nimport { TextElementType } from \"./TextElementType\";\n\nconst logger = LoggerManager.instance.create(\"TextElementsStateCache\", { level: LogLevel.Log });\n\n/**\n * Label distance tolerance squared in meters. Point labels with the same name that are closer in\n * world space than this value are treated as the same label. Used to identify duplicate labels in\n * overlapping tiles and label replacements at different storage levels.\n */\nfunction getDedupSqDistTolerance(zoomLevel: number) {\n    // Defining here a minimum tolerance of 10m at zoom level 13 or higher.\n    const minSqTol = 100;\n    const minSqTolLevel = 13;\n    const maxLevelDelta = 4;\n    const levelDelta = Math.min(\n        maxLevelDelta,\n        minSqTolLevel - Math.min(minSqTolLevel, Math.floor(zoomLevel))\n    );\n    // Distance tolerance computed applying a factor over an arbitrary minimum tolerance for a\n    // chosen zoom level. The factor is an exponential function on zoom level delta wrt minimum\n    // tolerance zoom level.\n    // error = sqrt(sqError) = sqrt(minSqError* 2^(4d)) = minError*2^(2d)\n\n    //tslint:disable-next-line: no-bitwise\n    return minSqTol << (levelDelta << 2);\n}\n\nconst tmpCachedDuplicate: { entries: TextElementState[]; index: number } = {\n    entries: [],\n    index: -1\n};\n\nfunction getCacheKey(element: TextElement): string | number {\n    return element.hasFeatureId() ? element.featureId! : element.text;\n}\n\n/**\n * Finds a duplicate for a text element among a list of candidates using their feature ids.\n * @param elementState The state of the text element for which the duplicate will be found.\n * @param candidates The list of candidates to check.\n * @returns The index of the candidate chosen as duplicate, or `undefined` if none was found.\n */\nfunction findDuplicateById(\n    elementState: TextElementState,\n    candidates: TextElementState[]\n): number | undefined {\n    // Cached entries with same feature id found, find the entry with the same tile offset.\n    const element = elementState.element;\n    const duplicateIndex = candidates.findIndex(\n        entry => entry.element.tileOffset === element.tileOffset\n    );\n    if (duplicateIndex === -1) {\n        return -1;\n    }\n    const candidate = candidates[duplicateIndex].element;\n    assert(element.featureId === candidate.featureId);\n\n    if (candidate.text !== element.text) {\n        // Labels with different text shouldn't share the same feature id. This points to\n        // an issue on the map data side. Submit a ticket to the corresponding map backend\n        // issue tracking system if available (e.g. OLPRPS project in JIRA for OMV),\n        // indicating affected labels including tile keys, texts and feature id.\n        logger.debug(\n            `Text feature id ${element.featureId} collision between \"${element.text} and \\\n             ${candidate.text}`\n        );\n        return undefined;\n    }\n    return duplicateIndex;\n}\n\ntype DuplicateCmp = (\n    newCandidate: TextElement,\n    newDistance: number,\n    oldCandidate: TextElement,\n    oldDistance: number\n) => boolean;\n\n// Duplicate criteria for path labels. Candidates are better the longer their paths are.\nfunction isBetterPathDuplicate(\n    newCandidate: TextElement,\n    _newDistance: number,\n    oldCandidate: TextElement,\n    _oldDistance: number\n): boolean {\n    if (newCandidate.pathLengthSqr === undefined) {\n        return false;\n    }\n    if (oldCandidate.pathLengthSqr === undefined) {\n        return false;\n    }\n    return newCandidate.pathLengthSqr > oldCandidate.pathLengthSqr;\n}\n\n// Duplicate criteria for point labels. Candidates are better the nearer they are to the label being\n// tested for duplicates.\nfunction isBetterPointDuplicate(\n    _newCandidate: TextElement,\n    newDistance: number,\n    _oldCandidate: TextElement,\n    oldDistance: number\n): boolean {\n    return newDistance < oldDistance;\n}\n\n/**\n * Finds a duplicate for a text element among a list of candidates using their text and distances.\n * @param elementState The state of the text element for which the duplicate will be found.\n * @param candidates The list of candidates to check.\n * @param zoomLevel Current zoom level.\n * @returns The index of the candidate chosen as duplicate, or `undefined` if none was found.\n */\nfunction findDuplicateByText(\n    elementState: TextElementState,\n    candidates: TextElementState[],\n    zoomLevel: number\n): number {\n    const element = elementState.element;\n    const maxSqDistError = getDedupSqDistTolerance(zoomLevel);\n    const entryCount = candidates.length;\n    const elementPosition = element.position;\n    const elementVisible = elementState.visible;\n    let dupIndex: number = -1;\n    let duplicate: TextElement | undefined;\n    let dupDistSquared: number = Infinity;\n    const isBetterDuplicate: DuplicateCmp =\n        element.type === TextElementType.PoiLabel ? isBetterPointDuplicate : isBetterPathDuplicate;\n\n    for (let i = 0; i < entryCount; ++i) {\n        const candidateEntry = candidates[i];\n        const cachedElement = candidateEntry.element;\n        const areDiffType = element.type !== cachedElement.type;\n        const areBothVisible = elementVisible && candidateEntry.visible;\n        if (areDiffType || areBothVisible) {\n            // Two text elements with different type or visible at the same time are always\n            // considered distinct.\n            continue;\n        }\n        const distSquared = elementPosition.distanceToSquared(cachedElement.position);\n        if (distSquared > maxSqDistError) {\n            // Cached text element is too far away to be a duplicate.\n            continue;\n        }\n        if (\n            duplicate === undefined ||\n            isBetterDuplicate(cachedElement, distSquared, duplicate, dupDistSquared)\n        ) {\n            dupIndex = i;\n            duplicate = cachedElement;\n            dupDistSquared = distSquared;\n        }\n    }\n\n    return dupIndex;\n}\n\n/**\n * Caches the state of text element groups currently rendered as well as the text element states\n * belonging to them, including their fading state and text deduplication information.\n */\nexport class TextElementStateCache {\n    private readonly m_referenceMap = new Map<TextElementGroup, TextElementGroupState>();\n    private m_sortedGroupStates: TextElementGroupState[] | undefined;\n\n    // Cache for point labels which may have duplicates in same tile or in neighboring tiles.\n    private readonly m_textMap = new Map<string | number, TextElementState[]>();\n\n    /**\n     * Gets the state corresponding to a given text element group or sets a newly created state if\n     * not found. It updates the states of the text elements belonging to the group using the\n     * specified parameters.\n     * @param textElementGroup The group of which the state will be obtained.\n     * @param tileKey The key of the tile to which the group belongs.\n     * @param textElementFilter Filter used to decide if a text element must be initialized,\n     * @see [[TextElementGroupState]] construction.\n     * @returns Tuple with the group state as first element and a boolean indicating whether the\n     * state was found in cache (`true`) or newly created (`false`) as second element.\n     */\n    getOrSet(\n        textElementGroup: TextElementGroup,\n        tileKey: TileKey,\n        textElementFilter: TextElementFilter\n    ): [TextElementGroupState, boolean] {\n        let groupState = this.get(textElementGroup);\n\n        if (groupState !== undefined) {\n            assert(groupState.size === textElementGroup.elements.length);\n            groupState.updateElements(textElementFilter);\n            return [groupState, true];\n        }\n\n        groupState = new TextElementGroupState(textElementGroup, tileKey, textElementFilter);\n        this.set(textElementGroup, groupState);\n\n        return [groupState, false];\n    }\n\n    get size(): number {\n        return this.m_referenceMap.size;\n    }\n\n    /**\n     * @returns All text element group states in the cache by group priority.\n     */\n    get sortedGroupStates(): TextElementGroupState[] {\n        if (this.m_sortedGroupStates === undefined) {\n            this.m_sortedGroupStates = Array.from(this.m_referenceMap.values());\n            this.m_sortedGroupStates.sort((a: TextElementGroupState, b: TextElementGroupState) => {\n                return b.group.priority - a.group.priority;\n            });\n        }\n\n        assert(this.m_referenceMap.size === this.m_sortedGroupStates.length);\n        return this.m_sortedGroupStates;\n    }\n\n    /**\n     * Updates state of all cached groups, discarding those that are not needed anymore.\n     * @param time The current time.\n     * @param disableFading `True` if fading is currently disabled, `false` otherwise.\n     * @param findReplacements `True` to replace each visible unvisited text element with a\n     * visited duplicate.\n     * @param zoomLevel Current zoom level.\n     * @returns `True` if any textElementGroup was evicted from cache, false otherwise.\n     */\n    update(time: number, disableFading: boolean, findReplacements: boolean, zoomLevel: number) {\n        const replaceCallback = findReplacements\n            ? this.replaceElement.bind(this, zoomLevel)\n            : undefined;\n\n        let anyEviction = false;\n        for (const [key, groupState] of this.m_referenceMap.entries()) {\n            if (groupState.visited) {\n                groupState.updateFading(time, disableFading);\n            } else {\n                if (findReplacements) {\n                    groupState.traverseVisibleElements(replaceCallback!);\n                }\n                this.m_referenceMap.delete(key);\n                this.m_sortedGroupStates = undefined;\n                anyEviction = true;\n            }\n        }\n        return anyEviction;\n    }\n\n    /**\n     * Clears visited state for all text element groups in cache.\n     */\n    clearVisited() {\n        for (const groupState of this.m_referenceMap.values()) {\n            groupState.visited = false;\n        }\n    }\n\n    clearTextCache() {\n        this.m_textMap.clear();\n    }\n\n    /**\n     * Clears the whole cache contents.\n     */\n    clear() {\n        this.m_referenceMap.clear();\n        this.m_sortedGroupStates = undefined;\n        this.m_textMap.clear();\n    }\n\n    /**\n     * Removes duplicates for a given text element.\n     *\n     * @param zoomLevel Current zoom level.\n     * @param elementState State of the text element to deduplicate.\n     * @returns True if it's the remaining element after deduplication, false if it's been marked\n     * as duplicate.\n     */\n    deduplicateElement(zoomLevel: number, elementState: TextElementState): boolean {\n        const cacheResult = this.findDuplicate(elementState, zoomLevel);\n\n        if (cacheResult === undefined) {\n            // Text not found so far, add this element to cache.\n            this.m_textMap.set(getCacheKey(elementState.element), [elementState]);\n            return true;\n        }\n\n        if (cacheResult.index === -1) {\n            // No duplicate found among elements with same text,add this one to cache.\n            cacheResult.entries.push(elementState);\n            return true;\n        }\n\n        // Duplicate found, check whether there's a label already visible and keep that one.\n        const cachedDuplicate = cacheResult.entries[cacheResult.index];\n\n        if (!cachedDuplicate.visible && elementState.visible) {\n            // New label is visible, substitute the cached label.\n            cacheResult.entries[cacheResult.index] = elementState;\n            cachedDuplicate.reset();\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Replaces a visible unvisited text element with a visited duplicate.\n     * @param zoomLevel Current zoom level.\n     * @param elementState State of the text element to deduplicate.\n     */\n    replaceElement(zoomLevel: number, elementState: TextElementState): void {\n        assert(elementState.visible);\n        const cacheResult = this.findDuplicate(elementState, zoomLevel);\n\n        if (cacheResult === undefined || cacheResult.index === -1) {\n            // No replacement found;\n            return;\n        }\n\n        const replacement = cacheResult.entries[cacheResult.index];\n        assert(!replacement.visible);\n\n        replacement.replace(elementState);\n    }\n\n    /**\n     * Gets the state corresponding to a given text element group.\n     * @param textElementGroup The group of which the state will be obtained.\n     * @returns The group state if cached, otherwise `undefined`.\n     */\n    private get(textElementGroup: TextElementGroup): TextElementGroupState | undefined {\n        const groupState = this.m_referenceMap.get(textElementGroup);\n\n        if (groupState !== undefined) {\n            groupState.visited = true;\n        }\n        return groupState;\n    }\n\n    /**\n     * Sets a specified state for a given text element group.\n     * @param textElementGroup  The group of which the state will be set.\n     * @param textElementGroupState The state to set for the group.\n     */\n    private set(textElementGroup: TextElementGroup, textElementGroupState: TextElementGroupState) {\n        assert(textElementGroup.elements.length > 0);\n        this.m_referenceMap.set(textElementGroup, textElementGroupState);\n        this.m_sortedGroupStates = undefined;\n    }\n\n    private findDuplicate(\n        elementState: TextElementState,\n        zoomLevel: number\n    ): { entries: TextElementState[]; index: number } | undefined {\n        // Point labels may have duplicates (as can path labels), Identify them\n        // and keep the one we already display.\n\n        const element = elementState.element;\n        const cachedEntries = this.m_textMap.get(getCacheKey(element));\n\n        if (cachedEntries === undefined) {\n            // No labels found with the same key.\n            return undefined;\n        }\n\n        tmpCachedDuplicate.entries = cachedEntries;\n        const index = element.hasFeatureId()\n            ? findDuplicateById(elementState, cachedEntries)\n            : findDuplicateByText(elementState, cachedEntries, zoomLevel);\n\n        if (index === undefined) {\n            // Feature id collision, try finding duplicates using text as key.\n            element.featureId = undefined;\n            return this.findDuplicate(elementState, zoomLevel);\n        }\n        tmpCachedDuplicate.index = index;\n        return tmpCachedDuplicate;\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { TileKey } from \"@here/harp-geoutils\";\nimport { assert } from \"@here/harp-utils\";\nimport { TextElementGroup } from \"./TextElementGroup\";\nimport { TextElementState } from \"./TextElementState\";\n\n/**\n * Type of functions used to do early rejection of elements during group state creation or update.\n * @param textElementState The state of the text element to check.\n * @returns `undefined` if element was rejected, otherwise its current view distance.\n */\nexport type TextElementFilter = (textElementState: TextElementState) => number | undefined;\n\n/**\n * `TextElementGroupState` keeps the state of a text element group and each element in it while\n * they're being rendered.\n */\nexport class TextElementGroupState {\n    private m_textElementStates: TextElementState[];\n    private m_visited: boolean = false;\n\n    /**\n     * Creates the state for specified group.\n     * @param group The group of which the state will be created.\n     * @param tileKey The key of the tile to which this group belongs.\n     * @param filter Function used to do early rejection. @see [[TextElementFilter]].\n     */\n    constructor(\n        readonly group: TextElementGroup,\n        readonly tileKey: TileKey,\n        filter: TextElementFilter\n    ) {\n        assert(group.elements.length > 0);\n        const length = group.elements.length;\n        this.m_textElementStates = new Array(length);\n        this.m_visited = true;\n\n        // TODO: HARP-7648. Reduce number of allocations here:\n        // a) Avoid creating the state for labels that don't pass early placement checks and make\n        //    this checks more strict.\n        // b) Break label state objects into a set of arrays held at group level, one for each\n        //    primitive field in the label state.\n        for (let i = 0; i < length; ++i) {\n            const textElement = group.elements[i];\n            const state = new TextElementState(textElement);\n            const textDistance = filter(state);\n            state.update(textDistance);\n            this.m_textElementStates[i] = state;\n        }\n    }\n\n    /**\n     * Indicates whether the group has been submitted to the [[TextElementsRenderer]] in the current\n     * frame.\n     */\n    get visited(): boolean {\n        return this.m_visited;\n    }\n\n    set visited(visited: boolean) {\n        this.m_visited = visited;\n    }\n\n    /**\n     * @returns the priority of the text elements in the group.\n     */\n    get priority() {\n        return this.group.priority;\n    }\n\n    /**\n     * Updates the fading state of all text elements within the group to the specified time.\n     * @param time The time to which the fading state will be updated.\n     * @param disableFading `true` if fading is disabled, `false` otherwise.\n     */\n    updateFading(time: number, disableFading: boolean): void {\n        for (const elementState of this.m_textElementStates) {\n            if (elementState !== undefined) {\n                elementState.updateFading(time, disableFading);\n            }\n        }\n    }\n\n    /**\n     * Calls the specified callback for every visible text elements in the group.\n     * @param visibleElementsCallback Functions that will be called for every visible text element\n     * in the group.\n     */\n    traverseVisibleElements(visibleElementsCallback: (e: TextElementState) => void): void {\n        for (const elementState of this.m_textElementStates) {\n            if (elementState !== undefined && elementState.visible) {\n                visibleElementsCallback(elementState);\n            }\n        }\n    }\n\n    /**\n     * Updates the states of elements within the group.\n     * @param filter Function used to do early rejection. @see [[TextElementFilter]].\n     */\n    updateElements(filter: TextElementFilter) {\n        for (const elementState of this.m_textElementStates) {\n            const textDistance = filter(elementState);\n            elementState.update(textDistance);\n        }\n    }\n\n    get size(): number {\n        return this.m_textElementStates.length;\n    }\n\n    /**\n     * Returns text element states.\n     * @returns Array of element states.\n     */\n    get textElementStates(): TextElementState[] {\n        return this.m_textElementStates;\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    hAlignFromPlacement,\n    hPlacementFromAlignment,\n    TextPlacement,\n    vAlignFromPlacement,\n    vPlacementFromAlignment\n} from \"@here/harp-text-canvas\";\nimport { assert } from \"@here/harp-utils\";\nimport { LayoutState } from \"./LayoutState\";\nimport { RenderState } from \"./RenderState\";\nimport { TextElement } from \"./TextElement\";\nimport { TextElementType } from \"./TextElementType\";\n\n/**\n * `TextElementState` keeps the current state of a text element while it's being rendered.\n */\nexport class TextElementState {\n    /**\n     * @hidden\n     * Used during label placement to reserve space from front to back.\n     */\n    private m_viewDistance: number | undefined;\n\n    /**\n     * @hidden\n     * Used during rendering. The array type is used for line markers only, which have a points\n     * array and multiple icon positions to render. Since line markers use the same renderState\n     * for text part and icon, there is no separate array of [[RenderState]]s for the text parts\n     * of the line markers.\n     */\n    private m_iconRenderStates?: RenderState | RenderState[];\n\n    /**\n     * @hidden\n     * Used during rendering.\n     */\n    private m_textRenderState?: RenderState;\n    /**\n     * @hidden\n     * Used to store recently used text layout.\n     */\n    private m_textLayoutState?: LayoutState;\n\n    constructor(readonly element: TextElement) {}\n\n    get initialized(): boolean {\n        return this.m_textRenderState !== undefined || this.m_iconRenderStates !== undefined;\n    }\n\n    /**\n     * @returns `true` if any component of the element is visible, `false` otherwise.\n     */\n    get visible(): boolean {\n        if (this.m_textRenderState !== undefined && this.m_textRenderState.isVisible()) {\n            return true;\n        }\n\n        const iconRenderState = this.iconRenderState;\n        if (iconRenderState !== undefined && iconRenderState.isVisible()) {\n            return true;\n        }\n\n        const iconRenderStates = this.iconRenderStates;\n        if (iconRenderStates === undefined) {\n            return false;\n        }\n\n        for (const state of iconRenderStates) {\n            if (state.isVisible()) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Return the last text placement used.\n     *\n     * If the text wasn't yet rendered or have no alternative placements it will fallback to\n     * style/theme based placement.\n     *\n     * @returns [[TextPlacement]] object containing vertical/horizontal align.\n     */\n    get textPlacement(): TextPlacement {\n        const themeLayout = this.element.layoutStyle!;\n        const stateLayout = this.m_textLayoutState;\n        // Would be good to test for persistence when getting state layout, but with this\n        // most of the isolated placement unit tests will fail.\n        const lastPlacement =\n            stateLayout !== undefined\n                ? stateLayout.textPlacement\n                : {\n                      h: hPlacementFromAlignment(themeLayout.horizontalAlignment),\n                      v: vPlacementFromAlignment(themeLayout.verticalAlignment)\n                  };\n        return lastPlacement;\n    }\n\n    /**\n     * Set text placement to be used.\n     *\n     * This may be base text anchor placement as defined by style or alternative placement.\n     *\n     * @param placement The new [[TextPlacement]] to be used.\n     */\n    set textPlacement(placement: TextPlacement) {\n        if (this.m_textLayoutState === undefined && this.isBaseTextPlacement(placement) === true) {\n            // Do nothing, layout state is not required cause we leave the base placement.\n            return;\n        }\n        if (this.m_textLayoutState === undefined) {\n            // State is not yet defined, but we have placement to store, either alternative or\n            // not yet specified in the context of layoutStyle.\n            this.m_textLayoutState = new LayoutState(placement);\n        } else {\n            this.m_textLayoutState.textPlacement = placement;\n        }\n    }\n\n    /**\n     * Returns information if the text placement provided is the base one defined in style (theme).\n     *\n     * @param placement The [[TextPlacement]] to check.\n     * @returns [[true]] if the placement provided is exactly the same as in theme base layout,\n     * [[false]] if it differs from the basic layout provided in style or\n     * [[undefined]] if the layout style is not yet defined so it is hard to say.\n     */\n    isBaseTextPlacement(placement: TextPlacement): boolean | undefined {\n        const themeLayout = this.element.layoutStyle;\n        if (themeLayout !== undefined) {\n            return (\n                hAlignFromPlacement(placement.h) === themeLayout.horizontalAlignment &&\n                vAlignFromPlacement(placement.v) === themeLayout.verticalAlignment\n            );\n        }\n        return undefined;\n    }\n\n    /**\n     * Resets the element to an initialized state.\n     */\n    reset() {\n        if (this.m_textRenderState !== undefined) {\n            this.m_textRenderState.reset();\n        }\n        if (this.m_textLayoutState !== undefined) {\n            if (this.element.layoutStyle !== undefined) {\n                this.m_textLayoutState.reset(this.element.layoutStyle);\n            } else {\n                this.m_textLayoutState = undefined;\n            }\n        }\n\n        if (this.iconRenderState) {\n            (this.m_iconRenderStates as RenderState).reset();\n        } else if (this.m_iconRenderStates !== undefined) {\n            for (const renderState of this.m_iconRenderStates as RenderState[]) {\n                renderState.reset();\n            }\n        }\n        this.m_viewDistance = undefined;\n        this.element.textBufferObject = undefined;\n    }\n\n    /**\n     * Replaces given text element, inheriting its current state.\n     * The predecessor text element state is erased.\n     * @param predecessor Text element state to be replaced.\n     */\n    replace(predecessor: TextElementState) {\n        this.m_textRenderState = predecessor.m_textRenderState;\n        this.m_textLayoutState = predecessor.m_textLayoutState;\n        this.m_iconRenderStates = predecessor.m_iconRenderStates;\n        predecessor.m_textRenderState = undefined;\n        predecessor.m_textLayoutState = undefined;\n        predecessor.m_iconRenderStates = undefined;\n\n        if (this.element.glyphs === undefined) {\n            // Use the predecessor glyphs and case array until proper ones are computed.\n            this.element.glyphs = predecessor.element.glyphs;\n            this.element.glyphCaseArray = predecessor.element.glyphCaseArray;\n        }\n        this.element.bounds = undefined;\n        this.element.textBufferObject = undefined;\n    }\n\n    /**\n     * Returns the last computed distance of the text element to the camera.\n     * @returns Distance to camera.\n     */\n    get viewDistance(): number | undefined {\n        return this.m_viewDistance;\n    }\n\n    /**\n     * Updates the text element state.\n     * @param viewDistance The new view distance to set. If `undefined`, element is considered to\n     * be out of view.\n     */\n    update(viewDistance: number | undefined) {\n        if (!this.initialized && viewDistance !== undefined) {\n            this.initializeRenderStates();\n        }\n\n        this.setViewDistance(viewDistance);\n    }\n\n    /**\n     * Sets the distance of the element to the current view center.\n     * @param viewDistance The new view distance to set. If `undefined`, element is considered to\n     * be out of view.\n     */\n    setViewDistance(viewDistance: number | undefined) {\n        this.m_viewDistance = viewDistance;\n    }\n\n    /**\n     * Return the last distance that has been computed for sorting during placement. This may not be\n     * the actual distance if the camera is moving, as the distance is computed only during\n     * placement. If the property `alwaysOnTop` is true, the value returned is always `0`.\n     *\n     * @returns 0 or negative distance to camera.\n     */\n    get renderDistance(): number {\n        return this.element.alwaysOnTop === true\n            ? 0\n            : this.m_viewDistance !== undefined\n            ? -this.m_viewDistance\n            : 0;\n    }\n\n    /**\n     * @returns The text render state.\n     */\n    get textRenderState(): RenderState | undefined {\n        return this.m_textRenderState;\n    }\n\n    /**\n     * Returns the icon render state for the case where the text element has only one icon.\n     * @returns The icon render state if the text element has a single icon, otherwise undefined.\n     */\n    get iconRenderState(): RenderState | undefined {\n        if (this.m_iconRenderStates === undefined) {\n            return undefined;\n        }\n\n        return this.m_iconRenderStates instanceof RenderState ? this.m_iconRenderStates : undefined;\n    }\n\n    /**\n     * Returns the icon render states for text elements with multiple icons.\n     * @returns The icon render states if the text element has multiple icons, otherwise undefined.\n     */\n    get iconRenderStates(): RenderState[] | undefined {\n        if (this.m_iconRenderStates === undefined) {\n            return undefined;\n        }\n\n        return this.m_iconRenderStates instanceof RenderState\n            ? undefined\n            : (this.m_iconRenderStates as RenderState[]);\n    }\n\n    /**\n     * Updates the fading state to the specified time.\n     * @param time The current time.\n     * @param disableFading If `True` there will be no fading transitions, i.e., state will go\n     * directly from FadedIn to FadedOut and viceversa.\n     */\n    updateFading(time: number, disableFading: boolean): void {\n        if (this.m_textRenderState !== undefined) {\n            this.m_textRenderState.updateFading(time, disableFading);\n        }\n\n        if (this.iconRenderState !== undefined) {\n            const iconRenderState = this.m_iconRenderStates as RenderState;\n            iconRenderState.updateFading(time, disableFading);\n        } else if (this.iconRenderStates !== undefined) {\n            for (const renderState of this.m_iconRenderStates as RenderState[]) {\n                renderState.updateFading(time, disableFading);\n            }\n        }\n    }\n\n    /**\n     * Initialize text and icon render states\n     */\n    private initializeRenderStates() {\n        assert(this.m_textRenderState === undefined);\n        assert(this.m_textLayoutState === undefined);\n        assert(this.m_iconRenderStates === undefined);\n\n        const { textFadeTime } = this.element;\n        const iconFadeTime = this.element.poiInfo?.technique.iconFadeTime;\n        if (this.element.type === TextElementType.LineMarker) {\n            this.m_iconRenderStates = new Array<RenderState>();\n            for (const _point of this.element.points as THREE.Vector3[]) {\n                const iconRenderStates = this.m_iconRenderStates as RenderState[];\n                const renderState = new RenderState(iconFadeTime);\n                iconRenderStates.push(renderState);\n            }\n            return;\n        }\n\n        this.m_textRenderState = new RenderState(textFadeTime);\n\n        if (this.element.type === TextElementType.PoiLabel) {\n            this.m_iconRenderStates = new RenderState(iconFadeTime);\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    DefaultTextStyle,\n    hAlignFromPlacement,\n    HorizontalAlignment,\n    hPlacementFromAlignment,\n    TextLayoutStyle,\n    TextPlacement,\n    vAlignFromPlacement,\n    VerticalAlignment,\n    vPlacementFromAlignment\n} from \"@here/harp-text-canvas\";\n\n/**\n * Layout state of the text part of the `TextElement`.\n *\n * Used mainly for multi-anchor placement algorithm.\n * @hidden\n */\nexport class LayoutState {\n    private m_hAlign = DefaultTextStyle.DEFAULT_HORIZONTAL_ALIGNMENT;\n    private m_vAlign = DefaultTextStyle.DEFAULT_VERTICAL_ALIGNMENT;\n\n    constructor(placement: TextPlacement) {\n        this.textPlacement = placement;\n    }\n    /**\n     * Set layout based on theme style defined and optional text placement.\n     *\n     * @param placement The optional new anchor placement.\n     */\n    set textPlacement(placement: TextPlacement) {\n        this.m_hAlign = hAlignFromPlacement(placement.h);\n        this.m_vAlign = vAlignFromPlacement(placement.v);\n    }\n\n    /**\n     * Acquire current placement setup.\n     *\n     * Function returns alternative or base placement depending on layout state.\n     *\n     * @returns The current anchor placement.\n     */\n    get textPlacement(): TextPlacement {\n        return {\n            h: hPlacementFromAlignment(this.m_hAlign),\n            v: vPlacementFromAlignment(this.m_vAlign)\n        };\n    }\n\n    /**\n     * Reset existing `LayoutState` to contain values from style/theme layout.\n     */\n    reset(layoutStyle: TextLayoutStyle) {\n        this.m_hAlign = layoutStyle.horizontalAlignment;\n        this.m_vAlign = layoutStyle.verticalAlignment;\n    }\n\n    get horizontalAlignment(): HorizontalAlignment {\n        return this.m_hAlign;\n    }\n\n    get verticalAlignment(): VerticalAlignment {\n        return this.m_vAlign;\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { assert, MathUtils } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\n\n/**\n * State of fading.\n */\nexport enum FadingState {\n    Undefined = 0,\n    FadingIn = 1,\n    FadedIn = 2,\n    FadingOut = -1,\n    FadedOut = -2\n}\n\n/**\n * Time to fade in/fade out the labels in milliseconds.\n */\nexport const DEFAULT_FADE_TIME = 800;\n\n/**\n * State of rendering of the icon and text part of the `TextElement`. Mainly for fading the elements\n * in and out, to compute the opacity.\n *\n * @hidden\n */\nexport class RenderState {\n    /**\n     * Current fading value [0..1]\n     */\n    value: number = 0.0;\n\n    /**\n     * Timestamp the fading started.\n     */\n    startTime: number = 0;\n\n    /**\n     * Computed opacity depending on value.\n     */\n    opacity: number = 1.0;\n\n    private m_state = FadingState.Undefined;\n\n    /**\n     * Create a `RenderState`.\n     *\n     * @param fadeTime The duration of the fading in milliseconds.\n     */\n    constructor(public fadeTime = DEFAULT_FADE_TIME) {}\n\n    /**\n     * Reset existing `RenderState` to appear like a fresh state.\n     */\n    reset() {\n        this.m_state = FadingState.Undefined;\n        this.value = 0.0;\n        this.startTime = 0.0;\n        this.opacity = 1.0;\n    }\n\n    /**\n     * @returns `true` if element state is `FadingState.Undefined`.\n     */\n    isUndefined(): boolean {\n        return this.m_state === FadingState.Undefined;\n    }\n\n    /**\n     * @returns `true` if element is either fading in or fading out.\n     */\n    isFading(): boolean {\n        const fading =\n            this.m_state === FadingState.FadingIn || this.m_state === FadingState.FadingOut;\n        return fading;\n    }\n\n    /**\n     * @returns `true` if element is fading in.\n     */\n    isFadingIn(): boolean {\n        const fadingIn = this.m_state === FadingState.FadingIn;\n        return fadingIn;\n    }\n\n    /**\n     * @returns `true` if element is fading out.\n     */\n    isFadingOut(): boolean {\n        const fadingOut = this.m_state === FadingState.FadingOut;\n        return fadingOut;\n    }\n\n    /**\n     * @returns `true` if element is done with fading in.\n     */\n    isFadedIn(): boolean {\n        const fadedIn = this.m_state === FadingState.FadedIn;\n        return fadedIn;\n    }\n\n    /**\n     * @returns `true` if element is done with fading out.\n     */\n    isFadedOut(): boolean {\n        const fadedOut = this.m_state === FadingState.FadedOut;\n        return fadedOut;\n    }\n\n    /**\n     * @returns `true` if state is neither faded out nor undefined.\n     */\n    isVisible(): boolean {\n        return this.m_state !== FadingState.FadedOut && this.m_state !== FadingState.Undefined;\n    }\n\n    /**\n     * Updates the state to [[FadingState.FadingIn]].\n     * If previous state is [[FadingState.FadingIn]] or [[FadingState.FadedIn]] it remains\n     * unchanged.\n     *\n     * @param time Current time.\n     */\n    startFadeIn(time: number) {\n        if (this.m_state === FadingState.FadingIn || this.m_state === FadingState.FadedIn) {\n            return;\n        }\n\n        if (this.m_state === FadingState.FadingOut) {\n            // The fadeout is not complete: compute the virtual fadingStartTime in the past, to get\n            // a correct end time:\n            this.value = 1.0 - this.value;\n            this.startTime = time - this.value * this.fadeTime;\n        } else {\n            this.startTime = time;\n            this.value = 0.0;\n            this.opacity = 0;\n        }\n\n        this.m_state = FadingState.FadingIn;\n    }\n\n    /**\n     * Updates the state to [[FadingState.FadingOut]].\n     * If previous state is [[FadingState.FadingOut]] or [[FadingState.FadedOut]] it remains\n     * unchanged.\n     *\n     * @param time Current time.\n     */\n    startFadeOut(time: number) {\n        if (this.m_state === FadingState.FadingOut || this.m_state === FadingState.FadedOut) {\n            return;\n        }\n\n        if (this.m_state === FadingState.FadingIn) {\n            // The fade-in is not complete: compute the virtual fadingStartTime in the past, to get\n            // a correct end time:\n            this.startTime = time - this.value * this.fadeTime;\n            this.value = 1.0 - this.value;\n        } else {\n            this.startTime = time;\n            this.value = 0.0;\n            this.opacity = 1;\n        }\n\n        this.m_state = FadingState.FadingOut;\n    }\n\n    /**\n     * Updates opacity to current time, changing the state to [[FadingState.FadedOut]] or\n     * [[FadingState.FadedIn]] when the opacity becomes 0 or 1 respectively.\n     * It does nothing if [[isFading]] !== `true`.\n     *\n     * @param time Current time.\n     * @param disableFading `true` if fading is disabled, `false` otherwise.\n     */\n    updateFading(time: number, disableFading: boolean): void {\n        if (this.m_state !== FadingState.FadingIn && this.m_state !== FadingState.FadingOut) {\n            return;\n        }\n\n        if (this.startTime === 0) {\n            this.startTime = time;\n        }\n\n        const fadingTime = time - this.startTime;\n        const startValue = this.m_state === FadingState.FadingIn ? 0 : 1;\n        const endValue = this.m_state === FadingState.FadingIn ? 1 : 0;\n\n        if (disableFading || fadingTime >= this.fadeTime) {\n            this.value = 1.0;\n            this.opacity = endValue;\n            this.m_state =\n                this.m_state === FadingState.FadingIn ? FadingState.FadedIn : FadingState.FadedOut;\n        } else {\n            // TODO: HARP-7648. Do this once for all labels (calculate the last frame value\n            // increment).\n            this.value = fadingTime / this.fadeTime;\n\n            this.opacity = THREE.MathUtils.clamp(\n                MathUtils.smootherStep(startValue, endValue, this.value),\n                0,\n                1\n            );\n            assert(this.isFading());\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { IChannel } from \"@here/harp-utils\";\nimport { PrePlacementResult } from \"./Placement\";\n\nexport class UpdateStats {\n    tiles: number = 0;\n    totalGroups: number = 0;\n    newGroups: number = 0;\n    totalLabels: number = 0;\n    results = new Array<number>(PrePlacementResult.Count);\n\n    constructor(private readonly m_logger: IChannel) {\n        this.results.fill(0);\n    }\n\n    clear() {\n        this.tiles = 0;\n        this.totalGroups = 0;\n        this.newGroups = 0;\n        this.totalLabels = 0;\n        this.results.fill(0);\n    }\n    log() {\n        this.m_logger.debug(\"Tiles\", this.tiles);\n        this.m_logger.debug(\"Total groups\", this.totalGroups);\n        this.m_logger.debug(\"New groups\", this.newGroups);\n        this.m_logger.debug(\"Total labels\", this.totalLabels);\n        this.m_logger.debug(\"Placed labels\", this.results[PrePlacementResult.Ok]);\n        this.m_logger.debug(\"Invisible\", this.results[PrePlacementResult.Invisible]);\n        this.m_logger.debug(\"Poi not ready\", this.results[PrePlacementResult.NotReady]);\n        this.m_logger.debug(\"Too far\", this.results[PrePlacementResult.TooFar]);\n        this.m_logger.debug(\"Duplicate\", this.results[PrePlacementResult.Duplicate]);\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { PriorityListGroup } from \"@here/harp-utils\";\nimport { TextElement } from \"./TextElement\";\n\n/**\n * Group of [[TextElement]] sharing same priority.\n */\nexport class TextElementGroup extends PriorityListGroup<TextElement> {}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GroupedPriorityList } from \"@here/harp-utils\";\nimport { TextElement } from \"./TextElement\";\n\n/**\n * List of [[TextElement]] groups sorted by priority.\n */\nexport class TextElementGroupPriorityList extends GroupedPriorityList<TextElement> {}\n","/*\n * Copyright (C) 2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    IndexedTechniqueParams,\n    LineMarkerTechnique,\n    PoiTechnique,\n    TextTechnique\n} from \"@here/harp-datasource-protocol\";\nimport { TextLayoutStyle, TextRenderStyle } from \"@here/harp-text-canvas\";\nimport { Tile } from \"../Tile\";\n\nexport class TileTextStyleCache {\n    private textRenderStyles: TextRenderStyle[] = [];\n    private textLayoutStyles: TextLayoutStyle[] = [];\n    private tile: Tile;\n\n    constructor(tile: Tile) {\n        this.tile = tile;\n    }\n\n    clear() {\n        this.textRenderStyles.length = 0;\n        this.textLayoutStyles.length = 0;\n    }\n\n    getRenderStyle(\n        technique: (TextTechnique | PoiTechnique | LineMarkerTechnique) & IndexedTechniqueParams\n    ): TextRenderStyle {\n        let style = this.textRenderStyles[technique._index];\n        if (style === undefined) {\n            style = this.textRenderStyles[\n                technique._index\n            ] = this.tile.mapView.textElementsRenderer.styleCache.createRenderStyle(\n                this.tile,\n                technique\n            );\n        }\n        return style;\n    }\n\n    getLayoutStyle(\n        technique: (TextTechnique | PoiTechnique | LineMarkerTechnique) & IndexedTechniqueParams\n    ): TextLayoutStyle {\n        let style = this.textLayoutStyles[technique._index];\n        if (style === undefined) {\n            style = this.textLayoutStyles[\n                technique._index\n            ] = this.tile.mapView.textElementsRenderer.styleCache.createLayoutStyle(\n                this.tile,\n                technique\n            );\n        }\n        return style;\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport * as THREE from \"three\";\n\nimport {\n    IBloomEffect,\n    IOutlineEffect,\n    ISepiaEffect,\n    IVignetteEffect\n} from \"@here/harp-datasource-protocol\";\nimport { SepiaShader, VignetteShader } from \"@here/harp-materials\";\nimport { IPassManager } from \"./IPassManager\";\nimport { LowResRenderPass } from \"./LowResRenderPass\";\nimport { MSAARenderPass, MSAASampling } from \"./MSAARenderPass\";\nimport { OutlineEffect } from \"./Outline\";\nimport { RenderPass, ShaderPass } from \"./Pass\";\nimport { BloomPass } from \"./UnrealBloomPass\";\n\nconst DEFAULT_DYNAMIC_MSAA_SAMPLING_LEVEL = MSAASampling.Level_1;\nconst DEFAULT_STATIC_MSAA_SAMPLING_LEVEL = MSAASampling.Level_4;\n\n/**\n * Interface for the antialias settings passed when instantiating a [[MapView]], and transferred to\n * the [[MapRenderingManager]] instance. These parameters can be changed at runtime as opposed to\n * the native WebGL antialiasing.\n */\nexport interface IMapAntialiasSettings {\n    /**\n     * Whether the MSAA is enabled or not.\n     *\n     * @default `false`\n     */\n    msaaEnabled: boolean;\n\n    /**\n     * The sampling level to use for MSAA during continuous rendering.\n     *\n     * @default `MSAASampling.Level_1`\n     */\n    dynamicMsaaSamplingLevel?: MSAASampling;\n\n    /**\n     * The sampling level to use for MSAA when the rendering stops.\n     *\n     * @default `MSAASampling.Level_4`\n     */\n    staticMsaaSamplingLevel?: MSAASampling;\n}\n\n/**\n * The `MapRenderingManager` class manages the map rendering (as opposed to text) by dispatching the\n * [[MapRenderingManager.render]] call to a set of internal [[Pass]] instances. It provides an API\n * to modify some of the rendering processes like the antialiasing behaviour at runtime.\n */\nexport interface IMapRenderingManager extends IPassManager {\n    /**\n     * Bloom effect parameters.\n     */\n    bloom: IBloomEffect;\n\n    /**\n     * Outline effect parameters.\n     */\n    outline: IOutlineEffect;\n\n    /**\n     * Vignette effect parameters.\n     */\n    vignette: IVignetteEffect;\n\n    /**\n     * Sepia effect parameters.\n     */\n    sepia: ISepiaEffect;\n\n    /**\n     * Set a `pixelRatio` for dynamic rendering (i.e. during animations). If a value is specified,\n     * the `LowResRenderPass` will be employed to used to render the scene into a lower resolution\n     * render target, which will then be rendered to the screen.\n     */\n    lowResPixelRatio?: number;\n\n    /**\n     * The level of MSAA sampling while the user interacts. It should be a low level so that the\n     * MSAA does not impact the framerate.\n     */\n    dynamicMsaaSamplingLevel: MSAASampling;\n\n    /**\n     * Enable or disable the MSAA. If disabled, `MapRenderingManager` will use the renderer provided\n     * in the [[MapRenderingManager.render]] method to render the scene.\n     */\n    msaaEnabled: boolean;\n\n    /**\n     * The higher level of MSAA sampling for a last frame to render, when the camera is static. It\n     * can be a high level, providing high quality renders requiring few tens of seconds, since no\n     * frame is expected to immediately follow in the requestAnimationFrame. It is still limited by\n     * zooming, since zooming is not requestAnimationFrame-based and can lead to stuttering if the\n     * render time is too long, except on desktop Mac, where mouse interaction already implements\n     * some damping. Higher levels of sampling may lead to noticeable color banding, visible in\n     * areas with a slight color gradient, like large areas or the sky background.\n     */\n    staticMsaaSamplingLevel: MSAASampling;\n\n    /**\n     * The method to call to render the map. This method depends on an `isStaticFrame` boolean that\n     * notifies the pass manager to switch to a higher level render quality for the last frame.\n     *\n     * @param renderer The ThreeJS WebGLRenderer instance to render the map with.\n     * @param isStaticFrame Whether the frame to render is static or dynamic. Selects level of\n     * antialiasing.\n     * @param time Optional time argument provided by the requestAnimationFrame, to pass to\n     * sub-passes.\n     */\n    render(\n        renderer: THREE.WebGLRenderer,\n        scene: THREE.Scene,\n        camera: THREE.PerspectiveCamera | THREE.OrthographicCamera,\n        isStaticFrame: boolean,\n        time?: number\n    ): void;\n\n    /**\n     * Updating the outline rebuilds the outline materials of every outlined mesh.\n     *\n     * @param options outline options from the [[Theme]].\n     */\n    updateOutline(options: {\n        thickness: number;\n        color: string;\n        ghostExtrudedPolygons: boolean;\n    }): void;\n}\n\n/**\n * The implementation of [[IMapRenderingManager]] to instantiate in [[MapView]] and manage the map\n * rendering.\n */\nexport class MapRenderingManager implements IMapRenderingManager {\n    bloom = {\n        enabled: false,\n        strength: 1.5,\n        radius: 0.4,\n        threshold: 0.85\n    };\n    outline = {\n        enabled: false,\n        thickness: 0.005,\n        color: \"#000000\",\n        ghostExtrudedPolygons: false,\n        needsUpdate: false\n    };\n    vignette = {\n        enabled: false,\n        offset: 1.0,\n        darkness: 1.0\n    };\n    sepia = {\n        enabled: false,\n        amount: 0.5\n    };\n\n    private m_width: number = 1;\n    private m_height: number = 1;\n\n    private m_outlineEffect?: OutlineEffect;\n    private m_msaaPass: MSAARenderPass;\n    private m_renderPass: RenderPass = new RenderPass();\n    private m_target1: THREE.WebGLRenderTarget = new THREE.WebGLRenderTarget(1, 1);\n    private m_target2: THREE.WebGLRenderTarget = new THREE.WebGLRenderTarget(1, 1);\n    private m_bloomPass?: BloomPass;\n    private m_sepiaPass: ShaderPass = new ShaderPass(SepiaShader);\n    private m_vignettePass: ShaderPass = new ShaderPass(VignetteShader);\n    private m_readBuffer: THREE.WebGLRenderTarget;\n    private m_dynamicMsaaSamplingLevel: MSAASampling;\n    private m_staticMsaaSamplingLevel: MSAASampling;\n    private m_lowResPass: LowResRenderPass;\n\n    /**\n     * The constructor of `MapRenderingManager`.\n     *\n     * @param width Width of the frame buffer.\n     * @param height Height of the frame buffer.\n     * @param lowResPixelRatio The `pixelRatio` determines the resolution of the internal\n     *  `WebGLRenderTarget`. Values between 0.5 and `window.devicePixelRatio` can be tried to give\n     * good results. A value of `undefined` disables the low res render pass. The value should not\n     * be larger than`window.devicePixelRatio`.\n     * @param antialiasSetting The object defining the demeanor of MSAA.\n     */\n    constructor(\n        width: number,\n        height: number,\n        lowResPixelRatio: number | undefined,\n        antialiasSettings: IMapAntialiasSettings | undefined = { msaaEnabled: false }\n    ) {\n        this.m_readBuffer = new THREE.WebGLRenderTarget(width, height);\n        this.m_msaaPass = new MSAARenderPass();\n        this.m_msaaPass.enabled =\n            antialiasSettings !== undefined ? antialiasSettings.msaaEnabled === true : false;\n        this.m_dynamicMsaaSamplingLevel =\n            antialiasSettings.dynamicMsaaSamplingLevel === undefined\n                ? DEFAULT_DYNAMIC_MSAA_SAMPLING_LEVEL\n                : antialiasSettings.dynamicMsaaSamplingLevel;\n        this.m_staticMsaaSamplingLevel =\n            antialiasSettings.staticMsaaSamplingLevel === undefined\n                ? DEFAULT_STATIC_MSAA_SAMPLING_LEVEL\n                : antialiasSettings.staticMsaaSamplingLevel;\n        this.m_lowResPass = new LowResRenderPass(lowResPixelRatio);\n        this.m_lowResPass.enabled = lowResPixelRatio !== undefined;\n    }\n\n    updateOutline(options: { thickness: number; color: string; ghostExtrudedPolygons: boolean }) {\n        this.outline.color = options.color;\n        this.outline.thickness = options.thickness;\n        this.outline.ghostExtrudedPolygons = options.ghostExtrudedPolygons;\n        this.outline.needsUpdate = true;\n    }\n\n    /**\n     * The method to call to render the map with the `MapRenderingManager` instance. It contains the\n     * chain of sub-passes that can transfer the write and read buffers, and other sheer rendering\n     * conditions as disabling AA when a high DPI device is in use.\n     *\n     * @param renderer The ThreeJS WebGLRenderer instance to render the map with.\n     * @param scene The ThreeJS Scene instance containing the map objects to render.\n     * @param camera The ThreeJS Camera instance to render the scene through.\n     * @param isStaticFrame Whether the frame to render is static or dynamic. Selects level of\n     * antialiasing.\n     */\n    render(\n        renderer: THREE.WebGLRenderer,\n        scene: THREE.Scene,\n        camera: THREE.PerspectiveCamera | THREE.OrthographicCamera,\n        isStaticFrame: boolean\n    ) {\n        const target = null;\n        if (!isStaticFrame && this.m_lowResPass.pixelRatio !== undefined) {\n            // Not designed to be combined with our own MSAA\n            this.m_lowResPass.renderToScreen = true;\n            this.m_lowResPass.render(renderer, scene, camera, target, this.m_readBuffer);\n            return;\n        }\n\n        const usePostEffects =\n            this.bloom.enabled ||\n            this.outline.enabled ||\n            this.vignette.enabled ||\n            this.sepia.enabled;\n\n        let activeTarget: null | THREE.WebGLRenderTarget = null;\n\n        // 1. If the bloom is enabled, clear the depth.\n        if (this.bloom.enabled || this.vignette.enabled || this.sepia.enabled) {\n            renderer.setRenderTarget(this.m_target1);\n            renderer.clearDepth();\n        }\n\n        // 2. Render the map.\n\n        if (this.m_msaaPass.enabled) {\n            // Use a higher MSAA sampling level for static rendering.\n            this.m_msaaPass.samplingLevel = isStaticFrame\n                ? this.m_staticMsaaSamplingLevel\n                : this.m_dynamicMsaaSamplingLevel;\n            // MSAA is the only effect for the moment.\n            this.m_msaaPass.renderToScreen = !usePostEffects;\n            // Render to the specified target with the MSAA pass.\n            this.m_msaaPass.render(renderer, scene, camera, target, this.m_readBuffer);\n        } else {\n            if (this.bloom.enabled || this.vignette.enabled || this.sepia.enabled) {\n                activeTarget = this.m_target1;\n                this.m_renderPass.render(renderer, scene, camera, this.m_target1, null!);\n            } else if (!this.outline.enabled || (this.outline.enabled && !this.bloom.enabled)) {\n                renderer.render(scene, camera);\n            }\n        }\n\n        // 3. Apply effects\n        if (this.outline.enabled) {\n            if (this.m_outlineEffect === undefined) {\n                this.m_outlineEffect = new OutlineEffect(renderer);\n            }\n            if (this.outline.needsUpdate) {\n                this.m_outlineEffect.color = this.outline.color;\n                this.m_outlineEffect.thickness = this.outline.thickness;\n                this.m_outlineEffect.ghostExtrudedPolygons = this.outline.ghostExtrudedPolygons;\n                this.outline.needsUpdate = false;\n            }\n            const nextEffectEnabled =\n                this.bloom.enabled || this.vignette.enabled || this.sepia.enabled;\n            if (nextEffectEnabled) {\n                activeTarget = this.m_target1;\n            }\n            renderer.setRenderTarget(nextEffectEnabled ? activeTarget : null!);\n            this.m_outlineEffect.render(scene, camera);\n        }\n\n        if (this.bloom.enabled) {\n            if (this.m_bloomPass === undefined) {\n                this.m_bloomPass = new BloomPass(\n                    new THREE.Vector2(this.m_width, this.m_height),\n                    this.bloom.strength,\n                    this.bloom.radius,\n                    this.bloom.threshold\n                );\n            }\n            const nextEffectEnabled = this.vignette.enabled || this.sepia.enabled;\n            this.m_bloomPass.renderToScreen = !nextEffectEnabled;\n            this.m_bloomPass.radius = this.bloom.radius;\n            this.m_bloomPass.strength = this.bloom.strength;\n            this.m_bloomPass.threshold = this.bloom.threshold;\n            this.m_bloomPass.render(renderer, scene, camera, null!, activeTarget!);\n        } else if (this.m_bloomPass !== undefined) {\n            this.m_bloomPass.dispose();\n            this.m_bloomPass = undefined;\n        }\n\n        if (this.vignette.enabled) {\n            const oldTarget = activeTarget!;\n            const nextEffectEnabled = this.sepia.enabled;\n            this.m_vignettePass.uniforms.offset.value = this.vignette.offset;\n            this.m_vignettePass.uniforms.darkness.value = this.vignette.darkness;\n            this.m_vignettePass.renderToScreen = !nextEffectEnabled;\n            if (nextEffectEnabled) {\n                activeTarget = activeTarget === this.m_target1 ? this.m_target2 : this.m_target1;\n            }\n            this.m_vignettePass.render(renderer, scene, camera, activeTarget!, oldTarget);\n        }\n\n        if (this.sepia.enabled) {\n            this.m_sepiaPass.renderToScreen = true;\n            this.m_sepiaPass.uniforms.amount.value = this.sepia.amount;\n            this.m_sepiaPass.render(renderer, scene, camera, null!, activeTarget!);\n        }\n    }\n\n    /**\n     * The resize function to call on resize events to resize the render targets. It shall include\n     * the resize methods of all the sub-passes used in `MapRenderingManager`.\n     *\n     * @param width New width to use.\n     * @param height New height to use.\n     */\n    setSize(width: number, height: number) {\n        this.m_readBuffer.setSize(width, height);\n        this.m_msaaPass.setSize(width, height);\n        if (this.m_bloomPass !== undefined) {\n            this.m_bloomPass.setSize(width, height);\n        }\n        this.m_lowResPass.setSize(width, height);\n        this.m_target1.setSize(width, height);\n        this.m_target2.setSize(width, height);\n        this.m_width = width;\n        this.m_height = height;\n    }\n\n    /**\n     * The `lowResPixelRatio` determines the resolution of the internal `WebGLRenderTarget`. Values\n     * between 0.5 and `window.devicePixelRatio` can be tried to give  good results. A value of\n     * `undefined` disables the low res render pass. The value should not be larger than\n     * `window.devicePixelRatio`.\n     */\n    get lowResPixelRatio(): number | undefined {\n        return this.m_lowResPass.pixelRatio;\n    }\n\n    set lowResPixelRatio(pixelRatio: number | undefined) {\n        this.m_lowResPass.pixelRatio = pixelRatio;\n        this.m_lowResPass.enabled = pixelRatio !== undefined;\n    }\n\n    /**\n     * Set the level of sampling while the user interacts.\n     *\n     * @param samplingLevel The sampling level.\n     */\n    set dynamicMsaaSamplingLevel(samplingLevel: MSAASampling) {\n        this.m_dynamicMsaaSamplingLevel = samplingLevel;\n    }\n\n    /**\n     * Return the sampling level defined during continuous rendering.\n     */\n    get dynamicMsaaSamplingLevel(): MSAASampling {\n        return this.m_dynamicMsaaSamplingLevel;\n    }\n\n    /**\n     * Enable or disable the MSAA. If disabled, `MapRenderingManager` will use the renderer provided\n     * in the [[MapRenderingManager.render]] method to render the scene.\n     *\n     * @param value If `true`, MSAA is enabled, disabled otherwise.\n     */\n    set msaaEnabled(value: boolean) {\n        this.m_msaaPass.enabled = value;\n    }\n\n    /**\n     * Return whether the MSAA is enabled.\n     */\n    get msaaEnabled(): boolean {\n        return this.m_msaaPass.enabled;\n    }\n\n    /**\n     * Set the sampling level for rendering static frames.\n     *\n     * @param samplingLevel The sampling level.\n     */\n    set staticMsaaSamplingLevel(samplingLevel: MSAASampling) {\n        this.m_staticMsaaSamplingLevel = samplingLevel;\n    }\n\n    /**\n     * Return the sampling level defined for rendering static frames.\n     */\n\n    get staticMsaaSamplingLevel(): MSAASampling {\n        return this.m_staticMsaaSamplingLevel;\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { CopyMaterial, CopyShader } from \"@here/harp-materials\";\nimport * as THREE from \"three\";\n\nimport { Pass } from \"./Pass\";\n\n/**\n * The `LowResRenderPass` renders the scene at a lower resolution into an internal\n * `WebGLRenderTarget`, and then copies the result into the frame buffer. The size of the internal\n * buffer is determined by the current frame buffer size multiplied by `pixelRatio`.\n *\n * @note Since no anti-aliasing is applied during dynamic rendering, visual artifacts may be\n * visible.\n */\nexport class LowResRenderPass extends Pass {\n    private m_renderTarget: THREE.WebGLRenderTarget | null = null;\n    private readonly m_localCamera: THREE.OrthographicCamera = new THREE.OrthographicCamera(\n        -1,\n        1,\n        1,\n        -1,\n        0,\n        1\n    );\n    private readonly m_quadScene: THREE.Scene = new THREE.Scene();\n    private readonly m_quadUniforms: { [uniformName: string]: THREE.IUniform } =\n        CopyShader.uniforms;\n    private readonly m_quadMaterial: THREE.ShaderMaterial = new CopyMaterial(this.m_quadUniforms);\n    private readonly m_quad: THREE.Mesh = new THREE.Mesh(\n        new THREE.PlaneBufferGeometry(2, 2),\n        this.m_quadMaterial\n    );\n    private m_pixelRatio: number | undefined;\n    private m_savedWidth = 0;\n    private m_savedHeight = 0;\n\n    /**\n     * The constructor for `LowResRenderPass`. It builds an internal scene with a camera looking at\n     * a quad.\n     *\n     * @param lowResPixelRatio The `pixelRatio` determines the resolution of the internal\n     *  `WebGLRenderTarget`. Values between 0.5 and `window.devicePixelRatio` can be tried to give\n     * good results. A value of `undefined` disables the low res render pass. The value should not\n     * be larger than`window.devicePixelRatio`.\n     */\n    constructor(public lowResPixelRatio?: number) {\n        super();\n        this.m_quad.frustumCulled = false;\n        this.m_quadScene.add(this.m_quad);\n        this.m_pixelRatio = lowResPixelRatio;\n    }\n\n    /**\n     * Releases all used resources.\n     */\n    dispose() {\n        this.m_quadMaterial.dispose();\n        this.m_quad.geometry.dispose();\n        if (this.m_renderTarget !== null) {\n            this.m_renderTarget.dispose();\n            this.m_renderTarget = null;\n        }\n    }\n\n    /**\n     * If a value is specified, a low resolution render pass is used to render the scene into a\n     * low resolution render target, before it is copied to the screen.\n     *\n     * A value of `undefined` disables the low res render pass. The value should not be larger than\n     * `window.devicePixelRatio`.\n     *\n     * @default `undefined`\n     */\n    set pixelRatio(ratio: number | undefined) {\n        this.m_pixelRatio = ratio;\n        if (this.m_renderTarget && this.pixelRatio !== undefined) {\n            this.m_renderTarget.setSize(\n                Math.floor(this.m_savedWidth * this.pixelRatio),\n                Math.floor(this.m_savedHeight * this.pixelRatio)\n            );\n        }\n    }\n\n    get pixelRatio(): number | undefined {\n        return this.m_pixelRatio;\n    }\n\n    /**\n     * The render function of `LowResRenderPass`. It renders the whole scene into an internal\n     * `WebGLRenderTarget` instance with a lower resolution, using the passed in `WebGLRenderer`.\n     * The low resolution image is then copied to the `writeBuffer`, which is `undefined` in case it\n     * is the screen.\n     *\n     * @param renderer The ThreeJS WebGLRenderer instance to render the scene with.\n     * @param scene The ThreeJS Scene instance to render the scene with.\n     * @param camera The ThreeJS Camera instance to render the scene with.\n     * @param writeBuffer A ThreeJS WebGLRenderTarget instance to render the scene to.\n     * @param readBuffer A ThreeJS WebGLRenderTarget instance to render the scene.\n     * @override\n     */\n    render(\n        renderer: THREE.WebGLRenderer,\n        scene: THREE.Scene,\n        camera: THREE.PerspectiveCamera | THREE.OrthographicCamera,\n        writeBuffer: THREE.WebGLRenderTarget | null,\n        readBuffer: THREE.WebGLRenderTarget\n    ) {\n        if (!this.enabled || this.pixelRatio === undefined) {\n            return;\n        }\n\n        // Initiates the local render target with the read buffer's dimensions, if not available.\n        if (this.m_renderTarget === null) {\n            this.m_savedWidth = readBuffer.width;\n            this.m_savedHeight = readBuffer.height;\n            this.m_renderTarget = new THREE.WebGLRenderTarget(\n                Math.floor(this.m_savedWidth * this.pixelRatio),\n                Math.floor(this.m_savedHeight * this.pixelRatio),\n                {\n                    minFilter: THREE.LinearFilter,\n                    magFilter: THREE.LinearFilter,\n                    format: THREE.RGBAFormat,\n                    depthBuffer: true,\n                    stencilBuffer: true\n                }\n            );\n            this.m_renderTarget.texture.name = \"LowResRenderPass.sample\";\n        }\n\n        this.m_quadUniforms.tDiffuse.value = this.m_renderTarget.texture;\n        this.m_quadUniforms.opacity.value = 1.0;\n\n        const oldRenderTarget = renderer.getRenderTarget();\n        renderer.setRenderTarget(this.m_renderTarget);\n        renderer.clear();\n        // Render into the low resolution internal render target.\n        renderer.render(scene, camera);\n\n        // Render the low resolution target into the screen.\n        // NOTE: three.js doesn't like undefined as renderTarget, but works with `null`\n        renderer.setRenderTarget(this.renderToScreen ? null : writeBuffer);\n        renderer.clear();\n        renderer.render(this.m_quadScene, this.m_localCamera);\n        renderer.setRenderTarget(oldRenderTarget);\n    }\n\n    /**\n     * Resize the internal render target to match the new size specified. The size of internal\n     * buffer depends on the `pixelRatio`.\n     *\n     * @param width New width to apply to the render target.\n     * @param height New height to apply to the render target.\n     * @override\n     */\n    setSize(width: number, height: number) {\n        this.m_savedWidth = width;\n        this.m_savedHeight = height;\n        if (this.m_renderTarget && this.pixelRatio !== undefined) {\n            this.m_renderTarget.setSize(\n                Math.floor(width * this.pixelRatio),\n                Math.floor(height * this.pixelRatio)\n            );\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { chainCallbacks } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\n\nconst vertexShaderChunk = `\n    uniform float outlineThickness;\n\n    vec4 calculateOutline( vec4 pos, vec3 objectNormal, vec4 skinned ) {\n\n        float thickness = outlineThickness;\n        const float ratio = 1.0;\n        vec4 pos2 = projectionMatrix * modelViewMatrix * vec4( skinned.xyz + objectNormal, 1.0 );\n        vec4 norm = normalize( pos - pos2 );\n        return pos + norm * thickness * pos.w * ratio;\n\n    }`;\n\nconst vertexShaderChunk2 = `\n    #if ! defined( LAMBERT ) && ! defined( PHONG ) && ! defined( TOON ) && ! defined( STANDARD )\n        #ifndef USE_ENVMAP\n            vec3 objectNormal = normalize( normal );\n        #endif\n    #endif\n\n    #ifdef FLIP_SIDED\n        objectNormal = -objectNormal;\n    #endif\n\n    #ifdef DECLARE_TRANSFORMED\n        vec3 transformed = vec3( position );\n    #endif\n\n    gl_Position = calculateOutline( gl_Position, objectNormal, vec4( transformed, 1.0 ) );\n\n    #include <fog_vertex>`;\n\nconst fragmentShader = `\n    #include <common>\n    #include <fog_pars_fragment>\n\n    uniform vec3 outlineColor;\n    uniform float outlineAlpha;\n\n    void main() {\n\n        gl_FragColor = vec4( outlineColor, outlineAlpha );\n\n        #include <fog_fragment>\n\n    }`;\n\nexport class OutlineEffect {\n    enabled: boolean = true;\n\n    autoClear: boolean;\n    domElement: HTMLCanvasElement;\n    shadowMap: THREE.WebGLShadowMap;\n\n    private m_defaultThickness: number = 0.02;\n    private m_defaultColor: THREE.Color = new THREE.Color(0, 0, 0);\n    private m_defaultAlpha: number = 1;\n    private m_defaultKeepAlive: boolean = false;\n    private m_ghostExtrudedPolygons: boolean = false;\n\n    private m_cache: any = {};\n    private m_removeThresholdCount: number = 60;\n    private m_originalMaterials: any = {};\n    private m_originalOnBeforeRenders: any = {};\n\n    private m_shaderIDs: { [key: string]: string } = {\n        MeshBasicMaterial: \"basic\",\n        MeshLambertMaterial: \"lambert\",\n        MeshPhongMaterial: \"phong\",\n        MeshToonMaterial: \"phong\",\n        MeshStandardMaterial: \"physical\",\n        MeshPhysicalMaterial: \"physical\"\n    };\n    private m_uniformsChunk = {\n        outlineThickness: { value: this.m_defaultThickness },\n        outlineColor: { value: this.m_defaultColor },\n        outlineAlpha: { value: this.m_defaultAlpha }\n    };\n\n    constructor(private m_renderer: THREE.WebGLRenderer) {\n        this.autoClear = m_renderer.autoClear;\n        this.domElement = m_renderer.domElement;\n        this.shadowMap = m_renderer.shadowMap;\n    }\n\n    set thickness(thickness: number) {\n        this.m_defaultThickness = thickness;\n        this.m_uniformsChunk.outlineThickness.value = thickness;\n        this.m_cache = {};\n    }\n\n    set color(color: string) {\n        this.m_defaultColor.set(color);\n        this.m_cache = {};\n    }\n\n    set ghostExtrudedPolygons(ghost: boolean) {\n        this.m_ghostExtrudedPolygons = ghost;\n    }\n\n    clear(color: boolean, depth: boolean, stencil: boolean) {\n        this.m_renderer.clear(color, depth, stencil);\n    }\n\n    getPixelRatio() {\n        return this.m_renderer.getPixelRatio();\n    }\n\n    setPixelRatio(value: number) {\n        this.m_renderer.setPixelRatio(value);\n    }\n\n    getSize(target: THREE.Vector2) {\n        return this.m_renderer.getSize(target);\n    }\n\n    setSize(width: number, height: number, updateStyle: boolean) {\n        this.m_renderer.setSize(width, height, updateStyle);\n    }\n\n    setViewport(x: number, y: number, width: number, height: number) {\n        this.m_renderer.setViewport(x, y, width, height);\n    }\n\n    setScissor(x: number, y: number, width: number, height: number) {\n        this.m_renderer.setScissor(x, y, width, height);\n    }\n\n    setScissorTest(boolean: boolean) {\n        this.m_renderer.setScissorTest(boolean);\n    }\n\n    setRenderTarget(renderTarget: THREE.WebGLRenderTarget) {\n        this.m_renderer.setRenderTarget(renderTarget);\n    }\n\n    render(scene: THREE.Scene, camera: THREE.Camera) {\n        // Re-rendering the scene with the outline effect enables to hide the\n        // extruded polygons and show only the outlines (it is a hack and should be\n        // implemented another way!).\n        if (this.m_ghostExtrudedPolygons) {\n            if (!this.enabled) {\n                this.m_renderer.render(scene, camera);\n                return;\n            }\n\n            const currentAutoClear = this.m_renderer.autoClear;\n            this.m_renderer.autoClear = this.autoClear;\n\n            this.m_renderer.render(scene, camera);\n\n            this.m_renderer.autoClear = currentAutoClear;\n        }\n\n        this.renderOutline(scene, camera);\n    }\n\n    renderOutline(scene: THREE.Scene, camera: THREE.Camera) {\n        const currentAutoClear = this.m_renderer.autoClear;\n        const currentSceneAutoUpdate = scene.autoUpdate;\n        const currentSceneBackground = scene.background;\n        const currentShadowMapEnabled = this.m_renderer.shadowMap.enabled;\n\n        scene.autoUpdate = false;\n        scene.background = null;\n        this.m_renderer.autoClear = false;\n        this.m_renderer.shadowMap.enabled = false;\n\n        scene.traverse(this.setOutlineMaterial.bind(this));\n\n        this.m_renderer.render(scene, camera);\n\n        scene.traverse(this.restoreOriginalMaterial.bind(this));\n\n        this.cleanupCache();\n\n        scene.autoUpdate = currentSceneAutoUpdate;\n        scene.background = currentSceneBackground;\n        this.m_renderer.autoClear = currentAutoClear;\n        this.m_renderer.shadowMap.enabled = currentShadowMapEnabled;\n    }\n\n    private createInvisibleMaterial() {\n        return new THREE.ShaderMaterial({ name: \"invisible\", visible: false });\n    }\n\n    private createMaterial(originalMaterial: THREE.Material) {\n        const shaderID = this.m_shaderIDs[originalMaterial.type];\n        let originalUniforms;\n        let originalVertexShader;\n\n        if (shaderID !== undefined) {\n            const shader = THREE.ShaderLib[shaderID];\n            originalUniforms = shader.uniforms;\n            originalVertexShader = shader.vertexShader;\n        } else if ((originalMaterial as any).isRawShaderMaterial === true) {\n            originalUniforms = (originalMaterial as any).uniforms;\n            originalVertexShader = (originalMaterial as any).vertexShader;\n\n            if (\n                !/attribute\\s+vec3\\s+position\\s*;/.test(originalVertexShader) ||\n                !/attribute\\s+vec3\\s+normal\\s*;/.test(originalVertexShader)\n            ) {\n                return this.createInvisibleMaterial();\n            }\n        } else if ((originalMaterial as any).isShaderMaterial === true) {\n            originalUniforms = (originalMaterial as any).uniforms;\n            originalVertexShader = (originalMaterial as any).vertexShader;\n        } else {\n            return this.createInvisibleMaterial();\n        }\n\n        const uniforms = { ...originalUniforms, ...this.m_uniformsChunk };\n\n        const vertexShader = originalVertexShader\n            // put vertexShaderChunk right before \"void main() {...}\"\n            .replace(/void\\s+main\\s*\\(\\s*\\)/, vertexShaderChunk + \"\\nvoid main()\")\n            // put vertexShaderChunk2 the end of \"void main() {...}\"\n            // Note: here assums originalVertexShader ends with \"}\" of \"void main() {...}\"\n            .replace(/\\}\\s*$/, vertexShaderChunk2 + \"\\n}\")\n            // remove any light related lines\n            // Note: here is very sensitive to originalVertexShader\n            // TODO: consider safer way\n            .replace(/#include\\s+<[\\w_]*light[\\w_]*>/g, \"\");\n\n        const defines = {};\n\n        if (\n            !/vec3\\s+transformed\\s*=/.test(originalVertexShader) &&\n            !/#include\\s+<begin_vertex>/.test(originalVertexShader)\n        ) {\n            (defines as any).DECLARE_TRANSFORMED = true;\n        }\n\n        return new THREE.ShaderMaterial({\n            defines,\n            uniforms,\n            vertexShader,\n            fragmentShader,\n            side: THREE.BackSide,\n            //wireframe: true,\n            skinning: false,\n            morphTargets: false,\n            morphNormals: false,\n            fog: false\n        });\n    }\n\n    private getOutlineMaterialFromCache(originalMaterial: THREE.Material) {\n        let data = this.m_cache[originalMaterial.uuid];\n\n        if (data === undefined) {\n            data = {\n                material: this.createMaterial(originalMaterial),\n                used: true,\n                keepAlive: this.m_defaultKeepAlive,\n                count: 0\n            };\n\n            this.m_cache[originalMaterial.uuid] = data;\n        }\n\n        data.used = true;\n\n        return data.material;\n    }\n\n    private getOutlineMaterial(originalMaterial: THREE.Material) {\n        const outlineMaterial = this.getOutlineMaterialFromCache(originalMaterial);\n\n        this.m_originalMaterials[outlineMaterial.uuid] = originalMaterial;\n\n        this.updateOutlineMaterial(outlineMaterial, originalMaterial);\n\n        return outlineMaterial;\n    }\n\n    private setOutlineMaterial(object: THREE.Object3D) {\n        if ((object as THREE.Mesh).material === undefined) {\n            return;\n        }\n\n        if (Array.isArray((object as THREE.Mesh).material)) {\n            for (\n                let i = 0, il = ((object as THREE.Mesh).material as THREE.Material[]).length;\n                i < il;\n                i++\n            ) {\n                ((object as THREE.Mesh).material as THREE.Material[])[i] = this.getOutlineMaterial(\n                    ((object as THREE.Mesh).material as THREE.Material[])[i]\n                );\n            }\n        } else {\n            (object as THREE.Mesh).material = this.getOutlineMaterial(\n                (object as THREE.Mesh).material as THREE.Material\n            );\n        }\n\n        this.m_originalOnBeforeRenders[object.uuid] = object.onBeforeRender;\n        object.onBeforeRender = chainCallbacks(\n            object.onBeforeRender,\n            this.onBeforeRender.bind(this)\n        );\n    }\n\n    private restoreOriginalMaterial(object: THREE.Object3D) {\n        if ((object as THREE.Mesh).material === undefined) {\n            return;\n        }\n\n        if (Array.isArray((object as THREE.Mesh).material)) {\n            for (\n                let i = 0, il = ((object as THREE.Mesh).material as THREE.Material[]).length;\n                i < il;\n                i++\n            ) {\n                ((object as THREE.Mesh).material as THREE.Material[])[i] = this.m_originalMaterials[\n                    ((object as THREE.Mesh).material as THREE.Material[])[i].uuid\n                ];\n            }\n        } else {\n            (object as THREE.Mesh).material = this.m_originalMaterials[\n                ((object as THREE.Mesh).material as THREE.Material).uuid\n            ];\n        }\n\n        object.onBeforeRender = this.m_originalOnBeforeRenders[object.uuid];\n    }\n\n    private onBeforeRender(\n        renderer: THREE.WebGLRenderer,\n        scene: THREE.Scene,\n        camera: THREE.Camera,\n        geometry: THREE.Geometry | THREE.BufferGeometry,\n        material: THREE.Material,\n        group: THREE.Group\n    ) {\n        const originalMaterial = this.m_originalMaterials[material.uuid];\n\n        // just in case\n        if (originalMaterial === undefined) {\n            return;\n        }\n\n        this.updateUniforms(material, originalMaterial);\n    }\n\n    private updateUniforms(material: THREE.Material, originalMaterial: THREE.Material) {\n        const outlineParameters = originalMaterial.userData.outlineParameters;\n\n        (material as any).uniforms.outlineAlpha.value = originalMaterial.opacity;\n\n        if (outlineParameters !== undefined) {\n            if (outlineParameters.thickness !== undefined) {\n                (material as any).uniforms.outlineThickness.value = outlineParameters.thickness;\n            }\n            if (outlineParameters.color !== undefined) {\n                (material as any).uniforms.outlineColor.value.fromArray(outlineParameters.color);\n            }\n            if (outlineParameters.alpha !== undefined) {\n                (material as any).uniforms.outlineAlpha.value = outlineParameters.alpha;\n            }\n        }\n    }\n\n    private updateOutlineMaterial(material: THREE.Material, originalMaterial: THREE.Material) {\n        if (material.name === \"invisible\") {\n            return;\n        }\n\n        const outlineParameters = originalMaterial.userData.outlineParameters;\n\n        (material as any).skinning = (originalMaterial as any).skinning;\n        (material as any).morphTargets = (originalMaterial as any).morphTargets;\n        (material as any).morphNormals = (originalMaterial as any).morphNormals;\n        material.fog = originalMaterial.fog;\n\n        if (outlineParameters !== undefined) {\n            material.visible =\n                originalMaterial.visible === false\n                    ? false\n                    : outlineParameters.visible !== undefined\n                    ? outlineParameters.visible\n                    : true;\n\n            material.transparent =\n                outlineParameters.alpha !== undefined && outlineParameters.alpha < 1.0\n                    ? true\n                    : originalMaterial.transparent;\n\n            if (outlineParameters.keepAlive !== undefined) {\n                this.m_cache[originalMaterial.uuid].keepAlive = outlineParameters.keepAlive;\n            }\n        } else {\n            material.transparent = originalMaterial.transparent;\n            material.visible = originalMaterial.visible;\n        }\n\n        if ((originalMaterial as any).wireframe === true || originalMaterial.depthTest === false) {\n            material.visible = false;\n        }\n    }\n\n    private cleanupCache() {\n        let keys;\n\n        // clear originialMaterials\n        keys = Object.keys(this.m_originalMaterials);\n\n        for (let i = 0, il = keys.length; i < il; i++) {\n            this.m_originalMaterials[keys[i]] = undefined;\n        }\n\n        // clear originalOnBeforeRenders\n        keys = Object.keys(this.m_originalOnBeforeRenders);\n\n        for (let i = 0, il = keys.length; i < il; i++) {\n            this.m_originalOnBeforeRenders[keys[i]] = undefined;\n        }\n\n        // remove unused outlineMaterial from cache\n        keys = Object.keys(this.m_cache);\n\n        for (const key of keys) {\n            if (this.m_cache[key].used === false) {\n                this.m_cache[key].count++;\n\n                if (\n                    this.m_cache[key].keepAlive === false &&\n                    this.m_cache[key].count > this.m_removeThresholdCount\n                ) {\n                    delete this.m_cache[key];\n                }\n            } else {\n                this.m_cache[key].used = false;\n                this.m_cache[key].count = 0;\n            }\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CopyShader, LuminosityHighPassShader } from \"@here/harp-materials\";\nimport * as THREE from \"three\";\nimport { Pass } from \"./Pass\";\n\nconst BlurDirectionX = new THREE.Vector2(1.0, 0.0);\nconst BlurDirectionY = new THREE.Vector2(0.0, 1.0);\n\n/**\n * The TS version of ThreeJS's UnrealBloomPass.\n */\nexport class BloomPass extends Pass {\n    strength: number;\n    radius: number;\n    threshold: number;\n    resolution: THREE.Vector2 = new THREE.Vector2(256, 256);\n    private m_renderTargetsHorizontal: THREE.WebGLRenderTarget[] = [];\n    private m_renderTargetsVertical: THREE.WebGLRenderTarget[] = [];\n    private m_nMips: number = 5;\n    private m_highPassUniforms: any;\n    private m_materialHighPassFilter: THREE.ShaderMaterial;\n    private m_separableBlurMaterials: THREE.ShaderMaterial[] = [];\n    private m_materialCopy: THREE.ShaderMaterial;\n    private m_copyUniforms: any;\n    private m_compositeMaterial: THREE.ShaderMaterial;\n\n    private m_camera: THREE.OrthographicCamera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);\n    private m_scene: THREE.Scene = new THREE.Scene();\n    private m_basic = new THREE.MeshBasicMaterial();\n    private m_quad = new THREE.Mesh(new THREE.PlaneBufferGeometry(2, 2));\n\n    private m_bloomTintColors: THREE.Vector3[] = [\n        new THREE.Vector3(1, 1, 1),\n        new THREE.Vector3(1, 1, 1),\n        new THREE.Vector3(1, 1, 1),\n        new THREE.Vector3(1, 1, 1),\n        new THREE.Vector3(1, 1, 1)\n    ];\n\n    private m_renderTargetBright: THREE.WebGLRenderTarget;\n\n    constructor(resolution: THREE.Vector2, strength: number, radius: number, threshold: number) {\n        super();\n\n        this.strength = strength;\n        this.radius = radius;\n        this.threshold = threshold;\n        this.resolution = resolution;\n\n        this.m_quad.frustumCulled = false;\n        this.m_scene.add(this.m_quad);\n\n        const pars = {\n            minFilter: THREE.LinearFilter,\n            magFilter: THREE.LinearFilter,\n            format: THREE.RGBAFormat\n        };\n\n        let resx = Math.round(this.resolution.x / 2);\n        let resy = Math.round(this.resolution.y / 2);\n\n        this.m_renderTargetBright = new THREE.WebGLRenderTarget(resx, resy, pars);\n        this.m_renderTargetBright.texture.name = \"UnrealBloomPass.bright\";\n        this.m_renderTargetBright.texture.generateMipmaps = false;\n\n        for (let i = 0; i < this.m_nMips; i++) {\n            const renderTargetHorizonal = new THREE.WebGLRenderTarget(resx, resy, pars);\n            renderTargetHorizonal.texture.name = \"UnrealBloomPass.h\" + i;\n            renderTargetHorizonal.texture.generateMipmaps = false;\n            this.m_renderTargetsHorizontal.push(renderTargetHorizonal);\n\n            const renderTargetVertical = new THREE.WebGLRenderTarget(resx, resy, pars);\n            renderTargetVertical.texture.name = \"UnrealBloomPass.v\" + i;\n            renderTargetVertical.texture.generateMipmaps = false;\n            this.m_renderTargetsVertical.push(renderTargetVertical);\n\n            resx = Math.round(resx / 2);\n            resy = Math.round(resy / 2);\n        }\n\n        this.m_highPassUniforms = THREE.UniformsUtils.clone(LuminosityHighPassShader.uniforms);\n\n        // tslint:disable:no-string-literal\n        this.m_highPassUniforms[\"luminosityThreshold\"].value = threshold;\n        this.m_highPassUniforms[\"smoothWidth\"].value = 0.01;\n\n        this.m_materialHighPassFilter = new THREE.ShaderMaterial({\n            uniforms: this.m_highPassUniforms,\n            vertexShader: LuminosityHighPassShader.vertexShader,\n            fragmentShader: LuminosityHighPassShader.fragmentShader,\n            defines: {}\n        });\n\n        // Gaussian Blur Materials\n        const kernelSizeArray = [3, 5, 7, 9, 11];\n        resx = Math.round(this.resolution.x / 2);\n        resy = Math.round(this.resolution.y / 2);\n        for (let i = 0; i < this.m_nMips; i++) {\n            this.m_separableBlurMaterials.push(this.getSeperableBlurMaterial(kernelSizeArray[i]));\n            this.m_separableBlurMaterials[i].uniforms[\"texSize\"].value = new THREE.Vector2(\n                resx,\n                resy\n            );\n            resx = Math.round(resx / 2);\n            resy = Math.round(resy / 2);\n        }\n\n        // Composite material\n        this.m_compositeMaterial = this.getCompositeMaterial(this.m_nMips);\n        this.m_compositeMaterial.uniforms[\n            \"blurTexture1\"\n        ].value = this.m_renderTargetsVertical[0].texture;\n        this.m_compositeMaterial.uniforms[\n            \"blurTexture2\"\n        ].value = this.m_renderTargetsVertical[1].texture;\n        this.m_compositeMaterial.uniforms[\n            \"blurTexture3\"\n        ].value = this.m_renderTargetsVertical[2].texture;\n        this.m_compositeMaterial.uniforms[\n            \"blurTexture4\"\n        ].value = this.m_renderTargetsVertical[3].texture;\n        this.m_compositeMaterial.uniforms[\n            \"blurTexture5\"\n        ].value = this.m_renderTargetsVertical[4].texture;\n        this.m_compositeMaterial.uniforms[\"bloomStrength\"].value = strength;\n        this.m_compositeMaterial.uniforms[\"bloomRadius\"].value = 0.1;\n        this.m_compositeMaterial.needsUpdate = true;\n\n        const bloomFactors = [1.0, 0.8, 0.6, 0.4, 0.2];\n        this.m_compositeMaterial.uniforms[\"bloomFactors\"].value = bloomFactors;\n        this.m_compositeMaterial.uniforms[\"bloomTintColors\"].value = this.m_bloomTintColors;\n\n        this.m_copyUniforms = THREE.UniformsUtils.clone(CopyShader.uniforms);\n        this.m_copyUniforms[\"opacity\"].value = 1.0;\n        // tslint:enable:no-string-literal\n\n        this.m_materialCopy = new THREE.ShaderMaterial({\n            uniforms: this.m_copyUniforms,\n            vertexShader: CopyShader.vertexShader,\n            fragmentShader: CopyShader.fragmentShader,\n            blending: THREE.AdditiveBlending,\n            depthTest: false,\n            depthWrite: false,\n            transparent: true\n        });\n    }\n    dispose() {\n        for (const rt of this.m_renderTargetsHorizontal) {\n            rt.dispose();\n        }\n        for (const rt of this.m_renderTargetsVertical) {\n            rt.dispose();\n        }\n        this.m_renderTargetBright.dispose();\n    }\n    /** @override */\n    setSize(width: number, height: number) {\n        let resx = Math.round(width / 2);\n        let resy = Math.round(height / 2);\n        this.m_renderTargetBright.setSize(resx, resy);\n        for (let i = 0; i < this.m_nMips; i++) {\n            this.m_renderTargetsHorizontal[i].setSize(resx, resy);\n            this.m_renderTargetsVertical[i].setSize(resx, resy);\n            // tslint:disable-next-line:no-string-literal\n            this.m_separableBlurMaterials[i].uniforms[\"texSize\"].value = new THREE.Vector2(\n                resx,\n                resy\n            );\n            resx = Math.round(resx / 2);\n            resy = Math.round(resy / 2);\n        }\n    }\n    /** @override */\n    render(\n        renderer: THREE.WebGLRenderer,\n        scene: THREE.Scene,\n        camera: THREE.Camera,\n        writeBuffer: THREE.WebGLRenderTarget | null,\n        readBuffer: THREE.WebGLRenderTarget\n    ) {\n        // tslint:disable:no-string-literal\n\n        // Render input to screen\n        if (this.renderToScreen) {\n            this.m_quad.material = this.m_basic;\n            this.m_basic.map = readBuffer.texture;\n            renderer.setRenderTarget(null!);\n            renderer.clear();\n            renderer.render(this.m_scene, this.m_camera);\n        }\n\n        // 1. Extract bright areas\n        this.m_highPassUniforms[\"tDiffuse\"].value = readBuffer.texture;\n        this.m_highPassUniforms[\"luminosityThreshold\"].value = this.threshold;\n        this.m_quad.material = this.m_materialHighPassFilter;\n\n        renderer.setRenderTarget(this.m_renderTargetBright);\n        renderer.clear();\n        renderer.render(this.m_scene, this.m_camera);\n\n        // 2. Blur all the mips progressively\n        let inputRenderTarget = this.m_renderTargetBright;\n\n        for (let i = 0; i < this.m_nMips; i++) {\n            this.m_quad.material = this.m_separableBlurMaterials[i];\n\n            this.m_separableBlurMaterials[i].uniforms[\"colorTexture\"].value =\n                inputRenderTarget.texture;\n            this.m_separableBlurMaterials[i].uniforms[\"direction\"].value = BlurDirectionX;\n            renderer.setRenderTarget(this.m_renderTargetsHorizontal[i]);\n            renderer.clear();\n            renderer.render(this.m_scene, this.m_camera);\n\n            this.m_separableBlurMaterials[i].uniforms[\n                \"colorTexture\"\n            ].value = this.m_renderTargetsHorizontal[i].texture;\n            this.m_separableBlurMaterials[i].uniforms[\"direction\"].value = BlurDirectionY;\n            renderer.setRenderTarget(this.m_renderTargetsVertical[i]);\n            renderer.clear();\n            renderer.render(this.m_scene, this.m_camera);\n\n            inputRenderTarget = this.m_renderTargetsVertical[i];\n        }\n\n        // Composite all the mips\n        this.m_quad.material = this.m_compositeMaterial;\n        this.m_compositeMaterial.uniforms[\"bloomStrength\"].value = this.strength;\n        this.m_compositeMaterial.uniforms[\"bloomRadius\"].value = this.radius;\n        this.m_compositeMaterial.uniforms[\"bloomTintColors\"].value = this.m_bloomTintColors;\n\n        renderer.setRenderTarget(this.m_renderTargetsHorizontal[0]);\n        renderer.clear();\n        renderer.render(this.m_scene, this.m_camera);\n\n        // Blend it additively over the input texture\n        this.m_quad.material = this.m_materialCopy;\n        this.m_copyUniforms[\"tDiffuse\"].value = this.m_renderTargetsHorizontal[0].texture;\n\n        if (this.renderToScreen) {\n            renderer.setRenderTarget(null!);\n            renderer.render(this.m_scene, this.m_camera);\n        } else {\n            renderer.setRenderTarget(readBuffer);\n            renderer.render(this.m_scene, this.m_camera);\n        }\n        // tslint:enable:no-string-literal\n    }\n\n    getSeperableBlurMaterial(kernelRadius: number): THREE.ShaderMaterial {\n        return new THREE.ShaderMaterial({\n            defines: {\n                KERNEL_RADIUS: kernelRadius,\n                SIGMA: kernelRadius\n            },\n\n            uniforms: {\n                colorTexture: { value: null },\n                texSize: { value: new THREE.Vector2(0.5, 0.5) },\n                direction: { value: new THREE.Vector2(0.5, 0.5) }\n            },\n\n            vertexShader: `varying vec2 vUv;\n            void main() {\n                vUv = uv;\n                gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n            }`,\n\n            fragmentShader: `#include <common>\n            varying vec2 vUv;\n            uniform sampler2D colorTexture;\n            uniform vec2 texSize;\n            uniform vec2 direction;\n\n            float gaussianPdf(in float x, in float sigma) {\n                return 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;\n            }\n            void main() {\\n\\\n                vec2 invSize = 1.0 / texSize;\n                float fSigma = float(SIGMA);\n                float weightSum = gaussianPdf(0.0, fSigma);\n                vec3 diffuseSum = texture2D( colorTexture, vUv).rgb * weightSum;\n                for( int i = 1; i < KERNEL_RADIUS; i ++ ) {\n                    float x = float(i);\n                    float w = gaussianPdf(x, fSigma);\n                    vec2 uvOffset = direction * invSize * x;\n                    vec3 sample1 = texture2D( colorTexture, vUv + uvOffset).rgb;\n                    vec3 sample2 = texture2D( colorTexture, vUv - uvOffset).rgb;\n                    diffuseSum += (sample1 + sample2) * w;\n                    weightSum += 2.0 * w;\n                }\n                gl_FragColor = vec4(diffuseSum/weightSum, 1.0);\n            }`\n        });\n    }\n\n    getCompositeMaterial(nMips: number): THREE.ShaderMaterial {\n        return new THREE.ShaderMaterial({\n            defines: {\n                NUM_MIPS: nMips\n            },\n\n            uniforms: {\n                blurTexture1: { value: null },\n                blurTexture2: { value: null },\n                blurTexture3: { value: null },\n                blurTexture4: { value: null },\n                blurTexture5: { value: null },\n                dirtTexture: { value: null },\n                bloomStrength: { value: 1.0 },\n                bloomFactors: { value: null },\n                bloomTintColors: { value: null },\n                bloomRadius: { value: 0.0 }\n            },\n\n            vertexShader: `varying vec2 vUv;\n                void main() {\n                    vUv = uv;\n                    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n                }`,\n\n            fragmentShader: `varying vec2 vUv;\n                uniform sampler2D blurTexture1;\n                uniform sampler2D blurTexture2;\n                uniform sampler2D blurTexture3;\n                uniform sampler2D blurTexture4;\n                uniform sampler2D blurTexture5;\n                uniform sampler2D dirtTexture;\n                uniform float bloomStrength;\n                uniform float bloomRadius;\n                uniform float bloomFactors[NUM_MIPS];\n                uniform vec3 bloomTintColors[NUM_MIPS];\n\n                float lerpBloomFactor(const in float factor) {\n                    float mirrorFactor = 1.2 - factor;\n                    return mix(factor, mirrorFactor, bloomRadius);\n                }\n\n                void main() {\n                    gl_FragColor = bloomStrength * (\nlerpBloomFactor(bloomFactors[0]) * vec4(bloomTintColors[0], 1.0) * texture2D(blurTexture1, vUv) +\nlerpBloomFactor(bloomFactors[1]) * vec4(bloomTintColors[1], 1.0) * texture2D(blurTexture2, vUv) +\nlerpBloomFactor(bloomFactors[2]) * vec4(bloomTintColors[2], 1.0) * texture2D(blurTexture3, vUv) +\nlerpBloomFactor(bloomFactors[3]) * vec4(bloomTintColors[3], 1.0) * texture2D(blurTexture4, vUv) +\nlerpBloomFactor(bloomFactors[4]) * vec4(bloomTintColors[4], 1.0) * texture2D(blurTexture5, vUv) );\n                }`\n        });\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Message sent by web worker that requests to resolve actual\n * URLs of it's dependencies.\n *\n * Main thread is expected.\n */\nexport interface WorkerBootstrapRequest {\n    type: \"worker-bootstrap-request\";\n\n    /// Names of dependencies, usually NPM package names.\n    dependencies: string[];\n}\n\nexport interface WorkerBootstrapResponse {\n    type: \"worker-bootstrap-response\";\n\n    /// Actual URL scripts requested in [[WorkerBootstrapRequest]].\n    resolvedDependencies: string[];\n}\n\nexport function isWorkerBootstrapRequest(message: any): message is WorkerBootstrapRequest {\n    return (\n        message &&\n        message.type === \"worker-bootstrap-request\" &&\n        Array.isArray(message.dependencies)\n    );\n}\n\nexport function isWorkerBootstrapResponse(message: any): message is WorkerBootstrapResponse {\n    return (\n        message &&\n        message.type === \"worker-bootstrap-response\" &&\n        Array.isArray(message.resolvedDependencies)\n    );\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    OrientedBox3,\n    Projection,\n    ProjectionType,\n    TileKey,\n    TilingScheme\n} from \"@here/harp-geoutils\";\nimport { assert } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\nimport { DataSource } from \"./DataSource\";\nimport { CalculationStatus, ElevationRangeSource } from \"./ElevationRangeSource\";\nimport { MapTileCuller } from \"./MapTileCuller\";\nimport { MapView } from \"./MapView\";\nimport { MapViewUtils, TileOffsetUtils } from \"./Utils\";\n\nconst tmpVectors3 = [new THREE.Vector3(), new THREE.Vector3()];\nconst tmpVector4 = new THREE.Vector4();\n\n/**\n * Represents a unique TileKey and the area it takes up on screen.\n *\n * Note, in certain tiling projections, it is possible to have an offset, which represents a tile\n * which has fully wrapped around, hence this defaults to 0 to simplify usage for projections which\n * don't require it.\n */\nexport class TileKeyEntry {\n    constructor(\n        public tileKey: TileKey,\n        public area: number,\n        public offset: number = 0,\n        public minElevation: number = 0,\n        public maxElevation: number = 0,\n        public distance: number = 0\n    ) {}\n}\n\nfunction getGeoBox(tilingScheme: TilingScheme, childTileKey: TileKey, offset: number) {\n    const geoBox = tilingScheme.getGeoBox(childTileKey);\n    const longitudeOffset = 360.0 * offset;\n    geoBox.northEast.longitude += longitudeOffset;\n    geoBox.southWest.longitude += longitudeOffset;\n    return geoBox;\n}\n\n/**\n * Map tile keys to TileKeyEntry.\n * Keys are a combination of morton code and tile offset,\n * see [[TileOffsetUtils.getKeyForTileKeyAndOffset]].\n */\ntype TileKeyEntries = Map<number, TileKeyEntry>;\n\n/**\n * Map zoom level to map of visible tile key entries\n */\ntype ZoomLevelTileKeyMap = Map<number, TileKeyEntries>;\n\n/**\n * Result of frustum intersection\n */\ninterface IntersectionResult {\n    /**\n     * Tiles intersected by the frustum per zoom level.\n     */\n    readonly tileKeyEntries: ZoomLevelTileKeyMap;\n\n    /**\n     * True if the intersection was calculated using precise elevation data, false if it's an\n     * approximation.\n     */\n    calculationFinal: boolean;\n}\n\n/**\n * Computes the tiles intersected by the frustum defined by the current camera setup.\n */\nexport class FrustumIntersection {\n    private readonly m_frustum: THREE.Frustum = new THREE.Frustum();\n    // used to project global coordinates into camera local coordinates\n    private readonly m_viewProjectionMatrix = new THREE.Matrix4();\n    private readonly m_mapTileCuller: MapTileCuller;\n    private m_rootTileKeys: TileKeyEntry[] = [];\n    private readonly m_tileKeyEntries: ZoomLevelTileKeyMap = new Map();\n\n    constructor(\n        private readonly m_camera: THREE.PerspectiveCamera,\n        readonly mapView: MapView,\n        private readonly m_extendedFrustumCulling: boolean,\n        private readonly m_tileWrappingEnabled: boolean,\n        private readonly m_enableMixedLod: boolean\n    ) {\n        this.m_mapTileCuller = new MapTileCuller(m_camera);\n    }\n\n    /**\n     * Return camera used for generating frustum.\n     */\n    get camera(): THREE.PerspectiveCamera {\n        return this.m_camera;\n    }\n\n    /**\n     * Return projection used to convert geo coordinates to world coordinates.\n     */\n    get projection(): Projection {\n        return this.mapView.projection;\n    }\n\n    /**\n     * Updates the frustum to match the current camera setup.\n     */\n    updateFrustum(projectionMatrixOverride?: THREE.Matrix4) {\n        this.m_viewProjectionMatrix.multiplyMatrices(\n            projectionMatrixOverride !== undefined\n                ? projectionMatrixOverride\n                : this.m_camera.projectionMatrix,\n            this.m_camera.matrixWorldInverse\n        );\n\n        this.m_frustum.setFromProjectionMatrix(this.m_viewProjectionMatrix);\n\n        if (this.m_extendedFrustumCulling) {\n            this.m_mapTileCuller.setup();\n        }\n        this.computeRequiredInitialRootTileKeys(this.m_camera.position);\n    }\n\n    /**\n     * Computes the tiles intersected by the updated frustum, see [[updateFrustum]].\n     *\n     * @param tilingScheme The tiling scheme used to generate the tiles.\n     * @param elevationRangeSource Source of elevation range data if any.\n     * @param zoomLevels A list of zoom levels to render.\n     * @param dataSources A list of data sources to render.\n     * @returns The computation result, see [[FrustumIntersection.Result]].\n     */\n    compute(\n        tilingScheme: TilingScheme,\n        elevationRangeSource: ElevationRangeSource | undefined,\n        zoomLevels: number[],\n        dataSources: DataSource[]\n    ): IntersectionResult {\n        this.m_tileKeyEntries.clear();\n        let calculationFinal = true;\n\n        // Compute target tile area in clip space size.\n        // A tile should take up roughly 256x256 pixels on screen in accordance to\n        // the zoom level chosen by [MapViewUtils.calculateZoomLevelFromDistance].\n        assert(this.mapView.viewportHeight !== 0);\n        const targetTileArea = Math.pow(256 / this.mapView.viewportHeight, 2);\n        const useElevationRangeSource: boolean =\n            elevationRangeSource !== undefined &&\n            elevationRangeSource.getTilingScheme() === tilingScheme;\n        const obbIntersections =\n            this.mapView.projection.type === ProjectionType.Spherical || useElevationRangeSource;\n        const tileBounds = obbIntersections ? new OrientedBox3() : new THREE.Box3();\n        const uniqueZoomLevels = new Set(zoomLevels);\n\n        // create tile key map per zoom level\n        for (const zoomLevel of uniqueZoomLevels) {\n            this.m_tileKeyEntries.set(zoomLevel, new Map());\n        }\n        for (const item of this.m_rootTileKeys) {\n            const tileKeyEntry = new TileKeyEntry(\n                item.tileKey,\n                Infinity,\n                item.offset,\n                item.minElevation,\n                item.maxElevation\n            );\n            for (const zoomLevel of uniqueZoomLevels) {\n                const tileKeyEntries = this.m_tileKeyEntries.get(zoomLevel)!;\n                tileKeyEntries.set(\n                    TileOffsetUtils.getKeyForTileKeyAndOffset(item.tileKey, item.offset),\n                    tileKeyEntry\n                );\n            }\n        }\n\n        const workList = [...this.m_rootTileKeys.values()];\n        while (workList.length > 0) {\n            const tileEntry = workList.pop();\n\n            if (tileEntry === undefined) {\n                break;\n            }\n\n            // Stop subdivision if hightest visible level is reached\n            const tileKey = tileEntry.tileKey;\n            const subdivide = dataSources.some((ds, i) =>\n                ds.shouldSubdivide(zoomLevels[i], tileKey)\n            );\n            if (!subdivide) {\n                continue;\n            }\n\n            // Stop subdivision if area of tile is too small(mixed LOD only)\n            if (this.m_enableMixedLod && tileEntry.area < targetTileArea) {\n                continue;\n            }\n\n            const parentTileKey = TileOffsetUtils.getKeyForTileKeyAndOffset(\n                tileKey,\n                tileEntry.offset\n            );\n\n            // delete parent tile key from applicable zoom levels\n            for (const zoomLevel of uniqueZoomLevels) {\n                if (tileKey.level >= zoomLevel) {\n                    continue;\n                }\n\n                const tileKeyEntries = this.m_tileKeyEntries.get(zoomLevel)!;\n                tileKeyEntries.delete(parentTileKey);\n            }\n\n            for (const childTileKey of tilingScheme.getSubTileKeys(tileKey)) {\n                const offset = tileEntry.offset;\n                const tileKeyAndOffset = TileOffsetUtils.getKeyForTileKeyAndOffset(\n                    childTileKey,\n                    offset\n                );\n\n                const geoBox = getGeoBox(tilingScheme, childTileKey, offset);\n\n                // For tiles without elevation range source, default 0 (getGeoBox always\n                // returns box with altitude min/max equal to zero) will be propagated as\n                // min and max elevation, these tiles most probably contains features that\n                // lays directly on the ground surface.\n                if (useElevationRangeSource) {\n                    const range = elevationRangeSource!.getElevationRange(childTileKey);\n                    geoBox.southWest.altitude = range.minElevation;\n                    geoBox.northEast.altitude = range.maxElevation;\n                    calculationFinal =\n                        calculationFinal &&\n                        range.calculationStatus === CalculationStatus.FinalPrecise;\n                }\n\n                this.mapView.projection.projectBox(geoBox, tileBounds);\n                const { area, distance } = this.computeTileAreaAndDistance(tileBounds);\n\n                if (area > 0) {\n                    const subTileEntry = new TileKeyEntry(\n                        childTileKey,\n                        area,\n                        offset,\n                        geoBox.southWest.altitude, // minElevation\n                        geoBox.northEast.altitude, // maxElevation\n                        distance\n                    );\n\n                    // insert sub tile entry into tile entries map per zoom level\n                    for (const zoomLevel of uniqueZoomLevels) {\n                        if (subTileEntry.tileKey.level > zoomLevel) {\n                            continue;\n                        }\n\n                        const tileKeyEntries = this.m_tileKeyEntries.get(zoomLevel)!;\n                        tileKeyEntries.set(tileKeyAndOffset, subTileEntry);\n                    }\n\n                    workList.push(subTileEntry);\n                }\n            }\n        }\n        return { tileKeyEntries: this.m_tileKeyEntries, calculationFinal };\n    }\n\n    /**\n     * Estimate screen space area of tile and distance to center of tile\n     * @param tileBounds The bounding volume of a tile\n     * @return Area estimate and distance to tile center in clip space\n     */\n    private computeTileAreaAndDistance(\n        tileBounds: THREE.Box3 | OrientedBox3\n    ): { area: number; distance: number } {\n        if (tileBounds instanceof THREE.Box3) {\n            if (\n                (this.m_extendedFrustumCulling &&\n                    !this.m_mapTileCuller.frustumIntersectsTileBox(tileBounds)) ||\n                !this.m_frustum.intersectsBox(tileBounds)\n            ) {\n                return {\n                    area: 0,\n                    distance: Infinity\n                };\n            }\n        } else if (!tileBounds.intersects(this.m_frustum)) {\n            return {\n                area: 0,\n                distance: Infinity\n            };\n        }\n\n        // Project tile bounds center\n        const center = tileBounds.getCenter(tmpVectors3[0]);\n        const projectedPoint = tmpVector4\n            .set(center.x, center.y, center.z, 1.0)\n            .applyMatrix4(this.m_viewProjectionMatrix);\n\n        // Estimate objects screen space size with diagonal of bounds\n        // Dividing by w projects object size to screen space\n        const size = tileBounds.getSize(tmpVectors3[1]);\n        const objectSize = (0.5 * size.length()) / projectedPoint.w;\n\n        return {\n            area: objectSize * objectSize,\n            distance: projectedPoint.z / projectedPoint.w\n        };\n    }\n\n    /**\n     * Create a list of root nodes to test against the frustum. The root nodes each start at level 0\n     * and have an offset (see [[Tile]]) based on:\n     * - the current position [[worldCenter]].\n     * - the height of the camera above the world.\n     * - the field of view of the camera (the maximum value between the horizontal / vertical\n     *   values)\n     * - the tilt of the camera (because we see more tiles when tilted).\n     *\n     * @param worldCenter The center of the camera in world space.\n     */\n    private computeRequiredInitialRootTileKeys(worldCenter: THREE.Vector3) {\n        this.m_rootTileKeys = [];\n        const rootTileKey = TileKey.fromRowColumnLevel(0, 0, 0);\n        const tileWrappingEnabled = this.mapView.projection.type === ProjectionType.Planar;\n\n        if (!tileWrappingEnabled || !this.m_tileWrappingEnabled) {\n            this.m_rootTileKeys.push(new TileKeyEntry(rootTileKey, Infinity, 0, 0));\n            return;\n        }\n\n        const worldGeoPoint = this.mapView.projection.unprojectPoint(worldCenter);\n        const startOffset = Math.round(worldGeoPoint.longitude / 360.0);\n\n        // This algorithm computes the number of offsets we need to test. The following diagram may\n        // help explain the algorithm below.\n        //\n        //   |🎥\n        //   |.\\ .\n        //   | . \\  .\n        // z |  .  \\   .c2\n        //   |  c1.  \\b    .\n        //   |     .   \\      .\n        //___|a___d1.____\\e______.d2______f\n        //\n        // Where:\n        // - 🎥 is the camera\n        // - z is the height of the camera above the ground.\n        // - a is a right angle.\n        // - b is the look at vector of the camera.\n        // - c1 and c2 are the frustum planes of the camera.\n        // - c1 to c2 is the fov.\n        // - d1 and d2 are the intersection points of the frustum with the world plane.\n        // - e is the tilt/pitch of the camera.\n        // - f is the world\n        //\n        // The goal is to find the distance from e->d2. This is a longitude value, and we convert it\n        // to some offset range. Note e->d2 >= e->d1 (because we can't have a negative tilt).\n        // To find e->d2, we use the right triangle 🎥, a, d2 and subtract the distance a->d2 with\n        // a->e.\n        // a->d2 is found using the angle between a and d2 from the 🎥, this is simply e (because of\n        // similar triangles, angle between a, 🎥 and e equals the tilt) + half of the fov (because\n        // we need the angle between e, 🎥 and d2) and using trigonometry, result is therefore:\n        // (tan(a->d2) * z).\n        // a->e needs just the tilt and trigonometry to compute, result is: (tan(a->e) * z).\n\n        const camera = this.m_camera;\n        const cameraPitch = MapViewUtils.extractAttitude(this.mapView, camera).pitch;\n        // Ensure that the aspect is >= 1.\n        const aspect = camera.aspect > 1 ? camera.aspect : 1 / camera.aspect;\n        // Angle between a->d2, note, the fov is vertical, hence we translate to horizontal.\n        const totalAngleRad = THREE.MathUtils.degToRad((camera.fov * aspect) / 2) + cameraPitch;\n        // Length a->d2\n        const worldLengthHorizontalFull = Math.tan(totalAngleRad) * camera.position.z;\n        // Length a->e\n        const worldLengthHorizontalSmallerHalf = Math.tan(cameraPitch) * camera.position.z;\n        // Length e -> d2\n        const worldLengthHorizontal = worldLengthHorizontalFull - worldLengthHorizontalSmallerHalf;\n        const worldLeftPoint = new THREE.Vector3(\n            worldCenter.x - worldLengthHorizontal,\n            worldCenter.y,\n            worldCenter.z\n        );\n        const worldLeftGeoPoint = this.mapView.projection.unprojectPoint(worldLeftPoint);\n        // We multiply by SQRT2 because we need to account for a rotated view (in which case there\n        // are more tiles that can be seen).\n        const offsetRange = THREE.MathUtils.clamp(\n            Math.ceil(\n                Math.abs((worldGeoPoint.longitude - worldLeftGeoPoint.longitude) / 360) * Math.SQRT2\n            ),\n            0,\n            // We can store currently up to 16 unique keys(2^4, where 4 is the default bit-shift\n            // value which is used currently in the [[VisibleTileSet]] methods) hence we can have a\n            // maximum range of 7 (because 2*7+1 = 15).\n            7\n        );\n        for (\n            let offset = -offsetRange + startOffset;\n            offset <= offsetRange + startOffset;\n            offset++\n        ) {\n            this.m_rootTileKeys.push(new TileKeyEntry(rootTileKey, Infinity, offset, 0, 0));\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\n/**\n * Second step tile culling: Do additional check for intersection of box and frustum by checking if\n * the frustum is outside any plane of the tiles `bbox` (oriented, not AABB). It's in the inverse of\n * the standard frustum test, which excludes many cases where the large terrain tiles straddle the\n * planes of the frustum.\n *\n * @see http://www.iquilezles.org/www/articles/frustumcorrect/frustumcorrect.htm\n */\nexport class MapTileCuller {\n    private m_globalFrustumMin = new THREE.Vector3();\n    private m_globalFrustumMax = new THREE.Vector3();\n\n    private m_frustumCorners = [\n        new THREE.Vector3(),\n        new THREE.Vector3(),\n        new THREE.Vector3(),\n        new THREE.Vector3(),\n        new THREE.Vector3(),\n        new THREE.Vector3(),\n        new THREE.Vector3(),\n        new THREE.Vector3()\n    ];\n\n    /**\n     * Constructs a `MapTileCuller`.\n     *\n     * @param m_camera A `THREE.Camera`.\n     */\n    constructor(private m_camera: THREE.Camera) {}\n\n    /**\n     * Sets up culling and computes frustum corners. You mus call this function before the culling\n     * starts.\n     */\n    setup() {\n        const frustumCorners = this.getFrustumCorners();\n\n        const matrix = this.m_camera.matrixWorld;\n\n        this.m_globalFrustumMin.set(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n        this.m_globalFrustumMax.set(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\n\n        for (const frustumCorner of frustumCorners) {\n            frustumCorner.applyMatrix4(matrix);\n\n            this.m_globalFrustumMin.x = Math.min(this.m_globalFrustumMin.x, frustumCorner.x);\n            this.m_globalFrustumMin.y = Math.min(this.m_globalFrustumMin.y, frustumCorner.y);\n            this.m_globalFrustumMin.z = Math.min(this.m_globalFrustumMin.z, frustumCorner.z);\n\n            this.m_globalFrustumMax.x = Math.max(this.m_globalFrustumMax.x, frustumCorner.x);\n            this.m_globalFrustumMax.y = Math.max(this.m_globalFrustumMax.y, frustumCorner.y);\n            this.m_globalFrustumMax.z = Math.max(this.m_globalFrustumMax.z, frustumCorner.z);\n        }\n    }\n\n    /**\n     * Checks if the tile's bounding box intersects with the current view's frustum.\n     *\n     * @param tileBounds The bounding box for the tile.\n     */\n    frustumIntersectsTileBox(tileBounds: THREE.Box3): boolean {\n        const globalFrustumMin = this.m_globalFrustumMin;\n        const globalFrustumMax = this.m_globalFrustumMax;\n\n        if (\n            globalFrustumMax.x < tileBounds.min.x ||\n            globalFrustumMax.y < tileBounds.min.y ||\n            globalFrustumMax.z < tileBounds.min.z ||\n            globalFrustumMin.x > tileBounds.max.x ||\n            globalFrustumMin.y > tileBounds.max.y ||\n            globalFrustumMin.z > tileBounds.max.z\n        ) {\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Returns the eight corners of the frustum.\n     */\n    private getFrustumCorners(): THREE.Vector3[] {\n        const frustumCorners = this.m_frustumCorners;\n        const invProjMatrix = (this.m_camera as any).projectionMatrixInverse as THREE.Matrix4;\n\n        let cornerIndex = 0;\n\n        function addPoint(x: number, y: number, z: number) {\n            frustumCorners[cornerIndex++].set(x, y, z).applyMatrix4(invProjMatrix);\n        }\n\n        const w = 1;\n        const h = 1;\n        const n = -1;\n        const f = 1;\n\n        // near\n        addPoint(-w, -h, n);\n        addPoint(w, -h, n);\n        addPoint(-w, h, n);\n        addPoint(w, h, n);\n\n        // far\n        addPoint(-w, -h, f);\n        addPoint(w, -h, f);\n        addPoint(-w, h, f);\n        addPoint(w, h, f);\n\n        return frustumCorners;\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeometryKind, GeometryKindSet } from \"@here/harp-datasource-protocol\";\nimport { MapObjectAdapter } from \"../MapObjectAdapter\";\nimport { MapView } from \"../MapView\";\nimport { Tile } from \"../Tile\";\nimport { TileGeometryLoader } from \"./TileGeometryLoader\";\n\ntype TileUpdateCallback = (tile: Tile) => void;\n\n/**\n * Manages the content (the geometries) of a tile.\n */\nexport class TileGeometryManager {\n    /**\n     * The set of geometry kinds that is enabled. Their geometry will be created after decoding.\n     */\n    get enabledGeometryKinds(): GeometryKindSet {\n        return this.enabledKinds;\n    }\n\n    set enabledGeometryKinds(kinds: GeometryKindSet) {\n        this.enabledKinds = kinds;\n    }\n\n    /**\n     * The set of geometry kinds that is disabled. Their geometry will not be created after\n     * decoding.\n     */\n    get disabledGeometryKinds(): GeometryKindSet {\n        return this.disabledKinds;\n    }\n\n    set disabledGeometryKinds(kinds: GeometryKindSet) {\n        this.disabledKinds = kinds;\n    }\n\n    /**\n     * The set of geometry kinds that is hidden. Their geometry may be created, but it is hidden\n     * until the method `hideKind` with an argument of `addOrRemoveToHiddenSet:false` is called.\n     */\n    get hiddenGeometryKinds(): GeometryKindSet {\n        return this.hiddenKinds;\n    }\n\n    set hiddenGeometryKinds(kinds: GeometryKindSet) {\n        this.hiddenKinds = kinds;\n        this.incrementVisibilityCounter();\n    }\n\n    /**\n     * If set to `true`, the filters of enabled/disabledGeometryKinds are applied, otherwise they\n     * are ignored.\n     */\n    enableFilterByKind: boolean = true;\n\n    protected get visibilityCounter(): number {\n        return this.m_visibilityCounter;\n    }\n\n    protected enabledKinds: GeometryKindSet = new GeometryKindSet();\n    protected disabledKinds: GeometryKindSet = new GeometryKindSet();\n    protected hiddenKinds: GeometryKindSet = new GeometryKindSet();\n\n    protected m_tileUpdateCallback: TileUpdateCallback | undefined;\n\n    /**\n     * Optimization for evaluation in `update()` method. Only if a kind is hidden/unhidden, the\n     * visibility of the kinds is applied to their geometries.\n     */\n    private m_visibilityCounter: number = 1;\n\n    /**\n     * Creates an instance of `TileGeometryManager` with a reference to the [[MapView]].\n     */\n    constructor(protected mapView: MapView) {}\n\n    /**\n     * Initialize the [[Tile]] with the TileGeometryManager.\n     */\n    initTile(tile: Tile): void {\n        if (tile.dataSource.useGeometryLoader) {\n            tile.tileGeometryLoader = new TileGeometryLoader(tile);\n        }\n    }\n\n    /**\n     * Process the [[Tile]]s for rendering. May alter the content of the tile per frame.\n     */\n    updateTiles(tiles: Tile[]): void {\n        for (const tile of tiles) {\n            const geometryLoader = tile.tileGeometryLoader;\n            if (geometryLoader !== undefined) {\n                geometryLoader.update(\n                    this.enableFilterByKind ? this.enabledGeometryKinds : undefined,\n                    this.enableFilterByKind ? this.disabledGeometryKinds : undefined\n                );\n                if (this.m_tileUpdateCallback) {\n                    this.m_tileUpdateCallback(tile);\n                }\n            }\n        }\n\n        // If the visibility status of the kinds changed since the last update, the new visibility\n        // status is applied (again).\n        if (this.updateTileObjectVisibility(tiles)) {\n            this.mapView.update();\n        }\n    }\n\n    /**\n     * Clear the enabled, disabled and hidden sets.\n     */\n    clear(): void {\n        this.enabledKinds.clear();\n        this.disabledKinds.clear();\n        this.hiddenKinds.clear();\n    }\n\n    /**\n     * Enable a [[GeometryKind]] by adding it to the enabled set, or remove it from that set.\n     *\n     * @param {(GeometryKind | GeometryKind[] | GeometryKindSet)} kind The kind to add or remove\n     *      from the enabled set.\n     * @param {boolean} addOrRemoveToEnabledSet Pass in `true` to add the kind to the set, pass in\n     *      `false` to remove from that set.\n     */\n    enableKind(\n        kind: GeometryKind | GeometryKind[] | GeometryKindSet,\n        addOrRemoveToEnabledSet: boolean = true\n    ): void {\n        this.enableDisableKinds(this.enabledKinds, kind, addOrRemoveToEnabledSet);\n    }\n\n    /**\n     * Disable a [[GeometryKind]] by adding it to the disabled set, or remove it from that set.\n     *\n     * @param {(GeometryKind | GeometryKind[] | GeometryKindSet)} kind The kind to add or remove\n     *      from the disabled set.\n     * @param {boolean} addOrRemoveToHiddenSet Pass in `true` to add the kind to the set, pass in\n     *      `false` to remove from that set.\n     */\n    disableKind(\n        kind: GeometryKind | GeometryKind[] | GeometryKindSet,\n        addOrRemoveToDisabledSet: boolean = true\n    ): void {\n        this.enableDisableKinds(this.disabledKinds, kind, addOrRemoveToDisabledSet);\n    }\n\n    /**\n     * Hide a [[GeometryKind]] by adding it to the hidden set, or remove it from that set.\n     *\n     * @param {(GeometryKind | GeometryKind[] | GeometryKindSet)} kind The kind to add or remove\n     *      from the hidden set.\n     * @param {boolean} addOrRemoveToHiddenSet Pass in `true` to hide the kind(s), `false` to show\n     *      it again.\n     */\n    hideKind(\n        kind: GeometryKind | GeometryKind[] | GeometryKindSet,\n        addOrRemoveToHiddenSet: boolean = true\n    ): void {\n        let visibilityHasChanged = false;\n\n        if (Array.isArray(kind) || kind instanceof Set) {\n            for (const oneKind of kind) {\n                const visibilityChange = this.addRemove(\n                    this.hiddenKinds,\n                    oneKind,\n                    addOrRemoveToHiddenSet\n                );\n                visibilityHasChanged = visibilityHasChanged || visibilityChange;\n            }\n        } else {\n            visibilityHasChanged = this.addRemove(this.hiddenKinds, kind, addOrRemoveToHiddenSet);\n        }\n\n        // Will be evaluated in the next update()\n        if (visibilityHasChanged) {\n            this.incrementVisibilityCounter();\n        }\n    }\n\n    /**\n     * Return all [[GeometryKind]]s that are contained in the tiles.\n     *\n     * @param {IterableIterator<Tile>} tiles The\n     * @returns {GeometryKindSet}\n     */\n    getAvailableKinds(tiles: IterableIterator<Tile>): GeometryKindSet {\n        const visibleKinds: GeometryKindSet = new GeometryKindSet();\n        for (const tile of tiles) {\n            const geometryLoader = tile.tileGeometryLoader;\n            if (geometryLoader !== undefined) {\n                const tileKinds = geometryLoader.availableGeometryKinds;\n                if (tileKinds !== undefined) {\n                    for (const kind of tileKinds) {\n                        visibleKinds.add(kind);\n                    }\n                }\n            }\n        }\n        return visibleKinds;\n    }\n\n    /**\n     * Apply the visibility status taken from the `hiddenKinds` to all geometries in the specified\n     * tiles.\n     *\n     * @param {Tile[]} tiles List of [[Tiles]] to process the visibility status of.\n     */\n    updateTileObjectVisibility(tiles: Tile[]): boolean {\n        let needUpdate = false;\n\n        for (const tile of tiles) {\n            if (tile.objects.length === 0 || tile.visibilityCounter === this.visibilityCounter) {\n                continue;\n            }\n            tile.visibilityCounter = this.visibilityCounter;\n\n            for (const object of tile.objects) {\n                const objectAdapter = MapObjectAdapter.get(object);\n                const geometryKind = objectAdapter?.kind;\n                if (geometryKind !== undefined) {\n                    const nowVisible = !geometryKind.some(kind => this.hiddenKinds.has(kind));\n                    needUpdate = needUpdate || object.visible !== nowVisible;\n                    object.visible = nowVisible;\n                }\n            }\n        }\n        return needUpdate;\n    }\n\n    /**\n     * Sets a callback that will be called for every updated tile on [[updateTiles]].\n     *\n     * @param {TileUpdateCallback} callback The callback that will be called after a tile has been\n     * updated, passing the updated tile as argument. If `undefined`, a previously set callback will\n     * be cleared.\n     */\n    setTileUpdateCallback(callback?: TileUpdateCallback): void {\n        this.m_tileUpdateCallback = callback;\n    }\n\n    protected incrementVisibilityCounter(): number {\n        return ++this.m_visibilityCounter;\n    }\n\n    /**\n     * Add or remove a kind|array of kinds|set of kinds from the specified kind set.\n     *\n     * @hidden\n     * @param {GeometryKindSet} set\n     * @param {(GeometryKind | GeometryKind[] | GeometryKindSet)} kind\n     * @param {boolean} addToSet\n     */\n    private enableDisableKinds(\n        set: GeometryKindSet,\n        kind: GeometryKind | GeometryKind[] | GeometryKindSet,\n        addToSet: boolean\n    ): void {\n        if (Array.isArray(kind)) {\n            for (const oneKind of kind as GeometryKind[]) {\n                this.addRemove(set, oneKind, addToSet);\n            }\n        } else if (kind instanceof Set) {\n            const kindSet = kind as GeometryKindSet;\n            for (const oneKind of kindSet) {\n                this.addRemove(set, oneKind, addToSet);\n            }\n        } else if (kind !== undefined) {\n            this.addRemove(set, kind, addToSet);\n        }\n    }\n\n    /**\n     * Add or remove a single kind from the specified kind set.\n     *\n     * @hidden\n     * @param {GeometryKindSet} set\n     * @param {(GeometryKind | GeometryKind[] | GeometryKindSet)} kind\n     * @param {boolean} addToSet\n     */\n    private addRemove(kindsSet: GeometryKindSet, kind: GeometryKind, addToSet: boolean): boolean {\n        if (addToSet) {\n            if (!kindsSet.has(kind)) {\n                kindsSet.add(kind);\n                return true;\n            }\n        } else {\n            if (kindsSet.has(kind)) {\n                kindsSet.delete(kind);\n                return true;\n            }\n        }\n        return false;\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport {\n    DecodedTile,\n    GeometryKind,\n    GeometryKindSet,\n    isExtrudedLineTechnique,\n    isExtrudedPolygonTechnique,\n    isFillTechnique,\n    isLineMarkerTechnique,\n    isLineTechnique,\n    isPoiTechnique,\n    isSegmentsTechnique,\n    isSolidLineTechnique,\n    isTextTechnique,\n    Technique\n} from \"@here/harp-datasource-protocol\";\nimport { PerformanceTimer } from \"@here/harp-utils\";\n\nimport { PerformanceStatistics } from \"../Statistics\";\nimport { Tile } from \"../Tile\";\nimport { TileGeometryCreator } from \"./TileGeometryCreator\";\n\n/**\n * Loads the geometry for its [[Tile]]. Loads all geometry in a single step.\n */\nexport class TileGeometryLoader {\n    /**\n     * Make sure that all technique have their geometryKind set, either from the theme or their\n     * default value.\n     *\n     * Also gather set of the [[GeometryKind]]s found in the techniques and return it.\n     *\n     * @param {DecodedTile} decodedTile\n     * @returns {GeometryKindSet} The set of kinds used in the decodeTile.\n     */\n    static prepareAvailableGeometryKinds(decodedTile: DecodedTile): GeometryKindSet {\n        const foundSet: GeometryKindSet = new GeometryKindSet();\n\n        for (const technique of decodedTile.techniques) {\n            const geometryKind = TileGeometryLoader.compileGeometryKind(technique);\n\n            if (geometryKind instanceof Set) {\n                for (const kind of geometryKind) {\n                    foundSet.add(kind);\n                }\n            } else {\n                foundSet.add(geometryKind);\n            }\n        }\n        return foundSet;\n    }\n\n    /**\n     * Make sure that the technique has its geometryKind set, either from the theme or their default\n     * value.\n     *\n     * @param {Technique} technique\n     */\n    static compileGeometryKind(technique: Technique): GeometryKind | GeometryKindSet {\n        // tslint:disable-next-line: deprecation\n        let geometryKind = technique.kind;\n\n        // Set default kind based on technique.\n        if (geometryKind === undefined) {\n            if (isFillTechnique(technique)) {\n                geometryKind = GeometryKind.Area;\n            } else if (\n                isLineTechnique(technique) ||\n                isSolidLineTechnique(technique) ||\n                isSegmentsTechnique(technique) ||\n                isExtrudedLineTechnique(technique)\n            ) {\n                geometryKind = GeometryKind.Line;\n            } else if (isExtrudedPolygonTechnique(technique)) {\n                geometryKind = GeometryKind.Building;\n            } else if (\n                isPoiTechnique(technique) ||\n                isLineMarkerTechnique(technique) ||\n                isTextTechnique(technique)\n            ) {\n                geometryKind = GeometryKind.Label;\n            } else {\n                geometryKind = GeometryKind.All;\n            }\n\n            // tslint:disable-next-line: deprecation\n            technique.kind = geometryKind;\n        } else if (Array.isArray(geometryKind)) {\n            // tslint:disable-next-line: deprecation\n            geometryKind = technique.kind = new GeometryKindSet(geometryKind);\n        }\n\n        return geometryKind;\n    }\n\n    private m_decodedTile?: DecodedTile;\n    private m_isFinished: boolean = false;\n    private m_availableGeometryKinds: GeometryKindSet | undefined;\n    private m_enabledKinds: GeometryKindSet | undefined;\n    private m_disabledKinds: GeometryKindSet | undefined;\n    private m_timeout: any;\n\n    constructor(private m_tile: Tile) {}\n\n    /**\n     * The [[Tile]] this `TileGeometryLoader` is managing.\n     */\n    get tile(): Tile {\n        return this.m_tile;\n    }\n\n    /**\n     * `True` if all geometry of the `Tile` has been loaded and the loading process is finished.\n     */\n    get isFinished(): boolean {\n        return this.m_isFinished;\n    }\n\n    /**\n     * `True` if geometry of a `Tile` has been loaded but is not fully processed.\n     */\n    get geometryCreationPending(): boolean {\n        // Geometry loading not yet finished and timeout already set, but not yet processing\n        // (m_timeout !== undefined), or timeout callback already in progress\n        // (m_timeout === undefined), but decoded tile still not reset.\n        return !this.isFinished && this.m_decodedTile !== undefined;\n    }\n\n    /**\n     * `True` if the basic geometry has been loaded, and the `Tile` is ready  for display.\n     */\n    get basicGeometryLoaded(): boolean {\n        return this.m_tile.hasGeometry;\n    }\n\n    /**\n     * `True` if all geometry of the `Tile` has been loaded.\n     */\n    get allGeometryLoaded(): boolean {\n        return this.m_isFinished;\n    }\n\n    /**\n     * Set the [[DecodedTile]] of the tile. Is called after the decoded tile has been loaded, and\n     * prepares its content for later processing in the 'updateXXX' methods.\n     *\n     * @param {DecodedTile} decodedTile The decoded tile with the flat geometry data belonging to\n     *      this tile.\n     * @returns {DecodedTile} The processed decoded tile.\n     */\n    setDecodedTile(decodedTile: DecodedTile): DecodedTile {\n        this.m_decodedTile = decodedTile;\n\n        if (this.m_decodedTile !== undefined) {\n            this.m_availableGeometryKinds = TileGeometryLoader.prepareAvailableGeometryKinds(\n                this.m_decodedTile\n            );\n        }\n        return this.m_decodedTile;\n    }\n\n    /**\n     * The kinds of geometry stored in this [[Tile]].\n     */\n    get availableGeometryKinds(): GeometryKindSet | undefined {\n        return this.m_availableGeometryKinds;\n    }\n\n    /**\n     * Start with or continue with loading geometry. Called repeatedly until `isFinished` is `true`.\n     */\n    update(\n        enabledKinds: GeometryKindSet | undefined,\n        disabledKinds: GeometryKindSet | undefined\n    ): void {\n        const tile = this.tile;\n\n        // Cheap sanity check, do it first so no longer processing is needed.\n        if (this.isFinished) {\n            return;\n        }\n\n        // Check if tile should be already discarded (invisible, disposed).\n        // If the tile is not ready for display, or if it has become invisible while being loaded,\n        // for example by moving the camera, the tile is not finished and its geometry is not\n        // created. This is an optimization for fast camera movements and zooms.\n        if (this.discardNeedlessTile(tile)) {\n            return;\n        }\n\n        // Finish loading if tile has no data.\n        if (tile.tileLoader?.isFinished && tile.decodedTile === undefined) {\n            this.finish();\n            return;\n        }\n\n        // Geometry kinds have changed when loading, if so reset entire loading because\n        // this geometry loader generates all geometry at once.\n        if (\n            this.geometryCreationPending &&\n            !this.compareGeometryKinds(enabledKinds, disabledKinds)\n        ) {\n            this.reset();\n        }\n\n        // First time this tile is handled, or reset has been requested.\n        // Note: Finished condition already checked above.\n        if (!this.geometryCreationPending && tile.decodedTile !== undefined) {\n            TileGeometryCreator.instance.processTechniques(tile, enabledKinds, disabledKinds);\n            this.setGeometryKinds(enabledKinds, disabledKinds);\n            this.setDecodedTile(tile.decodedTile);\n            this.prepareForRender(enabledKinds, disabledKinds);\n        }\n    }\n\n    /**\n     * Dispose of any resources.\n     */\n    dispose(): void {\n        this.m_decodedTile = undefined;\n        // TODO: Release other resource: availableGeometryKind, enabled/disabled sets, timeout?\n    }\n\n    /**\n     * Reset the loader to its initial state and cancels any asynchronous work.\n     */\n    reset(): void {\n        this.m_availableGeometryKinds?.clear();\n        this.m_enabledKinds?.clear();\n        this.m_disabledKinds?.clear();\n\n        this.m_decodedTile = undefined;\n        this.m_isFinished = false;\n\n        if (this.m_timeout !== undefined) {\n            clearTimeout(this.m_timeout);\n            this.m_timeout = undefined;\n        }\n    }\n\n    private finish() {\n        this.m_tile.loadingFinished();\n        this.m_tile.removeDecodedTile();\n\n        this.m_decodedTile = undefined;\n        this.m_isFinished = true;\n\n        if (this.m_timeout !== undefined) {\n            clearTimeout(this.m_timeout);\n            this.m_timeout = undefined;\n        }\n    }\n\n    /**\n     * Called by [[VisibleTileSet]] to mark that [[Tile]] is visible and it should prepare geometry.\n     */\n    private prepareForRender(\n        enabledKinds: GeometryKindSet | undefined,\n        disabledKinds: GeometryKindSet | undefined\n    ) {\n        const tile = this.tile;\n        const decodedTile = this.m_decodedTile;\n\n        // Just a sanity check that satisfies compiler check below.\n        if (decodedTile === undefined) {\n            this.finish();\n            return;\n        }\n\n        this.m_timeout = setTimeout(() => {\n            // Reset timeout so it is untouched during processing.\n            this.m_timeout = undefined;\n\n            if (this.discardNeedlessTile(tile)) {\n                return;\n            }\n\n            const stats = PerformanceStatistics.instance;\n            let now = 0;\n            if (stats.enabled) {\n                now = PerformanceTimer.now();\n            }\n\n            const geometryCreator = TileGeometryCreator.instance;\n\n            tile.clear();\n            // Set up techniques which should be processed.\n            geometryCreator.initDecodedTile(decodedTile, enabledKinds, disabledKinds);\n            geometryCreator.createAllGeometries(tile, decodedTile);\n\n            if (stats.enabled) {\n                const geometryCreationTime = PerformanceTimer.now() - now;\n                const currentFrame = stats.currentFrame;\n\n                // Account for the geometry creation in the current frame.\n                currentFrame.addValue(\"render.fullFrameTime\", geometryCreationTime);\n                currentFrame.addValue(\"render.geometryCreationTime\", geometryCreationTime);\n\n                currentFrame.addValue(\"geometry.geometryCreationTime\", geometryCreationTime);\n                currentFrame.addValue(\"geometryCount.numGeometries\", decodedTile.geometries.length);\n                currentFrame.addValue(\"geometryCount.numTechniques\", decodedTile.techniques.length);\n                currentFrame.addValue(\n                    \"geometryCount.numPoiGeometries\",\n                    decodedTile.poiGeometries !== undefined ? decodedTile.poiGeometries.length : 0\n                );\n                currentFrame.addValue(\n                    \"geometryCount.numTextGeometries\",\n                    decodedTile.textGeometries !== undefined ? decodedTile.textGeometries.length : 0\n                );\n                currentFrame.addValue(\n                    \"geometryCount.numTextPathGeometries\",\n                    decodedTile.textPathGeometries !== undefined\n                        ? decodedTile.textPathGeometries.length\n                        : 0\n                );\n                currentFrame.addValue(\n                    \"geometryCount.numPathGeometries\",\n                    decodedTile.pathGeometries !== undefined ? decodedTile.pathGeometries.length : 0\n                );\n                currentFrame.addMessage(\n                    // tslint:disable-next-line: max-line-length\n                    `Decoded tile: ${tile.dataSource.name} # lvl=${tile.tileKey.level} col=${tile.tileKey.column} row=${tile.tileKey.row}`\n                );\n            }\n            this.finish();\n            tile.dataSource.requestUpdate();\n        }, 0);\n    }\n\n    private discardNeedlessTile(tile: Tile): boolean {\n        // If the tile has become invisible while being loaded, for example by moving the\n        // camera, the tile is not finished and its geometry is not created. This is an\n        // optimization for fast camera movements and zooms.\n        if (!tile.isVisible) {\n            // Dispose the tile from the visible set, so it can be reloaded properly next time\n            // it is needed.\n            tile.mapView.visibleTileSet.disposeTile(tile);\n\n            const stats = PerformanceStatistics.instance;\n            if (stats.enabled) {\n                stats.currentFrame.addMessage(\n                    // tslint:disable-next-line: max-line-length\n                    `Decoded tile: ${tile.dataSource.name} # lvl=${tile.tileKey.level} col=${tile.tileKey.column} row=${tile.tileKey.row} DISCARDED - invisible`\n                );\n            }\n            this.finish();\n            return true;\n        }\n        // Tile already disposed (this may potentially happen in timeout callback).\n        else if (tile.disposed) {\n            const stats = PerformanceStatistics.instance;\n            if (stats.enabled) {\n                stats.currentFrame.addMessage(\n                    // tslint:disable-next-line: max-line-length\n                    `Decoded tile: ${tile.dataSource.name} # lvl=${tile.tileKey.level} col=${tile.tileKey.column} row=${tile.tileKey.row} DISCARDED - disposed`\n                );\n            }\n            this.finish();\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Stores geometry kinds used to load decoded tile geometry.\n     *\n     * This values are stored to detect geometry kind changes during loading.\n     *\n     * @param enabledKinds Set of geometry kinds to be displayed or undefined.\n     * @param disabledKinds Set of geometry kinds that won't be rendered.\n     */\n    private setGeometryKinds(\n        enabledKinds: GeometryKindSet | undefined,\n        disabledKinds: GeometryKindSet | undefined\n    ): void {\n        if (enabledKinds !== undefined) {\n            this.m_enabledKinds = Object.assign(\n                this.m_enabledKinds ?? new GeometryKindSet(),\n                enabledKinds\n            );\n        }\n        if (disabledKinds !== undefined) {\n            this.m_disabledKinds = Object.assign(\n                this.m_disabledKinds ?? new GeometryKindSet(),\n                disabledKinds\n            );\n        }\n    }\n\n    /**\n     * Compare enabled and disabled geometry kinds with currently set.\n     *\n     * Method compares input sets with recently used geometry kinds in performance wise\n     * manner, taking special care of undefined and zero size sets.\n     *\n     * @param enabledKinds Set of geometry kinds to be displayed or undefined.\n     * @param disabledKinds Set of geometry kinds that won't be rendered.\n     * @return `true` only if sets are logically equal, meaning that undefined and empty sets\n     * may result in same geometry (techniques kind) beeing rendered.\n     */\n    private compareGeometryKinds(\n        enabledKinds: GeometryKindSet | undefined,\n        disabledKinds: GeometryKindSet | undefined\n    ): boolean {\n        const enabledSame = this.m_enabledKinds === enabledKinds;\n        const disabledSame = this.m_disabledKinds === disabledKinds;\n        // Same references, no need to compare.\n        if (enabledSame && disabledSame) {\n            return true;\n        }\n        const enabledEmpty =\n            (this.m_enabledKinds === undefined || this.m_enabledKinds.size === 0) &&\n            (enabledKinds === undefined || enabledKinds.size === 0);\n        const disabledEmpty =\n            (this.m_disabledKinds === undefined || this.m_disabledKinds.size === 0) &&\n            (disabledKinds === undefined || disabledKinds.size === 0);\n\n        // We deal only with empty, the same or undefined sets - fast return, no need to compare.\n        if (\n            (enabledEmpty && disabledEmpty) ||\n            (enabledSame && disabledEmpty) ||\n            (disabledSame && enabledEmpty)\n        ) {\n            return true;\n        }\n        // It is enough that one the the sets are different, try to spot difference otherwise\n        // return true. Compare only non-empty sets.\n        if (!enabledEmpty) {\n            // If one set undefined then other must be non-empty, for sure different.\n            if (enabledKinds === undefined || this.m_enabledKinds === undefined) {\n                return false;\n            }\n            // Both defined and non-empty, compare the sets.\n            else if (!enabledKinds.has(this.m_enabledKinds)) {\n                return false;\n            }\n        }\n        if (!disabledEmpty) {\n            // One set defined and non-empty other undefined, for sure different.\n            if (disabledKinds === undefined || this.m_disabledKinds === undefined) {\n                return false;\n            }\n            // Both defined and non-empty, compare the sets.\n            else if (!disabledKinds.has(this.m_disabledKinds)) {\n                return false;\n            }\n        }\n        // No difference found.\n        return true;\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\n/**\n * Raycasting points is not supported as necessary in Three.js. This class extends a\n * [[THREE.Raycaster]] and adds the width / height of the canvas to allow picking of screen space\n * geometry.\n *\n * @internal\n */\nexport class PickingRaycaster extends THREE.Raycaster {\n    /**\n     * Constructor.\n     *\n     * @param width the canvas width.\n     * @param height the canvas height.\n     */\n    constructor(public width: number, public height: number) {\n        super();\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { TextCanvas } from \"@here/harp-text-canvas\";\nimport { MapView } from \"../MapView\";\nimport { PoiRenderer } from \"./PoiRenderer\";\n\nexport class PoiRendererFactory {\n    /**\n     * Creates an instance of poi renderer factory.\n     * @param m_mapView\n     */\n    constructor(private readonly m_mapView: MapView) {}\n\n    /**\n     * Creates poi renderer\n     * @param textCanvas\n     * @returns\n     */\n    createPoiRenderer(textCanvas: TextCanvas): PoiRenderer {\n        return new PoiRenderer(this.m_mapView, textCanvas);\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from \"./lib/StyleSetEvaluator\";\nexport * from \"./lib/IMeshBuffers\";\nexport * from \"./lib/Outliner\";\nexport * from \"./lib/Expr\";\nexport * from \"./lib/ThreeBufferUtils\";\nexport * from \"./lib/GeoJsonDataType\";\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { LoggerManager } from \"@here/harp-utils\";\n\nimport {\n    BooleanLiteralExpr,\n    CallExpr,\n    CaseExpr,\n    Env,\n    Expr,\n    ExprScope,\n    ExprVisitor,\n    HasAttributeExpr,\n    InterpolateExpr,\n    isJsonExpr,\n    JsonExpr,\n    LiteralExpr,\n    MatchExpr,\n    NullLiteralExpr,\n    NumberLiteralExpr,\n    ObjectLiteralExpr,\n    StepExpr,\n    StringLiteralExpr,\n    Value,\n    VarExpr\n} from \"./Expr\";\nimport { ExprPool } from \"./ExprPool\";\nimport {\n    interpolatedPropertyDefinitionToJsonExpr,\n    isInterpolatedPropertyDefinition\n} from \"./InterpolatedPropertyDefs\";\nimport { AttrScope, mergeTechniqueDescriptor } from \"./TechniqueDescriptor\";\nimport { IndexedTechnique, Technique, techniqueDescriptors } from \"./Techniques\";\nimport {\n    Definitions,\n    isActualSelectorDefinition,\n    isJsonExprReference,\n    Style,\n    StyleDeclaration,\n    StyleSelector,\n    StyleSet\n} from \"./Theme\";\n\nconst logger = LoggerManager.instance.create(\"StyleSetEvaluator\");\n\nconst emptyTechniqueDescriptor = mergeTechniqueDescriptor<Technique>({});\n\ninterface StyleInternalParams {\n    /**\n     * Optimization: Lazy creation and storage of expression in a style object.\n     */\n    _whenExpr?: Expr;\n    _minZoomLevelExpr?: Expr;\n    _maxZoomLevelExpr?: Expr;\n\n    _staticAttributes?: Array<[string, Value]>;\n\n    /**\n     * These attributes are used to instantiate Technique variants.\n     *\n     * @see [[TechiqueDescriptor.techniquePropNames]]\n     */\n    _dynamicTechniqueAttributes?: Array<[string, Expr]>;\n\n    /**\n     * These attributes must be evaluated basing with feature env.\n     *\n     * They are not propagated to rendering scope.\n     *\n     * @see [[TechniqueAttrScope.Feature]]\n     */\n    _dynamicFeatureAttributes?: Array<[string, Expr]>;\n\n    /**\n     * These attributes are forwarded as serialized by decoder to main thread, so they are resolved\n     * directly in render loop.\n     *\n     * Will contain attributes from these lists\n     *  - interpolants from [[TechiqueDescriptor.techniquePropNames]]\n     *  - expressions [[TechniqueDescriptor.dynamicPropNames]] (Future)\n     */\n    _dynamicForwardedAttributes?: Array<[string, Expr]>;\n    _dynamicTechniques?: Map<string, IndexedTechnique>;\n\n    /**\n     * Optimization: Index into table in StyleSetEvaluator.\n     * @hidden\n     */\n    _staticTechnique?: IndexedTechnique;\n\n    /**\n     * Optimization: StyleSet index.\n     * @hidden\n     */\n    _styleSetIndex?: number;\n\n    /**\n     * Optimization: Requested $geometryType.\n     * @hidden\n     */\n    _geometryType?: string;\n\n    /**\n     * `true` if any of the properties of this technique\n     * requires access to the feature's state.\n     */\n    _usesFeatureState?: boolean;\n}\n\ntype InternalStyle = Style & StyleSelector & StyleInternalParams;\n\n/**\n * [[StyleConditionClassifier]] searches for usages of `$layer` in `when` conditions\n * associated with styling rules.\n *\n * @hidden\n */\nclass StyleConditionClassifier implements ExprVisitor<Expr | undefined, Expr | undefined> {\n    private _style!: InternalStyle;\n\n    classify(style: InternalStyle) {\n        if (style._whenExpr) {\n            const savedStyle = this.switchStyle(style);\n            style._whenExpr = style._whenExpr.accept(this, undefined);\n            this._style = savedStyle;\n        }\n    }\n\n    visitNullLiteralExpr(expr: NullLiteralExpr, enclosingExpr: Expr | undefined): Expr {\n        return expr;\n    }\n\n    visitBooleanLiteralExpr(expr: BooleanLiteralExpr, enclosingExpr: Expr | undefined): Expr {\n        return expr;\n    }\n\n    visitNumberLiteralExpr(expr: NumberLiteralExpr, enclosingExpr: Expr | undefined): Expr {\n        return expr;\n    }\n\n    visitStringLiteralExpr(expr: StringLiteralExpr, enclosingExpr: Expr | undefined): Expr {\n        return expr;\n    }\n\n    visitObjectLiteralExpr(expr: ObjectLiteralExpr, enclosingExpr: Expr | undefined): Expr {\n        return expr;\n    }\n\n    visitVarExpr(expr: VarExpr, enclosingExpr: Expr | undefined): Expr {\n        return expr;\n    }\n\n    visitHasAttributeExpr(expr: HasAttributeExpr, enclosingExpr: Expr | undefined): Expr {\n        return expr;\n    }\n\n    visitMatchExpr(expr: MatchExpr, enclosingExpr: Expr | undefined): Expr {\n        return expr;\n    }\n\n    visitCaseExpr(expr: CaseExpr, enclosingExpr: Expr | undefined): Expr {\n        return expr;\n    }\n\n    visitCallExpr(call: CallExpr, enclosingExpr: Expr | undefined): Expr | undefined {\n        if (call.op === \"all\") {\n            // processing of an `[\"all\", e1, e2, ... eN]` expression. In this case\n            // search for expressions matching comparison of `$layer` and string literals\n            // in the sub expressions.\n            const children = call.args\n                .map(childExpr => childExpr.accept(this, call))\n                .filter(childExpr => childExpr !== undefined) as Expr[];\n\n            return new CallExpr(call.op, children);\n        } else if (enclosingExpr) {\n            // `call` is a direct child expression of an `\"all\"` operator.\n            const matched = this.matchVarStringComparison(call);\n\n            if (matched) {\n                if (this._style.layer === undefined && matched.name === \"$layer\") {\n                    // found a subexpression `[\"==\", [\"get\", \"$layer\"], \"some layer name\"]`\n                    // enclosed in an `[\"all\", e1...eN]` expression. Remove it from\n                    // its parent expression and store the value of the expected $layer in\n                    // [[StyleInternalParams]].\n\n                    this._style.layer = matched.value;\n\n                    // return `undefined` to remove this sub expression from its parent.\n                    return undefined;\n                } else if (\n                    this._style._geometryType === undefined &&\n                    matched.name === \"$geometryType\"\n                ) {\n                    // found a subexpression `[\"==\", [\"get\", \"$geometryType\"], \"geometry\"]`\n                    // enclosed in an `[\"all\", e1...eN]` expression. Remove it from\n                    // its parent expression and store the value of the expected $geometryType in\n                    // [[StyleInternalParams]].\n\n                    this._style._geometryType = matched.value;\n\n                    // return `undefined` to remove this sub expression from its parent.\n                    return undefined;\n                }\n            }\n        }\n\n        return call;\n    }\n\n    visitStepExpr(expr: StepExpr, enclosingExpr: Expr | undefined): Expr | undefined {\n        throw new Error(\"todo\");\n    }\n\n    visitInterpolateExpr(expr: InterpolateExpr, enclosingExpr: Expr | undefined): Expr | undefined {\n        throw new Error(\"todo\");\n    }\n\n    /**\n     * Tests if the given `call` matches the structure [\"==\", [\"get\", name], value].\n     * If a match is found returns an object containing the `name` and the `value`;\n     *\n     * @param call The expression to match.\n     */\n    private matchVarStringComparison(call: CallExpr) {\n        if (call.op === \"==\") {\n            const left = call.args[0];\n            const right = call.args[1];\n\n            if (left instanceof VarExpr && right instanceof StringLiteralExpr) {\n                return { name: left.name, value: right.value };\n            }\n\n            if (right instanceof VarExpr && left instanceof StringLiteralExpr) {\n                return { name: right.name, value: left.value };\n            }\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Sets the given `style` as current.\n     *\n     * @returns The previous `style`.\n     */\n    private switchStyle(style: InternalStyle) {\n        const saved = this._style;\n        this._style = style;\n        return saved;\n    }\n}\n\nclass OptimizedSubSetKey {\n    key: string;\n    layer: string | undefined;\n    geometryType: string | undefined;\n\n    cachedStyleSet?: InternalStyle[];\n\n    constructor(layer?: string | undefined, geometryType?: string | undefined) {\n        this.key = \"\";\n        this.set(layer, geometryType);\n    }\n\n    set(\n        layer: string | undefined,\n        geometryType: string | undefined,\n        env?: Env\n    ): OptimizedSubSetKey {\n        let keyUpdateNeeded: boolean = false;\n        if (layer === undefined) {\n            const envLayer = env !== undefined ? env.lookup(\"$layer\") : undefined;\n            layer = typeof envLayer === \"string\" ? envLayer : undefined;\n        }\n        if (this.layer !== layer) {\n            this.layer = layer;\n            keyUpdateNeeded = true;\n        }\n\n        if (geometryType === undefined) {\n            const envGeometryType = env !== undefined ? env.lookup(\"$geometryType\") : undefined;\n            geometryType = typeof envGeometryType === \"string\" ? envGeometryType : undefined;\n        }\n        if (this.geometryType !== geometryType) {\n            this.geometryType = geometryType;\n            keyUpdateNeeded = true;\n        }\n\n        if (keyUpdateNeeded) {\n            this.updateKey();\n        }\n        return this;\n    }\n\n    private updateKey() {\n        if (this.layer !== undefined) {\n            // tslint:disable-next-line:prefer-conditional-expression\n            if (this.geometryType !== undefined) {\n                this.key = `${this.layer}:${this.geometryType}`;\n            } else {\n                this.key = `${this.layer}:`;\n            }\n        } else {\n            if (this.geometryType !== undefined) {\n                this.key = `:${this.geometryType}`;\n            } else {\n                this.key = \"all\";\n            }\n        }\n        this.cachedStyleSet = undefined;\n    }\n}\n\n/**\n * Combine data from datasource and apply the rules from a specified theme to show it on the map.\n */\nexport class StyleSetEvaluator {\n    readonly styleSet: InternalStyle[];\n\n    private readonly m_techniques: IndexedTechnique[] = [];\n    private readonly m_exprPool = new ExprPool();\n    private readonly m_cachedResults = new Map<Expr, Value>();\n    private readonly m_styleConditionClassifier = new StyleConditionClassifier();\n    private readonly m_subStyleSetCache = new Map<string, InternalStyle[]>();\n    private readonly m_definitions?: Definitions;\n    private readonly m_definitionExprCache = new Map<string, Expr>();\n    private readonly m_tmpOptimizedSubSetKey: OptimizedSubSetKey = new OptimizedSubSetKey();\n    private readonly m_emptyEnv = new Env();\n    private m_featureDependencies: string[] = [];\n    private m_layer: string | undefined;\n    private m_geometryType: string | undefined;\n    private m_zoomLevel: number | undefined;\n    private m_previousResult: IndexedTechnique[] | undefined;\n    private m_previousEnv: Env | undefined;\n\n    constructor(styleSet: StyleSet, definitions?: Definitions) {\n        this.m_definitions = definitions;\n        this.styleSet = resolveReferences(styleSet, definitions);\n        computeDefaultRenderOrder(this.styleSet);\n        this.compileStyleSet();\n    }\n\n    /**\n     * Find all techniques that fit the current objects' environment.\n     * *The techniques in the resulting array may not be modified* since they are being reused for\n     * identical objects.\n     *\n     * @param env The objects environment, i.e. the attributes that are relevant for its\n     * representation.\n     * @param layer The optional layer name used to filter techniques.\n     * @param geometryType The optional geometryType used to filter techniques.\n     */\n    getMatchingTechniques(\n        env: Env,\n        layer?: string | undefined,\n        geometryType?: string | undefined\n    ): IndexedTechnique[] {\n        if (\n            this.m_previousResult &&\n            this.m_previousEnv &&\n            this.m_featureDependencies.every(p => this.m_previousEnv?.lookup(p) === env.lookup(p))\n        ) {\n            return this.m_previousResult;\n        }\n\n        const result: IndexedTechnique[] = [];\n        this.m_cachedResults.clear();\n\n        const optimizedSubSetKey = this.m_tmpOptimizedSubSetKey;\n        optimizedSubSetKey.set(layer, geometryType, env);\n\n        // get the requested $layer and $geometryType, if any.\n        this.m_layer = optimizedSubSetKey.layer;\n        this.m_geometryType = optimizedSubSetKey.geometryType;\n        this.m_zoomLevel = env.lookup(\"$zoom\") as number | undefined;\n\n        const searchedStyleSet = this.getOptimizedStyleSet(optimizedSubSetKey);\n\n        for (const currStyle of searchedStyleSet) {\n            if (this.processStyle(env, currStyle, result)) {\n                break;\n            }\n        }\n\n        this.m_previousResult = result;\n        this.m_previousEnv = env;\n\n        return result;\n    }\n\n    /**\n     * Check if `styleSet` contains any rule related to `layer`.\n     *\n     * @param layer name of layer\n     */\n    wantsLayer(layer: string): boolean {\n        return (\n            this.getOptimizedStyleSet(this.m_tmpOptimizedSubSetKey.set(layer, undefined)).length > 0\n        );\n    }\n\n    /**\n     * Check if `styleSet` contains any rule related to particular `[layer, geometryType]` pair.\n     *\n     * @param layer name of layer\n     * @param geometryType type of layer - `point`, `line` or `polygon`\n     */\n    wantsFeature(layer: string, geometryType?: string): boolean {\n        return (\n            this.getOptimizedStyleSet(this.m_tmpOptimizedSubSetKey.set(layer, geometryType))\n                .length > 0\n        );\n    }\n\n    /**\n     * Get the expression evaluation cache, for further feature processing.\n     *\n     * This object is valid until next `getMatchingTechniques` call.\n     */\n    get expressionEvaluatorCache() {\n        return this.m_cachedResults;\n    }\n\n    /**\n     * Reset array of techniques.\n     *\n     * Cleans technique array and indices, so it doesn't accumulate accross several decoding runs.\n     */\n    resetTechniques() {\n        for (const techinque of this.m_techniques) {\n            techinque._index = undefined!;\n        }\n        this.m_techniques.length = 0;\n        this.m_previousResult = undefined;\n        this.m_previousEnv = undefined;\n    }\n\n    /**\n     * Get the (current) array of techniques that have been created during decoding.\n     */\n    get techniques(): IndexedTechnique[] {\n        return this.m_techniques;\n    }\n\n    /**\n     * Get the (current) array of techniques that have been created during decoding.\n     */\n    get decodedTechniques(): IndexedTechnique[] {\n        return this.m_techniques.map(makeDecodedTechnique);\n    }\n\n    private getOptimizedStyleSet(subSetKey: OptimizedSubSetKey): InternalStyle[] {\n        if (subSetKey.cachedStyleSet !== undefined) {\n            return subSetKey.cachedStyleSet;\n        }\n        let optimizedStyleSet = this.m_subStyleSetCache.get(subSetKey.key);\n        if (optimizedStyleSet !== undefined) {\n            subSetKey.cachedStyleSet = optimizedStyleSet;\n            return optimizedStyleSet;\n        }\n        optimizedStyleSet = this.createPreFilteredStyleSet(subSetKey);\n        this.m_subStyleSetCache.set(subSetKey.key, optimizedStyleSet);\n        subSetKey.cachedStyleSet = optimizedStyleSet;\n        return optimizedStyleSet;\n    }\n\n    private createPreFilteredStyleSet(subSetKey: OptimizedSubSetKey) {\n        const { layer, geometryType } = subSetKey;\n\n        return this.styleSet.filter(style => {\n            if (layer !== undefined && style.layer !== undefined && style.layer !== layer) {\n                return false;\n            }\n            if (\n                geometryType !== undefined &&\n                style._geometryType !== undefined &&\n                style._geometryType !== geometryType\n            ) {\n                return false;\n            }\n            return true;\n        });\n    }\n\n    /**\n     * Compile the `when` conditions found when traversting the styling rules.\n     */\n    private compileStyleSet() {\n        this.m_featureDependencies = [\"$layer\", \"$geometryType\", \"$zoom\"];\n\n        this.styleSet.forEach(style => this.compileStyle(style));\n\n        // Create optimized styleSets for each `layer` & `geometryType` tuple.\n        this.styleSet.forEach(style => {\n            this.getOptimizedStyleSet(\n                this.m_tmpOptimizedSubSetKey.set(style.layer, style._geometryType)\n            );\n        });\n    }\n\n    /**\n     * Compile the `when` conditions reachable from the given `style`.\n     *\n     * @param style The current style.\n     */\n    private compileStyle(style: InternalStyle) {\n        this.checkStyleDynamicAttributes(style);\n\n        if (style.when !== undefined) {\n            try {\n                style._whenExpr = Array.isArray(style.when)\n                    ? Expr.fromJSON(style.when, this.m_definitions, this.m_definitionExprCache)\n                    : // tslint:disable-next-line: deprecation\n                      Expr.parse(style.when);\n\n                // search for usages of '$layer' and any other\n                // special symbol that can be used to speed up the evaluation\n                // of the `when` conditions associated to this `style`.\n                this.m_styleConditionClassifier.classify(style);\n\n                if (style._whenExpr !== undefined) {\n                    style._whenExpr = style._whenExpr.intern(this.m_exprPool);\n                }\n\n                const deps = style._whenExpr.dependencies();\n\n                deps?.properties.forEach(prop => {\n                    if (!this.m_featureDependencies.includes(prop)) {\n                        this.m_featureDependencies.push(prop);\n                    }\n                });\n\n                if (isJsonExpr(style.minZoomLevel)) {\n                    style._minZoomLevelExpr = Expr.fromJSON(style.minZoomLevel).intern(\n                        this.m_exprPool\n                    );\n                }\n\n                if (isJsonExpr(style.maxZoomLevel)) {\n                    style._maxZoomLevelExpr = Expr.fromJSON(style.maxZoomLevel).intern(\n                        this.m_exprPool\n                    );\n                }\n            } catch (err) {\n                logger.log(\n                    \"failed to evaluate expression\",\n                    JSON.stringify(style.when),\n                    \"error\",\n                    String(err)\n                );\n            }\n        }\n    }\n\n    /**\n     * Process a style (and its sub-styles) hierarchically to look for the technique that fits the\n     * current objects' environment. The attributes of the styles are assembled to create a unique\n     * technique for every object.\n     *\n     * @param env The objects environment, i.e. the attributes that are relevant for its\n     *            representation.\n     * @param style Current style (could also be top of stack).\n     * @param result The array of resulting techniques. There may be more than one technique per\n     *               object, resulting in multiple graphical objects for representation.\n     * @returns `true` if style has been found and processing is finished. `false` if not found, or\n     *          more than one technique should be applied.\n     */\n    private processStyle(env: Env, style: InternalStyle, result: Technique[]): boolean {\n        if (!this.checkZoomLevel(env, style)) {\n            return false;\n        }\n\n        if (\n            this.m_layer !== undefined &&\n            style.layer !== undefined &&\n            style.layer !== this.m_layer\n        ) {\n            return false;\n        }\n        if (\n            this.m_geometryType !== undefined &&\n            style._geometryType !== undefined &&\n            style._geometryType !== this.m_geometryType\n        ) {\n            return false;\n        }\n\n        if (style._whenExpr) {\n            try {\n                if (!style._whenExpr.evaluate(env, ExprScope.Condition, this.m_cachedResults)) {\n                    // Stop processing this styling rule. The `when` condition\n                    // associated with the current `style` evaluates to false so\n                    // no techinque defined by this style should be applied.\n                    return false;\n                }\n            } catch (error) {\n                logger.error(\n                    `failed to evaluate expression '${JSON.stringify(style.when)}': ${error}`\n                );\n                return false;\n            }\n        }\n\n        if (style.technique === undefined) {\n            return false;\n        }\n        // we found a technique!\n        if (style.technique !== \"none\") {\n            result.push(this.getTechniqueForStyleMatch(env, style));\n        }\n        // stop processing if \"final\" is set\n        return style.final === true;\n    }\n\n    private checkZoomLevel(env: Env, style: InternalStyle) {\n        if (style.minZoomLevel === undefined && style.maxZoomLevel === undefined) {\n            return true;\n        }\n\n        const zoomLevel = this.m_zoomLevel;\n        if (zoomLevel === undefined) {\n            return true;\n        }\n\n        if (style.minZoomLevel !== undefined) {\n            let minZoomLevel: Value = style.minZoomLevel;\n\n            if (style._minZoomLevelExpr) {\n                // the constraint is defined as expression, evaluate it and\n                // use its value\n                try {\n                    minZoomLevel = style._minZoomLevelExpr.evaluate(\n                        env,\n                        ExprScope.Condition,\n                        this.m_cachedResults\n                    );\n                } catch (error) {\n                    logger.error(\n                        `failed to evaluate expression '${JSON.stringify(\n                            style._minZoomLevelExpr\n                        )}': ${error}`\n                    );\n                }\n            }\n\n            if (typeof minZoomLevel === \"number\" && zoomLevel < minZoomLevel) {\n                return false;\n            }\n        }\n\n        if (style.maxZoomLevel !== undefined) {\n            let maxZoomLevel: Value = style.maxZoomLevel;\n\n            if (style._maxZoomLevelExpr) {\n                try {\n                    maxZoomLevel = style._maxZoomLevelExpr.evaluate(\n                        env,\n                        ExprScope.Condition,\n                        this.m_cachedResults\n                    );\n                } catch (error) {\n                    logger.error(\n                        `failed to evaluate expression '${JSON.stringify(\n                            style._maxZoomLevelExpr\n                        )}': ${error}`\n                    );\n                }\n            }\n\n            if (typeof maxZoomLevel === \"number\" && zoomLevel > maxZoomLevel) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    private getTechniqueForStyleMatch(env: Env, style: InternalStyle) {\n        let technique: IndexedTechnique | undefined;\n        if (style._dynamicTechniques !== undefined) {\n            const dynamicAttributes = this.evaluateTechniqueProperties(style, env);\n            const key = this.getDynamicTechniqueKey(style, dynamicAttributes);\n            technique = style._dynamicTechniques!.get(key);\n            if (technique === undefined) {\n                technique = this.createTechnique(style, key, dynamicAttributes);\n                style._dynamicTechniques!.set(key, technique);\n            }\n        } else {\n            technique = style._staticTechnique;\n            if (technique === undefined) {\n                style._staticTechnique = technique = this.createTechnique(\n                    style,\n                    `${style._styleSetIndex}`,\n                    []\n                ) as IndexedTechnique;\n            }\n        }\n\n        if (technique._index === undefined) {\n            technique._index = this.m_techniques.length;\n            this.m_techniques.push(technique);\n        }\n        return technique;\n    }\n\n    private getDynamicTechniqueKey(\n        style: InternalStyle,\n        dynamicAttributes: Array<[string, Value]>\n    ) {\n        const dynamicAttrKey = dynamicAttributes\n            .map(([_attrName, attrValue]) => {\n                if (attrValue === undefined) {\n                    return \"U\";\n                } else {\n                    return JSON.stringify(attrValue);\n                }\n            })\n            .join(\":\");\n        return `${style._styleSetIndex!}:${dynamicAttrKey}`;\n    }\n\n    private checkStyleDynamicAttributes(style: InternalStyle) {\n        if (style._dynamicTechniqueAttributes !== undefined || style.technique === \"none\") {\n            return;\n        }\n\n        style._dynamicTechniqueAttributes = [];\n        style._dynamicFeatureAttributes = [];\n        style._dynamicForwardedAttributes = [];\n        style._staticAttributes = [];\n\n        const dynamicFeatureAttributes = style._dynamicFeatureAttributes;\n        const dynamicTechniqueAttributes = style._dynamicTechniqueAttributes;\n        const dynamicForwardedAttributes = style._dynamicForwardedAttributes;\n        const targetStaticAttributes = style._staticAttributes;\n\n        const techniqueDescriptor =\n            techniqueDescriptors[style.technique] || emptyTechniqueDescriptor;\n\n        const processAttribute = (attrName: string, attrValue: Value | JsonExpr | undefined) => {\n            if (attrValue === undefined) {\n                return;\n            }\n\n            if (isJsonExpr(attrValue)) {\n                attrValue = Expr.fromJSON(\n                    attrValue,\n                    this.m_definitions,\n                    this.m_definitionExprCache\n                ).intern(this.m_exprPool);\n            } else if (isInterpolatedPropertyDefinition(attrValue)) {\n                // found a property using an object-like interpolation definition.\n                attrValue = Expr.fromJSON(\n                    interpolatedPropertyDefinitionToJsonExpr(attrValue)\n                ).intern(this.m_exprPool);\n            }\n\n            if (Expr.isExpr(attrValue)) {\n                const deps = attrValue.dependencies();\n\n                if (deps.featureState) {\n                    if (attrName !== \"enabled\") {\n                        logger.log(\"feature-state is not supported in this context\");\n                    } else {\n                        style._usesFeatureState = true;\n                    }\n                }\n\n                if (deps.properties.size === 0 && !attrValue.isDynamic()) {\n                    // no data-dependencies detected.\n                    attrValue = attrValue.evaluate(this.m_emptyEnv);\n                }\n            }\n\n            if (Expr.isExpr(attrValue)) {\n                let attrScope: AttrScope | undefined = (techniqueDescriptor.attrScopes as any)[\n                    attrName as any\n                ];\n\n                if (attrScope === undefined) {\n                    // Use [[AttrScope.TechniqueGeometry]] as default scope for the attribute.\n                    attrScope = AttrScope.TechniqueGeometry;\n                }\n\n                const deps = attrValue.dependencies();\n\n                deps.properties.forEach(prop => {\n                    if (!this.m_featureDependencies.includes(prop)) {\n                        this.m_featureDependencies.push(prop);\n                    }\n                });\n\n                switch (attrScope) {\n                    case AttrScope.FeatureGeometry:\n                        dynamicFeatureAttributes.push([attrName, attrValue]);\n                        break;\n                    case AttrScope.TechniqueGeometry:\n                        dynamicTechniqueAttributes.push([attrName, attrValue]);\n                        break;\n                    case AttrScope.TechniqueRendering:\n                        if (deps.properties.size === 0) {\n                            dynamicForwardedAttributes.push([attrName, attrValue]);\n                        } else {\n                            dynamicTechniqueAttributes.push([attrName, attrValue]);\n                        }\n                        break;\n                }\n            } else if (attrValue !== undefined && attrValue !== null) {\n                targetStaticAttributes.push([attrName, attrValue]);\n            }\n        };\n\n        const replacement = new Map<string, string>([\n            [\"category\", \"_category\"],\n            [\"secondaryCategory\", \"_secondaryCategory\"]\n        ]);\n\n        for (const p in style) {\n            if (!style.hasOwnProperty(p)) {\n                continue;\n            }\n            if (p.startsWith(\"_\")) {\n                continue;\n            }\n            if ([\"when\", \"technique\", \"layer\", \"attr\", \"description\"].includes(p)) {\n                continue;\n            }\n            const pp = replacement.get(p) ?? p;\n            processAttribute(pp, (style as any)[p]);\n        }\n\n        if (style.attr !== undefined) {\n            for (const attrName in style.attr) {\n                if (!style.attr.hasOwnProperty(attrName)) {\n                    continue;\n                }\n                processAttribute(attrName, (style.attr as any)[attrName]);\n            }\n        }\n\n        if (dynamicTechniqueAttributes.length > 0) {\n            style._dynamicTechniques = new Map();\n        }\n    }\n\n    private evaluateTechniqueProperties(style: InternalStyle, env: Env): Array<[string, Value]> {\n        if (style._dynamicTechniqueAttributes === undefined) {\n            return [];\n        }\n\n        return style._dynamicTechniqueAttributes.map(([attrName, attrExpr]) => {\n            try {\n                const evaluatedValue = attrExpr.evaluate(\n                    env,\n                    ExprScope.Value,\n                    this.m_cachedResults\n                );\n                return [attrName, evaluatedValue];\n            } catch (error) {\n                logger.error(`failed to evaluate expression '${attrExpr.toJSON()}': ${error}`);\n                return [attrName, null];\n            }\n        });\n    }\n\n    private createTechnique(\n        style: InternalStyle,\n        key: string,\n        dynamicAttrs: Array<[string, Value]>\n    ) {\n        const technique: any = {};\n        technique.name = style.technique;\n        if (style._staticAttributes !== undefined) {\n            for (const [attrName, attrValue] of style._staticAttributes) {\n                if (attrValue !== null) {\n                    technique[attrName] = attrValue;\n                }\n            }\n        }\n        for (const [attrName, attrValue] of dynamicAttrs) {\n            if (attrValue !== null) {\n                technique[attrName] = attrValue;\n            }\n        }\n\n        if (style._dynamicFeatureAttributes !== undefined) {\n            for (const [attrName, attrValue] of style._dynamicFeatureAttributes) {\n                technique[attrName] = attrValue;\n            }\n        }\n\n        if (style._dynamicForwardedAttributes !== undefined) {\n            for (const [attrName, attrValue] of style._dynamicForwardedAttributes) {\n                technique[attrName] = attrValue;\n            }\n        }\n\n        technique._index = this.m_techniques.length;\n        technique._styleSetIndex = style._styleSetIndex!;\n        if (style.styleSet !== undefined) {\n            technique._styleSet = style.styleSet;\n        }\n        if (style._usesFeatureState !== undefined) {\n            technique._usesFeatureState = style._usesFeatureState;\n        }\n        this.m_techniques.push(technique as IndexedTechnique);\n        return technique as IndexedTechnique;\n    }\n}\n\nfunction computeDefaultRenderOrder(styleSet: InternalStyle[]) {\n    let techniqueRenderOrder = 0;\n    let styleSetIndex = 0;\n    for (const style of styleSet) {\n        style._styleSetIndex = styleSetIndex++;\n        if (style.technique !== undefined && style.renderOrder === undefined) {\n            style.renderOrder = techniqueRenderOrder++;\n        }\n    }\n}\n\nfunction resolveReferences(styleSet: StyleDeclaration[], definitions: Definitions | undefined) {\n    return styleSet.map(style => resolveStyleReferences(style, definitions));\n}\n\nfunction resolveStyleReferences(\n    style: StyleDeclaration,\n    definitions: Definitions | undefined\n): InternalStyle {\n    if (isJsonExpr(style)) {\n        if (!isJsonExprReference(style)) {\n            throw new Error(\"invalid expression in this context, only 'ref's are supported\");\n        }\n        // expand and instantiate references to style definitions.\n        const definitionName = style[1];\n        const def = definitions && definitions[definitionName];\n        if (!def) {\n            throw new Error(`invalid reference '${definitionName}' - not found`);\n        }\n        if (!isActualSelectorDefinition(def)) {\n            throw new Error(`invalid reference '${definitionName}' - expected style definition`);\n        }\n        // instantiate the style\n        return resolveStyleReferences(def, definitions);\n    }\n\n    return { ...style };\n}\n\n/**\n * Create transferable representation of dynamic technique.\n *\n * Converts  non-transferable [[Expr]]instances back to JSON form.\n */\nexport function makeDecodedTechnique(technique: IndexedTechnique): IndexedTechnique {\n    const result: Partial<IndexedTechnique> = {};\n    for (const attrName in technique) {\n        if (!technique.hasOwnProperty(attrName)) {\n            continue;\n        }\n\n        let attrValue: any = (technique as any)[attrName];\n\n        if (\n            typeof attrValue === \"object\" &&\n            (attrValue.isVector2 || attrValue.isVector3 || attrValue.isVector4)\n        ) {\n            attrValue = LiteralExpr.fromValue(attrValue);\n        }\n\n        if (Expr.isExpr(attrValue)) {\n            attrValue = attrValue.toJSON();\n        }\n\n        (result as any)[attrName] = attrValue;\n    }\n    return (result as any) as IndexedTechnique;\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nconst currEdgeStart = new THREE.Vector2();\nconst currEdgeGoal = new THREE.Vector2();\nconst prevEdgeStart = new THREE.Vector2();\nconst prevEdgeGoal = new THREE.Vector2();\n\n/**\n * Fills an index buffer with the indices for the edges of a polygon contour.\n *\n * @param indexBuffer Edge index buffer to be filled.\n * @param vertexOffset Starting offset of the vertices composing the contour.\n * @param vertexStride Number of elements per contour vertex.\n * @param polygonContour Vertices that compose the contour.\n * @param polygonContourEdges Collection of booleans indicating if contour edges should be added.\n */\nexport function addPolygonEdges(\n    indexBuffer: number[],\n    vertexOffset: number,\n    vertexStride: number,\n    polygonContour: number[],\n    polygonContourEdges: boolean[],\n    isExtruded?: boolean,\n    addFootprintEdges?: boolean,\n    wallEdgeSlope?: number\n) {\n    for (let i = 0; i < polygonContourEdges.length; ++i) {\n        if (polygonContourEdges[i]) {\n            if (isExtruded === true) {\n                const vFootprint0 = vertexOffset + i * 2;\n                const vRoof0 = vFootprint0 + 1;\n                const vFootprint1 = vertexOffset + ((i + 1) % polygonContourEdges.length) * 2;\n                const vRoof1 = vFootprint1 + 1;\n\n                if (addFootprintEdges === true) {\n                    indexBuffer.push(vFootprint0, vFootprint1);\n                }\n                indexBuffer.push(vRoof0, vRoof1);\n\n                const prevEdgeIdx = (i === 0 ? polygonContourEdges.length : i) - 1;\n                if (polygonContourEdges[prevEdgeIdx]) {\n                    if (wallEdgeSlope !== undefined) {\n                        const v0x = polygonContour[i * vertexStride];\n                        const v0y = polygonContour[i * vertexStride + 1];\n                        const v1x =\n                            polygonContour[((i + 1) % polygonContourEdges.length) * vertexStride];\n                        const v1y =\n                            polygonContour[\n                                ((i + 1) % polygonContourEdges.length) * vertexStride + 1\n                            ];\n\n                        currEdgeStart.set(v0x, v0y);\n                        currEdgeGoal.set(v1x, v1y);\n                        prevEdgeStart.set(\n                            polygonContour[prevEdgeIdx * vertexStride],\n                            polygonContour[prevEdgeIdx * vertexStride + 1]\n                        );\n                        prevEdgeGoal.set(currEdgeStart.x, currEdgeStart.y);\n\n                        if (\n                            prevEdgeGoal\n                                .sub(prevEdgeStart)\n                                .normalize()\n                                .dot(currEdgeGoal.sub(currEdgeStart).normalize()) <= wallEdgeSlope\n                        ) {\n                            indexBuffer.push(vFootprint0, vRoof0);\n                        }\n                    } else {\n                        indexBuffer.push(vFootprint0, vRoof0);\n                    }\n                }\n            } else {\n                const vFoot0 = vertexOffset + i;\n                const vRoof0 = vertexOffset + ((i + 1) % polygonContourEdges.length);\n                indexBuffer.push(vFoot0, vRoof0);\n            }\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    BufferAttribute as ThreeBufferAttribute,\n    BufferGeometry as ThreeBufferGeometry,\n    InterleavedBufferAttribute as ThreeInterleavedBufferAttribute,\n    TypedArray\n} from \"three\";\nimport {\n    BufferAttribute,\n    BufferElementType,\n    Geometry,\n    GeometryType,\n    InterleavedBufferAttribute\n} from \"./DecodedTile\";\n\n/**\n * Collection of helper methods to convert\n * {@link https://threejs.org/docs/index.html#api/en/core/BufferGeometry|three.js BufferGeometry}\n * to [[Geometry]] that allows creation and transfering of THREE BufferGeometry in webworkers.\n * See also [[CustomDatasourceExample]].\n */\nexport namespace ThreeBufferUtils {\n    export function getBufferElementType(buffer: TypedArray): BufferElementType {\n        if (buffer instanceof Int8Array) {\n            return \"int8\";\n        } else if (buffer instanceof Uint8Array) {\n            return \"uint8\";\n        } else if (buffer instanceof Int16Array) {\n            return \"int16\";\n        } else if (buffer instanceof Uint16Array) {\n            return \"uint16\";\n        } else if (buffer instanceof Int32Array) {\n            return \"int32\";\n        } else if (buffer instanceof Uint32Array) {\n            return \"uint32\";\n        } else if (buffer instanceof Float32Array) {\n            return \"float\";\n        }\n\n        throw new Error(`Unsupported buffer type ${name}`);\n    }\n\n    export function fromThreeBufferAttribute(\n        bufferAttribute: ThreeBufferAttribute\n    ): BufferAttribute {\n        const buffer = (bufferAttribute.array as any) as TypedArray;\n        return {\n            name: bufferAttribute.name,\n            buffer: buffer.buffer,\n            type: getBufferElementType(buffer),\n            itemCount: bufferAttribute.itemSize,\n            normalized: bufferAttribute.normalized\n        };\n    }\n\n    export function fromThreeInterleavedBufferAttribute(\n        bufferAttribute: ThreeInterleavedBufferAttribute\n    ): InterleavedBufferAttribute {\n        throw new Error(\"Not implemented yet\");\n    }\n\n    export function fromThreeBufferGeometry(\n        bufferGeometry: ThreeBufferGeometry,\n        techniqueIndex: number\n    ): Geometry {\n        const vertexAttributes: BufferAttribute[] = [];\n        const attributeNames = Object.getOwnPropertyNames(bufferGeometry.attributes);\n        for (const name of attributeNames) {\n            const attribute = bufferGeometry.attributes[name];\n            // FIXME: Also support InterleavedBufferAttribute\n            const vertexAttribute = fromThreeBufferAttribute(attribute as ThreeBufferAttribute);\n            vertexAttribute.name = name;\n            vertexAttributes.push(vertexAttribute);\n        }\n        const index =\n            bufferGeometry.index !== null\n                ? fromThreeBufferAttribute(bufferGeometry.index)\n                : undefined;\n\n        let count = 0;\n        if (index !== undefined) {\n            count = bufferGeometry.index === null ? 0 : bufferGeometry.index.count;\n        } else {\n            // If there is no index buffer, try to deduce the count from the position attribute.\n            const posAttr = bufferGeometry.attributes.position as ThreeBufferAttribute;\n            if (posAttr === undefined) {\n                throw new Error(\"Missing position attibute to deduce item count\");\n            }\n            count = posAttr.count;\n        }\n\n        return {\n            type: GeometryType.Unspecified,\n            vertexAttributes,\n            index,\n            groups: [{ start: 0, count, technique: techniqueIndex }]\n        };\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Vector3Like } from \"@here/harp-geoutils\";\nimport * as THREE from \"three\";\n\n/**\n * Determines whether a position in NDC (Normalized Device Coordinates) is inside the screen.\n * @param ndc The position to check.\n */\nfunction isOnScreen(ndc: THREE.Vector3) {\n    return ndc.z > -1 && ndc.z < 1 && ndc.x >= -1 && ndc.x <= 1 && ndc.y >= -1 && ndc.y <= 1;\n}\n\n/**\n * @hidden\n * Handles the projection of world coordinates to screen coordinates.\n */\nexport class ScreenProjector {\n    static tempV2 = new THREE.Vector2();\n    static tempV3 = new THREE.Vector3();\n\n    private m_width: number = 0;\n    private m_height: number = 0;\n\n    /**\n     * Constructs a new `ScreenProjector`.\n     *\n     * @param m_camera Camera to project against.\n     */\n    constructor(private m_camera: THREE.Camera) {}\n\n    /**\n     * Height of the screen.\n     */\n    get width(): number {\n        return this.m_width;\n    }\n\n    /**\n     * Width of the screen.\n     */\n    get height(): number {\n        return this.m_height;\n    }\n\n    /**\n     * Apply current projectionViewMatrix of the camera to project the source vector into\n     * screen coordinates.\n     *\n     * @param {(Vector3Like)} source The source vector to project.\n     * @param {THREE.Vector2} target The target vector.\n     * @returns {THREE.Vector2} The projected vector (the parameter 'target') or undefined if\n     * outside the near / far plane.\n     */\n    project(\n        source: Vector3Like,\n        target: THREE.Vector2 = new THREE.Vector2()\n    ): THREE.Vector2 | undefined {\n        const p = this.projectVector(source, ScreenProjector.tempV3);\n        if (p.z > -1 && p.z < 1) {\n            return this.ndcToScreen(p, target);\n        }\n        return undefined;\n    }\n\n    /**\n     * Apply current projectionViewMatrix of the camera to project the source vector into\n     * screen coordinates.\n     *\n     * @param {(Vector3Like)} source The source vector to project.\n     * @param {THREE.Vector2} target The target vector.\n     * @returns {THREE.Vector2} The projected vector (the parameter 'target') or undefined if\n     * outside the screen.\n     */\n    projectOnScreen(\n        source: Vector3Like,\n        target: THREE.Vector2 = new THREE.Vector2()\n    ): THREE.Vector2 | undefined {\n        const p = this.projectVector(source, ScreenProjector.tempV3);\n        if (isOnScreen(p)) {\n            return this.ndcToScreen(p, target);\n        }\n        return undefined;\n    }\n\n    /**\n     * Apply current projectionViewMatrix of the camera to project the source vector into\n     * screen coordinates. The z component between -1 and 1 is also returned.\n     *\n     * @param {(Vector3Like)} source The source vector to project.\n     * @param {THREE.Vector3} target The target vector.\n     * @returns {THREE.Vector3} The projected vector (the parameter 'target') or undefined if\n     * outside the near / far plane.\n     */\n    project3(\n        source: Vector3Like,\n        target: THREE.Vector3 = new THREE.Vector3()\n    ): THREE.Vector3 | undefined {\n        const p = this.projectVector(source, ScreenProjector.tempV3);\n        if (p.z > -1 && p.z < 1) {\n            target.set((p.x * this.m_width) / 2, (p.y * this.m_height) / 2, p.z);\n            return target;\n        }\n        return undefined;\n    }\n\n    /**\n     * Apply current projectionViewMatrix of the camera to project the source vector. Stores\n     * result in NDC in the target vector.\n     *\n     * @param {(Vector3Like)} source The source vector to project.\n     * @param {THREE.Vector3} target The target vector.\n     * @returns {THREE.Vector3} The projected vector (the parameter 'target').\n     */\n    projectVector(source: Vector3Like, target: THREE.Vector3): THREE.Vector3 {\n        target.set(source.x, source.y, source.z).project(this.m_camera);\n        return target;\n    }\n\n    /**\n     * Fast test to check if projected point is on screen.\n     *\n     * @returns {boolean} `true` if point is on screen, `false` otherwise.\n     */\n    onScreen(source: Vector3Like): boolean {\n        const p = this.projectVector(source, ScreenProjector.tempV3);\n        return isOnScreen(p);\n    }\n\n    /**\n     * Update the `ScreenProjector` with the latest values of the screen and the camera.\n     *\n     * @param {THREE.Camera} camera Camera to project against.\n     * @param {number} width Width of screen/canvas.\n     * @param {number} height Height of screen/canvas.\n     */\n    update(camera: THREE.Camera, width: number, height: number) {\n        this.m_camera = camera;\n        this.m_width = width;\n        this.m_height = height;\n    }\n\n    private ndcToScreen(ndc: THREE.Vector3, screenCoords: THREE.Vector2): THREE.Vector2 {\n        return screenCoords.set((ndc.x * this.m_width) / 2, (ndc.y * this.m_height) / 2);\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CubemapSky, GradientSky } from \"@here/harp-datasource-protocol\";\nimport { ProjectionType } from \"@here/harp-geoutils\";\nimport { SkyCubemapTexture } from \"./SkyCubemapTexture\";\nimport { SkyGradientTexture } from \"./SkyGradientTexture\";\n\nimport * as THREE from \"three\";\n\n/**\n * Class that handles [[MapView]]'s sky background.\n */\nexport class SkyBackground {\n    private m_skyTexture?: SkyGradientTexture | SkyCubemapTexture;\n\n    /**\n     * Constructs a new `SkyBackground`.\n     *\n     * @param m_sky Sky configuration parameters.\n     * @param m_projectionType [[MapView]]'s projection type.\n     * @param camera [[MapView]]'s camera.\n     */\n    constructor(\n        private m_sky: GradientSky | CubemapSky,\n        private m_projectionType: ProjectionType,\n        camera: THREE.Camera\n    ) {\n        switch (this.m_sky.type) {\n            case \"gradient\":\n                this.m_skyTexture = new SkyGradientTexture(this.m_sky, this.m_projectionType);\n                this.updateCamera(camera);\n                break;\n            case \"cubemap\": {\n                this.m_skyTexture = new SkyCubemapTexture(this.m_sky);\n                break;\n            }\n        }\n    }\n\n    /**\n     * Disposes allocated resources.\n     */\n    dispose() {\n        this.m_skyTexture!.dispose();\n    }\n\n    /**\n     * Sky texture.\n     */\n    get texture(): THREE.Texture {\n        return this.m_skyTexture!.texture;\n    }\n\n    /**\n     * This method updates the skybox based on the camera position (needed for some types of sky).\n     *\n     * @param camera The camera used in the map view.\n     */\n    updateCamera(camera: THREE.Camera) {\n        if (this.m_sky.type === \"gradient\") {\n            (this.m_skyTexture! as SkyGradientTexture).update(camera);\n        }\n    }\n\n    /**\n     * Updates the sky texture with new parameters.\n     *\n     * @param params New sky configuration parameters.\n     * @param projectionType Which projection is used, this may also change (in which case the\n     * textures should be recreated).\n     */\n    updateTexture(params: GradientSky | CubemapSky, projectionType: ProjectionType) {\n        const isSameSkyType =\n            this.m_sky.type === params.type && this.m_projectionType === projectionType;\n        switch (params.type) {\n            case \"gradient\":\n                if (isSameSkyType) {\n                    (this.m_skyTexture! as SkyGradientTexture).updateTexture(params);\n                } else {\n                    this.m_skyTexture = new SkyGradientTexture(params, projectionType);\n                }\n                break;\n            case \"cubemap\": {\n                if (isSameSkyType) {\n                    (this.m_skyTexture! as SkyCubemapTexture).updateTexture(params);\n                } else {\n                    this.m_skyTexture = new SkyCubemapTexture(params);\n                }\n                break;\n            }\n        }\n        this.m_projectionType = projectionType;\n        this.m_sky = params;\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GradientSky } from \"@here/harp-datasource-protocol\";\nimport { ProjectionType } from \"@here/harp-geoutils\";\nimport { getOptionValue } from \"@here/harp-utils\";\nimport { Color, CubeTexture, DataTexture, Line3, Plane, RGBFormat, Texture, Vector3 } from \"three\";\n\nexport const DEFAULT_TEXTURE_SIZE = 512;\nexport const DEFAULT_MONOMIAL_POWER = 1;\n\n// Vectors used for skybox bitmap computation.\nconst cameraDir = [\n    new Vector3(1, 0, 0),\n    new Vector3(-1, 0, 0),\n    new Vector3(0, -1, 0),\n    new Vector3(0, 1, 0),\n    new Vector3(0, 0, 1),\n    new Vector3(0, 0, -1)\n];\nconst cameraRight = [\n    new Vector3(0, 0, -1),\n    new Vector3(0, 0, 1),\n    new Vector3(1, 0, 0),\n    new Vector3(1, 0, 0),\n    new Vector3(1, 0, 0),\n    new Vector3(-1, 0, 0)\n];\nconst cameraUp = [\n    new Vector3(0, 1, 0),\n    new Vector3(0, 1, 0),\n    new Vector3(0, 0, 1),\n    new Vector3(0, 0, -1),\n    new Vector3(0, 1, 0),\n    new Vector3(0, 1, 0)\n];\n\n/**\n * Class tha generates a texture containing a linear gradient, to be used with [[SkyBackground]].\n *\n * The gradient is mapped onto a sphere, where `topColor` maps to the top of the upper hemisphere,\n * `bottomColor` to the bottom of the upper hemisphere, and `groundColor` fills the bottom\n *  hemisphere..\n */\nexport class SkyGradientTexture {\n    private m_width: number;\n    private m_faceCount: number;\n    private m_faces: DataTexture[];\n    private m_skybox?: CubeTexture;\n\n    // Used only in the planar case.\n    private m_farClipPlaneDividedVertically?: THREE.Line3;\n    private m_groundPlane?: THREE.Plane;\n    private m_bottomMidFarPoint?: THREE.Vector3;\n    private m_topMidFarPoint?: THREE.Vector3;\n    private m_horizonPosition?: THREE.Vector3;\n    private m_farClipPlaneCorners?: THREE.Vector3[];\n\n    /**\n     * Constructs a new `SkyGradientTexture`.\n     *\n     * @param sky Initial [[GradientSky]] configuration.\n     * @param m_projectionType [[MapView]]'s projection type.\n     * @param m_height Optional height parameter.\n     */\n    constructor(\n        sky: GradientSky,\n        private m_projectionType: ProjectionType,\n        private m_height: number = DEFAULT_TEXTURE_SIZE\n    ) {\n        const topColor = new Color(sky.topColor);\n        const bottomColor = new Color(sky.bottomColor);\n        const groundColor = new Color(sky.groundColor);\n\n        this.m_width = this.m_projectionType === ProjectionType.Planar ? 1.0 : this.m_height;\n        this.m_faceCount = this.m_projectionType === ProjectionType.Planar ? 1.0 : 6.0;\n        this.m_faces = [];\n        for (let i = 0; i < this.m_faceCount; ++i) {\n            const data = new Uint8Array(3 * this.m_width * this.m_height);\n            this.fillTextureData(data, i, topColor, bottomColor, groundColor, sky.monomialPower);\n\n            const texture = new DataTexture(data, this.m_width, this.m_height, RGBFormat);\n            texture.needsUpdate = true;\n            texture.unpackAlignment = 1;\n            this.m_faces.push(texture);\n        }\n\n        if (this.m_projectionType === ProjectionType.Spherical) {\n            this.m_skybox = new CubeTexture(this.m_faces);\n            this.m_skybox.needsUpdate = true;\n        } else {\n            this.m_farClipPlaneDividedVertically = new Line3();\n            this.m_groundPlane = new Plane(new Vector3(0, 0, 1));\n            this.m_bottomMidFarPoint = new Vector3();\n            this.m_topMidFarPoint = new Vector3();\n            this.m_horizonPosition = new Vector3();\n            this.m_farClipPlaneCorners = [\n                new Vector3(),\n                new Vector3(),\n                new Vector3(),\n                new Vector3()\n            ];\n        }\n    }\n\n    /**\n     * Disposes allocated resources.\n     */\n    dispose() {\n        for (let i = 0; i < this.m_faceCount; ++i) {\n            this.m_faces[i].dispose();\n        }\n        if (this.m_projectionType === ProjectionType.Spherical) {\n            this.m_skybox!.dispose();\n        }\n    }\n\n    /**\n     * `SkyGradientTexture`'s texture resource (simple texture or cubemap depending on\n     * [[MapView]]'s projection).\n     */\n    get texture(): Texture {\n        return this.m_projectionType === ProjectionType.Planar ? this.m_faces[0] : this.m_skybox!;\n    }\n\n    /**\n     * This method updates the position of the texture depending on the camera frustum.\n     *\n     * @param camera The camera used in the map view.\n     */\n    update(camera: THREE.Camera) {\n        if (this.m_projectionType === ProjectionType.Planar) {\n            this.setHorizonPosition(camera);\n            this.updateTexturePosition();\n        }\n    }\n\n    /**\n     * Updates the `SkyGradientTexture` with new parameters.\n     *\n     * @param params New [[GradientSky]] configuration.\n     */\n    updateTexture(sky: GradientSky) {\n        for (let i = 0; i < this.m_faceCount; ++i) {\n            this.fillTextureData(\n                this.m_faces[i].image.data,\n                i,\n                new Color(sky.topColor),\n                new Color(sky.bottomColor),\n                new Color(sky.groundColor),\n                sky.monomialPower\n            );\n            this.m_faces[i].needsUpdate = true;\n        }\n        if (this.m_projectionType === ProjectionType.Spherical) {\n            this.m_skybox!.needsUpdate = true;\n        }\n    }\n\n    // When creating the texture, a Uint8Array is required, because the resulting texture passed\n    // to the scene as a background, is a texImage2D object, that does not accept UintClampedArray\n    // https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texImage2D\n    // But, when updating the texture, a Uint8ClampedArray is passed as argument, because\n    // this.m_texture.image.data returns a Uint8ClampedArray. That's why this method accepts both.\n    private fillTextureData(\n        data: Uint8ClampedArray | Uint8Array,\n        faceIdx: number,\n        topColor: Color,\n        bottomColor: Color,\n        groundColor: Color,\n        monomialPower?: number\n    ) {\n        const color = new Color();\n        const dir = new Vector3();\n        const right = new Vector3();\n        const up = new Vector3();\n\n        const upDir = new Vector3(0, 0, 1);\n        for (let i = 0; i < this.m_height; ++i) {\n            for (let j = 0; j < this.m_width; ++j) {\n                if (this.m_projectionType === ProjectionType.Spherical) {\n                    const offsetX = right\n                        .copy(cameraRight[faceIdx])\n                        .multiplyScalar(((j + 0.5) / this.m_width) * 2.0 - 1.0);\n                    const offsetY = up\n                        .copy(cameraUp[faceIdx])\n                        .multiplyScalar(((i + 0.5) / this.m_height) * 2.0 - 1.0);\n                    dir.copy(cameraDir[faceIdx])\n                        .add(offsetX)\n                        .add(offsetY)\n                        .normalize();\n                    const t = Math.max(upDir.dot(dir), 0);\n\n                    color\n                        .copy(groundColor)\n                        .lerp(bottomColor, Math.min(t * 100, 1))\n                        .lerp(topColor, t ** getOptionValue(monomialPower, DEFAULT_MONOMIAL_POWER))\n                        .multiplyScalar(255);\n                } else {\n                    const t = i / this.m_height;\n                    if (i === 0) {\n                        color.copy(groundColor).multiplyScalar(255);\n                    } else {\n                        color\n                            .copy(bottomColor)\n                            .lerp(\n                                topColor,\n                                t ** getOptionValue(monomialPower, DEFAULT_MONOMIAL_POWER)\n                            )\n                            .multiplyScalar(255);\n                    }\n                }\n\n                data[i * this.m_width * 3 + j * 3] = color.r;\n                data[i * this.m_width * 3 + j * 3 + 1] = color.g;\n                data[i * this.m_width * 3 + j * 3 + 2] = color.b;\n            }\n        }\n    }\n\n    private setHorizonPosition(camera: THREE.Camera) {\n        this.m_farClipPlaneCorners![0].set(-1, -1, 1).unproject(camera);\n        this.m_farClipPlaneCorners![1].set(1, -1, 1).unproject(camera);\n        this.m_farClipPlaneCorners![2].set(-1, 1, 1).unproject(camera);\n        this.m_farClipPlaneCorners![3].set(1, 1, 1).unproject(camera);\n\n        this.m_bottomMidFarPoint!.copy(this.m_farClipPlaneCorners![0])\n            .add(this.m_farClipPlaneCorners![1])\n            .multiplyScalar(0.5);\n        this.m_topMidFarPoint!.copy(this.m_farClipPlaneCorners![2])\n            .add(this.m_farClipPlaneCorners![3])\n            .multiplyScalar(0.5);\n        this.m_farClipPlaneDividedVertically!.set(this.m_bottomMidFarPoint, this.m_topMidFarPoint);\n\n        const hasIntersection = this.m_groundPlane!.intersectLine(\n            this.m_farClipPlaneDividedVertically!,\n            this.m_horizonPosition!\n        );\n\n        // When there is no intersection between the ground plane and the\n        // farClipPlaneDividedVertically, be sure that the horizon is reset. Otherwise a previous\n        // intersection point stored in the m_horizonPosition will be considered the valid one.\n        if (!hasIntersection) {\n            this.m_horizonPosition!.set(0.0, 0.0, 0.0);\n        }\n    }\n\n    private updateTexturePosition() {\n        const coveredBySky = this.m_bottomMidFarPoint!.distanceTo(this.m_horizonPosition!);\n        const frustumHeight = this.m_farClipPlaneDividedVertically!.distance();\n        const skyRatio = coveredBySky / frustumHeight;\n\n        // If there is no intersection between the ground plane and the line that defines the far\n        // clip plane divided vertically, it means that there is no sky visible and therefore the\n        // ground color should be displayed. When there is no intersection, the length of the\n        // this.m_horizonPosition is still equal to zero, as threejs initialize an empty vector with\n        // all the three components to zero.\n        // If there is an intersection, calculate the offset.\n        const ratio = this.m_horizonPosition!.length() === 0 ? 1 : skyRatio - 2 / this.m_height;\n\n        // If the bottom part of the far clipping plane is under the ground plane, scroll the\n        // texture down. Otherwise, the camera is looking at the sky, therefore, scroll the texture\n        // up.\n        this.m_faces[0].offset.set(0, this.m_bottomMidFarPoint!.z <= 0 ? -ratio : skyRatio);\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Theme } from \"@here/harp-datasource-protocol\";\nimport { FontCatalog } from \"@here/harp-text-canvas\";\nimport { assert, LoggerManager } from \"@here/harp-utils\";\n\nexport const DEFAULT_FONT_CATALOG_NAME = \"default\";\n\nconst logger = LoggerManager.instance.create(\"FontCatalogLoader\");\n\ntype FontCatalogCallback = (name: string, catalog: FontCatalog) => void;\n\nexport class FontCatalogLoader {\n    private m_catalogsLoading: number = 0;\n\n    constructor(private readonly m_theme: Theme) {}\n\n    /**\n     * Initializes font catalog loader.\n     * @param defaultFontCatalogUrl Url of the font catalog that will be used by default if the\n     * theme doesn't define any font catalog.\n     * @returns Name of the default font catalog.\n     */\n    initialize(defaultFontCatalogUrl: string): string {\n        if (this.m_theme.fontCatalogs === undefined || this.m_theme.fontCatalogs.length === 0) {\n            this.m_theme.fontCatalogs = [\n                {\n                    name: DEFAULT_FONT_CATALOG_NAME,\n                    url: defaultFontCatalogUrl\n                }\n            ];\n            return DEFAULT_FONT_CATALOG_NAME;\n        }\n\n        const defaultFontCatalogName = this.m_theme.fontCatalogs[0].name;\n        return defaultFontCatalogName;\n    }\n\n    async loadCatalogs(catalogCallback: FontCatalogCallback): Promise<void[]> {\n        assert(this.m_theme.fontCatalogs !== undefined);\n        assert(this.m_theme.fontCatalogs!.length > 0);\n\n        const promises: Array<Promise<void>> = [];\n\n        this.m_theme.fontCatalogs!.forEach(fontCatalogConfig => {\n            this.m_catalogsLoading += 1;\n            const fontCatalogPromise: Promise<void> = FontCatalog.load(fontCatalogConfig.url, 1024)\n                .then<void>(catalogCallback.bind(undefined, fontCatalogConfig.name))\n                .catch((error: Error) => {\n                    logger.error(\"Failed to load FontCatalog: \", error);\n                })\n                .finally(() => {\n                    this.m_catalogsLoading -= 1;\n                });\n            promises.push(fontCatalogPromise);\n        });\n\n        return Promise.all(promises);\n    }\n\n    get loading(): boolean {\n        return this.m_catalogsLoading > 0;\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Env, GeometryKindSet } from \"@here/harp-datasource-protocol\";\nimport { Projection } from \"@here/harp-geoutils\";\nimport * as THREE from \"three\";\nimport { ElevationProvider } from \"../ElevationProvider\";\nimport { MapView } from \"../MapView\";\nimport { ViewState } from \"./ViewState\";\n\n/**\n * View state obtained from a MapView instance.\n */\nexport class MapViewState implements ViewState {\n    private readonly m_lookAtVector = new THREE.Vector3();\n    constructor(\n        private readonly m_mapView: MapView,\n        private readonly m_renderedTilesChangeCheck: () => boolean\n    ) {}\n\n    get worldCenter(): THREE.Vector3 {\n        return this.m_mapView.worldCenter;\n    }\n    get cameraIsMoving(): boolean {\n        return this.m_mapView.cameraIsMoving;\n    }\n    get maxVisibilityDist(): number {\n        return this.m_mapView.viewRanges.maximum;\n    }\n    get zoomLevel(): number {\n        return this.m_mapView.zoomLevel;\n    }\n    get env(): Env {\n        return this.m_mapView.env;\n    }\n    get frameNumber(): number {\n        return this.m_mapView.frameNumber;\n    }\n    get lookAtVector(): THREE.Vector3 {\n        return this.m_mapView.camera.getWorldDirection(this.m_lookAtVector);\n    }\n    get lookAtDistance(): number {\n        return this.m_mapView.targetDistance;\n    }\n    get isDynamic(): boolean {\n        return this.m_mapView.isDynamicFrame;\n    }\n    get hiddenGeometryKinds(): GeometryKindSet | undefined {\n        return this.m_mapView.tileGeometryManager === undefined\n            ? undefined\n            : this.m_mapView.tileGeometryManager.hiddenGeometryKinds;\n    }\n\n    get renderedTilesChanged(): boolean {\n        return this.m_renderedTilesChangeCheck();\n    }\n\n    get projection(): Projection {\n        return this.m_mapView.projection;\n    }\n\n    get elevationProvider(): ElevationProvider | undefined {\n        return this.m_mapView.elevationProvider;\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { FontCatalog, TextCanvas } from \"@here/harp-text-canvas\";\nimport { assert } from \"@here/harp-utils\";\n\nexport class TextCanvasFactory {\n    private m_minGlyphCount: number = 0; //Min amount of glyphs each [[TextCanvas]] layer can store.\n    private m_maxGlyphCount: number = 0; //Max amount of glyphs each [[TextCanvas]] layer can store.\n\n    /**\n     * Creates an instance of text canvas factory.\n     * @param m_renderer\n     */\n    constructor(private readonly m_renderer: THREE.WebGLRenderer) {}\n\n    setGlyphCountLimits(min: number, max: number) {\n        this.m_minGlyphCount = min;\n        this.m_maxGlyphCount = max;\n    }\n\n    /**\n     * Creates text canvas\n     * @param fontCatalog Initial [[FontCatalog]].\n     */\n    createTextCanvas(fontCatalog: FontCatalog): TextCanvas {\n        assert(this.m_maxGlyphCount > 0);\n\n        return new TextCanvas({\n            renderer: this.m_renderer,\n            fontCatalog,\n            minGlyphCount: this.m_minGlyphCount,\n            maxGlyphCount: this.m_maxGlyphCount\n        });\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { getOptionValue } from \"@here/harp-utils\";\nimport { MapView, MapViewEventNames } from \"../MapView\";\nimport { CopyrightInfo } from \"./CopyrightInfo\";\n\n/**\n * Helper class that maintains up-to-date [[MapView]] copyright information in DOM element.\n *\n * @example\n *\n *     // HTML snippet\n *     <div id=\"copyrightNotice\" style=\"position:absolute; right:0; bottom:0; z-index:100\"></div>\n *\n *     // JavaScript\n *     const mapView = new MapView({ ... });\n *     CopyrightElementHandler.install(\"copyrightNotice\", mapView);\n */\nexport class CopyrightElementHandler {\n    /**\n     * Install [[CopyrightElementHandler]] on DOM element and - optionally - attach to a [[MapView]]\n     * instance.\n     *\n     * @param element HTML DOM element or a HTML DOM element id\n     * @param mapView, optional, [[attach]] to this [[MapView]]\n     */\n    static install(element: string | HTMLElement, mapView?: MapView): CopyrightElementHandler {\n        return new CopyrightElementHandler(element, mapView);\n    }\n\n    /**\n     * Static copyright info.\n     *\n     * Use when [[MapView]]'s [[DataSource]]'s do not provide proper copyright information.\n     */\n    staticInfo: CopyrightInfo[] | undefined;\n\n    private m_defaults: Map<string, CopyrightInfo> = new Map();\n    private m_element: HTMLElement;\n    private m_mapViews: MapView[] = [];\n\n    /**\n     * Creates a new `CopyrightElementHandler` that updates the DOM element with the copyright info\n     * of the given `mapView`.\n     *\n     * Note: Generally, the static [[install]] method can be used to create and attach a new\n     * `CopyrightElementHandler` to a [[MapView]]\n     *\n     * @param element HTML DOM element or a HTML DOM element id\n     * @param mapView optional, [[attach]] to this [[MapView]] instance\n     */\n    constructor(element: string | HTMLElement, mapView?: MapView) {\n        if (typeof element === \"string\") {\n            const htmlElement = document.getElementById(element);\n            if (!htmlElement) {\n                throw new Error(`CopyrightElementHandler: unable to find DOM element #${element}`);\n            }\n            this.m_element = htmlElement;\n        } else {\n            this.m_element = element;\n        }\n\n        if (mapView !== undefined) {\n            this.attach(mapView);\n        }\n    }\n\n    /**\n     * Destroys this object by removing all event listeners from the attached [[MapView]]s.\n     */\n    destroy() {\n        for (const mapView of this.m_mapViews) {\n            mapView.removeEventListener(MapViewEventNames.CopyrightChanged, this.update);\n        }\n    }\n\n    /**\n     * Attaches this [[CopyrightInfo]] updates from [[MapView]] instance.\n     */\n    attach(mapView: MapView): this {\n        this.m_mapViews.push(mapView);\n\n        mapView.addEventListener(MapViewEventNames.CopyrightChanged, this.update);\n        this.update();\n\n        return this;\n    }\n\n    /**\n     * Stop following [[CopyrightInfo]] updates from [[MapView]] instance.\n     */\n    detach(mapView: MapView): this {\n        mapView.removeEventListener(MapViewEventNames.CopyrightChanged, this.update);\n\n        this.m_mapViews = this.m_mapViews.filter(item => item !== mapView);\n        this.update();\n\n        return this;\n    }\n\n    /**\n     * Set [[CopyrightInfo]] defaults to be used in case [[DataSource]] does not provide deatailed\n     * copyright information.\n     *\n     * The defaults will applied to all undefined `year`, `label` and `link` values in the copyright\n     * information retrieved from [[MapView]].\n     */\n    setDefaults(defaults: CopyrightInfo[] | undefined): this {\n        this.m_defaults.clear();\n        if (defaults !== undefined) {\n            for (const item of defaults) {\n                this.m_defaults.set(item.id, item);\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * Sets the [[staticInfo]] property.\n     *\n     * A `CopyrightElementHandler` always displays a deduplicated sum of static copyright info and\n     * copyright information obtained from attached [[MapView]]s.\n     *\n     * This information is used when [[DataSource]] instances of given [[MapView]] do not provide\n     * copyright information.\n     */\n    setStaticCopyightInfo(staticInfo: CopyrightInfo[] | undefined): this {\n        this.staticInfo = staticInfo;\n        return this;\n    }\n\n    /**\n     * Update copyright info text in controlled HTML element.\n     */\n    update = () => {\n        const mergedCopyrightInfo = this.m_mapViews\n            .map(mapView => mapView.copyrightInfo)\n            .reduce(CopyrightInfo.mergeArrays, this.staticInfo || []);\n\n        // Conditionally hiding of element with copyright information.\n        // If nothing to show we schould to avoid empty white rectangle in right bottom corner.\n        if (mergedCopyrightInfo.length === 0) {\n            this.m_element.style.display = \"none\";\n            return;\n        } else {\n            this.m_element.style.display = \"block\";\n        }\n\n        if (this.m_defaults.size !== 0) {\n            for (const sourceInfo of mergedCopyrightInfo) {\n                const defaults = this.m_defaults.get(sourceInfo.id);\n                if (defaults !== undefined) {\n                    sourceInfo.year = getOptionValue(sourceInfo.year, defaults.year);\n                    sourceInfo.label = getOptionValue(sourceInfo.label, defaults.label);\n                    sourceInfo.link = getOptionValue(sourceInfo.link, defaults.link);\n                }\n            }\n        }\n        const deduped = CopyrightInfo.mergeArrays(mergedCopyrightInfo);\n\n        this.m_element.innerHTML = CopyrightInfo.formatAsHtml(deduped);\n    };\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { ITransferManager, TransferManager } from \"@here/harp-transfer-manager\";\nimport {\n    AreaCopyrightInfo,\n    CopyrightCoverageProvider,\n    CopyrightCoverageResponse\n} from \"./CopyrightCoverageProvider\";\n\ninterface RequestHeaders {\n    [field: string]: string;\n}\n\n/**\n * Copyright provider which retrieves copyright coverage information from provided URL.\n */\nexport class UrlCopyrightProvider extends CopyrightCoverageProvider {\n    private m_cachedCopyrightResponse: Promise<AreaCopyrightInfo[]> | undefined;\n\n    /**\n     * Default constructor.\n     *\n     * @param m_fetchURL URL to fetch copyrights data from.\n     * @param m_baseScheme Scheme to get copyrights from.\n     * @param m_requestHeaders Optional request headers for requests(e.g. Authorization)\n     */\n    constructor(\n        private m_fetchURL: string,\n        private m_baseScheme: string,\n        private m_requestHeaders?: RequestHeaders,\n        private m_transferManager: ITransferManager = TransferManager.instance()\n    ) {\n        super();\n    }\n\n    /**\n     * Sets request headers.\n     * @param headers\n     */\n    setRequestHeaders(headers: RequestHeaders | undefined) {\n        this.m_requestHeaders = headers;\n    }\n\n    /**\n     * @inheritdoc\n     * @override\n     */\n    getCopyrightCoverageData(): Promise<AreaCopyrightInfo[]> {\n        if (this.m_cachedCopyrightResponse !== undefined) {\n            return this.m_cachedCopyrightResponse;\n        }\n\n        this.m_cachedCopyrightResponse = this.m_transferManager\n            .downloadJson<CopyrightCoverageResponse>(this.m_fetchURL, {\n                headers: this.m_requestHeaders\n            })\n            .then(json => json[this.m_baseScheme])\n            .catch(error => {\n                this.logger.error(error);\n                return [];\n            });\n\n        return this.m_cachedCopyrightResponse;\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/** @module\n *\n * This module provides classes to ease downloading URLs. In particular, following redirects,\n * retrying on HTTP errors, and limiting the number of parallel concurrent downloads.\n */\n\nimport \"@here/harp-fetch\";\nimport { DeferredPromise } from \"./DeferredPromise\";\n\n/**\n * Abstract interface for a transfer manager.\n *\n * Provides functionality for downloading JSON or ArrayBuffers.\n * Implementations typically implement retry on server congestion,\n * limit the maximum amount of parallel downloads or merge duplicate\n * downloads.\n */\nexport interface ITransferManager {\n    /**\n     * Downloads a JSON object.\n     * @param url The URL to download\n     * @param init Optional extra parameters for the download.\n     */\n    downloadJson<T>(url: RequestInfo, init?: RequestInit): Promise<T>;\n\n    /**\n     * Downloads a binary object.\n     * @param url The URL to download\n     * @param init Optional extra parameters for the download\n     */\n    downloadArrayBuffer(url: RequestInfo, init?: RequestInit): Promise<ArrayBuffer>;\n\n    /**\n     * Downloads a URL and returns the response.\n     * @param url The URL to download.\n     * @param init Optional extra parameters for the download.\n     */\n    download(url: RequestInfo, init?: RequestInit): Promise<Response>;\n}\n\n/**\n * `TransferManager` for downloading URLs.\n *\n * Features:\n *\n * * Merges JSON downloads, for example, the same URL if requested as JSON will only be downloaded\n *   once.\n * * Limits the amount of parallel downloads, useful when requesting a large amount of URLs that\n *   would otherwise stall the browser.\n * * Retries the downloads with an increasing timeout on HTTP 503 replies.\n *\n * The static method [[instance]] can be used to get a default constructed instance.\n */\nexport class TransferManager implements ITransferManager {\n    /**\n     * The timeout in milliseconds to wait between retries. This timeout is multiplied with the\n     * number of retries. First retry waits for 0 ms, second retry for 500 ms, third for 1000 ms and\n     * so on.\n     */\n    static readonly retryTimeout = 500;\n    /**\n     * The amount of maximum parallel downloads to allow.\n     */\n    static readonly maxParallelDownloads = 16;\n    /**\n     * Returns a default instance of [[TransferManager]].\n     */\n    static instance(): TransferManager {\n        return TransferManager.defaultInstance;\n    }\n    private static readonly defaultInstance = new TransferManager();\n    private static async fetchRepeatedly(\n        fetchFunction: typeof fetch,\n        retryCount: number,\n        maxRetries: number,\n        url: RequestInfo,\n        init?: RequestInit\n    ): Promise<Response> {\n        try {\n            const response = await fetchFunction(url, init);\n            if (response.status !== 503 || retryCount > maxRetries) {\n                return response;\n            }\n        } catch (err) {\n            if (\n                err.hasOwnProperty(\"isCancelled\") ||\n                (err.hasOwnProperty(\"name\") && err.name === \"AbortError\") ||\n                retryCount > maxRetries\n            ) {\n                throw err;\n            }\n        }\n        return TransferManager.waitFor(TransferManager.retryTimeout * retryCount).then(() =>\n            TransferManager.fetchRepeatedly(fetchFunction, maxRetries, retryCount + 1, url, init)\n        );\n    }\n    private static waitFor(milliseconds: number): Promise<void> {\n        return new Promise<void>(resolve => setTimeout(resolve, milliseconds));\n    }\n    private activeDownloadCount = 0;\n    private downloadQueue = new Array<DeferredPromise<Response>>();\n    private activeDownloads = new Map<RequestInfo, Promise<any>>();\n    /**\n     * Constructs a new [[TransferManager]].\n     *\n     * @param fetchFunction The default fetch function to use.\n     * @param maxRetries The maximum amount to try to re-fetch a resource.\n     */\n    constructor(readonly fetchFunction = fetch, readonly maxRetries: number = 5) {}\n    /**\n     * Downloads a JSON object. Merges downloads if requested multiple times.\n     *\n     * Note: This method merges multiple downloads of the same string URL to\n     * only one request. The init parameter is ignored if the download is merged.\n     * Call [[download]] instead to download the resource without merging.\n     *\n     * @param url The URL to download\n     * @param init Optional extra parameters for the download.\n     */\n    downloadJson<T>(url: RequestInfo, init?: RequestInit): Promise<T> {\n        return this.downloadAs<T>(response => response.json(), url, init);\n    }\n    /**\n     * Downloads a binary object. Merges downloads if requested multiple times.\n     *\n     * Note: This method merges multiple downloads of the same string URL to\n     * only one request. The init parameter is ignored if the download is merged.\n     * Call [[download]] instead to download the resource without merging.\n     *\n     * @param url The URL to download\n     * @param init Optional extra parameters for the download\n     */\n    downloadArrayBuffer(url: RequestInfo, init?: RequestInit): Promise<ArrayBuffer> {\n        return this.download(url, init).then(response => response.arrayBuffer());\n    }\n    /**\n     * Downloads a URL and returns the response.\n     *\n     * Does not merge multiple requests to the same URL.\n     *\n     * @param url The URL to download.\n     * @param init Optional extra parameters for the download.\n     */\n    download(url: RequestInfo, init?: RequestInit): Promise<Response> {\n        if (this.activeDownloadCount >= TransferManager.maxParallelDownloads) {\n            const deferred = new DeferredPromise<Response>(() => this.doDownload(url, init));\n            this.downloadQueue.push(deferred);\n            return deferred.promise;\n        }\n        return this.doDownload(url, init);\n    }\n    private async doDownload(url: RequestInfo, init?: RequestInit): Promise<Response> {\n        try {\n            ++this.activeDownloadCount;\n            const response = await TransferManager.fetchRepeatedly(\n                this.fetchFunction,\n                0,\n                this.maxRetries,\n                url,\n                init\n            );\n\n            this.onDownloadDone();\n            return response;\n        } catch (error) {\n            this.onDownloadDone();\n            throw error;\n        }\n    }\n    private onDownloadDone() {\n        --this.activeDownloadCount;\n        this.execDeferredDownload();\n    }\n    private execDeferredDownload() {\n        const future = this.downloadQueue.pop();\n        if (future === undefined) {\n            return;\n        }\n        future.exec();\n    }\n    private downloadAs<T>(\n        converter: (response: Response) => Promise<T>,\n        url: RequestInfo,\n        init?: RequestInit\n    ): Promise<T> {\n        const cacheKey = url;\n        const pendingFetch = this.activeDownloads.get(cacheKey);\n        if (pendingFetch !== undefined) {\n            return Promise.resolve(pendingFetch);\n        }\n        const newFetch = this.download(url, init)\n            .then(response => {\n                this.activeDownloads.delete(cacheKey);\n                if (response.ok) {\n                    return converter(response);\n                }\n                throw new Error(JSON.stringify(response));\n            })\n            .catch(err => {\n                this.activeDownloads.delete(cacheKey);\n                throw err;\n            });\n        this.activeDownloads.set(cacheKey, newFetch);\n        return newFetch;\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n *\n * DeferredPromise takes an executor function for executing it later, when [[exec]] is called.\n * This class allows wrapping other promises or long running functions for later execution.\n * @internal\n * @hidden\n */\nexport class DeferredPromise<T> {\n    /**\n     * Internal promise to store the result of the deferred executor function.\n     */\n    readonly promise: Promise<T>;\n    private resolveFunc?: (result?: T) => void;\n    private rejectFunc?: (reason?: any) => void;\n\n    /**\n     * Constructs a new [[DeferredPromise]]\n     * @param executor Async function that should be executed at a later point in time.\n     */\n    constructor(private readonly executor: () => Promise<T>) {\n        this.promise = new Promise<T>((resolve, reject) => {\n            this.resolveFunc = resolve;\n            this.rejectFunc = reject;\n        });\n    }\n\n    /**\n     * When `exec` is called the deferred executor function is executed.\n     */\n    exec() {\n        this.executor()\n            .then(result => this.resolveFunc!(result))\n            .catch(error => this.rejectFunc!(error));\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * `ImageItem` is used to identify an image in the [[ImageCache]].\n */\nexport interface ImageItem {\n    /** URL of the image, or unique identifier. */\n    url: string;\n    /** Pixel data. */\n    imageData?: ImageData | ImageBitmap;\n    /** Mip maps for image data */\n    mipMaps?: ImageData[];\n    /** Turns to `true` when the data has finished loading. */\n    loaded: boolean;\n    /** `loadingPromise` is only used during loading/generating the image. */\n    loadingPromise?: Promise<ImageItem | undefined>;\n}\n\nexport namespace ImageItem {\n    /**\n     * Missing Typedoc\n     */\n    export function isLoading(imageItem: ImageItem): boolean {\n        return imageItem.loadingPromise !== undefined;\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Theme } from \"@here/harp-datasource-protocol\";\nimport { EarthConstants, Projection, ProjectionType } from \"@here/harp-geoutils\";\n\nimport { GroundAtmosphereMaterial, SkyAtmosphereMaterial } from \"@here/harp-materials\";\nimport { WorldAnchor } from \"./MapView\";\n\nimport { assert } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\nimport { TiltViewClipPlanesEvaluator } from \"./ClipPlanesEvaluator\";\n\n/**\n * Atmosphere effect variants.\n */\nenum AtmosphereVariant {\n    Ground = 0x1,\n    Sky = 0x2,\n    SkyAndGround = 0x3\n}\n\n/**\n * Atmosphere shader variants.\n */\nenum AtmosphereShadingVariant {\n    ScatteringShader,\n    SimpleColor,\n    Wireframe\n}\n\n/**\n * Lists light modes.\n */\nexport enum AtmosphereLightMode {\n    LightOverhead = 0,\n    LightDynamic = 1\n}\n\n/**\n * Maximum altitude that atmosphere reaches as the percent of the Earth radius.\n */\nconst SKY_ATMOSPHERE_ALTITUDE_FACTOR = 0.025;\n\n/**\n * Maximum altitude that ground atmosphere is visible as the percent of the Earth radius.\n */\nconst GROUND_ATMOSPHERE_ALTITUDE_FACTOR = 0.0001;\n\n/**\n * Utility cache for holding temporary values.\n */\nconst cache = {\n    clipPlanes: { near: 0, far: 0 }\n};\n\n/**\n * Class that provides [[MapView]]'s atmospheric scattering effect.\n */\nexport class MapViewAtmosphere {\n    /**\n     * User data name attribute assigned to created mesh.\n     */\n    static SkyAtmosphereUserName: string = \"SkyAtmosphere\";\n    /**\n     * User data name attribute assigned to created mesh.\n     */\n    static GroundAtmosphereUserName: string = \"GroundAtmosphere\";\n\n    /**\n     * Check if scene or root scene object has already atmosphere effect added.\n     *\n     * @param where [[THREE.Object3D]] or [[THREE.Scene]] instance.\n     */\n    static isPresent(where: THREE.Scene | THREE.Object3D): boolean {\n        const root = where instanceof THREE.Scene ? where.parent : where;\n        if (root == null) {\n            return false;\n        }\n        if (root.getObjectByName(MapViewAtmosphere.SkyAtmosphereUserName)) {\n            return true;\n        } else if (root.getObjectByName(MapViewAtmosphere.GroundAtmosphereUserName)) {\n            return true;\n        }\n        return false;\n    }\n\n    private m_enabled: boolean = true;\n    private m_skyGeometry?: THREE.BufferGeometry;\n    private m_skyMaterial?: THREE.Material;\n    private m_skyMesh?: THREE.Mesh;\n    private m_groundGeometry?: THREE.BufferGeometry;\n    private m_groundMaterial?: THREE.Material;\n    private m_groundMesh?: THREE.Mesh;\n\n    private m_clipPlanesEvaluator = new TiltViewClipPlanesEvaluator(\n        EarthConstants.EQUATORIAL_RADIUS * SKY_ATMOSPHERE_ALTITUDE_FACTOR,\n        0,\n        1.0,\n        0.05,\n        10000000.0\n    );\n    // TODO: Support for Theme definition should be added.\n    //private m_cachedTheme: Theme = { styles: {} };\n\n    private readonly m_lightDirection = new THREE.Vector3(0.0, 1.0, 0.0);\n\n    /**\n     * Creates and adds `Atmosphere` effects to the scene.\n     *\n     * @note Currently works only with globe projection.\n     *\n     * @param m_sceneRoot The scene's root [[THREE.Object3D]] instance where the effect will\n     * be added.\n     * @param m_sceneCamera The camera used to render entire scene.\n     * @param m_projection The geo-projection used to transform geo coordinates to cartesian space.\n     * @param m_updateCallback The optional callback to that should be called whenever atmosphere\n     * configuration changes, may be used to inform related components (`MapView`) to redraw.\n     * @param m_atmosphereVariant The optional atmosphere configuration variant enum\n     * [[AtmosphereVariant]], which denotes where the atmosphere scattering effect should be\n     * applied, it may be ground or sky atmosphere only or most realistic for both, which is\n     * chosen by default.\n     * @param m_materialVariant The optional material variant to be used, mainly for\n     * testing and tweaking purposes.\n     */\n    constructor(\n        private m_sceneRoot: THREE.Object3D,\n        private m_sceneCamera: THREE.Camera,\n        private m_projection: Projection,\n        private m_updateCallback?: () => void,\n        private m_atmosphereVariant: AtmosphereVariant = AtmosphereVariant.SkyAndGround,\n        private m_materialVariant = AtmosphereShadingVariant.ScatteringShader\n    ) {\n        // tslint:disable-next-line: no-bitwise\n        if (this.m_atmosphereVariant & AtmosphereVariant.Sky) {\n            this.createSkyGeometry();\n        }\n        // tslint:disable-next-line: no-bitwise\n        if (this.m_atmosphereVariant & AtmosphereVariant.Ground) {\n            this.createGroundGeometry();\n        }\n        this.addToScene(this.m_sceneRoot);\n    }\n\n    get skyMesh(): THREE.Mesh | undefined {\n        return this.m_skyMesh;\n    }\n\n    get groundMesh(): THREE.Mesh | undefined {\n        return this.m_groundMesh;\n    }\n\n    /**\n     * Allows to enable/disable the atmosphere effect, regardless of the theme settings.\n     *\n     * Use this method to change the setup in runtime without defining corresponding theme setup.\n     *\n     * @param enable A boolean that specifies whether the atmosphere should be enabled or disabled.\n     */\n    set enabled(enable: boolean) {\n        // Check already disposed.\n        if (this.disposed) {\n            return;\n        }\n        if (this.m_enabled === enable) {\n            return;\n        }\n        this.m_enabled = enable;\n        const isAdded = MapViewAtmosphere.isPresent(this.m_sceneRoot);\n        if (enable && !isAdded) {\n            this.addToScene(this.m_sceneRoot);\n        } else if (!enable && isAdded) {\n            this.removeFromScene(this.m_sceneRoot);\n        }\n    }\n\n    /**\n     * Returns the current atmosphere status, enabled or disabled.\n     */\n    get enabled(): boolean {\n        return this.m_enabled;\n    }\n\n    set lightMode(lightMode: AtmosphereLightMode) {\n        if (this.m_materialVariant !== AtmosphereShadingVariant.ScatteringShader) {\n            return;\n        }\n        const dynamicLight = lightMode === AtmosphereLightMode.LightDynamic;\n        if (this.m_groundMaterial !== undefined) {\n            const groundMat = this.m_groundMaterial as GroundAtmosphereMaterial;\n            groundMat.setDynamicLighting(dynamicLight);\n        }\n        if (this.m_skyMaterial !== undefined) {\n            const skyMat = this.m_skyMaterial as SkyAtmosphereMaterial;\n            skyMat.setDynamicLighting(dynamicLight);\n        }\n    }\n\n    /**\n     * Disposes allocated resources.\n     */\n    dispose() {\n        // Unlink from scene and mapview anchors\n        if (this.enabled) {\n            this.enabled = false;\n        }\n\n        this.m_skyMaterial?.dispose();\n        this.m_groundMaterial?.dispose();\n\n        this.m_skyGeometry?.dispose();\n        this.m_groundGeometry?.dispose();\n\n        // After disposal we may no longer enable effect.\n        this.m_skyGeometry = undefined;\n        this.m_groundGeometry = undefined;\n\n        this.m_skyMaterial = undefined;\n        this.m_groundMaterial = undefined;\n\n        this.m_skyMesh = undefined;\n        this.m_groundMesh = undefined;\n    }\n\n    /**\n     * Sets the atmosphere depending on the [[Theme]] instance provided.\n     *\n     * This function is called when a theme is loaded. Atmosphere is added only if the theme\n     * contains a atmosphere definition with a:\n     * - `color` property, used to set the atmosphere color.\n     *\n     * @param theme A [[Theme]] instance.\n     */\n    reset(theme: Theme) {\n        //this.m_cachedTheme = theme;\n    }\n\n    private get disposed() {\n        return this.m_skyMesh === undefined && this.m_groundMesh === undefined;\n    }\n\n    /**\n     * Handles atmosphere effect adding.\n     */\n    private addToScene(sceneRoot: THREE.Object3D) {\n        assert(!MapViewAtmosphere.isPresent(sceneRoot), \"Atmosphere already added\");\n        if (this.m_skyMesh !== undefined) {\n            sceneRoot.add(createWorldAnchor(this.m_skyMesh, Number.MIN_SAFE_INTEGER));\n        }\n        if (this.m_groundMesh !== undefined) {\n            sceneRoot.add(createWorldAnchor(this.m_groundMesh, Number.MAX_SAFE_INTEGER));\n        }\n\n        // Request an update once the anchor is added to [[MapView]].\n        if (this.m_updateCallback) {\n            this.m_updateCallback();\n        }\n    }\n\n    /**\n     * Handles atmosphere effect removal.\n     */\n    private removeFromScene(sceneRoot: THREE.Object3D) {\n        if (!MapViewAtmosphere.isPresent(sceneRoot)) {\n            return;\n        }\n        let update = false;\n        if (this.m_skyMesh !== undefined) {\n            sceneRoot.remove(this.m_skyMesh);\n            update = true;\n        }\n        if (this.m_groundMesh !== undefined) {\n            sceneRoot.remove(this.m_groundMesh);\n            update = true;\n        }\n        if (update && this.m_updateCallback) {\n            this.m_updateCallback();\n        }\n    }\n\n    private createSkyGeometry() {\n        let skyGeometry: THREE.Geometry;\n        switch (this.m_projection.type) {\n            case ProjectionType.Spherical:\n                skyGeometry = new THREE.SphereGeometry(\n                    EarthConstants.EQUATORIAL_RADIUS * (1 + SKY_ATMOSPHERE_ALTITUDE_FACTOR),\n                    256,\n                    256\n                );\n                break;\n            default: {\n                skyGeometry = new THREE.PlaneGeometry(200, 200);\n                break;\n            }\n        }\n\n        skyGeometry.translate(0, 0, 0);\n        this.m_skyGeometry = new THREE.BufferGeometry();\n        this.m_skyGeometry.fromGeometry(skyGeometry);\n        skyGeometry.dispose();\n\n        if (this.m_materialVariant === AtmosphereShadingVariant.ScatteringShader) {\n            this.m_skyMaterial = new SkyAtmosphereMaterial();\n        } else if (this.m_materialVariant === AtmosphereShadingVariant.SimpleColor) {\n            this.m_skyMaterial = new THREE.MeshBasicMaterial({\n                color: new THREE.Color(0xc4f8ed),\n                opacity: 0.4,\n                transparent: false,\n                depthTest: true, // hide atmosphere behind globe (note: transparent changes order)\n                depthWrite: false,\n                side: THREE.BackSide,\n                blending: THREE.NormalBlending,\n                fog: false\n            });\n        } else {\n            this.m_skyMaterial = new THREE.MeshStandardMaterial({\n                color: 0x7fffff,\n                depthTest: false,\n                depthWrite: false,\n                normalScale: new THREE.Vector2(-1, -1),\n                side: THREE.BackSide, // not truly supported in wireframe mode\n                wireframe: true\n            });\n        }\n\n        this.m_skyMesh = new THREE.Mesh(this.m_skyGeometry, this.m_skyMaterial);\n        // Assign custom name so sky object may be easily recognized withing the scene.\n        this.m_skyMesh.name = MapViewAtmosphere.SkyAtmosphereUserName;\n        this.setupSkyForRendering();\n    }\n\n    private createGroundGeometry() {\n        let groundGeometry: THREE.Geometry;\n        switch (this.m_projection.type) {\n            case ProjectionType.Spherical:\n                groundGeometry = new THREE.SphereGeometry(\n                    EarthConstants.EQUATORIAL_RADIUS * (1 + GROUND_ATMOSPHERE_ALTITUDE_FACTOR),\n                    256,\n                    256\n                );\n                break;\n            default: {\n                groundGeometry = new THREE.PlaneGeometry(200, 200);\n                break;\n            }\n        }\n        groundGeometry.translate(0, 0, 0);\n        this.m_groundGeometry = new THREE.BufferGeometry();\n        this.m_groundGeometry.fromGeometry(groundGeometry);\n        groundGeometry.dispose();\n\n        if (this.m_materialVariant === AtmosphereShadingVariant.ScatteringShader) {\n            this.m_groundMaterial = new GroundAtmosphereMaterial();\n        } else if (this.m_materialVariant === AtmosphereShadingVariant.SimpleColor) {\n            this.m_groundMaterial = new THREE.MeshBasicMaterial({\n                color: new THREE.Color(0x00c5ff),\n                opacity: 0.4,\n                transparent: true,\n                depthTest: false,\n                depthWrite: false,\n                side: THREE.FrontSide,\n                blending: THREE.NormalBlending,\n                fog: false\n            });\n        } else {\n            this.m_groundMaterial = new THREE.MeshStandardMaterial({\n                color: 0x11899a,\n                depthTest: true, // FrontSide is not fully supported, so need depth test\n                depthWrite: false,\n                side: THREE.FrontSide,\n                wireframe: true\n            });\n        }\n\n        this.m_groundMesh = new THREE.Mesh(this.m_groundGeometry, this.m_groundMaterial);\n        // Assign name so object may be recognized withing the scene.\n        this.m_groundMesh.name = MapViewAtmosphere.GroundAtmosphereUserName;\n\n        this.setupGroundForRendering();\n    }\n\n    private setupSkyForRendering(): void {\n        if (this.m_skyMesh === undefined) {\n            return;\n        }\n        // Depending on material variant we need to update uniforms or only\n        // update camera near/far planes cause camera need to see further then\n        // actual earth geometry.\n        let onBeforeCallback: (_camera: THREE.Camera, _material: THREE.Material) => void;\n        if (this.m_materialVariant !== AtmosphereShadingVariant.ScatteringShader) {\n            // Setup only further clip planes before rendering.\n            onBeforeCallback = (camera: THREE.Camera, _material: THREE.Material) => {\n                this.overrideClipPlanes(camera);\n            };\n        } else {\n            // Setup proper clip planes and update uniforms values.\n            onBeforeCallback = (camera: THREE.Camera, material: THREE.Material) => {\n                this.overrideClipPlanes(camera);\n                // Check material wasn't swapped.\n                assert(material instanceof SkyAtmosphereMaterial);\n                const mat = this.m_skyMaterial as SkyAtmosphereMaterial;\n                mat.updateUniforms(mat, this.m_skyMesh!, camera, this.m_lightDirection);\n            };\n        }\n\n        // Sky material should be already created with mesh.\n        assert(this.m_skyMaterial !== undefined);\n        this.m_skyMesh.onBeforeRender = (\n            _renderer: THREE.WebGLRenderer,\n            _scene: THREE.Scene,\n            camera: THREE.Camera,\n            _geometry: THREE.Geometry | THREE.BufferGeometry,\n            material: THREE.Material,\n            _group: THREE.Group\n        ) => {\n            onBeforeCallback(camera, material);\n        };\n\n        this.m_skyMesh.onAfterRender = (\n            _renderer: THREE.WebGLRenderer,\n            _scene: THREE.Scene,\n            camera: THREE.Camera,\n            _geometry: THREE.Geometry | THREE.BufferGeometry,\n            _material: THREE.Material,\n            _group: THREE.Group\n        ) => {\n            this.revertClipPlanes(camera);\n        };\n    }\n\n    private setupGroundForRendering(): void {\n        if (this.m_groundMesh === undefined) {\n            return;\n        }\n        if (this.m_materialVariant !== AtmosphereShadingVariant.ScatteringShader) {\n            return;\n        }\n        // Ground material should be already created.\n        assert(this.m_groundMaterial !== undefined);\n        // Ground mesh does not need custom clip planes and uses the same camera setup as\n        // real (data source based) geometry.\n        this.m_groundMesh.onBeforeRender = (\n            _renderer: THREE.WebGLRenderer,\n            _scene: THREE.Scene,\n            camera: THREE.Camera,\n            _geometry: THREE.Geometry | THREE.BufferGeometry,\n            material: THREE.Material,\n            _group: THREE.Group\n        ) => {\n            assert(material instanceof GroundAtmosphereMaterial);\n            const mat = this.m_groundMaterial as GroundAtmosphereMaterial;\n            mat.updateUniforms(mat, this.m_groundMesh!, camera, this.m_lightDirection);\n        };\n    }\n\n    private overrideClipPlanes(rteCamera: THREE.Camera) {\n        // Store current clip planes used by global camera before modifying them.\n        const sceneCam = this.m_sceneCamera as THREE.PerspectiveCamera;\n        cache.clipPlanes.near = sceneCam.near;\n        cache.clipPlanes.far = sceneCam.far;\n        // Calculate view ranges using world camera.\n        // NOTE: ElevationProvider is not passed to evaluator, leaves min/max altitudes unchanged.\n        const viewRanges = this.m_clipPlanesEvaluator.evaluateClipPlanes(\n            this.m_sceneCamera,\n            this.m_projection\n        );\n        // Update relative to eye camera used internally in rendering.\n        assert(rteCamera instanceof THREE.PerspectiveCamera);\n        const c = rteCamera as THREE.PerspectiveCamera;\n        c.near = viewRanges.near;\n        // Small margin ensures that we never cull small triangles just below or at\n        // horizon - possible due to frustum culling in-precisions.\n        c.far = viewRanges.far + EarthConstants.EQUATORIAL_RADIUS * 0.1;\n        c.updateProjectionMatrix();\n    }\n\n    private revertClipPlanes(rteCamera: THREE.Camera) {\n        assert(rteCamera instanceof THREE.PerspectiveCamera);\n        const c = rteCamera as THREE.PerspectiveCamera;\n        // Restore scene camera clip planes.\n        c.near = cache.clipPlanes.near;\n        c.far = cache.clipPlanes.far;\n        c.updateProjectionMatrix();\n    }\n}\n\nfunction createWorldAnchor(mesh: THREE.Mesh, renderOrder: number): WorldAnchor<THREE.Mesh> {\n    const anchor = mesh as WorldAnchor<THREE.Mesh>;\n    anchor.renderOrder = renderOrder;\n    anchor.pickable = false;\n    anchor.worldPosition = new THREE.Vector3(0, 0, 0);\n    return anchor;\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nexport type ExtendedMesh = THREE.Mesh & {\n    /**\n     * Distance of this object from the Tile's center.\n     */\n    displacement?: THREE.Vector3;\n};\n\n/**\n * This enum defines the possible origin points for an image.\n */\nexport enum ImageOrigin {\n    TopLeft,\n    BottomLeft\n}\n\n/**\n * Available rendering parameters for the POIs.\n */\nexport interface ImageOptions {\n    /**\n     * The point of origin of the texture as supported in [[ImageOrigin]].\n     */\n    origin?: ImageOrigin;\n\n    /**\n     * Missing Typedoc\n     */\n    width: number;\n\n    /**\n     * Missing Typedoc\n     */\n    height: number;\n\n    /**\n     * Missing Typedoc\n     */\n    xOffset?: number;\n\n    /**\n     * Missing Typedoc\n     */\n    yOffset?: number;\n\n    /**\n     * Missing Typedoc\n     */\n    flipH?: boolean;\n\n    /**\n     * Missing Typedoc\n     */\n    flipV?: boolean;\n\n    /**\n     * Missing Typedoc\n     */\n    opacity?: number;\n}\n\n// export enum TextAlign {\n//     Center,\n//     Left,\n//     Right,\n\n//     // ??? expands lines to have same length.\n//     Justify\n// }\n\n// export interface LayoutOptions {\n//     paddingH?: number;\n//     paddingV: number;\n//     transFormCenterX?: number;\n//     transFormCenterY?: number;\n//     rotation?: number;\n//     /** Set to `true` to enlarge the box after rotation to include all rotated corners. */\n//     rotationEnlargesBox: boolean;\n// }\n\n// export interface TextOptions {\n//     bgColor?: THREE.Color;\n//     wrapWords?: boolean;\n//     maxNumLines?: number;\n//     maxWidth?: number;\n//     /** Replace with ellipsis if wider than maxWidth. */\n//     addEllipsis?: boolean;\n//     /** Handle right-to-left texts */\n//     isRightToLeft?: boolean;\n\n//     textAlignH?: AlignH; // = AlignH.Center;\n//     textAlignV?: AlignV; // = AlignV.Center;\n// }\n\n// export class IconLabel {\n//     constructor(text: string, options: LayoutOptions | TextOptions) {}\n\n//     /**\n//      * Setup a box with size and padding.\n//      *\n//      * @param box Target box to set up.\n//      */\n//     getBox(box: THREE.Box2) {}\n\n//     /**\n//      * Compute width and height from text and font.\n//      */\n//     computeBox() {}\n\n//     /**\n//      * Generate the glyphs and keep them in a buffer. Generates a fixed layout.\n//      */\n//     prepareRendering() {}\n// }\n\n// export enum AlignH {\n//     Center,\n//     Left,\n//     Right\n// }\n\n// export enum AlignV {\n//     Center,\n//     Top,\n//     Bottom\n// }\n\n// export enum AnchorTarget {\n//     /** Anchor point relative to Icon */\n//     Icon,\n//     /** Anchor point is transform center of icon */\n//     IconCenter,\n//     /** Anchor point relative to Icon including padding */\n//     IconBox,\n//     /** Anchor point relative to Label */\n//     Label,\n//     /** Anchor point relative to combination of Icon and Label */\n//     Box\n// }\n\n// export class AnchorPosition {\n//     targetH: AnchorTarget = AnchorTarget.Icon;\n//     targetV: AnchorTarget = AnchorTarget.Icon;\n//     alignH: AlignH = AlignH.Center;\n//     alignV: AlignV = AlignV.Center;\n// }\n\n// export enum IconPinMode {\n//     /** Pinned down, anchor point is the same at all angles. */\n//     PinDown,\n//     /**\n//      * Icon stands up. \"StreetLevel\"-style. The anchor point moves to the bottom of the icon when\n//      * the view direction gets parallel to the ground.\n//      */\n//     StandUp\n// }\n\n// export interface IconScaleOptions {\n//     depthScale?: boolean;\n//     minimumScale?: number;\n// }\n\n// export interface IconOptions {\n//     useScreenSpace?: boolean; // = true\n//     priority?: number;\n\n//     scaleOptions?: IconScaleOptions;\n\n//     /** Optional offset in screen space */\n//     screenOffsetX?: number;\n//     screenOffsetY?: number;\n\n//     /** Optional 3D height above terrain. */\n//     heightAboveGround?: number;\n// }\n\n// export class SimplePoiIcon {\n//     constructor(\n//         readonly pos: THREE.Vector3,\n//         readonly image ?: IconTexture,\n//         options ?: IconOptions\n//     ) { }\n// }\n\n// export class PoiIcon {\n//     constructor(\n//         readonly pos: THREE.Vector3,\n//         readonly image?: IconTexture,\n//         readonly label?: IconLabel,\n//         options?: IconOptions\n//     ) {}\n// }\n\n// export interface PoiOptions {\n//     featureId?: number;\n//     minZoomLevel?: number;\n// }\n\n// export class SimplePoi {\n//     private m_featureId?: number;\n//     private m_minZoomLevel: number = 0;\n\n//     constructor(readonly icon: SimplePoiIcon, options?: PoiOptions) {\n//         if (options !== undefined) {\n//             this.m_featureId = options.featureId;\n//             this.m_minZoomLevel = options.minZoomLevel !== undefined ? options.minZoomLevel : 0;\n//         }\n//     }\n// }\n\n// export class Poi {\n//     /** store multiple icons, one for every LOD */\n//     private m_icons: PoiIcon[] = [];\n//     private m_lod = 0;\n//     private m_featureId?: number;\n//     private m_minZoomLevel: number = 0;\n\n//     constructor(icon: PoiIcon, options?: PoiOptions) {\n//         this.m_icons.push(icon);\n\n//         if (options !== undefined) {\n//             this.m_featureId = options.featureId;\n//             this.m_minZoomLevel = options.minZoomLevel !== undefined ? options.minZoomLevel : 0;\n//         }\n//     }\n\n//     icon(): PoiIcon | undefined {\n//         return this.m_icons[this.m_lod];\n//     }\n\n//     /**\n//      * Select the level of detail that should be used.\n//      *\n//      * @param levelOfDetail Level of detail to render.\n//      */\n//     selectIcon(levelOfDetail: number) {}\n// }\n","/*\n * Copyright (C) 2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport * as THREE from \"three\";\n\nexport interface RequestHeaders {\n    [field: string]: string;\n}\n\n/**\n * A texture loader that supports request headers(e.g. for Authorization)\n */\nexport class TextureLoader {\n    private m_textureLoader = new THREE.TextureLoader();\n\n    /**\n     * Load an image from url and create a texture\n     * @param url URL to the image\n     * @param requestHeaders Optional request headers to load image(e.g. Authorization)\n     * @param crossOrigin Enable/disable CORS\n     */\n    async load(\n        url: string,\n        requestHeaders?: RequestHeaders | undefined,\n        crossOrigin: boolean = true\n    ): Promise<THREE.Texture> {\n        // Use THREE.js texture loader directly if no request header is set\n        if (requestHeaders === undefined) {\n            return this.loadWithThreeLoader(url);\n        }\n\n        // Load image with fetch API if request header is set\n        const response = await fetch(url, {\n            headers: requestHeaders,\n            mode: crossOrigin ? \"cors\" : \"no-cors\"\n        });\n        const blob = await response.blob();\n\n        // Load image from blob using THREE.js loader\n        const texture = await this.loadWithThreeLoader(URL.createObjectURL(blob));\n\n        // Set correct image format from original URL or blob mime type\n        // (object URL does not contain file format)\n        const isJPEG =\n            blob.type === \"image/jpeg/\" ||\n            url.search(/\\.jpe?g($|\\?)/i) > 0 ||\n            url.search(/^data\\:image\\/jpeg/) === 0;\n        texture.format = isJPEG ? THREE.RGBFormat : THREE.RGBAFormat;\n\n        return texture;\n    }\n\n    private loadWithThreeLoader(url: string): Promise<THREE.Texture> {\n        return new Promise<THREE.Texture>((resolve, reject) => {\n            this.m_textureLoader.setCrossOrigin(\"\");\n            this.m_textureLoader.load(\n                url,\n                texture => resolve(texture),\n                undefined,\n                () => reject(new Error(\"failed to load texture\"))\n            );\n        });\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nimport { GeometryType, getFeatureId } from \"@here/harp-datasource-protocol\";\nimport { assert, LoggerManager } from \"@here/harp-utils\";\nimport { Tile, TileFeatureData } from \"../Tile\";\nimport {\n    BufferedGeometryLineAccessor,\n    BufferedGeometryObject3dAccessor,\n    IGeometryAccessor,\n    ILineAccessor,\n    IndexedBufferedGeometryLineAccessor,\n    IObject3dAccessor,\n    isLineAccessor,\n    isObject3dAccessor\n} from \"./TileGeometry\";\n\nconst logger = LoggerManager.instance.create(\"TileDataAccessor\");\n\n/**\n * Interface for a client visitor that is used to visit all `THREE.Object`s in a tile.\n */\nexport interface ITileDataVisitor {\n    tile: Tile;\n\n    /**\n     * Should return `true` if the visitor wants to visit the object with the specified\n     * `featureId`. This function is called before the type of the object is even known.\n     */\n    wantsFeature(featureId: number | undefined): boolean;\n\n    /**\n     * Should return `true` if the visitor wants to visit the point with the specified\n     * `featureId`.\n     */\n    wantsPoint(featureId: number | undefined): boolean;\n\n    /**\n     * Should return `true` if the visitor wants to visit the line with the specified\n     * `featureId`.\n     */\n    wantsLine(featureId: number | undefined): boolean;\n\n    /**\n     * Should return `true` if the visitor wants to visit the area object with the specified\n     * `featureId`.\n     */\n    wantsArea(featureId: number | undefined): boolean;\n\n    /**\n     * Should return `true` if the visitor wants to visit the object with the specified\n     * `featureId`.\n     */\n    wantsObject3D(featureId: number | undefined): boolean;\n\n    /**\n     * Visits a point object with the specified `featureId`; use `pointAccessor` to get the\n     * object's properties.\n     */\n    visitPoint(featureId: number | undefined): void;\n\n    /**\n     * Visits a line object with the specified `featureId`; use `pointAccessor` to get the\n     * object's properties.\n     */\n    visitLine(featureId: number | undefined, lineAccessor: ILineAccessor): void;\n\n    /**\n     * Visit an area object with the specified `featureId`; use `pointAccessor` to get the\n     * object's properties.\n     */\n    visitArea(featureId: number | undefined): void;\n\n    /**\n     * Visits a 3D object with the specified `featureId`; use `pointAccessor` to get the\n     * object's properties.\n     */\n    visitObject3D(featureId: number | undefined, object3dAccessor: IObject3dAccessor): void;\n}\n\n/**\n * An interface that provides options for [[TileDataAccessor]].\n */\nexport interface TileDataAccessorOptions {\n    /** Limit to objects that have `featureID`s. */\n    onlyWithFeatureIds?: boolean;\n    /** Sets and overrides `wantPoints`, `wantLines`, `wantAreas`, `wantObject3D`. */\n    wantsAll?: boolean;\n    /** `true` to visit points. */\n    wantsPoints?: boolean;\n    /** `true` to visit lines. */\n    wantsLines?: boolean;\n    /** `true` to visit area objects. */\n    wantsAreas?: boolean;\n    /** `true` to visit general 3D objects. */\n    wantsObject3D?: boolean;\n}\n\n/**\n * An accessor for all geometries in a tile. This class uses a client-provided [[ITileDataVisitor]]\n * to visit all objects, based on filtering options specified by both, the `TileDataAccessor` and\n * the visitor itself.\n */\nexport class TileDataAccessor {\n    private m_wantsPoints = true;\n    private m_wantsLines = true;\n    private m_wantsAreas = true;\n    private m_wantsObject3D = true;\n\n    /**\n     * Constructs a `TileDataAccessor` instance.\n     *\n     * @param tile The tile to access.\n     * @param visitor The visitor.\n     * @param options Options for the tile.\n     */\n    constructor(\n        public tile: Tile,\n        private visitor: ITileDataVisitor,\n        options: TileDataAccessorOptions\n    ) {\n        const wantsAll = options.wantsAll === true;\n        this.m_wantsPoints = wantsAll || !(options.wantsPoints === false);\n        this.m_wantsLines = wantsAll || !(options.wantsLines === false);\n        this.m_wantsAreas = wantsAll || !(options.wantsAreas === false);\n        this.m_wantsObject3D = wantsAll || !(options.wantsObject3D === false);\n    }\n\n    /**\n     * Calls the visitor on all objects in the tile.\n     */\n    visitAll(): void {\n        const objects = this.tile.objects;\n\n        for (const object of objects) {\n            this.visitObject(object);\n        }\n    }\n\n    /**\n     * Visits a single object. This function should normally be called during visiting.\n     *\n     * @param object The object to visit.\n     */\n    protected visitObject(object: THREE.Object3D): void {\n        const featureData: TileFeatureData | undefined =\n            object.userData !== undefined\n                ? (object.userData.feature as TileFeatureData)\n                : undefined;\n\n        // early opt out if there is no feature data, or if the feature data has only a single id\n        // and the visitor wants to ignore that featureId\n        if (\n            featureData === undefined ||\n            (featureData.objInfos !== undefined &&\n                featureData.objInfos.length === 1 &&\n                !this.visitor.wantsFeature(getFeatureId(featureData.objInfos[0])))\n        ) {\n            return;\n        }\n\n        const geometryType = featureData.geometryType;\n        if (geometryType === undefined) {\n            logger.warn(\"#visitObject: visiting object failed, no geometryType\", object);\n            return;\n        }\n\n        assert(featureData.objInfos !== undefined, \"featureData.ids missing\");\n        assert(featureData.starts !== undefined, \"featureData.starts missing\");\n        assert(Array.isArray(featureData.starts), \"featureData.starts is not an array\");\n        if (featureData.objInfos !== undefined && featureData.starts !== undefined) {\n            assert(\n                featureData.objInfos.length === featureData.starts.length,\n                \"featureData.ids and featureData.starts have unequal length\"\n            );\n        }\n\n        switch (geometryType) {\n            case GeometryType.Point:\n            case GeometryType.Text:\n                if (!this.m_wantsPoints) {\n                    return;\n                }\n                break;\n            case GeometryType.SolidLine:\n            case GeometryType.ExtrudedLine:\n            case GeometryType.TextPath:\n                if (!this.m_wantsLines) {\n                    return;\n                }\n                break;\n            case GeometryType.Polygon:\n            case GeometryType.ExtrudedPolygon:\n                if (!this.m_wantsAreas) {\n                    return;\n                }\n                break;\n            case GeometryType.Object3D:\n                if (!this.m_wantsObject3D) {\n                    return;\n                }\n                break;\n            default:\n                logger.warn(\"#visitObject: invalid geometryType\");\n        }\n\n        if (object.type !== \"Mesh\") {\n            logger.warn(\"#visitObject: visiting object failed, not of type 'Mesh'\", object);\n            return;\n        }\n\n        const mesh = object as THREE.Mesh;\n\n        this.visitMesh(mesh, featureData);\n    }\n\n    /**\n     * Gets the `BufferGeometry` from the specified object. This function requires the\n     * attribute `position` in `BufferGeometry` to be set.\n     *\n     * @param object The object from which to get the geometry.\n     * @returns the geometry of the object, or `undefined`.\n     */\n    protected getBufferGeometry(object: THREE.Mesh): THREE.BufferGeometry | undefined {\n        const geometry = object.geometry;\n\n        if (geometry.type !== \"BufferGeometry\") {\n            logger.warn(\"#visitObject: object does not have BufferGeometry\");\n            return undefined;\n        }\n\n        const bufferGeometry = geometry as THREE.BufferGeometry;\n\n        // we know its a BufferAttribute because it is a BufferGeometry\n        const position: THREE.BufferAttribute = bufferGeometry.getAttribute(\n            \"position\"\n        ) as THREE.BufferAttribute;\n\n        if (!position) {\n            logger.warn(\"#visitLines: BufferGeometry has no position attribute\");\n            return undefined;\n        }\n\n        return bufferGeometry;\n    }\n\n    /**\n     * Obtains an accessor for the nonindexed geometry. This function may return `undefined`\n     * if the accessor is not implemented.\n     *\n     * @param geometryType The type of geometry.\n     * @param object The object for which to access the attributes and geometry.\n     * @param bufferGeometry The object's `BufferGeometry`.\n     * @returns an accessor for a specified object, if available.\n     */\n    protected getGeometryAccessor(\n        geometryType: GeometryType,\n        object: THREE.Mesh,\n        bufferGeometry: THREE.BufferGeometry\n    ): IGeometryAccessor | undefined {\n        switch (geometryType) {\n            case GeometryType.Point:\n            case GeometryType.Text:\n                // return new RoBufferedGeometryLineAccessor(object, geometryType, bufferGeometry);\n                return undefined;\n            case GeometryType.SolidLine:\n            case GeometryType.ExtrudedLine:\n            case GeometryType.TextPath:\n                return new BufferedGeometryLineAccessor(object, geometryType, bufferGeometry);\n            case GeometryType.Polygon:\n            case GeometryType.ExtrudedPolygon:\n                // return new RoBufferedGeometryLineAccessor(object, geometryType, bufferGeometry);\n                return undefined;\n            case GeometryType.Object3D:\n                return new BufferedGeometryObject3dAccessor(object, geometryType, bufferGeometry);\n            default:\n                logger.warn(\"#getGeometryAccessor: invalid geometryType\");\n        }\n        return undefined;\n    }\n\n    /**\n     * Obtains an accessor for the indexed geometry. This function may return `undefined`\n     * if the accessor is not implemented.\n     *\n     * @param geometryType The type of geometry.\n     * @param object The object for which to access the attributes and geometry.\n     * @param bufferGeometry The object's `BufferGeometry`.\n     * @returns an accessor for a specified object, if available.\n     */\n    protected getIndexedGeometryAccessor(\n        geometryType: GeometryType,\n        object: THREE.Mesh,\n        bufferGeometry: THREE.BufferGeometry\n    ): IGeometryAccessor | undefined {\n        switch (geometryType) {\n            case GeometryType.Point:\n            case GeometryType.Text:\n                // return new RoBufferedGeometryLineAccessor(object, geometryType, bufferGeometry);\n                return undefined;\n            case GeometryType.SolidLine:\n            case GeometryType.ExtrudedLine:\n            case GeometryType.TextPath:\n                return new IndexedBufferedGeometryLineAccessor(\n                    object,\n                    geometryType,\n                    bufferGeometry\n                );\n            case GeometryType.Polygon:\n            case GeometryType.ExtrudedPolygon:\n                // return new RoBufferedGeometryLineAccessor(object, geometryType, bufferGeometry);\n                return undefined;\n            case GeometryType.Object3D:\n                // return new RoBufferedGeometryLineAccessor(object, geometryType, bufferGeometry);\n                return undefined;\n            default:\n                logger.warn(\"#getIndexedGeometryAccessor: invalid geometryType\");\n        }\n        return undefined;\n    }\n\n    /**\n     * Visit the object.\n     *\n     * @param meshObject Object of type `Mesh`.\n     * @param featureData Dataset stored along with the object.\n     */\n    protected visitMesh(meshObject: THREE.Mesh, featureData: TileFeatureData): void {\n        const { objInfos, starts } = featureData;\n        const geometryType = featureData.geometryType;\n\n        // make linter happy: we already know that these both are valid\n        if (objInfos === undefined || starts === undefined || geometryType === undefined) {\n            return;\n        }\n\n        let geometryAccessor: IGeometryAccessor | undefined;\n\n        for (let featureIndex = 0; featureIndex < objInfos.length; featureIndex++) {\n            const featureId = getFeatureId(objInfos[featureIndex]);\n\n            if (!this.visitor.wantsFeature(featureId)) {\n                continue;\n            }\n\n            const featureStart = starts[featureIndex];\n            let featureEnd: number = -1;\n\n            // lazy creation of accessor, in case featureId was not wanted...\n            if (geometryAccessor === undefined) {\n                const bufferGeometry = this.getBufferGeometry(meshObject);\n                if (bufferGeometry === undefined) {\n                    continue;\n                }\n\n                if (bufferGeometry.index !== null) {\n                    geometryAccessor = this.getIndexedGeometryAccessor(\n                        geometryType,\n                        meshObject,\n                        bufferGeometry\n                    );\n                } else {\n                    geometryAccessor = this.getGeometryAccessor(\n                        geometryType,\n                        meshObject,\n                        bufferGeometry\n                    );\n                }\n\n                if (geometryAccessor === undefined) {\n                    logger.warn(\"#visitObject: no accessor geometryType\", geometryType);\n                    continue;\n                }\n            }\n\n            featureEnd =\n                featureIndex < starts.length - 1\n                    ? starts[featureIndex + 1]\n                    : geometryAccessor.getCount();\n\n            // setup/update the accessor for the new range of the object\n            geometryAccessor.setRange(featureStart, featureEnd);\n\n            switch (geometryType) {\n                case GeometryType.Point:\n                case GeometryType.Text:\n                    this.visitor.visitPoint(featureId);\n                    break;\n                case GeometryType.SolidLine:\n                case GeometryType.ExtrudedLine:\n                case GeometryType.TextPath:\n                    assert(isLineAccessor(geometryAccessor));\n                    this.visitor.visitLine(featureId, (geometryAccessor as any) as ILineAccessor);\n                    break;\n                case GeometryType.Polygon:\n                case GeometryType.ExtrudedPolygon:\n                    this.visitor.visitArea(featureId);\n                    break;\n                case GeometryType.Object3D:\n                    assert(isObject3dAccessor(geometryAccessor));\n                    this.visitor.visitObject3D(\n                        featureId,\n                        (geometryAccessor as any) as IObject3dAccessor\n                    );\n                    break;\n                default:\n                    logger.warn(\"#visitObject: invalid geometryType\");\n            }\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from \"./lib/Lines\";\nexport * from \"./lib/TriangulateLines\";\nexport * from \"./lib/HighPrecisionLines\";\nexport * from \"./lib/HighPrecisionUtils\";\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Projection } from \"@here/harp-geoutils\";\nimport { assert } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\n\n// Preallocate temp variables used during line generation.\nconst tmpV = new THREE.Vector3();\nconst tmpNormal = new THREE.Vector3();\nconst tmpTangent0 = new THREE.Vector3();\nconst tmpTangent1 = new THREE.Vector3();\nconst tmpBitangent = new THREE.Vector3();\nconst SEGMENT_OFFSET = 0.1;\n\n/**\n * Describes vertex attribute parameters of interleaved buffer.\n */\ninterface VertexAttributeDescriptor {\n    name: string;\n    itemSize: number;\n    offset: number;\n}\n\ninterface VertexDescriptor {\n    attributes: VertexAttributeDescriptor[];\n    stride: number;\n}\n\n/**\n * Declares all the vertex attributes used for rendering a line using the [[SolidLineMaterial]].\n */\n\n/** Base line vertex attributes. */\nconst LINE_VERTEX_ATTRIBUTES: VertexDescriptor = {\n    attributes: [\n        // The \"extrusionCoord\" is a vec4 which represents:\n        // xy: Extrusion coordinates\n        // sign(xy): Extrusion direction\n        // z: Line length\n        { name: \"extrusionCoord\", itemSize: 3, offset: 0 },\n        { name: \"position\", itemSize: 3, offset: 3 },\n        { name: \"tangent\", itemSize: 3, offset: 6 },\n        { name: \"bitangent\", itemSize: 4, offset: 9 }\n    ],\n    stride: 13\n};\n\n/** Optional normal and uv coordinates. */\nconst NORMAL_UV_VERTEX_ATTRIBUTES: VertexDescriptor = {\n    attributes: [\n        { name: \"uv\", itemSize: 2, offset: LINE_VERTEX_ATTRIBUTES.stride },\n        { name: \"normal\", itemSize: 3, offset: LINE_VERTEX_ATTRIBUTES.stride + 2 }\n    ],\n    stride: 5\n};\n\n/** Base line vertex attributes plus normals and uv coordinates. */\nconst LINE_VERTEX_ATTRIBUTES_NUV: VertexDescriptor = {\n    attributes: [...LINE_VERTEX_ATTRIBUTES.attributes, ...NORMAL_UV_VERTEX_ATTRIBUTES.attributes],\n    stride: LINE_VERTEX_ATTRIBUTES.stride + NORMAL_UV_VERTEX_ATTRIBUTES.stride\n};\n\n/**\n * Declares all the vertex attributes used for rendering a line using the\n * [[HighPrecisionLineMaterial]].\n */\nconst HP_LINE_VERTEX_ATTRIBUTES: VertexDescriptor = {\n    attributes: [\n        { name: \"extrusionCoord\", itemSize: 2, offset: 0 },\n        { name: \"position\", itemSize: 3, offset: 2 },\n        { name: \"positionLow\", itemSize: 3, offset: 5 },\n        { name: \"tangent\", itemSize: 3, offset: 8 },\n        { name: \"bitangent\", itemSize: 4, offset: 11 }\n    ],\n    stride: 15\n};\n\n/** High precision line vertex attributes plus normals and uv coordinates. */\nconst HP_LINE_VERTEX_ATTRIBUTES_NUV: VertexDescriptor = {\n    attributes: [\n        ...HP_LINE_VERTEX_ATTRIBUTES.attributes,\n        ...NORMAL_UV_VERTEX_ATTRIBUTES.attributes\n    ],\n    stride: HP_LINE_VERTEX_ATTRIBUTES.stride + NORMAL_UV_VERTEX_ATTRIBUTES.stride\n};\n\n/**\n * Class that holds the vertex and index attributes for a [[Lines]] object.\n */\nexport class LineGeometry {\n    vertices: number[] = [];\n    vertexColors: number[] = [];\n    indices: number[] = [];\n}\n\nfunction getVertexDescriptor(hasNormalsAndUvs: boolean, highPrecision: boolean): VertexDescriptor {\n    if (highPrecision) {\n        return hasNormalsAndUvs ? HP_LINE_VERTEX_ATTRIBUTES_NUV : HP_LINE_VERTEX_ATTRIBUTES;\n    } else {\n        return hasNormalsAndUvs ? LINE_VERTEX_ATTRIBUTES_NUV : LINE_VERTEX_ATTRIBUTES;\n    }\n}\n\n/**\n * Creates a [[LineGeometry]] object out of a polyline.\n *\n * @param center Center of the polyline.\n * @param polyline Array of `numbers` describing a polyline.\n * @param offsets Array of `numbers` representing line segment offsets.\n * @param uvs Array of `numbers` representing texture coordinates.\n * @param colors Array of `numbers` describing a polyline's colors.\n * @param geometry [[LineGeometry]] object used to store the vertex and index attributes.\n * @param highPrecision If `true` will create high-precision vertex information.\n */\nexport function createLineGeometry(\n    center: THREE.Vector3,\n    polyline: ArrayLike<number>,\n    projection: Projection,\n    offsets?: ArrayLike<number>,\n    uvs?: ArrayLike<number>,\n    colors?: ArrayLike<number>,\n    geometry = new LineGeometry(),\n    highPrecision: boolean = false\n): LineGeometry {\n    if (polyline.length === 0) {\n        return geometry;\n    }\n\n    const stride = getVertexDescriptor(uvs !== undefined, highPrecision).stride;\n\n    const pointCount = polyline.length / 3;\n    const segments = new Array<number>(pointCount);\n    const tangents = new Array<number>(polyline.length - 3);\n    const baseVertex = geometry.vertices.length / stride;\n\n    const hasSegmentOffsets = offsets !== undefined && offsets.length > 0;\n    const hasTexCoords = uvs !== undefined && uvs.length > 0;\n    const vertexColors = colors !== undefined && colors.length && polyline.length;\n\n    assert(!hasSegmentOffsets || offsets!.length === pointCount);\n    assert(!hasTexCoords || uvs!.length / 2 === pointCount);\n    assert(!vertexColors || colors!.length === polyline.length);\n\n    // Compute segments and tangents.\n    let sum = SEGMENT_OFFSET;\n    segments[0] = sum;\n    for (let i = 0; i < pointCount - 1; ++i) {\n        let sqrLength = 0;\n        for (let j = 0; j < 3; ++j) {\n            const d = polyline[(i + 1) * 3 + j] - polyline[i * 3 + j];\n            tangents[i * 3 + j] = d;\n            sqrLength += d * d;\n        }\n        const len = Math.sqrt(sqrLength);\n        sum = sum + len;\n        segments[i + 1] = sum;\n    }\n\n    const lineCoverage = hasSegmentOffsets\n        ? Math.abs(offsets![offsets!.length - 1] - offsets![0])\n        : 1.0;\n    const lineLength = segments[segments.length - 1] / lineCoverage;\n\n    // Override the segments if offsets are explicitly provided.\n    if (hasSegmentOffsets) {\n        for (let i = 0; i < pointCount; ++i) {\n            segments[i] = offsets![i] * lineLength + SEGMENT_OFFSET;\n        }\n    }\n\n    // Check if we're working with a closed line.\n    let isClosed = true;\n    for (let j = 0; j < 3; ++j) {\n        isClosed = isClosed && polyline[j] === polyline[polyline.length - 3 + j];\n    }\n\n    const tmpVertices: number[] = [];\n\n    const addVertexPair = (\n        i: number,\n        T1: number,\n        T2: number,\n        segment: number,\n        extrusionCoord: number\n    ) => {\n        tmpVertices.length = 0;\n\n        // Store the segment and extrusionCoord attributes.\n        geometry.vertices.push(segment, extrusionCoord * -1, lineLength);\n        tmpVertices.push(segment, extrusionCoord * 1, lineLength);\n\n        // Store the position attribute (component-dependant).\n        for (let j = 0; j < 3; ++j) {\n            if (!highPrecision) {\n                geometry.vertices.push(polyline[i * 3 + j]);\n                tmpVertices.push(polyline[i * 3 + j]);\n            } else {\n                const highComp = Math.fround(polyline[i * 3 + j]);\n                const lowComp = polyline[i * 3 + j] - highComp;\n                geometry.vertices.push(highComp, lowComp);\n                tmpVertices.push(highComp, lowComp);\n            }\n            tmpNormal.setComponent(j, polyline[i * 3 + j]);\n        }\n\n        // Store the bitangent attribute (component-dependant).\n        for (let j = 0; j < 3; ++j) {\n            tmpTangent0.setComponent(j, tangents[T1 + j]);\n            tmpTangent1.setComponent(j, tangents[T2 + j]);\n        }\n        tmpTangent0.normalize();\n        geometry.vertices.push(tmpTangent0.x, tmpTangent0.y, tmpTangent0.z);\n        tmpVertices.push(tmpTangent0.x, tmpTangent0.y, tmpTangent0.z);\n        tmpNormal.add(center); // tmpNormal contains world position\n        projection.surfaceNormal(tmpNormal, tmpNormal);\n        const angle = computeBitangent(\n            tmpNormal,\n            tmpTangent0,\n            tmpTangent1.normalize(),\n            tmpBitangent\n        );\n        geometry.vertices.push(tmpBitangent.x, tmpBitangent.y, tmpBitangent.z, angle);\n        tmpVertices.push(tmpBitangent.x, tmpBitangent.y, tmpBitangent.z, angle);\n\n        if (hasTexCoords) {\n            // uvs\n            geometry.vertices.push(uvs![i * 2], uvs![i * 2 + 1]);\n            tmpVertices.push(uvs![i * 2], uvs![i * 2 + 1]);\n            // normals\n            geometry.vertices.push(tmpNormal.x, tmpNormal.y, tmpNormal.z);\n            tmpVertices.push(tmpNormal.x, tmpNormal.y, tmpNormal.z);\n        }\n\n        geometry.vertices.push(...tmpVertices);\n\n        // Add vertex colors (if supplied).\n        if (vertexColors) {\n            geometry.vertexColors.push(colors![i * 3], colors![i * 3 + 1], colors![i * 3 + 2]);\n            geometry.vertexColors.push(colors![i * 3], colors![i * 3 + 1], colors![i * 3 + 2]);\n        }\n    };\n\n    for (let i = 0; i < pointCount; ++i) {\n        // Retrieve the per-point tangents.\n        const T1 = isClosed && i === 0 ? tangents.length - 3 : Math.max(0, i - 1) * 3;\n        const T2 = isClosed && i === pointCount - 1 ? 0 : Math.min(i * 3, tangents.length - 3);\n\n        // Process v0 and v1.\n        if (i > 0) {\n            addVertexPair(i, T1, T2, segments[i - 1], segments[i]);\n        }\n\n        // Process v2 and v3.\n        if (i + 1 < pointCount) {\n            addVertexPair(\n                i,\n                T1,\n                T2,\n                segments[Math.min(i, segments.length - 1)] * -1,\n                segments[Math.min(i + 1, segments.length - 1)]\n            );\n        }\n    }\n\n    // Store the triangle indices in the final index buffer.\n    for (let i = 0; i < pointCount - 1; ++i) {\n        const base = baseVertex + i * 4;\n        geometry.indices.push(base, base + 1, base + 2, base + 2, base + 1, base + 3);\n    }\n\n    return geometry;\n}\n\n/**\n * Creates a [[LineGeometry]] object out of a polyline.\n *\n * @param polyline Array of `numbers` describing a polyline.\n * @param colors Array of `numbers` describing a polyline's colors.\n * @param geometry [[LineGeometry]] object used to store the vertex and index attributes.\n */\nexport function createSimpleLineGeometry(\n    polyline: ArrayLike<number>,\n    colors?: ArrayLike<number>,\n    geometry = new LineGeometry()\n): LineGeometry {\n    if (polyline.length === 0) {\n        return geometry;\n    }\n\n    const pointCount = polyline.length / 3;\n    let index = geometry.vertices.length / 3;\n\n    const vertexColors = colors !== undefined && colors.length && polyline.length;\n\n    for (let i = 0; i < pointCount; ++i, index++) {\n        if (i > 0) {\n            geometry.indices.push(index);\n        }\n        if (i < pointCount - 1) {\n            geometry.indices.push(index);\n        }\n        for (let j = 0; j < 3; ++j) {\n            geometry.vertices.push(polyline[i * 3 + j]);\n            if (vertexColors) {\n                geometry.vertexColors.push(colors![i * 3 + j]);\n            }\n        }\n    }\n\n    return geometry;\n}\n\n/**\n * Class used to render groups (or batches) of width-variable lines (in the same tile).\n */\nexport class LineGroup {\n    /**\n     * Adds all the attribute data needed to a [[BufferGeometry]] object for rendering `Lines`.\n     *\n     * @param vertices Array of vertex attributes.\n     * @param colors Array of vertex colors.\n     * @param indices Array of vertex indices.\n     * @param geometry [[BufferGeometry]] object which will store all the `Lines` attribute data.\n     * @param hasNormalsAnUvs Whether vertices have normal and uv coordinates as attributes.\n     * @param highPrecision If `true` will create high-precision vertex information.\n     * @param isSimple `true` to create simple (nonsolid, nonextruded) lines. Defaults to `false`.\n     */\n    static createGeometry(\n        vertices: ArrayLike<number>,\n        colors: ArrayLike<number>,\n        indices: ArrayLike<number>,\n        geometry: THREE.BufferGeometry,\n        hasNormalsAndUvs: boolean = false,\n        highPrecision = false,\n        isSimple = false\n    ): THREE.BufferGeometry {\n        if (isSimple) {\n            geometry.setAttribute(\n                \"position\",\n                new THREE.BufferAttribute(new Float32Array(vertices), 3)\n            );\n            if (colors.length === vertices.length) {\n                geometry.setAttribute(\n                    \"color\",\n                    new THREE.BufferAttribute(new Float32Array(colors), 3)\n                );\n            }\n            geometry.setIndex(new THREE.BufferAttribute(new Uint32Array(indices), 1));\n            return geometry;\n        } else {\n            const vertexDescriptor = getVertexDescriptor(hasNormalsAndUvs, highPrecision);\n\n            const buffer = new THREE.InterleavedBuffer(\n                new Float32Array(vertices),\n                vertexDescriptor.stride\n            );\n            vertexDescriptor.attributes.forEach(descr => {\n                const attribute = new THREE.InterleavedBufferAttribute(\n                    buffer,\n                    descr.itemSize,\n                    descr.offset,\n                    false\n                );\n                geometry.setAttribute(descr.name, attribute);\n            });\n            if (colors.length === vertices.length) {\n                geometry.setAttribute(\n                    \"color\",\n                    new THREE.BufferAttribute(new Float32Array(colors), 3)\n                );\n            }\n\n            geometry.setIndex(new THREE.BufferAttribute(new Uint32Array(indices), 1));\n\n            return geometry;\n        }\n    }\n\n    private readonly m_geometry: LineGeometry;\n\n    constructor(\n        readonly hasNormalsAndUvs: boolean = false,\n        readonly highPrecision: boolean = false,\n        readonly isSimple: boolean = false\n    ) {\n        this.m_geometry = new LineGeometry();\n    }\n\n    /**\n     * Clears the list of line strips.\n     */\n    clear() {\n        this.m_geometry.vertices = [];\n        this.m_geometry.vertexColors = [];\n        this.m_geometry.indices = [];\n    }\n\n    /**\n     * Add the given points to this line group.\n     *\n     * @param center World center of the provided points.\n     * @param points Sequence of (x,y,z) coordinates.\n     * @param offsets Sequence of line segment offsets.\n     * @param uvs Sequence of (u,v) texture coordinates.\n     * @param colors Sequence of (r,g,b) color components.\n     */\n    add(\n        center: THREE.Vector3,\n        points: ArrayLike<number>,\n        projection: Projection,\n        offsets?: ArrayLike<number>,\n        uvs?: ArrayLike<number>,\n        colors?: ArrayLike<number>\n    ): this {\n        if (!this.isSimple) {\n            assert(!this.hasNormalsAndUvs || uvs !== undefined);\n            createLineGeometry(\n                center,\n                points,\n                projection,\n                offsets,\n                uvs,\n                colors,\n                this.m_geometry,\n                this.highPrecision\n            );\n        } else {\n            createSimpleLineGeometry(points, colors, this.m_geometry);\n        }\n        return this;\n    }\n\n    /**\n     * Returns the list of vertices.\n     */\n    get vertices(): number[] {\n        return this.m_geometry.vertices;\n    }\n\n    /**\n     * Returns the list of vertex colors.\n     */\n    get vertexColors(): number[] {\n        return this.m_geometry.vertexColors;\n    }\n\n    /**\n     * Returns the list of indices.\n     */\n    get indices(): number[] {\n        return this.m_geometry.indices;\n    }\n\n    /**\n     * Returns the list of [[VertexAttributeDescriptor]]s.\n     */\n    get vertexAttributes(): VertexAttributeDescriptor[] {\n        return getVertexDescriptor(this.hasNormalsAndUvs, this.highPrecision).attributes;\n    }\n\n    /**\n     * Returns the vertex attribute stride.\n     */\n    get stride(): number {\n        return getVertexDescriptor(this.hasNormalsAndUvs, this.highPrecision).stride;\n    }\n\n    /**\n     * Creates a three.js geometry.\n     */\n    createGeometry(geometry?: THREE.BufferGeometry): THREE.BufferGeometry {\n        if (geometry === undefined) {\n            geometry = new THREE.BufferGeometry();\n        }\n        return LineGroup.createGeometry(\n            this.m_geometry.vertices,\n            this.m_geometry.vertexColors,\n            this.m_geometry.indices,\n            geometry,\n            this.hasNormalsAndUvs,\n            this.highPrecision\n        );\n    }\n}\n\nfunction computeBitangent(\n    n: THREE.Vector3,\n    t0: THREE.Vector3,\n    t1: THREE.Vector3,\n    bt: THREE.Vector3\n): number {\n    let angle = 0;\n    if (!t0.equals(t1)) {\n        angle = Math.acos(t0.dot(t1)) * Math.sign(n.dot(tmpV.copy(t0).cross(t1)));\n        if (Number.isNaN(angle)) {\n            angle = 0;\n        }\n    }\n    bt.copy(t0)\n        .add(t1)\n        .normalize()\n        .cross(n)\n        .normalize();\n    return angle;\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nimport { HighPrecisionPointMaterial } from \"@here/harp-materials\";\n\nimport { HighPrecisionObject } from \"./HighPrecisionLines\";\nimport { HighPrecisionUtils } from \"./HighPrecisionUtils\";\n\n/**\n * Class used to render high-precision points.\n */\nexport class HighPrecisionPoints extends THREE.Points implements HighPrecisionObject {\n    matrixWorldInverse: THREE.Matrix4;\n\n    /**\n     * Number of dimensions this `HighPrecisionObject` is specified in (2D/3D).\n     */\n    dimensionality?: number;\n\n    /**\n     * Creates a `HighPrecisionPoints` object.\n     *\n     * @param geometry [[BufferGeometry]] used to render this object.\n     * @param material [[HighPrecisionLineMaterial]] used to render this object.\n     *     instances.\n     * @param positions Array of 2D/3D positions.\n     * @param color Color of the rendered point.\n     * @param opacity Opacity of the rendered point.\n     */\n    constructor(\n        geometry?: THREE.BufferGeometry,\n        material?: HighPrecisionPointMaterial,\n        positions?: number[] | THREE.Vector3[],\n        color?: THREE.Color,\n        opacity?: number\n    ) {\n        if (material === undefined) {\n            material = new HighPrecisionPointMaterial({\n                color: color ? color : HighPrecisionPointMaterial.DEFAULT_COLOR,\n                opacity: opacity !== undefined ? opacity : 1\n            });\n        }\n\n        super(geometry === undefined ? new THREE.BufferGeometry() : geometry, material);\n\n        this.matrixWorldInverse = new THREE.Matrix4();\n\n        if (positions) {\n            this.setPositions(positions);\n        }\n    }\n\n    get bufferGeometry(): THREE.BufferGeometry {\n        return this.geometry as THREE.BufferGeometry;\n    }\n\n    /**\n     * Clears the [[BufferGeometry]] used to render this point.\n     */\n    clearGeometry(): THREE.BufferGeometry {\n        return (this.geometry = new THREE.BufferGeometry());\n    }\n\n    get shaderMaterial(): THREE.ShaderMaterial {\n        return this.material as THREE.ShaderMaterial;\n    }\n\n    setPositions(positions: number[] | THREE.Vector3[]): void {\n        HighPrecisionUtils.setPositions(this, positions);\n    }\n\n    setupForRendering(): void {\n        if (\n            (this.material as any).isHighPrecisionPointsMaterial &&\n            this.dimensionality !== undefined\n        ) {\n            (this.material as any).setDimensionality(this.dimensionality);\n        }\n        this.onBeforeRender = (\n            _renderer: THREE.WebGLRenderer,\n            _scene: THREE.Scene,\n            camera: THREE.Camera,\n            _geometry: THREE.Geometry | THREE.BufferGeometry,\n            _material: THREE.Material,\n            _group: THREE.Group\n        ) => {\n            HighPrecisionUtils.updateHpUniforms(this, camera, this.shaderMaterial);\n        };\n    }\n\n    updateMatrixWorld(force: boolean) {\n        const doUpdateMatrixWorldInverse = this.matrixWorldNeedsUpdate || force;\n\n        super.updateMatrixWorld(force);\n\n        if (doUpdateMatrixWorldInverse) {\n            this.matrixWorldInverse.getInverse(this.matrixWorld);\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from \"./lib/OmvDataFilter\";\nexport * from \"./lib/OmvDataSource\";\nexport * from \"./lib/OmvDecoderDefs\";\nexport * from \"./lib/OmvTile\";\nexport * from \"./lib/OmvDebugLabelsTile\";\nexport * from \"./lib/OmvRestClient\";\nexport * from \"./lib/GeoJsonDataProvider\";\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { GeometryKind, GeometryKindSet } from \"@here/harp-datasource-protocol\";\nimport { MapEnv } from \"@here/harp-datasource-protocol/index-decoder\";\nimport {\n    OmvFeatureFilterDescription,\n    OmvFilterDescription,\n    OmvFilterFeatureAttribute,\n    OmvFilterString,\n    OmvGeometryType,\n    OmvLayerFilterDescription\n} from \"./OmvDecoderDefs\";\n\n/**\n * The `OmvFeatureFilter` is designed to work in an `OmvVisitor`/`visitOmv` combination (for\n * example, `OmvDecoder`). Returning `false` from any of the calls terminates processing of that\n * layer or feature.\n *\n * The `OmvFeatureFilter` is an \"early-opt-out\" filter, which cannot filter individual features,\n * because at that point the features are not really decoded. Use the [[OmvFeatureModifier]] to\n * filter for individual features.\n */\nexport interface OmvFeatureFilter {\n    /**\n     * Returns `true` if the filter contains rules for specific kinds.\n     */\n    hasKindFilter: boolean;\n\n    /**\n     * Return `false` if the layer should not be processed.\n     *\n     * @param layer Current layer.\n     * @param level Level of tile.\n     */\n    wantsLayer(layer: string, level: number): boolean;\n\n    /**\n     * Return `false` if the point feature should not be processed.\n     *\n     * @param layer Current layer.\n     * @param feature Current feature.\n     * @param level Level of tile.\n     */\n    wantsPointFeature(layer: string, geometryType: OmvGeometryType, level: number): boolean;\n\n    /**\n     * Return `false` if the line feature should not be processed.\n     *\n     * @param layer Current layer.\n     * @param feature Current feature.\n     * @param level Level of tile.\n     */\n    wantsLineFeature(layer: string, geometryType: OmvGeometryType, level: number): boolean;\n\n    /**\n     * Return `false` if the polygon feature should not be processed.\n     *\n     * @param layer Current layer.\n     * @param feature Current feature.\n     * @param level Level of tile.\n     */\n    wantsPolygonFeature(layer: string, geometryType: OmvGeometryType, level: number): boolean;\n\n    /**\n     * Return `false` if kind of object is not enabled and the geometry should not be created.\n     *\n     * @param {(string | string[])} kind Tag \"kind\" of the tag.\n     * @returns {boolean}\n     */\n    wantsKind(kind: string | string[]): boolean;\n}\n\n/**\n * The `OmvFeatureModifier` can be used to filter individual features. It gets passed in the [[Env]]\n * of the feature, which contains all the values that can be searched for in a style. If a filter\n * function returns false, the feature is ignored, and no geometry is being created.\n *\n * In addition to pure filtering, the `OmvFeatureModifier` can also modify the [[Env]] of the\n * feature, or even add new properties to the feature, for example, traffic states. The\n * `OmvFeatureModifier` is executed before the styles are selected, so the geometry is created with\n * the modified feature properties.\n */\nexport interface OmvFeatureModifier {\n    /**\n     * Check if the point feature described by `env` should be processed. The properties can be\n     * modified or added to.\n     *\n     * @param layer Current layer.\n     * @param env Properties of point feature.\n     * @param level Level of tile.\n     * @returns `false` to ignore feature.\n     */\n    doProcessPointFeature(layer: string, env: MapEnv, level: number): boolean;\n\n    /**\n     * Check if the line feature described by `env` should be processed. The properties can be\n     * modified or added to.\n     *\n     * @param layer Current layer.\n     * @param env Properties of line feature.\n     * @param level Level of tile.\n     * @returns `false` to ignore feature.\n     */\n    doProcessLineFeature(layer: string, env: MapEnv, level: number): boolean;\n\n    /**\n     * Check if the polygon feature described by `env` should be processed. The properties can be\n     * modified or added to.\n     *\n     * @param layer Current layer.\n     * @param env Properties of polygon feature.\n     * @param level Level of tile.\n     * @returns `false` to ignore feature.\n     */\n    doProcessPolygonFeature(layer: string, env: MapEnv, level: number): boolean;\n}\n\n/**\n * Builds an `OmvFilterDescription` (internal type) that specifies an [[OmvFeatureFilter]] as well\n * as an [[OmvFeatureModifier]].\n *\n */\nexport class OmvFeatureFilterDescriptionBuilder {\n    private m_processLayersDefault: boolean = true;\n    private m_processPointsDefault: boolean = true;\n    private m_processLinesDefault: boolean = true;\n    private m_processPolygonsDefault: boolean = true;\n\n    private readonly m_layersToProcess = new Array<OmvLayerFilterDescription>();\n    private readonly m_layersToIgnore = new Array<OmvLayerFilterDescription>();\n    private readonly m_pointsToProcess = new Array<OmvFilterDescription>();\n    private readonly m_ignoredPoints = new Array<OmvFilterDescription>();\n    private readonly m_linesToProcess = new Array<OmvFilterDescription>();\n    private readonly m_linesToIgnore = new Array<OmvFilterDescription>();\n    private readonly m_polygonsToProcess = new Array<OmvFilterDescription>();\n    private readonly m_polygonsToIgnore = new Array<OmvFilterDescription>();\n\n    private m_kindsToProcess: string[] = [];\n    private m_kindsToIgnore: string[] = [];\n\n    /**\n     * Builds an `OmvFilterDescription` (internal type) that specifies an [[OmvFeatureFilter]] as\n     * well as an [[OmvFeatureModifier]].\n     *\n     * @param processLayersDefault If `true`, all unspecified layers will be processed. If `false`,\n     * all unspecified layers will be ignored.\n     * @param processPointsDefault If `true`, all unspecified point features will be processed. If\n     * `false`, all unspecified point features will be ignored.\n     * @param processLinesDefault If `true`, all unspecified line features will be processed. If\n     * `false`, all unspecified line features will be ignored.\n     * @param processPolygonsDefault If `true`, all unspecified polygon features will be processed.\n     * If `false`, all unspecified polygon features will be ignored.\n     */\n    constructor(\n        options?: OmvFeatureFilterDescriptionBuilder.OmvFeatureFilterDescriptionBuilderOptions\n    ) {\n        if (options) {\n            this.m_processLayersDefault =\n                options.processLayersDefault !== undefined ? options.processLayersDefault : true;\n            this.m_processPointsDefault =\n                options.processPointsDefault !== undefined ? options.processPointsDefault : true;\n            this.m_processLinesDefault =\n                options.processLinesDefault !== undefined ? options.processLinesDefault : true;\n            this.m_processPolygonsDefault =\n                options.processPolygonsDefault !== undefined\n                    ? options.processPolygonsDefault\n                    : true;\n        }\n    }\n\n    /**\n     * Add a layer that should be processed.\n     *\n     * @param layer Layer name to be matched.\n     * @param match Match condition.\n     */\n    processLayer(\n        layer: string,\n        match = OmvFilterString.StringMatch.Match,\n        minLevel: number = 0,\n        maxLevel: number = Infinity\n    ) {\n        this.m_layersToProcess.push({\n            name: { value: layer, match },\n            minLevel,\n            maxLevel\n        });\n    }\n\n    /**\n     * Add a layer that should be ignored.\n     *\n     * @param layer Layer name to be matched.\n     * @param match Match condition.\n     */\n    ignoreLayer(\n        layer: string,\n        match = OmvFilterString.StringMatch.Match,\n        minLevel: number = 0,\n        maxLevel: number = Infinity\n    ) {\n        this.m_layersToIgnore.push({\n            name: { value: layer, match },\n            minLevel,\n            maxLevel\n        });\n    }\n\n    /**\n     * Add a valid point feature.\n     *\n     * @param options Feature options.\n     */\n    processPoint(options: OmvFeatureFilterDescriptionBuilder.FeatureOption) {\n        this.addItem(this.m_pointsToProcess, options);\n    }\n\n    /**\n     * Add valid point features.\n     *\n     * @param options Multi feature options.\n     */\n    processPoints(options: OmvFeatureFilterDescriptionBuilder.MultiFeatureOption) {\n        this.addItems(this.m_pointsToProcess, options);\n    }\n\n    /**\n     * Add a point feature that should be ignored.\n     *\n     * @param options Feature options.\n     */\n    ignorePoint(options: OmvFeatureFilterDescriptionBuilder.FeatureOption) {\n        this.addItem(this.m_ignoredPoints, options);\n    }\n\n    /**\n     * Add point features that should be ignored.\n     *\n     * @param options Multi feature options.\n     */\n    ignorePoints(options: OmvFeatureFilterDescriptionBuilder.MultiFeatureOption) {\n        this.addItems(this.m_ignoredPoints, options);\n    }\n\n    /**\n     * Add a valid line feature.\n     *\n     * @param options Feature options.\n     */\n    processLine(options: OmvFeatureFilterDescriptionBuilder.FeatureOption) {\n        this.addItem(this.m_linesToProcess, options);\n    }\n\n    /**\n     * Add valid line features.\n     *\n     * @param options Multi feature options.\n     */\n    processLines(options: OmvFeatureFilterDescriptionBuilder.MultiFeatureOption) {\n        this.addItems(this.m_linesToProcess, options);\n    }\n\n    /**\n     * Ignore a line feature.\n     *\n     * @param options Feature options.\n     */\n    ignoreLine(options: OmvFeatureFilterDescriptionBuilder.FeatureOption) {\n        this.addItem(this.m_linesToIgnore, options);\n    }\n\n    /**\n     * Ignore line features.\n     *\n     * @param options Multi feature options.\n     */\n    ignoreLines(options: OmvFeatureFilterDescriptionBuilder.MultiFeatureOption) {\n        this.addItems(this.m_linesToIgnore, options);\n    }\n\n    /**\n     * Add a valid polygon feature.\n     *\n     * @param options Feature options.\n     */\n    processPolygon(options: OmvFeatureFilterDescriptionBuilder.FeatureOption) {\n        this.addItem(this.m_polygonsToProcess, options);\n    }\n\n    /**\n     * Add valid polygon features.\n     *\n     * @param options Multi feature options.\n     */\n    processPolygons(options: OmvFeatureFilterDescriptionBuilder.MultiFeatureOption) {\n        this.addItems(this.m_polygonsToProcess, options);\n    }\n\n    /**\n     * Ignore a valid polygon feature.\n     *\n     * @param options Feature options.\n     */\n    ignorePolygon(options: OmvFeatureFilterDescriptionBuilder.FeatureOption) {\n        this.addItem(this.m_polygonsToIgnore, options);\n    }\n\n    /**\n     * Ignore polygon features.\n     *\n     * @param options Multi feature options.\n     */\n    ignorePolygons(options: OmvFeatureFilterDescriptionBuilder.MultiFeatureOption) {\n        this.addItems(this.m_polygonsToIgnore, options);\n    }\n\n    /**\n     * Add all the specified strings as \"enabledKinds\".\n     *\n     * @param {string[]} enabledKinds List of kinds that should be generated.\n     */\n    processKinds(enabledKinds: string[]) {\n        this.m_kindsToProcess = this.m_kindsToProcess.concat(enabledKinds);\n    }\n\n    /**\n     * Add all the specified strings as \"disabledKinds\".\n     *\n     * @param {string[]} disabledKinds List of kinds that should _not_ be generated.\n     */\n    ignoreKinds(disabledKinds: string[]) {\n        this.m_kindsToIgnore = this.m_kindsToIgnore.concat(disabledKinds);\n    }\n\n    /**\n     * Create a filter description that can be passed as an option to the [[OmvDataSource]].\n     */\n    createDescription(): OmvFeatureFilterDescription {\n        return {\n            processLayersDefault: this.m_processLayersDefault,\n            processPointsDefault: this.m_processPointsDefault,\n            processLinesDefault: this.m_processLinesDefault,\n            processPolygonsDefault: this.m_processPolygonsDefault,\n\n            layersToProcess: this.m_layersToProcess,\n            layersToIgnore: this.m_layersToIgnore,\n            pointsToProcess: this.m_pointsToProcess,\n            pointsToIgnore: this.m_ignoredPoints,\n            linesToProcess: this.m_linesToProcess,\n            linesToIgnore: this.m_linesToIgnore,\n            polygonsToProcess: this.m_polygonsToProcess,\n            polygonsToIgnore: this.m_polygonsToIgnore,\n\n            kindsToProcess: this.m_kindsToProcess,\n            kindsToIgnore: this.m_kindsToIgnore\n        };\n    }\n\n    private addItem(\n        items: OmvFilterDescription[],\n        options: OmvFeatureFilterDescriptionBuilder.FeatureOption\n    ) {\n        if (options.minLevel === undefined || isNaN(options.minLevel)) {\n            options.minLevel = 0;\n        }\n        if (options.maxLevel === undefined || isNaN(options.maxLevel)) {\n            options.maxLevel = Infinity;\n        }\n\n        const item: OmvFilterDescription = {\n            layerName: {\n                value: options.layer,\n                match:\n                    options.matchLayer === undefined\n                        ? OmvFilterString.StringMatch.Match\n                        : options.matchLayer\n            },\n            geometryTypes:\n                options.geomType !== undefined\n                    ? Array.isArray(options.geomType)\n                        ? options.geomType\n                        : [options.geomType]\n                    : undefined,\n            classes: [\n                {\n                    value: options.featureClass,\n                    match:\n                        options.matchClass === undefined\n                            ? OmvFilterString.StringMatch.Match\n                            : options.matchClass\n                }\n            ],\n            minLevel: options.minLevel,\n            maxLevel: options.maxLevel,\n            featureAttribute: options.featureAttribute\n        };\n\n        items.push(item);\n    }\n\n    private addItems(\n        items: OmvFilterDescription[],\n        options: OmvFeatureFilterDescriptionBuilder.MultiFeatureOption\n    ) {\n        if (options.minLevel === undefined || isNaN(options.minLevel)) {\n            options.minLevel = 0;\n        }\n        if (options.maxLevel === undefined || isNaN(options.maxLevel)) {\n            options.maxLevel = Infinity;\n        }\n\n        const item: OmvFilterDescription = {\n            layerName: {\n                value: options.layer,\n                match:\n                    options.matchLayer === undefined\n                        ? OmvFilterString.StringMatch.Match\n                        : options.matchLayer\n            },\n            geometryTypes:\n                options.geomTypes !== undefined\n                    ? Array.isArray(options.geomTypes)\n                        ? options.geomTypes\n                        : [options.geomTypes]\n                    : undefined,\n            classes: options.featureClasses,\n            minLevel: options.minLevel,\n            maxLevel: options.maxLevel,\n            featureAttribute: options.featureAttribute\n        };\n\n        items.push(item);\n    }\n}\n\nexport namespace OmvFeatureFilterDescriptionBuilder {\n    /**\n     * Options for `OmvFeatureFilterDescriptionBuilder`.\n     */\n    export interface OmvFeatureFilterDescriptionBuilderOptions {\n        /**\n         * If `true`, all unspecified layers will be processed. If `false`, all unspecified layers\n         * will be ignored.\n         */\n        processLayersDefault?: boolean;\n        /**\n         * If `true`, all unspecified point features will be processed. If `false`, all unspecified\n         * point features will be ignored.\n         */\n        processPointsDefault?: boolean;\n        /**\n         * If `true`, all unspecified line features will be processed. If `false`, all unspecified\n         * line\n         * features will be ignored.\n         */\n        processLinesDefault?: boolean;\n        /**\n         * If `true`, all unspecified polygon features will be processed. If `false`, all\n         * unspecified polygon features will be ignored.\n         */\n        processPolygonsDefault?: boolean;\n    }\n\n    /**\n     * Description of a single feature.\n     */\n    export interface FeatureOption {\n        /**\n         * Layer name to be matched.\n         */\n        layer: string;\n        /**\n         * Optional geometry type to be limited to. If specified, but does not match, the feature is\n         * ignored.\n         */\n        geomType: OmvGeometryType | OmvGeometryType[] | undefined;\n        /**\n         * Optional class to match. If specified, but does not match, the feature is ignored.\n         */\n        featureClass: string;\n        /**\n         * Match condition for the layer name.\n         */\n        matchLayer?: OmvFilterString.StringMatch;\n        /**\n         * Match condition for `featureClass`.\n         */\n        matchClass?: OmvFilterString.StringMatch;\n        /**\n         * Minimum tile level to match.\n         */\n        minLevel?: number;\n        /**\n         * Maximum tile level to match.\n         */\n        maxLevel?: number;\n        /**\n         * Feature attribute to match.\n         */\n        featureAttribute?: OmvFilterFeatureAttribute;\n    }\n\n    /**\n     * Description for multiple features.\n     */\n    export interface MultiFeatureOption {\n        /**\n         * Layer name to be matched.\n         */\n        layer: string;\n        /**\n         * Optional geometry type to be limited to. If specified, but does not match, the feature is\n         * ignored.\n         */\n        geomTypes?: OmvGeometryType | OmvGeometryType[] | undefined;\n        /**\n         * Optional classes to match. If specified, but does not match, the feature is ignored.\n         */\n        featureClasses?: OmvFilterString[];\n        /**\n         * Match condition for the layer name.\n         */\n        matchLayer?: OmvFilterString.StringMatch;\n        /**\n         * Minimum tile level to match.\n         */\n        minLevel?: number;\n        /**\n         * Maximum tile level to match.\n         */\n        maxLevel?: number;\n        /**\n         * Feature attribute to match.\n         */\n        featureAttribute?: OmvFilterFeatureAttribute;\n    }\n}\n\n/**\n * `OmvFeatureFilter` implementation that uses a `OmvFeatureFilterDescription` to filter `TileData`\n * features before they are completely decoded.\n *\n * @hidden\n */\nexport class OmvGenericFeatureFilter implements OmvFeatureFilter {\n    private static matchLayer(\n        layer: string,\n        layerItems: OmvLayerFilterDescription[],\n        level: number\n    ): boolean {\n        for (const layerItem of layerItems) {\n            if (level < layerItem.minLevel || level > layerItem.maxLevel) {\n                continue;\n            }\n\n            if (OmvFilterString.matchString(layer, layerItem.name)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private disabledKinds: GeometryKindSet | undefined;\n    private enabledKinds: GeometryKindSet | undefined;\n\n    constructor(private description: OmvFeatureFilterDescription) {\n        if (this.description.kindsToProcess.length > 0) {\n            this.enabledKinds = new GeometryKindSet(\n                this.description.kindsToProcess as GeometryKind[]\n            );\n        }\n        if (this.description.kindsToIgnore.length > 0) {\n            this.disabledKinds = new GeometryKindSet(\n                this.description.kindsToIgnore as GeometryKind[]\n            );\n        }\n    }\n\n    wantsLayer(layer: string, level: number): boolean {\n        if (OmvGenericFeatureFilter.matchLayer(layer, this.description.layersToProcess, level)) {\n            return true;\n        }\n\n        if (OmvGenericFeatureFilter.matchLayer(layer, this.description.layersToIgnore, level)) {\n            return false;\n        }\n\n        return this.description.processLayersDefault;\n    }\n\n    wantsPointFeature(layer: string, geometryType: OmvGeometryType, level: number): boolean {\n        return this.wantsFeature(\n            this.description.pointsToProcess,\n            this.description.pointsToIgnore,\n            layer,\n            geometryType,\n            level,\n            this.description.processPointsDefault\n        );\n    }\n\n    wantsLineFeature(layer: string, geometryType: OmvGeometryType, level: number): boolean {\n        return this.wantsFeature(\n            this.description.linesToProcess,\n            this.description.linesToIgnore,\n            layer,\n            geometryType,\n            level,\n            this.description.processLinesDefault\n        );\n    }\n\n    wantsPolygonFeature(layer: string, geometryType: OmvGeometryType, level: number): boolean {\n        return this.wantsFeature(\n            this.description.polygonsToProcess,\n            this.description.polygonsToIgnore,\n            layer,\n            geometryType,\n            level,\n            this.description.processPolygonsDefault\n        );\n    }\n\n    wantsKind(kind: string | string[]): boolean {\n        // undefined -> no way to filter\n        if (kind === undefined) {\n            return true;\n        }\n\n        return (\n            !(\n                this.disabledKinds !== undefined &&\n                this.disabledKinds.hasOrIntersects(kind as GeometryKind)\n            ) ||\n            (this.enabledKinds !== undefined &&\n                this.enabledKinds.hasOrIntersects(kind as GeometryKind))\n        );\n    }\n\n    get hasKindFilter(): boolean {\n        return this.enabledKinds !== undefined || this.disabledKinds !== undefined;\n    }\n\n    private wantsFeature(\n        itemsToProcess: OmvFilterDescription[],\n        itemsToIgnore: OmvFilterDescription[],\n        layer: string,\n        geometryType: OmvGeometryType,\n        level: number,\n        defaultResult: boolean\n    ): boolean {\n        for (const item of itemsToProcess) {\n            if (level < item.minLevel || level > item.maxLevel) {\n                continue;\n            }\n\n            if (!OmvFilterString.matchString(layer, item.layerName)) {\n                // this rule is not for this layer\n                continue;\n            }\n\n            if (item.geometryTypes !== undefined && item.geometryTypes.indexOf(geometryType) >= 0) {\n                return true;\n            }\n        }\n\n        for (const item of itemsToIgnore) {\n            if (!OmvFilterString.matchString(layer, item.layerName)) {\n                // this rule is not for this layer\n                continue;\n            }\n\n            if (item.geometryTypes !== undefined && item.geometryTypes.indexOf(geometryType) >= 0) {\n                return false;\n            }\n        }\n\n        return defaultResult;\n    }\n}\n\n/**\n * An [[OmvFeatureFilter]] implementation that delegates all filter decision\n * returning `true` for any predicate if all delegates return `true`.\n */\nexport class ComposedDataFilter implements OmvFeatureFilter {\n    constructor(readonly filters: OmvFeatureFilter[]) {}\n\n    get hasKindFilter() {\n        return this.filters.reduce<boolean>(\n            (result, filter) => result && filter.hasKindFilter,\n            true\n        );\n    }\n\n    wantsLayer(layer: string, level: number): boolean {\n        return this.filters.reduce<boolean>(\n            (result, filter) => result && filter.wantsLayer(layer, level),\n            true\n        );\n    }\n    wantsPointFeature(layer: string, geometryType: OmvGeometryType, level: number): boolean {\n        return this.filters.reduce<boolean>(\n            (result, filter) => result && filter.wantsPointFeature(layer, geometryType, level),\n            true\n        );\n    }\n    wantsLineFeature(layer: string, geometryType: OmvGeometryType, level: number): boolean {\n        return this.filters.reduce<boolean>(\n            (result, filter) => result && filter.wantsLineFeature(layer, geometryType, level),\n            true\n        );\n    }\n    wantsPolygonFeature(layer: string, geometryType: OmvGeometryType, level: number): boolean {\n        return this.filters.reduce<boolean>(\n            (result, filter) => result && filter.wantsPolygonFeature(layer, geometryType, level),\n            true\n        );\n    }\n    wantsKind(kind: string | string[]): boolean {\n        return this.filters.reduce<boolean>(\n            (result, filter) => result && filter.wantsKind(kind),\n            true\n        );\n    }\n}\n/**\n * `OmvFeatureModifier` implementation that uses a `OmvFeatureFilterDescription` to filter\n * `TileData` features before they are completely decoded.\n *\n * @hidden\n */\nexport class OmvGenericFeatureModifier implements OmvFeatureModifier {\n    static matchItems(\n        layerName: string,\n        featureClass: string,\n        items: OmvFilterDescription[]\n    ): boolean {\n        for (const item of items) {\n            if (item.classes !== undefined) {\n                if (!OmvFilterString.matchString(layerName, item.layerName)) {\n                    continue;\n                }\n                for (const matchClass of item.classes) {\n                    if (OmvFilterString.matchString(featureClass, matchClass)) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n    static matchAttribute(layerName: string, env: MapEnv, items: OmvFilterDescription[]): boolean {\n        for (const item of items) {\n            if (item.featureAttribute !== undefined) {\n                if (\n                    OmvFilterString.matchString(layerName, item.layerName) &&\n                    env.lookup(item.featureAttribute.key) === item.featureAttribute.value\n                ) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    constructor(private description: OmvFeatureFilterDescription) {}\n\n    doProcessPointFeature(layer: string, env: MapEnv): boolean {\n        return this.doProcessFeature(\n            this.description.pointsToProcess,\n            this.description.pointsToIgnore,\n            layer,\n            env,\n            this.description.processPointsDefault\n        );\n    }\n\n    doProcessLineFeature(layer: string, env: MapEnv): boolean {\n        return this.doProcessFeature(\n            this.description.linesToProcess,\n            this.description.linesToIgnore,\n            layer,\n            env,\n            this.description.processLinesDefault\n        );\n    }\n\n    doProcessPolygonFeature(layer: string, env: MapEnv): boolean {\n        return this.doProcessFeature(\n            this.description.polygonsToProcess,\n            this.description.polygonsToIgnore,\n            layer,\n            env,\n            this.description.processPolygonsDefault\n        );\n    }\n\n    protected doProcessFeature(\n        itemsToProcess: OmvFilterDescription[],\n        itemsToIgnore: OmvFilterDescription[],\n        layer: string,\n        env: MapEnv,\n        defaultResult: boolean\n    ): boolean {\n        if (layer === undefined || (itemsToProcess.length === 0 && itemsToIgnore.length === 0)) {\n            return defaultResult;\n        }\n\n        let featureClass: string | undefined;\n        const featureClassThing = env.lookup(\"class\");\n\n        if (featureClassThing !== undefined && featureClassThing !== null) {\n            featureClass = featureClassThing.toString();\n        }\n\n        if (\n            featureClass &&\n            OmvGenericFeatureModifier.matchItems(layer, featureClass, itemsToProcess)\n        ) {\n            return true;\n        }\n\n        if (\n            featureClass &&\n            OmvGenericFeatureModifier.matchItems(layer, featureClass, itemsToIgnore)\n        ) {\n            return false;\n        }\n\n        if (OmvGenericFeatureModifier.matchAttribute(layer, env, itemsToProcess)) {\n            return true;\n        }\n\n        if (OmvGenericFeatureModifier.matchAttribute(layer, env, itemsToIgnore)) {\n            return false;\n        }\n\n        return defaultResult;\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    AttributeMap,\n    Definitions,\n    GeometryType,\n    ITileDecoder,\n    OptionsMap,\n    StyleSet,\n    WorkerServiceProtocol\n} from \"@here/harp-datasource-protocol\";\nimport { EarthConstants, TileKey, webMercatorTilingScheme } from \"@here/harp-geoutils\";\nimport { LineGroup } from \"@here/harp-lines\";\nimport { CopyrightInfo, CopyrightProvider, DataSourceOptions } from \"@here/harp-mapview\";\nimport { DataProvider, TileDataSource, TileFactory } from \"@here/harp-mapview-decoder\";\nimport { getOptionValue, LoggerManager } from \"@here/harp-utils\";\nimport {\n    FeatureModifierId,\n    OmvDecoderOptions,\n    OmvFeatureFilterDescription,\n    OMV_TILE_DECODER_SERVICE_TYPE\n} from \"./OmvDecoderDefs\";\nimport { OmvRestClient, OmvRestClientParameters } from \"./OmvRestClient\";\nimport { OmvTile } from \"./OmvTile\";\n\nconst logger = LoggerManager.instance.create(\"OmvDataSource\");\n\nexport interface LinesGeometry {\n    type: GeometryType;\n    lines: LineGroup;\n    technique: number;\n\n    /**\n     * Optional array of objects. It can be used to pass user data from the geometry to the mesh.\n     */\n    objInfos?: AttributeMap[];\n\n    /**\n     * Optional list of feature start indices. The indices point into the index attribute.\n     */\n    featureStarts?: number[];\n}\n\nexport interface OmvTileFactory {\n    /** Create an instance of [[OmvTile]] or a subclass. */\n    createTile(dataSource: OmvDataSource, tileKey: TileKey): OmvTile;\n}\n\nexport interface OmvDataSourceParameters extends DataSourceOptions {\n    /**\n     * If set to `true`, features that have no technique in the theme will be printed to the console\n     * (can be excessive!).\n     */\n    showMissingTechniques?: boolean;\n\n    /**\n     * @deprecated Tile info is not decoded anymore. The same information can be generated\n     * implementing a [[IGeometryProcessor]] and using [[OmvProtobufDataAdapter]] to decode OMV\n     * data.\n     */\n    createTileInfo?: boolean;\n\n    /**\n     * Specify the decoder that should be used. If not supplied, the default will be used.\n     */\n    decoder?: ITileDecoder;\n\n    /**\n     * Optionally specify the DataProvider that should be used.\n     */\n    dataProvider?: DataProvider;\n\n    /**\n     * Specify the URL to the decoder bundle. If not supplied, the default will be used.\n     */\n    concurrentDecoderScriptUrl?: string;\n\n    /**\n     * Gather feature IDs from `OmvData`. Defaults to `false`.\n     * @deprecated, FeatureIds are always gathered, use [[gatherFeatureAttributes]] to gather\n     * all feature attributes.\n     */\n    gatherFeatureIds?: boolean;\n\n    /**\n     * Gather feature attributes from `OmvData`. Defaults to `false`.\n     */\n    gatherFeatureAttributes?: boolean;\n\n    /**\n     * @deprecated Tile info is not decoded anymore. The same information can be generated\n     * implementing a [[IGeometryProcessor]] and using [[OmvProtobufDataAdapter]] to decode OMV\n     * data.\n     */\n    gatherRoadSegments?: boolean;\n\n    /**\n     * If not set to `false`, very short text labels will be skipped during decoding based on a\n     * heuristic.\n     */\n    skipShortLabels?: boolean;\n\n    /**\n     * A description for the feature filter that can be safely passed down to the web workers. It\n     * has to be generated with the help of the [[OmvFeatureFilterDescriptionBuilder]] (to guarantee\n     * correctness). This parameter gets applied to the decoder used in the [[OmvDataSource]]\n     * which might be shared between various [[OmvDataSource]]s.\n     */\n    filterDescr?: OmvFeatureFilterDescription;\n\n    /**\n     * Optional, custom factory for [[Tile]] instances created by this [[OmvDataSource]].\n     */\n    tileFactory?: TileFactory<OmvTile>;\n\n    /**\n     * Identifier used to choose [[OmvFeatureModifier]]s to be applied.\n     *\n     * If left `undefined` at least [[OmvGenericFeatureModifier]] will be applied.\n     * The list of feature modifiers may be extended internally by some data source options\n     * such as [[politicalView]] which adds [[OmvPoliticalViewFeatureModifier]].\n     *\n     * @note This parameter gets applied to the decoder used in the [[OmvDataSource]] which might\n     * be shared between various [[OmvDataSource]]s.\n     */\n    featureModifierId?: FeatureModifierId;\n\n    /**\n     * Expresses specific country point of view that is used when rendering disputed features,\n     * like borders, names, etc. If undefined \"defacto\" or most widely accepted political view\n     * will be presented.\n     *\n     * @see featureModifiers\n     */\n    politicalView?: string;\n\n    /**\n     * Optional, default copyright information of tiles provided by this data source.\n     * Implementation should provide this information from the source data if possible.\n     */\n    copyrightInfo?: CopyrightInfo[];\n\n    /**\n     * Optional copyright info provider for tiles provided by this data source.\n     */\n    copyrightProvider?: CopyrightProvider;\n\n    /**\n     * Maximum geometry height above groud level this `OmvDataSource` can produce.\n     *\n     * Used in first stage of frustum culling before [[Tile.maxGeometryHeight]] data is available.\n     *\n     * @default [[EarthConstants.MAX_BUILDING_HEIGHT]].\n     */\n    maxGeometryHeight?: number;\n\n    /**\n     * Indicates whether overlay on elevation is enabled. Defaults to `false`.\n     */\n    enableElevationOverlay?: boolean;\n\n    /**\n     * Indicates whether to add a ground plane to cover the tile completely. This is necessary for\n     * the fallback logic, such that the parent fall back tiles don't overlap the children tiles.\n     * Default is true (i.e. if not defined it is taken to be true)\n     */\n    addGroundPlane?: boolean;\n}\n\n/**\n * A helper function to retrieve the [[DataProvider]] from the [[OmvDataSource]]s parameters.\n *\n * @param params The parameters passed into the OmvDataSource.\n */\nfunction getDataProvider(params: OmvWithRestClientParams | OmvWithCustomDataProvider) {\n    if ((params as OmvWithCustomDataProvider).dataProvider) {\n        return (params as OmvWithCustomDataProvider).dataProvider;\n    } else if (\n        (params as OmvWithRestClientParams).baseUrl ||\n        (params as OmvWithRestClientParams).url\n    ) {\n        return new OmvRestClient(params as OmvRestClientParameters);\n    } else {\n        throw new Error(\"OmvDataSource: missing url, baseUrl or dataProvider params\");\n    }\n}\n\nexport type OmvWithRestClientParams = OmvRestClientParameters & OmvDataSourceParameters;\nexport type OmvWithCustomDataProvider = OmvDataSourceParameters & { dataProvider: DataProvider };\n\nlet missingOmvDecoderServiceInfoEmitted: boolean = false;\n\nexport class OmvDataSource extends TileDataSource<OmvTile> {\n    private readonly m_decoderOptions: OmvDecoderOptions;\n\n    constructor(private m_params: OmvWithRestClientParams | OmvWithCustomDataProvider) {\n        super(m_params.tileFactory || new TileFactory(OmvTile), {\n            ...m_params,\n            styleSetName: m_params.styleSetName || \"omv\",\n            tilingScheme: webMercatorTilingScheme,\n            dataProvider: getDataProvider(m_params),\n            concurrentDecoderServiceName: OMV_TILE_DECODER_SERVICE_TYPE,\n            minDataLevel: getOptionValue(m_params.minDataLevel, 1),\n            maxDataLevel: getOptionValue(m_params.maxDataLevel, 17),\n            storageLevelOffset: getOptionValue(m_params.storageLevelOffset, -1)\n        });\n\n        this.cacheable = true;\n        this.addGroundPlane =\n            m_params.addGroundPlane === undefined || m_params.addGroundPlane === true;\n\n        this.m_decoderOptions = {\n            showMissingTechniques: this.m_params.showMissingTechniques === true,\n            filterDescription: this.m_params.filterDescr,\n            gatherFeatureAttributes: this.m_params.gatherFeatureAttributes === true,\n            featureModifiers: this.m_params.featureModifierId\n                ? [this.m_params.featureModifierId]\n                : undefined,\n            politicalView: this.m_params.politicalView,\n            skipShortLabels: this.m_params.skipShortLabels,\n            storageLevelOffset: getOptionValue(m_params.storageLevelOffset, -1),\n            enableElevationOverlay: this.m_params.enableElevationOverlay === true\n        };\n\n        this.maxGeometryHeight = getOptionValue(\n            m_params.maxGeometryHeight,\n            EarthConstants.MAX_BUILDING_HEIGHT\n        );\n    }\n\n    /** @override */\n    async connect() {\n        try {\n            await super.connect();\n        } catch (error) {\n            if (\n                WorkerServiceProtocol.isUnknownServiceError(error) &&\n                !missingOmvDecoderServiceInfoEmitted\n            ) {\n                logger.info(\n                    \"Unable to create decoder service in worker. Use \" +\n                        \" 'OmvTileDecoderService.start();' in decoder script.\"\n                );\n                missingOmvDecoderServiceInfoEmitted = true;\n            }\n            throw error;\n        }\n        this.configureDecoder(undefined, undefined, undefined, this.m_decoderOptions);\n    }\n\n    /**\n     * Remove the current data filter.\n     * Will be applied to the decoder, which might be shared with other omv datasources.\n     */\n    removeDataFilter(): void {\n        this.configureDecoder(undefined, undefined, undefined, {\n            filterDescription: null\n        });\n    }\n\n    /**\n     * Set a new data filter. Can also be done during the creation of an [[OmvDataSource]].\n     * Will be applied to the decoder, which might be shared with other omv datasources.\n     *\n     * @param filterDescription Data filter description created with\n     * [[OmvFeatureFilterDescriptionBuilder]].\n     */\n    setDataFilter(filterDescription: OmvFeatureFilterDescription): void {\n        this.m_decoderOptions.filterDescription =\n            filterDescription !== null ? filterDescription : undefined;\n\n        this.configureDecoder(undefined, undefined, undefined, {\n            filterDescription,\n            featureModifiers: this.m_decoderOptions.featureModifiers,\n            politicalView: this.m_decoderOptions.politicalView\n        });\n    }\n\n    /** @override */\n    shouldPreloadTiles(): boolean {\n        return true;\n    }\n\n    /** @override */\n    setLanguages(languages?: string[]): void {\n        if (languages !== undefined) {\n            this.configureDecoder(undefined, undefined, languages, undefined);\n        }\n    }\n\n    /** @override */\n    setPoliticalView(politicalView?: string): void {\n        // Just in case users mess with letters' casing.\n        politicalView = politicalView?.toLowerCase();\n        if (this.m_decoderOptions.politicalView !== politicalView) {\n            this.m_decoderOptions.politicalView = politicalView;\n            this.configureDecoder(undefined, undefined, undefined, {\n                filterDescription: this.m_decoderOptions.filterDescription,\n                featureModifiers: this.m_decoderOptions.featureModifiers,\n                politicalView: politicalView !== undefined ? politicalView : \"\"\n            });\n        }\n    }\n\n    /** @override */\n    get storageLevelOffset() {\n        return super.storageLevelOffset;\n    }\n\n    /** @override */\n    set storageLevelOffset(levelOffset: number) {\n        super.storageLevelOffset = levelOffset;\n        this.m_decoderOptions.storageLevelOffset = this.storageLevelOffset;\n        this.configureDecoder(undefined, undefined, undefined, {\n            storageLevelOffset: this.storageLevelOffset\n        });\n    }\n\n    /** @override */\n    setEnableElevationOverlay(enable: boolean) {\n        if (this.m_decoderOptions.enableElevationOverlay !== enable) {\n            this.m_decoderOptions.enableElevationOverlay = enable;\n            this.configureDecoder(undefined, undefined, undefined, {\n                enableElevationOverlay: enable\n            });\n        }\n    }\n\n    private configureDecoder(\n        styleSet?: StyleSet,\n        definitions?: Definitions,\n        languages?: string[],\n        options?: OptionsMap\n    ) {\n        this.clearCache();\n        this.decoder.configure(styleSet, definitions, languages, options);\n        this.mapView.markTilesDirty(this);\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from \"./lib/DataProvider\";\nexport * from \"./lib/TileDataSource\";\nexport * from \"./lib/TileLoader\";\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport \"@here/harp-fetch\";\nimport { TileKey } from \"@here/harp-geoutils\";\n\n/**\n * Interface for all `DataProvider` subclasses. The `DataProvider` is an abstraction of the tile\n * loader which is only responsible for loading the binary data of a specific tile, without any\n * relation to displaying or even decoding the data.\n */\nexport interface DataProvider {\n    /**\n     * Connect to the data source. Returns a promise to wait for successful (or failed) connection.\n     *\n     * @returns A promise which is resolved when the connection has been established.\n     */\n    connect(): Promise<void>;\n\n    /**\n     * Returns `true` if it has been connected successfully.\n     */\n    ready(): boolean;\n\n    /**\n     * Load the data of a [[Tile]] asynchronously in form of an [[ArrayBufferLike]].\n     *\n     * @param tileKey Address of a tile.\n     * @param abortSignal Optional AbortSignal to cancel the request.\n     * @returns A promise delivering the data as an [[ArrayBufferLike]], or any object.\n     */\n    getTile(tileKey: TileKey, abortSignal?: AbortSignal): Promise<ArrayBufferLike | {}>;\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    Definitions,\n    ITileDecoder,\n    StyleSet,\n    Theme,\n    TileInfo\n} from \"@here/harp-datasource-protocol\";\nimport { TileKey, TilingScheme } from \"@here/harp-geoutils\";\nimport {\n    ConcurrentDecoderFacade,\n    CopyrightInfo,\n    CopyrightProvider,\n    DataSource,\n    DataSourceOptions,\n    Tile,\n    TileLoaderState\n} from \"@here/harp-mapview\";\nimport { ILogger, LoggerManager } from \"@here/harp-utils\";\nimport { DataProvider } from \"./DataProvider\";\nimport { TileInfoLoader, TileLoader } from \"./TileLoader\";\n\n/**\n * Set of common options for all [[TileDataSource]]s.\n */\nexport interface TileDataSourceOptions extends DataSourceOptions {\n    /**\n     * The [[TilingScheme]] the data source is using.\n     */\n    tilingScheme: TilingScheme;\n\n    /**\n     * The [[DataProvider]] to use for downloading the actual data.\n     */\n    dataProvider: DataProvider;\n\n    /**\n     * Optional: Specify [[ITileDecoder]] instance.\n     */\n    decoder?: ITileDecoder;\n\n    /**\n     * Optional name of decoder service class.\n     * @see [[ConcurrentDecoderFacade]]\n     * @see [[ConcurrentWorkerSet]]\n     */\n    concurrentDecoderServiceName?: string;\n\n    /**\n     * Optional URL for decoder bundle to be loaded into web worker.\n     */\n    concurrentDecoderScriptUrl?: string;\n\n    /**\n     * Optional count of web workers to use with the decoder bundle.\n     */\n    concurrentDecoderWorkerCount?: number;\n\n    /**\n     * Optional, default copyright information of tiles provided by this data source.\n     * Implementation should provide this information from the source data if possible.\n     */\n    copyrightInfo?: CopyrightInfo[];\n\n    /**\n     * Optional copyright info provider for tiles provided by this data source. Copyrights from\n     * provider are concatenated with default ones from `copyrightInfo`.\n     */\n    copyrightProvider?: CopyrightProvider;\n}\n\n/**\n * Templated factory class to create instances of [[Tile]].\n */\nexport class TileFactory<TileType extends Tile> {\n    /**\n     * Initialize the factory using the constructor of the element to be called when a [[Tile]] is\n     * created.\n     *\n     * @param m_modelConstructor Constructor of (subclass of) [[Tile]].\n     */\n    constructor(\n        private m_modelConstructor: new (dataSource: DataSource, tileKey: TileKey) => TileType\n    ) {}\n\n    /**\n     * Create an instance of (subclass of) [[Tile]]. The required parameters are passed as arguments\n     * to the constructor of [[Tile]].\n     *\n     * @param dataSource [[Datasource]] this class belongs to.\n     * @param tileKey Quadtree address of the [[Tile]].\n     */\n    create(dataSource: DataSource, tileKey: TileKey): TileType {\n        return new this.m_modelConstructor(dataSource, tileKey);\n    }\n}\n\n/**\n * Common base class for the typical [[DataSource]] which uses an [[ITileDecoder]] to decode the\n * tile content asynchronously. The decoder can be passed in as an option, or a default\n * asynchronous one is generated.\n */\nexport class TileDataSource<TileType extends Tile> extends DataSource {\n    protected readonly logger: ILogger = LoggerManager.instance.create(\"TileDataSource\");\n    protected readonly m_decoder: ITileDecoder;\n    private m_isReady: boolean = false;\n\n    /**\n     * Set up the `TileDataSource`.\n     *\n     * @param m_tileFactory Factory to create the [[Tile]] instances.\n     * @param m_options Options specifying the parameters of the [[DataSource]].\n     */\n    constructor(\n        private readonly m_tileFactory: TileFactory<TileType>,\n        private readonly m_options: TileDataSourceOptions\n    ) {\n        super({\n            name: m_options.name,\n            styleSetName: m_options.styleSetName,\n            // tslint:disable-next-line: deprecation\n            minZoomLevel: m_options.minZoomLevel,\n            // tslint:disable-next-line: deprecation\n            maxZoomLevel: m_options.maxZoomLevel,\n            minDataLevel: m_options.minDataLevel,\n            maxDataLevel: m_options.maxDataLevel,\n            minDisplayLevel: m_options.minDisplayLevel,\n            maxDisplayLevel: m_options.maxDisplayLevel,\n            storageLevelOffset: m_options.storageLevelOffset,\n            allowOverlappingTiles: m_options.allowOverlappingTiles\n        });\n        if (m_options.decoder) {\n            this.m_decoder = m_options.decoder;\n        } else if (m_options.concurrentDecoderServiceName) {\n            this.m_decoder = ConcurrentDecoderFacade.getTileDecoder(\n                m_options.concurrentDecoderServiceName,\n                m_options.concurrentDecoderScriptUrl,\n                m_options.concurrentDecoderWorkerCount\n            );\n        } else {\n            throw new Error(\n                `TileDataSource[${this.name}]: unable to create, missing decoder or ` +\n                    `concurrentDecoderServiceName`\n            );\n        }\n        this.useGeometryLoader = true;\n        this.cacheable = true;\n    }\n\n    /** @override */\n    dispose() {\n        this.decoder.dispose();\n    }\n\n    /** @override */\n    ready(): boolean {\n        return this.m_isReady && this.m_options.dataProvider.ready();\n    }\n\n    /**\n     * Get the [[ITileDecoder]] of this `ITileDataSource`, which has either been passed in with\n     * the options, or has been supplied by the [[ConcurrentDecoderFacade]].\n     */\n    get decoder(): ITileDecoder {\n        return this.m_decoder;\n    }\n\n    /** @override */\n    async connect() {\n        await Promise.all([this.m_options.dataProvider.connect(), this.m_decoder.connect()]);\n        this.m_isReady = true;\n\n        this.m_decoder.configure(undefined, undefined, undefined, {\n            storageLevelOffset: this.m_options.storageLevelOffset\n        });\n    }\n\n    /** @override */\n    setStyleSet(styleSet?: StyleSet, definitions?: Definitions, languages?: string[]): void {\n        this.m_decoder.configure(styleSet, definitions, languages);\n        this.mapView.markTilesDirty(this);\n    }\n\n    /**\n     * Apply the [[Theme]] to this data source.\n     *\n     * Applies new [[StyleSet]] and definitions from theme only if matching styleset (see\n     * `styleSetName` property) is found in `theme`.\n     * @override\n     */\n    setTheme(theme: Theme, languages?: string[]): void {\n        const styleSet =\n            this.styleSetName !== undefined && theme.styles\n                ? theme.styles[this.styleSetName]\n                : undefined;\n\n        if (styleSet !== undefined) {\n            this.setStyleSet(styleSet, theme.definitions, languages);\n        }\n    }\n\n    /**\n     * Get the [[DataProvider]] that has been passed in with the options.\n     */\n    dataProvider(): DataProvider {\n        return this.m_options.dataProvider;\n    }\n\n    /** @override */\n    getTilingScheme(): TilingScheme {\n        return this.m_options.tilingScheme;\n    }\n\n    /**\n     * Create a [[Tile]] and start the asynchronous download of the tile content. The [[Tile]] will\n     * be empty, but the download and decoding will be scheduled immediately. [[Tile]] instance is\n     * initialized with default copyrights, concatenated with copyrights from copyright provider of\n     * this data source.\n     *\n     * @param tileKey Quadtree address of the requested tile.\n     * @override\n     */\n    getTile(tileKey: TileKey): TileType | undefined {\n        const tile = this.m_tileFactory.create(this, tileKey);\n        tile.tileLoader = new TileLoader(\n            this,\n            tileKey,\n            this.m_options.dataProvider,\n            this.decoder,\n            0\n        );\n        tile.copyrightInfo = this.m_options.copyrightInfo;\n        if (this.m_options.copyrightProvider !== undefined) {\n            this.m_options.copyrightProvider\n                .getCopyrights(tile.geoBox, tileKey.level)\n                .then(copyrightInfo => {\n                    tile.copyrightInfo =\n                        tile.copyrightInfo === undefined\n                            ? copyrightInfo\n                            : [...tile.copyrightInfo, ...copyrightInfo];\n                    this.requestUpdate();\n                });\n        }\n        tile.load();\n\n        return tile;\n    }\n\n    /**\n     * Get [[TileInfo]] of a tile.\n     *\n     * @param tileKey Quadtree address of the requested tile.\n     * @returns A promise which will contain the [[TileInfo]] when resolved.\n     */\n    getTileInfo(tileKey: TileKey): Promise<TileInfo | undefined> {\n        const promise = new Promise<TileInfo | undefined>((resolve, reject) => {\n            const tileLoader = new TileInfoLoader(\n                this,\n                tileKey,\n                this.m_options.dataProvider,\n                this.decoder,\n                0\n            );\n\n            tileLoader.loadAndDecode().then(loaderState => {\n                if (loaderState === TileLoaderState.Ready) {\n                    resolve(tileLoader.tileInfo);\n                } else {\n                    reject(\n                        new Error(`TileDataSource#getInfoTile wrong final state: ${loaderState}`)\n                    );\n                }\n            });\n        });\n\n        return promise;\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { getPropertyValue, isTextTechnique } from \"@here/harp-datasource-protocol\";\nimport { TileKey } from \"@here/harp-geoutils/lib/tiling/TileKey\";\nimport { DataSource, TextElement } from \"@here/harp-mapview\";\nimport { debugContext } from \"@here/harp-mapview/lib/DebugContext\";\nimport {\n    ContextualArabicConverter,\n    FontUnit,\n    TextLayoutStyle,\n    TextRenderStyle\n} from \"@here/harp-text-canvas\";\nimport * as THREE from \"three\";\n\nimport { TileGeometryCreator } from \"@here/harp-mapview/lib/geometry/TileGeometryCreator\";\nimport { OmvTile } from \"./OmvTile\";\n\nconst debugMaterial = new THREE.LineBasicMaterial({\n    color: 0x000000,\n    linewidth: 1,\n    depthTest: false,\n    depthFunc: THREE.NeverDepth\n});\n\nconst debugCircleMaterial = new THREE.MeshBasicMaterial({\n    color: 0xff0000,\n    depthTest: false,\n    depthFunc: THREE.NeverDepth\n});\n\nconst debugCircleMaterialWF = new THREE.MeshBasicMaterial({\n    color: 0xff0000,\n    depthTest: false,\n    depthFunc: THREE.NeverDepth\n});\ndebugCircleMaterialWF.wireframe = true;\n\nconst debugCircleMaterial2WF = new THREE.MeshBasicMaterial({\n    color: 0x8080ff,\n    depthTest: false,\n    depthFunc: THREE.NeverDepth\n});\ndebugCircleMaterial2WF.wireframe = true;\n\nconst debugBlackCircleMaterial = new THREE.MeshBasicMaterial({\n    color: 0x000000,\n    depthTest: false,\n    depthFunc: THREE.NeverDepth\n});\n\nconst debugBlueCircleMaterial = new THREE.MeshBasicMaterial({\n    color: 0x0000ff,\n    depthTest: false,\n    depthFunc: THREE.NeverDepth,\n    opacity: 0.75,\n    transparent: true\n});\n\nconst textRenderStyle = new TextRenderStyle();\nconst textLayoutStyle = new TextLayoutStyle();\n\ntextRenderStyle.fontSize = {\n    unit: FontUnit.Point,\n    size: 9,\n    backgroundSize: 0\n};\ntextRenderStyle.opacity = 0.75;\ntextRenderStyle.backgroundOpacity = 0.75;\ntextRenderStyle.color = new THREE.Color(0.8, 0.2, 0.2);\n\n// Set maximum priority.\nconst PRIORITY_ALWAYS = Number.MAX_SAFE_INTEGER;\n\nexport class OmvDebugLabelsTile extends OmvTile {\n    constructor(dataSource: DataSource, tileKey: TileKey) {\n        super(dataSource, tileKey);\n    }\n\n    /** @override */\n    loadingFinished() {\n        this.addLabelDebugInfo();\n    }\n\n    /**\n     * Create [[TextElement]] objects from the given decoded [[Tile]] and list of materials.\n     */\n    private addLabelDebugInfo() {\n        // activate in the browser with:\n        // window.__debugContext.setValue(\"DEBUG_TEXT_PATHS\", true)\n        const debugTextPaths = debugContext.getValue(\"DEBUG_TEXT_PATHS\");\n        const debugTextPathsFull = debugContext.getValue(\"DEBUG_TEXT_PATHS_FULL\");\n        const debugTextPoisFull = debugContext.getValue(\"DEBUG_TEXT_POIS_FULL\");\n\n        if (!(debugTextPaths || debugTextPathsFull) || this.decodedTile === undefined) {\n            return;\n        }\n\n        const tileGeometryCreator = TileGeometryCreator.instance;\n        const decodedTile = this.decodedTile!;\n\n        tileGeometryCreator.createTextElements(this, decodedTile);\n\n        const colorMap = new Map<number, THREE.Color>();\n\n        // allow limiting to specific names and/or index. There can be many paths with the same text\n        const textFilter = debugContext.getValue(\"DEBUG_TEXT_PATHS.FILTER.TEXT\");\n        const indexFilter = debugContext.getValue(\"DEBUG_TEXT_PATHS.FILTER.INDEX\");\n        const env = this.mapView.env;\n\n        if (decodedTile.textPathGeometries !== undefined) {\n            this.preparedTextPaths = tileGeometryCreator.prepareTextPaths(\n                decodedTile.textPathGeometries,\n                decodedTile\n            );\n        }\n\n        const centerX = this.center.x;\n        const centerY = this.center.y;\n        const centerZ = this.center.z;\n        const pointScale = this.mapView.pixelToWorld;\n        const worldOffsetX = this.computeWorldOffsetX();\n\n        let pointLabelIndex = 0;\n\n        if (this.textElementGroups.count() > 0) {\n            const bluePointGeometry = new THREE.BufferGeometry();\n            const bluePointIndices = new Array<number>();\n            const bluePointPositions = new Array<number>();\n\n            const addedTextElements: TextElement[] = [];\n\n            this.textElementGroups.forEach((textElement: TextElement) => {\n                if (textElement.path !== undefined) {\n                    return;\n                }\n\n                const x = textElement.position.x - centerX;\n                const y = textElement.position.y - centerY;\n                const z = 5 - centerZ;\n\n                // bluePointIndices.push(bluePointPositions.length / 3);\n                // bluePointPositions.push(x, y, z);\n\n                const pointSize = pointScale * 3;\n\n                bluePointPositions.push(x, y - pointSize, z);\n                bluePointPositions.push(x + pointSize, y, z);\n                bluePointPositions.push(x, y + pointSize, z);\n                bluePointPositions.push(x - pointSize, y, z);\n\n                const pointIndex = bluePointPositions.length / 3;\n\n                bluePointIndices.push(pointIndex - 4);\n                bluePointIndices.push(pointIndex - 3);\n                bluePointIndices.push(pointIndex - 2);\n                bluePointIndices.push(pointIndex - 4);\n                bluePointIndices.push(pointIndex - 2);\n                bluePointIndices.push(pointIndex - 1);\n\n                if (debugTextPoisFull) {\n                    const offsetXY = pointSize * 0.5;\n                    const label: string = `${textElement.text} [${pointLabelIndex}]`;\n\n                    const labelElement = new TextElement(\n                        ContextualArabicConverter.instance.convert(label),\n                        new THREE.Vector3(\n                            x + worldOffsetX + centerX + offsetXY,\n                            y + centerY + offsetXY,\n                            z + centerZ\n                        ),\n                        textRenderStyle,\n                        textLayoutStyle,\n                        PRIORITY_ALWAYS,\n                        0.0,\n                        0.0\n                    );\n                    labelElement.minZoomLevel = 0;\n                    labelElement.mayOverlap = true;\n                    labelElement.reserveSpace = false;\n                    labelElement.alwaysOnTop = true;\n                    labelElement.ignoreDistance = true;\n                    labelElement.priority = TextElement.HIGHEST_PRIORITY;\n\n                    (labelElement as any)._isDebug = true;\n\n                    addedTextElements.push(labelElement);\n                }\n\n                pointLabelIndex++;\n            });\n\n            for (const labelElement of addedTextElements) {\n                this.addTextElement(labelElement);\n            }\n\n            if (bluePointIndices.length > 0) {\n                bluePointGeometry.addGroup(0, bluePointIndices.length, 0);\n\n                bluePointGeometry.setAttribute(\n                    \"position\",\n                    new THREE.BufferAttribute(new Float32Array(bluePointPositions), 3)\n                );\n\n                bluePointGeometry.setIndex(\n                    new THREE.BufferAttribute(new Uint32Array(bluePointIndices), 1)\n                );\n                const bluePointMesh = new THREE.Mesh(bluePointGeometry, debugBlueCircleMaterial);\n                bluePointMesh.renderOrder = PRIORITY_ALWAYS;\n                this.objects.push(bluePointMesh);\n            }\n        }\n\n        if (this.preparedTextPaths !== undefined) {\n            const lineGeometry = new THREE.BufferGeometry();\n            const lineIndices = new Array<number>();\n            const linePositions = new Array<number>();\n\n            const redPointGeometry = new THREE.BufferGeometry();\n            const redPointIndices = new Array<number>();\n            const redPointPositions = new Array<number>();\n\n            const blackPointGeometry = new THREE.BufferGeometry();\n            const blackPointIndices = new Array<number>();\n            const blackPointPositions = new Array<number>();\n\n            let baseVertex = 0;\n\n            for (const textPath of this.preparedTextPaths) {\n                const technique = decodedTile.techniques[textPath.technique];\n                if (!isTextTechnique(technique) || (textPath as any)._isDebug !== undefined) {\n                    continue;\n                }\n                if (technique.color !== undefined) {\n                    colorMap.set(\n                        textPath.technique,\n                        new THREE.Color(getPropertyValue(technique.color, env))\n                    );\n                }\n\n                baseVertex = linePositions.length / 3;\n\n                const text = textPath.text;\n\n                const elementIndex = this.preparedTextPaths.indexOf(textPath);\n\n                const createDebugInfo =\n                    (!textFilter || (text && text.indexOf(textFilter) >= 0)) &&\n                    (indexFilter === undefined || indexFilter === elementIndex);\n\n                if (createDebugInfo) {\n                    const zHeight = 10;\n\n                    for (let i = 0; i < textPath.path.length; i += 3) {\n                        const pathIndex = i / 3;\n                        const x = textPath.path[i] - centerX;\n                        const y = textPath.path[i + 1] - centerY;\n                        // raise it a bit, so we get identify connectivity visually by tilting\n                        const z = zHeight + textPath.path[i + 2] + i / 3 - centerZ;\n\n                        if (debugTextPaths) {\n                            linePositions.push(x, y, z);\n                        }\n\n                        const isRedPoint = i === 0;\n\n                        if (debugTextPathsFull || isRedPoint) {\n                            const pointSize = pointScale * (isRedPoint ? 6 : 4);\n\n                            const positions = isRedPoint ? redPointPositions : blackPointPositions;\n                            const indices = isRedPoint ? redPointIndices : blackPointIndices;\n\n                            positions.push(x, y - pointSize, z);\n                            positions.push(x + pointSize, y, z);\n                            positions.push(x, y + pointSize, z);\n                            positions.push(x - pointSize, y, z);\n\n                            const pointIndex = positions.length / 3;\n\n                            indices.push(pointIndex - 4);\n                            indices.push(pointIndex - 3);\n                            indices.push(pointIndex - 2);\n                            indices.push(pointIndex - 4);\n                            indices.push(pointIndex - 2);\n                            indices.push(pointIndex - 1);\n\n                            if (debugTextPathsFull) {\n                                // give point index a label\n                                const label: string =\n                                    pathIndex % 5 === 0\n                                        ? text + \":\" + pathIndex\n                                        : Number(pathIndex).toString();\n                                const labelElement = new TextElement(\n                                    ContextualArabicConverter.instance.convert(label),\n                                    new THREE.Vector3(\n                                        x + worldOffsetX + centerX,\n                                        y + centerY,\n                                        z + centerZ\n                                    ),\n                                    textRenderStyle,\n                                    textLayoutStyle,\n                                    getPropertyValue(technique.priority || 0, env),\n                                    technique.xOffset || 0.0,\n                                    technique.yOffset || 0.0\n                                );\n                                labelElement.minZoomLevel = technique.minZoomLevel;\n                                labelElement.mayOverlap = true;\n                                labelElement.reserveSpace = false;\n                                labelElement.alwaysOnTop = true;\n                                labelElement.ignoreDistance = true;\n                                labelElement.priority = TextElement.HIGHEST_PRIORITY;\n                                this.addTextElement(labelElement);\n                            }\n                        }\n                    }\n\n                    // the lines of a path share a common geometry\n                    const N = textPath.path.length / 3;\n                    for (let i = 0; i < N; ++i) {\n                        if (i > 0) {\n                            lineIndices.push(baseVertex + i);\n                        }\n                        if (i + 1 < N) {\n                            lineIndices.push(baseVertex + i);\n                        }\n                    }\n                }\n            }\n\n            if (lineIndices.length > 0) {\n                lineGeometry.addGroup(0, lineIndices.length, 0);\n\n                lineGeometry.setAttribute(\n                    \"position\",\n                    new THREE.BufferAttribute(new Float32Array(linePositions), 3)\n                );\n\n                lineGeometry.setIndex(new THREE.BufferAttribute(new Uint32Array(lineIndices), 1));\n                const lineMesh = new THREE.LineSegments(lineGeometry, debugMaterial);\n                lineMesh.renderOrder = PRIORITY_ALWAYS - 2;\n                this.objects.push(lineMesh);\n            }\n\n            if (redPointIndices.length > 0) {\n                redPointGeometry.addGroup(0, redPointIndices.length, 0);\n\n                redPointGeometry.setAttribute(\n                    \"position\",\n                    new THREE.BufferAttribute(new Float32Array(redPointPositions), 3)\n                );\n\n                redPointGeometry.setIndex(\n                    new THREE.BufferAttribute(new Uint32Array(redPointIndices), 1)\n                );\n                const redPointMesh = new THREE.Mesh(redPointGeometry, debugCircleMaterial);\n                redPointMesh.renderOrder = PRIORITY_ALWAYS;\n                this.objects.push(redPointMesh);\n            }\n\n            if (blackPointIndices.length > 0) {\n                blackPointGeometry.addGroup(0, blackPointIndices.length, 0);\n\n                blackPointGeometry.setAttribute(\n                    \"position\",\n                    new THREE.BufferAttribute(new Float32Array(blackPointPositions), 3)\n                );\n\n                blackPointGeometry.setIndex(\n                    new THREE.BufferAttribute(new Uint32Array(blackPointIndices), 1)\n                );\n                const blackPointMesh = new THREE.Mesh(blackPointGeometry, debugBlackCircleMaterial);\n                blackPointMesh.renderOrder = PRIORITY_ALWAYS - 1;\n                this.objects.push(blackPointMesh);\n            }\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeoJson, ITiler, WorkerServiceProtocol } from \"@here/harp-datasource-protocol\";\nimport \"@here/harp-fetch\";\nimport { TileKey } from \"@here/harp-geoutils\";\nimport { ConcurrentTilerFacade } from \"@here/harp-mapview\";\nimport { DataProvider } from \"@here/harp-mapview-decoder\";\nimport { LoggerManager } from \"@here/harp-utils\";\n\nconst logger = LoggerManager.instance.create(\"GeoJsonDataProvider\");\n\nexport interface GeoJsonDataProviderOptions {\n    /**\n     * Worker script hosting [[Tiler Service]]\n     * @default `./decoder.bundle.ts`\n     */\n    workerTilerUrl?: string;\n\n    /**\n     * Custom tiler instance.\n     * If not provided, [[GeoJsonDataProvider]] will obtain [[WorkerBasedTiler]]\n     * from [[ConcurrentTilerFacade]].\n     */\n    tiler?: ITiler;\n}\n\nlet missingTilerServiceInfoEmitted: boolean = false;\n\n/**\n * GeoJson [[DataProvider]]. Automatically handles tiling and simplification of static GeoJson.\n */\nexport class GeoJsonDataProvider implements DataProvider {\n    private m_tiler: ITiler;\n    private m_registered = false;\n\n    /**\n     * Constructs a new `GeoJsonDataProvider`.\n     *\n     * @param name Name to be used to reference this `DataProvider`\n     * @param input URL of the GeoJSON, or a GeoJSON.\n     * @param options Optional\n     * @returns New `GeoJsonDataProvider`.\n     */\n    constructor(\n        readonly name: string,\n        public input: URL | GeoJson,\n        options?: GeoJsonDataProviderOptions\n    ) {\n        this.m_tiler =\n            (options && options.tiler) ||\n            ConcurrentTilerFacade.getTiler(\"omv-tiler\", options && options.workerTilerUrl);\n    }\n\n    async connect(): Promise<void> {\n        try {\n            await this.m_tiler.connect();\n        } catch (error) {\n            if (\n                WorkerServiceProtocol.isUnknownServiceError(error) &&\n                !missingTilerServiceInfoEmitted\n            ) {\n                logger.info(\n                    \"Unable to start GeoJson tiler service in worker. Use \" +\n                        \" 'OmvTilerService.start();' in decoder script.\"\n                );\n                missingTilerServiceInfoEmitted = true;\n            }\n            throw error;\n        }\n\n        await this.m_tiler.registerIndex(this.name, this.input);\n        this.m_registered = true;\n    }\n\n    updateInput(input: URL | GeoJson) {\n        this.input = input;\n        this.m_tiler.updateIndex(this.name, this.input);\n    }\n\n    ready(): boolean {\n        return this.m_registered;\n    }\n\n    async getTile(tileKey: TileKey): Promise<{}> {\n        return this.m_tiler.getTile(this.name, tileKey);\n    }\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/** @hidden */\nexport const apikey = \"J0IJdYzKDYS3nHVDDEWETIqK3nAcxqW42vz7xeSq61M\";\n\n/** @hidden */\nexport const copyrightInfo = [\n    {\n        id: \"here.com\",\n        year: new Date().getFullYear(),\n        label: \"HERE\",\n        link: \"https://legal.here.com/terms\"\n    }\n];\n"],"sourceRoot":""}